"{0} {1}" -f $paddingtext, $absolut | write-host
"{0}|_ {1}" -f $paddingtext, $adsgroup.name | write-host `
"{0} {1}" -f $paddingtext, $domain | write-host
"{0} {1}" -f $paddingtext, $relative | write-host
"{0} - {1}" -f $quote.description,$quote.title
0 {$acltype = "share file"};
0 {break}
0 { exit }
0) exit
0, [midpointrounding]::awayfromzero)
$("{0:n2}" -f ($drivedata.freespace/1mb)) megabytes
"{0:n2}" -f $remtime
0 = ok
0 {"online"}
0 {restart-computer;}
0 { $status = "notstarted" }
0 { $status = "notstarted"}
"{0} uptime: {1,3} days {2,2} hours {3,2} minutes {4,2} seconds" -f $args[0],$uptime.days,$uptime.hours,$uptime.minutes,$uptime.seconds
0 {$userconfirmed = $true}
(0x00 == data[ 1 ]) &&
(0x00 == data[ 2 ]) &&
(0x00 == data[ 3 ]) )
"0x0"="successful login"
0x800703ec = "invaliddata";
0x80070490 {break}
0x80070490 = "objectnotfound";
0x80070490 {return $null}
0x80070520 = "securityerror";
0x8007089a = "securityerror"}
(0xbb == data[ 1 ]) &&
(0xbf == data[ 2 ]) )
"0xc0000064"="the specified user does not exist"
"0xc000006a"="the value provided as the current password is not correct"
"0xc000006c"="password policy not met"
"0xc000006d"="the attempted logon is invalid due to bad user name"
"0xc000006e"="user account restriction has prevented successful login"
"0xc000006f"="the user account has time restrictions and may not be logged onto at this time"
"0xc0000070"="the user is restricted and may not log on from the source workstation"
"0xc0000071"="the user account's password has expired"
"0xc0000072"="the user account is currently disabled"
"0xc000009a"="insufficient system resources"
"0xc0000193"="the user's account has expired"
"0xc0000224"="user must change his password before he logs on the first time"
"0xc0000234"="the user account has been automatically locked"
(0xfe == data[ 1 ]) )
(0xfe == data[ 1 ]) &&
(0xfe == data[ 2 ]) &&
(0xff == data[ 1 ]) )
(0xff == data[ 3 ]) )
0 {"you will be using windows update to download the necessary components to install features related to .net 3.5. this will extend the duration of your role/feature installation."}
$_ + 1
1 {
{(1000..2100) -contains $_} {
" 100 = success`r`n"
" 101 = error`r`n"
" 102 = warning`r`n"
" 104 = information`r`n"
10 { process-qscertificate; write-qscompletionmessage }
10) process ssl certificate for adfs
10 { "unknownstate" }
11001 {"buffer too small"}
11002 {"destination net unreachable"}
11003 {"destination host unreachable"}
11004 {"destination protocol unreachable"}
11005 {"destination port unreachable"}
11006 {"no resources"}
11007 {"bad option"}
11008 {"hardware error"}
11009 {"packet too big"}
11010 {"request timed out"}
11011 {"bad request"}
11012 {"bad route"}
11013 {"timetolive expired transit"}
11014 {"timetolive expired reassembly"}
11015 {"parameter problem"}
11016 {"source quench"}
11017 {"option too big"}
11018 {"bad destination"}
11032 {"negotiating ipsec"}
11050 {"general failure"}
11 { export-qscertificate; write-qscompletionmessage }
11) export ssl certificate with private key
'11 initialization/termination','12 service control',
11 { "partiallycharged" }
12) configure adfs with basic configuration
12 { configure-qsadfs; write-qscompletionmessage }
12/$num
'12 service control','13 name resolution','14 backup','15 field engineering',
{(1..31) -contains $_} {
{(1..366) -contains $_} {
13 { configure-qswindowsfirewall; write-qscompletionmessage }
13) confirm/configure windows firewall for port 443
'13 name resolution','14 backup','15 field engineering',
14 { launch-qsietestpages; write-qscompletionmessage }
14) launch test web pages
15) import certificates for adfs proxy
15 { import-qscertificates; write-qscompletionmessage }
16) add the adfs proxy role to this server
16 { install-qsadfsproxyrole; write-qscompletionmessage }
'16 ldap interface events','17 setup','18 global catalog',
'16 ldap interface events','17 setup','18 global catalog','19 inter-site messaging',
17) configure iis ssl and authentication
17 { configure-qsiissslexplicit; write-qscompletionmessage }
18) add a hosts file entry for adfs access from the proxy
18 { add-hostsentryforadfs; write-qscompletionmessage }
{(1..92) -contains $_} {
19) configure adfs proxy with basic configuration
19 { configure-qsadfsproxyrole; write-qscompletionmessage }
'19 inter-site messaging', '20 group caching','21 linked-value replication',
1 {$acltype = "share printer"};
1 {$cells.item($row,$col)=$ilo.activelicense
1.check for discovery search permissions
1 {$cmd = $dcdiag}
"1 = dcdiag `n 2 = dcdiag /v (detailed information) `n 3 = repadmin /showrepl `n" `
1 { "discharging" }
1.display in exchange management shell
1 { getcompname }
"1 = hq `n 2 = miami`n" `
1. import-module sidhistory
1) install microsoft online services sign-in assistant
1 { install-qssigninassistantexplicit; write-qscompletionmessage }
1 = ok/cancel
1 {$ou = $hq}
1 | select-object @{name="datemodified";expression={get-date}}, @{name="status";expression={"removed"}}, @{name="distinguishedname";expression={$distinguishedname}}, @{name="sid";expression={$sid}}
1 { $status = "inprogress" }
1 { $status = "inprogress"}
1 {$userconfirmed = $false}
"1" {$variant = "31"}
1 {$windowsserver2012mediapath = $(read-host -prompt "please enter the directory pointing to the directory of your windows server 2012 installation media. fore example, d:\sources\sxs")}
1 {"your server will not restart at this time. before installing the pre-requisite files, restart your computer."}
2 {
20 { configure-qswindowsfirewall; write-qscompletionmessage }
20) confirm/configure windows firewall for port 443
'20 group caching','21 linked-value replication','22 ds rpc client','23 ds rpc server','24 ds schema')
-2147024713
-2147024894
2147483648 {$acltype = "share file"};
2147483649 {$acltype = "share printer"};
21 { launch-qsietestpages; write-qscompletionmessage }
21) launch test web pages
22) check dns records for txt entries for unverified domains
'22 ds rpc client','23 ds rpc server','24 ds schema')]
22 { test-qsexternaldnsrecords; write-qscompletionmessage }
23) configure windows azure ad connection to adfs
23 { convert-qsmsoldomain; write-qscompletionmessage }
24) create a single sign-on test user
24 { new-qstestuser; write-qscompletionmessage }
"2.5.5.12" {$syntax = "string"}
25) download and install the dirsync tool
25 { install-qsdirsync; write-qscompletionmessage }
"2604371895", "1426053789", "5038647192", "3267408951",
26 { configure-qsdirsync; write-qscompletionmessage }
26) configure the dirsync tool
27) get the latest directory synchronization events
"[2-9]"
2 = abort/retry/ignore
2 {$cells.item($row,$col)=$ilo.activelicense
2.check for mailbox import export permissions
2 {$cmd = $dcdiagverbose}
2 { exit } } }
2. export-domainsids
2.export to csv file" -foreground "cyan"
2. for instructions use get-help -full to read about each function:
2) install microsoft online services module for windows powershell
2 { install-qsmsolservicesmoduleexplicit; write-qscompletionmessage }
2 { "notdischarging" }
2 {$ou = $miami}
2 { $status = "downloaded" }
2 { $status = "downloaded"}
2 { $status = "installed"}
"2" {$variant = "3"}
3 {
$30daysusers = @()
$30daysusers = $30daysusers + $name
"3267408951", "1426053789", "4753896210", "0319728564"
3. add a user to discovery search permission
3 {$cells.item($row,$col)=$ilo.activelicense
3 {$cmd = $showrepl}
3) download and run the office 365 deployment readiness tool
'3 exds interface events','4 mapi interface events',
'3 exds interface events','4 mapi interface events','5 replication events',
3. export-sidmapping
3 { "fullycharged" }
3 { launch-qsoffice365deploymentreadinesstool; write-qscompletionmessage }
3 { $status = "downloadedwitherrors" }
3 { $status = "downloadedwitherrors"}
3 { $status = "installedwitherrors"}
"3" {$variant = "11"}
3 = yes/no/cancel
4 {
"4753896210", "8145962073", "0319728564", "7901235846",
4. add a user to mailbox import export permission" -foreground "cyan"
4) add local upn suffix as domain in windows azure active directory
4 { add-qsmsoldomain; write-qscompletionmessage }
4 {$cells.item($row,$col)=$ilo.activelicense
4 {$cmd = $replsummary}
4 { "low" }
"4 = repadmin /replsummary `n"`
4. review the report files
4 { $status = "failed" }
4 { $status = "failed"}
4. update-sidmapping
"4" {$variant = "5"}
4 = yes/no
5 {
$500mbchunk++
$500mbchunk = 0
$500mbstorage = [math]::round((10.00/12),2)
"5038647192", "2604371895", "8145962073", "7901235846",
5 {$cells.item($row,$col)=$ilo.activelicense
5. convert-sidhistoryntfs \\server\share\path -whatif
5 { "critical" }
5. generate a log - to identitfy the number of emails exist in a mailbox specifying the subject of the email
5 { get-qsmsoldomainverificationdnsall; write-qscompletionmessage }
5. open the sidmappingupdated.csv file.
'5 replication events','6 garbage collection',
5) retrieve verification information for domains in windows azure active directory
5 = retry/cancel
5 { $status = "aborted" }
5 { $status = "aborted"}
"5" {$variant = "4"}
6 {
6..14 | %{cmd /c if exist "\\$computername\c$\program files\adobe\reader $_.0\reader\acrord32.exe" psexec \\$computername -d reg add hkcr\software\adobe\acrobat\exe /ve /d "`\`"c:\program files\adobe\reader $_.0\reader\acrord32.exe`\`"" /f}
6..14 | %{cmd /c if exist "\\$computername\c$\program files (x86)\adobe\reader $_.0\reader\acrord32.exe" psexec \\$computername -d reg add hkcr\software\adobe\acrobat\exe /ve /d "`\`"c:\program files (x86)\adobe\reader $_.0\reader\acrord32.exe`\`"" /f}
6 = cancel/try again/continue
6 { "charging" }
6) enable directory synchronization (dirsync) on the tenant
'6 garbage collection','7 internal configuration','8 directory access',
6. remove a email with a specific subject from one mailbox
6. review the report files
6 { set-qsmsoldirsyncenabled; write-qscompletionmessage }
"6" {$variant = "64"}
7 {
7 {}
$("-"*79)
"7901235846", "0319728564", "8145962073", "4753896210",
("-"*79) >> $logfile
("-"*79) > $logfile
7) add the adfs role to this server
7 { "chargingandhigh" }
7. convert-sidhistoryntfs \\server\share\path
7f9bg+3/qypt/0gd7f9bg+3/robt/7++wv+dadhlaaaaaaaaaaaaaaaaaaaaaivqm8vkxbv/tyuj/rsccf60ggn/tiij/rsccf60ggn/tiij/rsccf+0ggn+tiij/rsccf60ggn/tiij/rsccf60ggn/tyuj/srf
7 { install-qsadfsrole; write-qscompletionmessage }
'7 internal configuration','8 directory access',
7. remove a email with a specific subject from all the mailboxes in the organization
8 {
8 { "chargingandlow" }
8) create a service account in the local domain for adfs use
8. mailbox cleanup - emptying a specific mailbox
8 { new-qsadfsserviceaccount; write-qscompletionmessage }
8. review the report files
9 {
9 { add-qsadfsdnsentry; write-qscompletionmessage }
9 { "chargingandcritical" }
9. confirm access with affected users/groups
9) create an internal dns entry for adfs
'9 internal processing','10 performance counters',
'9 internal processing','10 performance counters','11 initialization/termination',
9. mailbox dumpster cleanup - emptying a specific mailbox dumpster" -foreground "cyan"
$a = 2
$a = $a + "
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac1yhb3nwitn2wyk/d1wsp3dc
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahjtgxrzvr9tef4tf3hfln94xy5/ef8uf3hf
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahfsg1ntswnbc1uf9nvziv91wsl/dvki/3vziv91wsl/dvki/3vziv91wsl/dvki/3vziv91wsl/dvki/3vziv91wsl/dvki/3vziv9zvr/2buskwxjt
aaaaaaaaaaaaaaaaaacqduaqmofl/+zp6p9yr5p/ntc7/3k3mv9dm3x/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf9yr5p/7ono/5qb
aaaaaaaajni9ejd+sp/l4ed/cq+t/0eeep8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/cq+t/+xh4p+xfkj/ln1neaaa
aaabaamaicaaaaeaiacoeaaangaaabgyaaabacaaiakaan4qaaaqeaaaaqagaggeaabmggaakaaaacaaaabaaaaaaqagaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaayaaaamaaaaaeaiaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
$a = $a + "body{background-color:
$a = $a + "body{background-color:lavender ;}"
$a = $a + "body{background-color:peachpuff;}"
$a = $adspath.split('/',[stringsplitoptions]::removeemptyentries)
$a = $args.length
$a = $a + "</style>"
$a = $a + "table{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;}"
$a = $a + "td{border-width: 1px;padding: 0px;border-style: solid;border-color: black;background-color:
$a = $a + "td{border-width: 1px;padding: 0px;border-style: solid;border-color: black;background-color:palegoldenrod}"
$a = $a + "td{border-width: 1px;padding: 3px;border-style: solid;border-color: black;background-color:palegoldenrod}"
$a = $a + "th{border-width: 1px;padding: 0px;border-style: solid;border-color: black;background-color:
$a = $a + "th{border-width: 1px;padding: 0px;border-style: solid;border-color: black;background-color:thistle}"
$a = $a + "th{border-width: 1px;padding: 3px;border-style: solid;border-color: black;background-color:thistle}"
$a.backgroundcolor = "black"
"abort" = 3
$absdiff = $interval.duration()
"absolut"{
$absolut = $adsgroup.distinguishedname.remove(0,$cname.length+1)
$absolutepath = join-path -path (get-location) -childpath $versiondefinition
$absoluteurl = [microsoft.sharepoint.utilities.spencode]::urlencodeasurl($absoluteurl)
$absoluteurl = [system.string]::concat($sppiclib.parentweb.url,"/",$sppicitem[0].url)
$accelerators = @()
$accelerators += $accelerator
$acceptupdatestodownload = $objcollectionchoose.count
$accessusers = $accessusers | select -uniq
$accessusers += $member
$accessusers += $user
$account
$account = ""
account = $account
$accountarray = $adspath.split('/',[stringsplitoptions]::removeemptyentries)
$accountcreator = $user.mail
$account = $directorysearcher.findone()
$accountentry = new-object directoryservices.directoryentry $fulldistinguishname
$accountentry.putex(1, "homemdb", $null)
$accountentry.putex(1, "homemta", $null)
$accountentry.putex(1, "legacyexchangedn", $null)
$accountentry.putex(1, "mailnickname", $null)
$accountentry.putex(1, "mail", $null)
$accountentry.putex(1, "msexchaddressbookflags", $null)
$accountentry.putex(1, "msexcharchivequota", $null)
$accountentry.putex(1, "msexcharchivewarnquota", $null)
$accountentry.putex(1, "msexchbypassaudit", $null)
$accountentry.putex(1, "msexchdumpsterquota", $null)
$accountentry.putex(1, "msexchdumpsterwarningquota", $null)
$accountentry.putex(1, "msexchhomeservername", $null)
$accountentry.putex(1, "msexchmailboxauditenable", $null)
$accountentry.putex(1, "msexchmailboxauditlogagelimit", $null)
$accountentry.putex(1, "msexchmailboxguid", $null)
$accountentry.putex(1, "msexchmdbrulesquota", $null)
$accountentry.putex(1, "msexchmoderationflags", $null)
$accountentry.putex(1, "msexchpoliciesincluded", $null)
$accountentry.putex(1, "msexchprovisioningflags", $null)
$accountentry.putex(1, "msexchrbacpolicylink", $null)
$accountentry.putex(1, "msexchrecipientdisplaytype", $null)
$accountentry.putex(1, "msexchrecipienttypedetails", $null)
$accountentry.putex(1, "msexchtransportrecipientsettingsflags", $null)
$accountentry.putex(1, "msexchumdtmfmap", $null)
$accountentry.putex(1, "msexchumenabledflags2", $null)
$accountentry.putex(1, "msexchuseraccountcontrol", $null)
$accountentry.putex(1, "msexchversion", $null)
$accountentry.putex(1, "proxyaddresses", $null)
$accountentry.putex(1, "showinaddressbook", $null)
$accountexpiration=$objuser.properties.item("accountexpires")
$accountlockoutthreshold = $currentpasswordpolicyobject."msds-lockoutthreshold"
$accountname="contoso\\jsmith"
$accountname = $credentials.account
$accountname = $name.name
$accountname = read-host "sam account name for $purpose"
$accountname = $userprofile["accountname"].value.split("\")[1]
$account = $object
-accountpassword $credentials.password `
$accountpassword = read-qshostconfirmedpassword
-accountpassword $script:adfsaccountpassword `
account = $_.processmodel.username
$account.put("description",$desc)
$account.put("userflags", $pwnoexpflag)
$account=$remcomp.create("user",$usern)
account = $_.'run as user'
$account = $service.startname
$account.setinfo()
$account.setpassword($pwd)
account = $_.startname
$accounttoretrieve = "domain\user"
account = $_.wamusername
$acctstatus = "disabled"
$acctstatus = "enabled"
$ace = . createnewace $account $guid
$ace = new-object system.directoryservices.activedirectoryaccessrule( $identity, $adrights, $acltype, $guid, $inheritancetype )
$ace = new-object system.directoryservices.activedirectoryaccessrule $p,"genericall","allow"
$ace = new-object system.directoryservices.activedirectoryaccessrule $sid, "genericall", "allow", "all"
$acl
$acl.access | foreach-object {$_ | out-file -filepath $logfile -append}
$acl.addaccessrule($ace)
<a class='expando' href='
<a class=expando href='
$aclentry = $aclsplit[5].trimend(")")
$aclentrysidmatches | foreach-object {$aclentrysid = $_.value}
$aclentrysidmatches = [regex]::matches($aclentry,"(s(-\d+){2,8})")
$aclentrysid = $null
$aclentrysid | out-file -filepath $logfile -append
$acl = get-acl ("ad:\" + $ptrobjdn)
$acl = get-acl ("ad:\" + $ptrobjdn) -erroraction silentlycontinue -errorvariable a
$acl = get-acl $basedn
$acl = get-acl $container
$acl = get-acl -path $folder.fullname
$acl = $null
$acl.path | out-file -filepath $logfile -append
acls = @{
$acl.sddl | out-file -filepath $logfile -append
$acl.setsecuritydescriptorsddlform($newsddl)
$aclsplit = $sddlsplit[$i].split(";")
acltype=$acltype;
acltype="ntfs";
$acltype = [system.security.accesscontrol.accesscontroltype]::allow
$action=@()
$action="(approve !)"
</actions>
<actions context="author">
$action="wait"
$activecopy = $database.activecopy.tostring()
"active directory not found, program aborted"
$activedocument.activate()
$activedocument = foreach ($document in $pgse.documentwindows)
$activedocument = foreach ($document in $pgse.documentwindows) { if ($document.title -eq $f.documenttitle) { $document } }
$activedomains = get-msoldomain | foreach-object { $_.name }
$active = get-scsmenumeration incidentstatusenum.active$
$activelogs = get-winevent -listlog * -computername $servername |where-object {$_.recordcount -gt 0}
$activesyncclients = $null
$activity,
activity = 'configuring cloud'
$adaccount = get-user "$enteruser"
$adaccount = '"' + $line.username + '"'
$adapter | disable-netadapterbinding
$adapterdnsservers = $adapter.getipproperties().dnsaddresses
$adapter| get-netadapterbinding -componentid $bindcomponentid | enable-netadapterbinding
$adapter | get-netadapterbinding -componentid $unbindcomponentid | disable-netadapterbinding
$adapter = get-netadapter -name $name
adaptername,
-adaptersetting @(
$adaptersetting | % {
$adaptersetting,
adaptersetting -name $hvnode.node1.clusternet.name `
adaptersetting -name $hvnode.node1.clusternet.name -unbind $true
adaptersetting -name $hvnode.node1.livemigrationnet.name `
adaptersetting -name $hvnode.node1.managementnet.name `
adaptersetting -name $hvnode.node2.clusternet.name `
adaptersetting -name $hvnode.node2.clusternet.name -unbind $true
adaptersetting -name $hvnode.node2.livemigrationnet.name `
adaptersetting -name $hvnode.node2.managementnet.name `
$adapters = ([system.net.networkinformation.networkinterface])::getallnetworkinterfaces()
$adarray = (get-adcomputer -searchbase $lookup.distinguishedname -properties `
"add"
$addactivitystring = "adding '$userdn' to policy: '$passwordpolicyname'"
add-adfsproxy -federationservicename $script:adfssubjectname `
add-adgroupmember directaccessappserver -members $membertoadd
add-adgroupmember directaccessclients -members $membertoadd
add-adgroupmember directaccessclientswin7 -members $membertoadd
add-adgroupmember $group -member $memberdn -confirm:$false
<add assembly="microsoft.exchange.diagnostics, version=14.0.0.0, culture=neutral, publickeytoken=31bf3856ad364e35"/>
<add assembly="microsoft.exchange.net, version=14.0.0.0, culture=neutral, publickeytoken=31bf3856ad364e35"/>
<add assembly="microsoft.exchange.oabauthmodule, version=14.0.0.0, culture=neutral, publickeytoken=31bf3856ad364e35"/>
"addcategoryprefix" {
"add cdp extension urls"
add-clusternode "$_" } }
add-computer -domainname $corpfqdn -credential $cred_credential -erroraction stop
add-computer -domainname $corpfqdn -credential $cred_credential -force -erroraction stop
add-content $diskreport "</body></html>"
add-content $diskreport $datarow;
add-content $diskreport $header
add-content $diskreport $tabledescription
add-content $diskreport $tableheader
add-content $filename "<!--"
add-content $filename "-->"
add-content $filename ""
add-content $filename "}"
add-content $filename "</body>"
add-content $filename "<body>"
add-content $filename "body {"
add-content $filename "border-bottom: 1px solid
add-content $filename "border-left: 1px solid
add-content $filename "border-right: 1px solid
add-content $filename "border: thin solid
add-content $filename "border-top: 1px solid
add-content $filename "<font face='tahoma' color='
add-content $filename "font-family: tahoma;"
add-content $filename "font-size: 11px;"
add-content $filename "</head>"
add-content $filename "<head>"
add-content $filename "</html>"
add-content $filename "<html>"
add-content $filename "margin-bottom: 10px;"
add-content $filename "margin-left: 5px;"
add-content $filename "margin-right: 0px;"
add-content $filename "margin-top: 5px;"
add-content $filename "<meta http-equiv='content-type' content='text/html; charset=iso-8859-1'>"
add-content $filename "padding-bottom: 0px;"
add-content $filename "padding-left: 0px;"
add-content $filename "padding-right: 0px;"
add-content $filename "padding-top: 0px;"
add-content $filename "</style>"
add-content $filename '<style type="text/css">'
add-content $filename "</table>"
add-content $filename "table {"
add-content $filename $tableentry
add-content $filename "<table width='100%'>"
add-content $filename "<table width='100%'><tbody>"
add-content $filename "</td>"
add-content $filename "td {"
add-content $filename "<td colspan='7' height='25' align='center'>"
add-content $filename "<td width='10%' align='center'>database name</td>"
add-content $filename "<td width='10%' align='center'>database size(mb)</td>"
add-content $filename "<td width='10%' align='center'>last full backup</td>"
add-content $filename "<td width='10%' align='center'>server</td>"
add-content $filename "<td width='10%' align='center'>top mailbox size</td>"
add-content $filename "<td width='10%' align='center'>top mailbox</td>"
add-content $filename "<td width='10%' align='center'>whitespace(mb)</td>"
add-content $filename "<td width='15%' align='center'>database file</td>"
add-content $filename "<td width='15%' align='center'>no backup since?</td>"
add-content $filename "<td width='7%' align='center'>
add-content $filename '<title>myexchangeworld.com database report</title>'
add-content $filename "</tr>"
add-content $filename "<tr bgcolor=
add-content $filename "<tr bgcolor='
add-content $logfile ("creating folder for mailbox name:" + $mailboxname)
add-content $logfile ("folder created for " + $mailboxname)
add-content $logfile -value "----------------------------------------------------"
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') - approve $($_.legacyname) "
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') approving updates ... "
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') building report ... "
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') collect and filter updates ... "
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') loading assembly ... "
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') reject some useless updates ... "
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') start"
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') - total updates : $($allupdates.count) useful updates : $($updates.count)"
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') - total updates approved $nb_approved "
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') - total updates rejected $nb_rejected (because they are already approved) "
add-content $logtextfilename $text"`r" -encoding utf8
add-content $outputfile "index,runningas,starttime,endtime,totalsize,errorcount,completeledcount,warningcount,identity,sourcedb,targetdb,mailboxsize,duration,resultcode"
add-content -path $logfile -value `
add-content -path $logfile -value "
add-content -path $logfile -value " $_"
add-content -path $logfile -value " description: $_"
add-content -path $logfile -value " do not specify the cn attribute in the spreadsheet"
add-content -path $logfile -value "------------------------------------------------" -erroraction stop
add-content -path $logfile -value $("finished: " + (get-date).tostring())
add-content -path $logfile -value "log file: $logfile"
add-content -path $logfile -value "netbios name of domain: $netbiosdomain"
add-content -path $logfile -value "number of errors: $script:errors"
add-content -path $logfile -value "number of users unchanged: $script:unchanged"
add-content -path $logfile -value "number of users updated: $script:updated"
add-content -path $logfile -value " one column must be distinguishedname or samaccountname"
add-content -path $logfile -value $("program aborted: " + (get-date).tostring())
add-content -path $logfile -value "spreadsheet: $excelpath"
add-content -path $logfile -value $("started: " + (get-date).tostring())
add-content -path $logfile -value " step: $step"
add-content -path $logfile -value "update user: $dn"
add-content -path $logfile -value "updateusers.ps1 version 1.0 (september 12, 2011)"
add-content -path $logfile -value "user unchanged: $dn"
add-content $report "<!--"
add-content $report "-->"
add-content $report ""
add-content $report "}"
add-content $report "</body>"
add-content $report "<body>"
add-content $report "body {"
add-content $report "border-bottom: 1px solid
add-content $report "border-left: 1px solid
add-content $report "border-right: 1px solid
add-content $report "border: thin solid
add-content $report "border-top: 1px solid
add-content $report "<font face='tahoma' color='
add-content $report "font-family: tahoma;"
add-content $report "font-size: 11px;"
add-content $report "</head>"
add-content $report "<head>"
add-content $report "</html>"
add-content $report "<html>"
add-content $report "margin-bottom: 10px;"
add-content $report "margin-left: 5px;"
add-content $report "margin-right: 0px;"
add-content $report "margin-top: 5px;"
add-content $report "<meta http-equiv='content-type' content='text/html; charset=iso-8859-1'>"
add-content $report "padding-bottom: 0px;"
add-content $report "padding-left: 0px;"
add-content $report "padding-right: 0px;"
add-content $report "padding-top: 0px;"
add-content $report "</style>"
add-content $report '<style type="text/css">'
add-content $report "</table>"
add-content $report "table {"
add-content $report "<table width='100%'>"
add-content $report "</td>"
add-content $report "td {"
add-content $report "<td>$accountname</td>"
add-content $report "<td colspan='7' height='25' align='center'>"
add-content $report "<td>$lastchgd</td>"
add-content $report "<td>no accounts match</td>"
add-content $report "<td>$userdesc</td>"
add-content $report "<td width='10%' align='center'>modified date</td>"
add-content $report "<td width='20%' align='center'>account name</td>"
add-content $report "<td width='20%' align='left'>account name</td>"
add-content $report "<td width='50%' align='center'>description</td>"
add-content $report '<title>company terminated user cleanup script</title>'
add-content $report "</tr>"
add-content $report "<tr>"
add-content $report "<tr bgcolor=
add-content $report "<tr bgcolor='
add-content ($script_parent + "\logs.txt") "------------------------------------------------------"
add-content ($script_parent + "\logs.txt") "executed by = '$uname'"
add-content ($script_parent + "\logs.txt") "executed on = $d"
add-content ($script_parent + "\logs.txt") "vcs = '$vcs'"
add-content x:\logs\maillog$logdate.txt "email was sent to $mail on $today"
$addcsv | foreach-object {
$addcsv = import-csv -path c:\powershell\powershell-csv-demo-part-2-adding.csv
$addcsv = import-csv -path c:\powershell\powershell-csv-demo-part-2-removing.csv
add-dnsserverresourcerecorda -computername $serveraddress -zonename $domain -name 'adfs' -ipv4address $ipaddress
$adddp = $dpclass.createinstance()
$adddp.packageid = $packageid.packageid
$adddp.refreshnow = $true
$adddp.servernalpath = $nalpath.nalpath
$adddp.sitecode = $nalpath.sitecode
added file validation for domainfile parameter of get-sidhistory.
added = $retval
add-fenodes
add-fenodes -documenttitle $pgse.currentdocumentwindow.title
"add gpmc"
"adding ad-tools using server mangager "
"adding nat"
"adding network load balancing feature"
"adding network load balancing gui"
- adding permissions doesn't reflect on the powershell instantly, you got to close and reopen powershell to refresh the permissions
"adding remoteaccess server role"
"adding tracing for iphlpsvc "
"adding tracing for nla/nlmperforming"
"adding web-server."
"additionaldc"
add-layerorder (join-path $folder $model) $modelmanifest.layer
add-layerorder $model $axlayer
add-mailboxpermission "customer support" -user supportgroup -accessrights fullaccess
add-mailboxpermission $sharedmailboxdisplayname -user $usertopermission -accessrights fullaccess -automapping $false
add-mailboxpermission $sharedmailboxdisplayname -user $usertopermission -accessrights fullaccess -automapping $true
add-mailboxpermission $sharedmailboxdisplayname -user $usertopermission -accessrights readpermission -automapping $false
add-mailboxpermission $sharedmailboxdisplayname -user $usertopermission -accessrights readpermission -automapping $true
add-managementroleentry "$orgname\$managementrole\disable-inboxrule"
add-managementroleentry "$orgname\$managementrole\enable-inboxrule"
add-managementroleentry "$orgname\$managementrole\new-inboxrule"
add-managementroleentry "$orgname\$managementrole\remove-inboxrule"
add-managementroleentry "$orgname\$managementrole\set-inboxrule"
add-member -inputobject $return -name prefixlength -value $prefixlengthreturn -type noteproperty
add-member -inputobject $return -name subnetmask -value $subnetmaskreturn -type noteproperty
add-member -inputobject $thisjob -membertype noteproperty -name "computername" -value $thisworkstation
add-member -inputobject $thisjob -membertype noteproperty -name "status" -value $retval.trim()
add-member -inputobject $thisjob -membertype noteproperty -name "username" -value $adminaccount
add-member -inputobject $thisjob -membertype noteproperty -name "username" -value $localuser
add-member -inputobject $update -membertype noteproperty -name computername -value $computer
add-member -inputobject $update -membertype noteproperty -name computername -value $env:computername
add-member -inputobject $update -membertype noteproperty -name kb -value $kb
add-member -inputobject $update -membertype noteproperty -name size -value $size
add-member -inputobject $update -membertype noteproperty -name status -value $status
add-member -inputobject $update -membertype noteproperty -name x -value 1
add-member -name "databasepermission" -membertype noteproperty -value $db_perm.permissiontype -inputobject $obj;
add-member -name "datatype" -membertype noteproperty -value $column.datatype -inputobject $obj;
add-member -name "default" -membertype noteproperty -value $column.default -inputobject $obj;
add-member -name "dependent_index_id" -membertype noteproperty -value $r[3].tostring() -inputobject $obj;
add-member -name "dependent_index_name" -membertype noteproperty -value $r[2].tostring() -inputobject $obj;
add-member -name "dependent_object_columnname" -membertype noteproperty -value $r[2].tostring() -inputobject $obj;
add-member -name "dependent_object_name" -membertype noteproperty -value $r[0].tostring() -inputobject $obj;
add-member -name "dependent_object_type" -membertype noteproperty -value $r[1].tostring() -inputobject $obj;
add-member -name "dependent_partition_scheme" -membertype noteproperty -value $r[4].tostring() -inputobject $obj;
add-member -name "description" -membertype noteproperty -value $description -inputobject $obj;
add-member -name "identity" -membertype noteproperty -value $column.identity -inputobject $obj;
add-member -name "inprimarykey" -membertype noteproperty -value $column.inprimarykey -inputobject $obj;
add-member -name "isforeignkey" -membertype noteproperty -value $column.isforeignkey -inputobject $obj;
add-member -name "name" -membertype noteproperty -value $column.name -inputobject $obj;
add-member -name "objectname" -membertype noteproperty -value $obj_perm.objectname -inputobject $obj;
add-member -name "permissiontype" -membertype noteproperty -value $obj_perm.permissiontype -inputobject $obj;
add-member -passthru -membertype 'noteproperty' -name 'account' -value $accountname | `
add-member -passthru -membertype 'noteproperty' -name 'domain name' -value $unverifieddomain.name | `
add-member -passthru -membertype 'noteproperty' -name 'domain' -value $domainname | `
add-member -passthru -membertype 'noteproperty' -name 'password' -value $accountpassword
add-member -passthru -membertype 'noteproperty' -name 'verification value' -value ( get-qsmsoldnsverificationtext -domain $unverifieddomain.name )
$addn = $ad.domainname
<add name="microsoft.exchange.oabauth" type="microsoft.exchange.oabauth.oabauthmodule" />
" add: new-itemproperty "
"add one filter"
"add one function"
"add one function r2"
add-pssnapin coexistence-configuration
add-pssnapin *exchange*
add-pssnapin fssp*
add-pssnapin microsoft.adfs.powershell
add-pssnapin microsoft.exchange.management.powershell.admin
add-pssnapin microsoft.exchange.management.powershell.admin -ea 0
add-pssnapin microsoft.exchange.management.powershell.admin -erroraction "silentlycontinue"
add-pssnapin microsoft.exchange.management.powershell.e2010
add-pssnapin microsoft.exchange.management.powershell.e2010 -erroraction silentlycontinue
add-pssnapin "microsoft.sharepoint.powershell"
add-pssnapin microsoft.sharepoint.powershell
add-pssnapin microsoft.sharepoint.powershell -ea silentlycontinue
add-pssnapin microsoft.sharepoint.powershell -erroraction silentlycontinue
add-pssnapin microsoft.sharepoint.powershell -erroraction "silentlycontinue"
add-pssnapin -name "microsoft.dataprotectionmanager.powershell"
add-pssnapin -name microsoft.exchange.management.powershell.setup -ea silentlycontinue
add-pssnapin quest.activeroles.admanagement
add-pssnapin quest.activeroles.admanagement -erroraction silentlycontinue
add-pssnapin sqlservercmdletsnapin100
add-pssnapin sqlservercmdletsnapin100 | out-null
add-pssnapin sqlserverprovidersnapin100
add-pssnapin sqlserverprovidersnapin100 | out-null
add-pssnapin vmware.vimautomation.core
add-recipientpermission $sharedmailboxdisplayname -trustee $usertopermission -accessrights sendas
"address"
address = "192.168.11.19"
address = "192.168.11.20"
address = "192.168.12.19"
address = "192.168.12.20"
address = "192.168.13.19"
address = "192.168.13.20"
address = "192.168.2.111"
address = "192.168.2.112"
address = "192.168.2.113"
address = "192.168.2.114"
address = "192.168.2.115"
address = "192.168.2.116"
$address = $_.networksetting.configurationipaddress
$address=[system.net.ipaddress]"0.0.0.0"
$address = [system.net.ipaddress]"0.0.0.0"
$address = $userobject.streetaddress
add-rolegroupmember "discovery management" -member "$getalias"
$addsite=$iis.sites["default web site"].applications.add("/oab", $exchangeinstallpath + "clientaccess\oab")
add-taskaction -script `
add-tasktrigger -in (new-timespan -seconds 30) |
add-type @'
add-type -assemblyname system.core
add-type -assemblyname system.directoryservices.accountmanagement
add-type -assemblyname system.drawing
add-type $code
add-type -memberdefinition $code -namespace dmd -name changeusertile
add-type -memberdefinition `$sig -namespace `"advapi32`" -name `'util`'
add-type -memberdefinition $sig -namespace "advapi32" -name 'util'
add-type -memberdefinition $signature -name adjpriv -namespace adjpriv
add-type -memberdefinition $signature -name lsautil -namespace lsautil
add-type -path "c:\program files\common files\microsoft shared\web server extensions\14\isapi\microsoft.office.server.dll"
add-type -path "c:\program files\update services\api\microsoft.updateservices.administration.dll"
add-type -path $systemprintingfile
add-type $pscredmanutils
add-type -referencedassemblies "system.net" -typedefinition @"
add-type -referencedassemblies system.windows.forms -typedefinition $csharpcode
add-type -typedefinition @'
add-type -typedefinition $source
add-type -typedefinition $windowdisplay
add-usertogroup -groupdn $usergroup.groupdn -userdn $newuser.path
add-windowsfeature adcs-cert-authority
add-windowsfeature ad-domain-services -includeallsubfeature -erroraction stop
add-windowsfeature dhcp -includeallsubfeature -erroraction stop
add-windowsfeature dns -includeallsubfeature -ea 0
add-windowsfeature gpmc
add-windowsfeature nlb -includeallsubfeature
add-windowsfeature routing
add-windowsfeature rsat-adcs -includeallsubfeature
add-windowsfeature rsat-adds -includeallsubfeature
add-windowsfeature rsat-ad-tools -includeallsubfeature
add-windowsfeature rsat-dhcp -ea 0
add-windowsfeature rsat-dns-server -ea 0
add-windowsfeature rsat-nlb
add-windowsfeature rsat-remoteaccess
add-windowsfeature rsat-remoteaccess-mgmt
add-windowsfeature web-asp
add-windowsfeature web-asp-net45
add-windowsfeature web-http-tracing
add-windowsfeature web-mgmt-console
add-windowsfeature web-server
add-windowsfeature web-windows-auth
$adfind = $searcher.findall()
adfs proxy options
adfs server options (part 1)
adfs server options (part 2)
$ad = get-accepteddomain | ?{$_.default -eq "true"}
$ad = get-aduser -filter * -searchbase "ou=import,dc=testlab,dc=lcl"
$adjpriv = [adjpriv.adjpriv]
adminaccount = $adminaccount
$adminaccount = "$domain\administrator"
$adminaccount = "hcp\administrator"
$adminactions+=" , "
$adminactions+="$action"
$admin = "domain\admin"
$admin = "domain\administrator"
$administrator = [system.security.principal.windowsbuiltinrole]::administrator
$adminos = gwmi win32_operatingsystem
$adminproxy = new-object -typename microsoft.updateservices.administration.adminproxy
$adminuser = $corpfqdn+"\administrator"
$adminuser = $domaintocreatefqdn+"\administrator"
$adm = [system.security.principal.windowsbuiltinrole]::administrator
$adobecipher = "0000000001", "5038647192", "1456053789", "2604371895",
$adobject,
$adobject | foreach-object {
$adobject = get-wmifilterinadobject -all
$adobject = get-wmifilterinadobject -guid $guid
$adobject = get-wmifilterinadobject -name $name
$adobject = new-adobject -name $wmiguid -type "mswmi-som" -path $wmipath -otherattributes $attr -passthru
$adobject = new-object directoryservices.directoryentry $adobject
$adobject.psbase.refreshcache("tokengroups")
$adobject.putex(2,$propertyname,$propertyvalues)
$adobject.put($propertyname,$propertyvalue)
$adobjects = $directorysearcher.findall()
$adobject.setinfo()
$adobj= $selector.findall()
$adocommand.activeconnection = $adoconnection
$adocommand.commandtext = $query
$adocommand = new-object -comobject "adodb.command"
$adocommand.properties.item("cache results") = $false
$adocommand.properties.item("page size") = 200
$adocommand.properties.item("timeout") = 30
$adoconnection.close()
$adoconnection = new-object -comobject "adodb.connection"
$adoconnection.open("provider=adsdsoobject;")
$adorecordset = $adocommand.execute()
$adorecordset.close()
$adquery |
$adquery = get-adobject -ldapfilter "(sidhistory=*)" -property objectclass, `
$adrights = [system.directoryservices.activedirectoryrights]::extendedright
$adsearcher = new-object directoryservices.directorysearcher($adsearchroot, $adsearchfilter)
$adsearchfilter = "(msrtcsip-trustedmcufqdn=*)"
$adsearchresults = $adsearcher.findall()
$adsgroup.distinguishedname).memberof `
$adsi.delete("user", $username)
([adsi]$groupdn).add($userdn)
$adsisearcher.filter=$strfilter
$adsisearcher=new-object directoryservices.directorysearcher($adsientry)
$adsisearcher.pagesize=1000
$adsisearcher.searchscope="base"
$adsisearcher.searchscope="subtree"
$adsiteall = get-adsite
$adsitehub = $adsite.hubsiteenabled
$adsitelinkall = get-adsitelink
$adsitelinkcost = $adsitelink.adcost
$adsitelinkmms = $adsitelink.maxmessagesize
$adsitelinkname = $adsitelink.name
$adsitelinksite = $adsitelink.sites
$adsitempi = $adsite.minorpartnerid
$adsitename = $adsite.name
$adsitepi = $adsite.partnerid
$adsiuser.putex(1,"thumbnailphoto",$null)
$adsiuser.put("thumbnailphoto",$filedata);
$adspath = $_.gettype().invokemember("adspath", 'getproperty', $null, $_, $null)
$adspath = $memberobject.gettype().invokemember("adspath", 'getproperty', $null, $memberobject, $null)
adspath = [string]$adobject.properties.adspath
$adspath = $worksheet.cells.item(1,1).value()
$aduser = [adsi]$userquery
$aduser = get-aduser $justuser -properties thumbnailphoto
$aduser.thumbnailphoto | set-content $imagefile -encoding byte
$adworkstation = [adsi]([string]$workstation.adspath)
$adworkstation.description = 'free'
$adworkstation.description = $thisworkstation.username
$adworkstation.iphostnumber = $thisworkstation.ipaddress
$adworkstation.macaddress = $thisworkstation.macaddress
$adworkstation.serialnumber = $thisworkstation.serialnumber
$adworkstation.setinfo()
"adws service status"
$a | foreach-object {
$a.foregroundcolor = "white"
-after (get-date).adddays(-$days) `
$after = get-inusememory -foregroundcolor red
$a = (get-host).ui.rawui
$a = get-mailbox
$ag = $secondary.availabilitygroups[$agname]
$a=$iis.applicationpools.add("msexchangeoabapppool")
-algorithm ets `
[alias("all")]
[alias("cl")]
[alias('cn','ipaddress','server','computer','__server')]
alias : $($cred.targetalias)
[alias("dis")][switch]$disable,
[alias('el')]
[alias("en")][switch]$enable
[alias("fullname")]
[alias("gc")]
[alias("group")]
[alias("hardwareprofile")]
[alias('implicit','nondefault','nsa')]
[alias("lc")]
[alias( "metric" )]
[alias("name")]
[alias( "nic" )]
[alias('path','pspath')]
[alias("pi")]
[alias("pscomputername","cn","machinename","ip","ipaddress")]
[alias("pscomputername","cn","machinename","ip","ipaddress","computername","url","ftp","domain","distinguishedname")]
[alias("regkey")]
[alias("rl")]
-alias $_.'samaccountname' `
[alias('script','is')]
[alias("silent")]
[alias('subtext')]
[alias("template")]
[alias('title')]
[alias('tl')]
[alias("uc")]
[alias('user','username','account')]
[alias("vm","virtualmachinename")]
$alignelement = $headerelement.appendchild($myxml.createelement("alignment"))
$alignelement.innertext = $($value.tag)
$alignelement = $itemelement.appendchild($myxml.createelement("alignment"))
"all"
$allclustergroupips = get-cluster | get-clustergroup | get-clusterresource | where-object {$_.resourcetype.name -eq "ip address" -or $_.resourcetype.name -eq "ipv6 tunnel address" -or $_.resourcetype.name -eq "ipv6 address"}
$allclustergroupips | stop-clusterresource
$allclustergroupips | where-object {$_.name -ne $firstipv4resource.name} | remove-clusterresource -force
$allcsv = get-childitem -path $path -filter "*.csv" | where-object {$_.name -notlike "$prefix*" -and $_.length -gt 0}
$all += $db.schemas;
$all += $db.storedprocedures;
$all = $db.tables;
$all += $db.triggers;
$all += $db.userdefineddatatypes;
$all += $db.userdefinedfunctions;
$all += $db.users;
$all += $db.views;
$alldcsinforest = enumeratedcs
$alldg = get-distributiongroup -resultsize unlimited
$alldistgroups=@()
$alldistgroups += $distgroup
"-all document libraries within this web will be processed..."
$allfilecount = $filelist.count
$allgpos = get-gpo -domain $currentdomain.dnsroot -all
$allinfo="*"
$allipv4resources = get-cluster | get-clustergroup | get-clusterresource | where-object {$_.resourcetype.name -eq "ip address"}
$alllines=""
$alllines+=$bodyel+$end
$allmailboxes = @()
$allmailboxes=get-mailbox -resultsize unlimited| ?{$_.auditenabled -eq $true}
$allmailboxes += $temp
$allmembers+=$srknvrgl
$allnewsearchresult = $objnewsearch.findall()
$allobj1 = $objsearch1.findall()
$allobj = $objsearch.findall()
"allow dns inbound on the nat device"
<allowhardterminate>true</allowhardterminate>
<allowstartondemand>true</allowstartondemand>
allows the administrator to send a message / prompt to an interactive user.
$allsearchresult = $objsearch.findall()
$allsites = @()
$allsites += $rootweb.url
$allsrvlist = get-exchangeserver | where-object{$_.serverrole -ne "edge"}
$allsrvs = get-exchangeserver | where{($_.admindisplayversion.major -gt "8") -and ($_.serverrole -ne "edge")}
$allsrvs = get-exchangeserver | where-object{$_.serverrole -ne "edge"}
$all = $true
$allupdates=$wsus.getupdates()
"allusersallhosts" {
"alluserscurrenthost" {
$allusers = get-mailbox -resultsize:unlimited
$all | where {!($_.issystemobject)} | foreach{ $scrp.script($_)} | out-null ;
"already copied setres"
$altcreds
$altcreds = "error. ensure dhcp management tools are installed."
$altcreds = getaltcreds $dc
$altcreds = $null
$altdnsname.initializefromstring($script:altnametype.dns_name, ($env:computername + '.' + $env:userdnsdomain))
$altdnsname = new-object -comobject 'x509enrollment.calternativename'
$altnamescollection.add($altdnsname)
$altnamescollection.add($maindnsname)
$altnamescollection = new-object -comobject 'x509enrollment.calternativenames'
$amsearchbase = "ou=disabled accounts,ou=amer,ou=corpusers,dc=company,dc=com"
<a name=""top""><h4 align=""center"">generated $((get-date).tostring())</h4></a>
<a name=""top""><h4 align=""center"">generated $((get-date).tostring())</h4></a>"
-and `
-and ($attr.toupper().contains("guid") -eq $true))
and (iii) to indemnify, hold harmless, and defend us and our suppliers from and
-and $_.isdeclined -eq $false `
-and $_.issuperseded -eq $false }
-and ($_.mounted -eq "true") -and ($_.name -notlike "mbx5*")} | sort-object name
-and ($_.mounted -eq "true")} | sort-object name
-and $_.updateclassificationtitle -notmatch "service packs" `
$a = new-object -comobject excel.application
"anniversary" = "weddinganniversary";
$answer,
answer = $answer
$aolcode
$aolcode = ''
$aolcode = get-aolcode $axlayer
$aolcode = get-aolcode $compileinlayer
$aolcode = $line[1]
$aolparm = ''
$aos = get-wmiobject win32_service -computername $axaosservername -filter "name=""$aosname""" -outvariable out
$aos = get-wmiobject win32_service -computername $axaosservername -filter "name=""$aosname""" -outvariable out -verbose
$aosname = $script:aosname = "aos60`${0}" -f $item.pschildname
$app.displayname = $key.getvalue("displayname")
$app.displayversion = $key.getvalue("displayversion")
appendlogmessage " "
appendlogmessage $beginprocessingtext
appendlogmessage $daterangetext
appendlogmessage $docfoundtext
appendlogmessage $emailsentmessage
appendlogmessage $emptydocemail
appendlogmessage $endprocessingtext
appendlogmessage $error[0]
appendlogmessage $ownerdocemail
$app.estimatedsizemb = '{0:n2}' -f ($key.getvalue("estimatedsize") / 1mb)
/appfabric:`"$sharepoint2013path\prerequisiteinstallerfiles\windowsserverappfabricsetup_x64.exe`" `
$app.installdate = $tempdate
$applicationname = "assetservice";
$applicationname = read-host 'what is the test account first name?'
$applicationname = read-host '[wrong value] what is the test account first name?'
$applications = @()
"application-server",
$applicationsourcedir = $applicationsourcedir.trimend('\')
$applications += $thisapplication
applicationunresponsive, applicationunstable, securityissue, lossofnetworkconnectivity')]
apply-label
$app.modifypath = $key.getvalue("modifypath")
$app = new-object installedapplication
$appointmentanniversarysubject = $appointmentanniversarysubject -f $contactobject.displayname
$appointmentanniversarysubject = $appointmentanniversarysubject -f $targetcontact.name
$appointmentanniversarysubject = $messages.anniversaryremindersubject
$appointmentbirthdaysubject = $appointmentbirthdaysubject -f $contactobject.displayname
$appointmentbirthdaysubject = $appointmentbirthdaysubject -f $targetcontact.name
$appointmentbirthdaysubject = $messages.birthdayremindersubject
$appointment.isalldayevent = $true
$appointment.legacyfreebusystatus = "free"
$appointment = new-object microsoft.exchange.webservices.data.appointment($exservice)
$appointment.recurrence = $recurrence
$appointment.save($currentcalendarfolder.id,`
$appointment.subject = $appointmentanniversarysubject
$appointment.subject = $appointmentbirthdaysubject
$apppath = join-path $apppath 'appl'
$apppath = join-path $droplocation 'application'
$apppool.delete()
$apppool = $iis.applicationpools["msexchangeoabapppool"]
$apppool.processmodel.identitytype = [microsoft.web.administration.processmodelidentitytype]"localsystem"
$apppool.processmodel.idletimeout = "0.00:00:00"
$apppool.recycling.periodicrestart.time = "0.00:00:00"
$apppools | foreach-object {
$app.publisher = $key.getvalue("publisher")
$approvalgroups=($alldistgroups | ?{$_.memberjoinrestriction -like "approval*"} | measure-object).count
$approvalgroups=($groups | ?{$_.memberjoinrestriction -like "approval*"} | measure-object).count
$approvals = $wsusserver.getupdateapprovals($updatescope)
$app.uninstallstring = $key.getvalue("uninstallstring")
$app.versionmajor = $key.getvalue("versionmajor")
$app.versionminor = $key.getvalue("versionminor")
april, 2012
ap+xfad/sxwa/7f8ap+xfad/sxwa/7f8ap+xfad/sxwa/7f8ap+xfad/sxwa/7f8ap+xfad/sxwa/7f8ap+xfad/sxwa/7f8ap+xfad/wjs3/9dny/+pdkd/jnvfeaaaaaaaaaaaaaaaaaaaaackbjkqknld/9fu
$arbody = $arbody + "`n<font color='red'>free space on $objitem is:<b> $frees </b></font><br />"+ [char]13 + [char]10
$arbody = $arbody + "`n<font color='red'>the service <b>$i</b> is not running! </font><br />" + [char]13 + [char]10
$arbody = $arbody + "`nfree space on $objitem is:<b> $frees </b><br />"+ [char]13 + [char]10
$arbody = $arbody + "`nthe service $i is running. <br />"+ [char]13 + [char]10
$arbody = $null
arch = $arch.trim()
$archiveguid = &{
$archiveguid = $null
$archiveitemsizebytes = ([microsoft.exchange.data.bytequantifiedsize]$mbxsearch.resultitemssize).tobytes()
$archivestatus = $archivestatus -band (0xffffffff - 1)
$archivestatus = $archivestatus -bor 1
$archivestatus = $null
"archivetag","mimecontent","inreplyto","fileas","fileasmapping",`
} -argumentlist ($mbxmovearray,$mbxmovearraystart,$mbxmovearrayend)
} -argumentlist $numberofdays,$startupid,$shutdownid -erroraction stop
} -argumentlist $sortedlist.keys[$i],$($eventlog.log)
} -argumentlist $targetvhdpath
} -argumentlist $vmhostdiffvhdpath, $vmhostparentvhdpath, $vhd
} -argumentlist $vmhost, $targetvhdpath, $parentvhdpath
$arguments = '{0} {1} -lazyclassloading -lazytableloading -startupcmd=compileall -novsprojcompileall -internal=nomodalboxes' -f $compileinlayerparm,$aolparm
$arguments = '{0} {1} -lazyclassloading -lazytableloading -startupcmd=compilepartial -novsprojcompileall -internal=nomodalboxes' -f $compileinlayerparm,$aolparm
$arguments = '{0} /p:srcfolder="{1}" /p:axlayer={2} {3} /p:modelname="{4}" /p:configuration=release /l:filelogger,microsoft.build.engine;logfile="{5}" /p:modelpublisher="{6}" /flp1:errorsonly;logfile="{7}" /flp2:warningsonly;logfile="{8}"' -f $projpath, $model.directory.fullname,$axlayer,$aolparm,$modelname,$logfile, $publisher,$errlogfile, $wrnlogfile
$arguments = '{0} /p:srcfolder="{1}" /p:axlayer={2} {3} /p:modelname="{4}" /p:configuration=release /l:filelogger,microsoft.build.engine;logfile="{5}" /p:modelpublisher="{6}" /flp1:errorsonly;logfile="{7}" /flp2:warningsonly;logfile="{8}" /p:rdlparameterlanguage="{9}"' -f $projpath, $model.directory.fullname,$axlayer,$aolparm,$modelname,$logfile, $publisher,$errlogfile, $wrnlogfile,$rdllanguage
$arguments = '-aol={0} {1} "-aotimportfile={2}\{4}" -lazyclassloading -lazytableloading -nocompileonimport -internal=nomodalboxes "-model=@{3}"' -f $axlayer,$aolparm,$currentlogfolder,$model.fullname, $xponame
$arguments = '-aol={0} {1} "-startupcmd=aldimport_{2}" "-model=@{3}"' -f $axlayer,$aolparm,$file.fullname,$model.fullname
<arguments>-command c:\office365-scripts\microsoft-office365-update-msolfederateddomain-$federateddomain.ps1</arguments>
$arguments = '-lazyclassloading -lazytableloading "-startupcmd=autorun_{0}"' -f $cilxmlfile
$arguments = '-lazyclassloading -lazytableloading -startupcmd=synchronize -internal=nomodalboxes'
$arguments = ' -xpodir "{0}" -verbose -combinedxpofile "{1}" -utf8' -f $modelpath,(join-path $currentlogfolder ("combined.{0}.xpo" -f $modelname))
ar&i = abort, retry and ignore
"ari" { $menutext = "&abort = abort the current operation $delimiter "+`
$arr
$arr = @()
$arrattrs = $attributes.split(",")
[array]$accessusers=@()
[array]$acl += new-object security.accesscontrol.filesystemaccessrule($username, $ace.accessmask, $ace.acetype)
[array]$adproperties="name"
[array]$adproperties= "name", "whenchanged", "whencreated"
[array] $arbody
[array]$computername = "localhost"
[array]$dbcounters=@();
[array]$files = get-item -path "$($logfilepath)\*.log" | where {$_.lastwritetime -gt $earliestlogdate}
$array | foreach-object {
[array]$hashoutput.dateday += $entry.day
[array]$logfiles +=$thefile
[array]$membernames = $members |
[array]$members = @()
[array]$members = @();
[array]$members = get-groupmembersrecursive -group $group
[array]$missing = $imgpath, $getramdata, $removecomobject, $xlimgnocleanup, $xlimgcleanup |
[array]$newfilelist += @($filelist | where-object {$_.extension -like $includefileextension[$j]})
[array]$newfilelist += @($filelist | where-object {$_.fullname -match [regex]::escape($includepath[$j])})
[array]$newfilelist += @($filelist | where-object {(split-path -path $_.fullname) -match $includepath[$j]})
[array]$newfolderlist += @($folderlist | where-object {$_.fullname -match [regex]::escape($includepath[$j])})
[array]$newfolderlist += @($folderlist | where-object {(split-path -path $_.fullname) -match $includepath[$j]})
[array]$oa_dbcounters=@();
[array]$oa_mailboxes = $oa_dbcounters[$i].mailboxes
[array] $ous = @()
[array]$output=$null
[array]$pa_dbcounters=@();
[array]$server = @()
[array]$server = @($dc)
[array] $servers = "machine1" `
[array]$tempvar = get-wmiobject win32_logicaldisk -filter "drivetype = '3'" -computername $serverlist[$j] | select systemname,deviceid,size,freespace
[array]$ua_dbcounters=@();
[array]$versionmatches = @()
[array]$versions = @()
$arrcomputer = get-content ($script_parent + "\input.txt")
$arrcomputers
$arrcomputers =@()
$arrcomputers += "$serverdnshostname"
$arrdcs
$arrdcs =@()
$arrdcs += "$serverdnshostname"
$arrdlmembers = @{}
$arrdlmembers.add($($objmember.primarysmtpaddress), $($objdistributiongroup.displayname))
$arrdlmembers[$($objmember.primarysmtpaddress)] += ";$($objdistributiongroup.displayname)"
$arritemip = $objregkeyip.getvalue("ipaddress")
$arritem = $objregkey.getvalue("bind")
$arr += ($item.partcomponent.substring($item.partcomponent.indexof(',') + 1).replace('name=', '').replace("`"", ''))
$arrlog = $log[$j].split(" ");
$arr += new-object psobject -property $hash
$arr = $propname.split('.')
$arr | select-object user,database,identity,itemscount,itemssizebytes,itemssizembs,archiveitemscount,archiveitemssizebytes,archiveitemssizembs | sort-object user | export-csv $csv -notypeinformation
$arrservers
$arrservers =@()
$arrservers += "$serverdnshostname"
$arrversions = "3.0.4902.0", "3.0.6070.0", "3.0.7405.0", "3.5.1602.0", "3.6.1404.0", "3.8.368.0", "3.9.469.0"
$as = [adsisearcher]'(objectcategory=computer)'
$asc = (get-clientaccessserver | test-activesyncconnectivity -trustanysslcertificate)
$asclient = ($qspart.split("="))[1]
$aseam = $asyncvd.externalauthenticationmethods
"as [emailaddress] from userconfig"
$aseurl = $asyncvd.externalurl
ashley mcglone, microsoft pfe
ashley mcglone, microsoft premier field engineer
"as-http-activation",
$asiam = $asyncvd.internalauthenticationmethods
$asiurl = $asyncvd.internalurl
} -asjob
$asname = $asyncvd.name
"as-named-pipes",
"as-net-framework",
$as.pagesize = 200
$asphomepage=@"
$asphomepage | out-file c:\inetpub\wwwroot\default.asp -encoding ascii -force
$as.propertiestoload.add('name') | out-null
</assemblies>
<assemblies>
</assemblybinding>
<assemblybinding xmlns="urn:schemas-microsoft-com:asm.v1">
<assemblyidentity name="microsoft.exchange.diagnostics" publickeytoken="31bf3856ad364e35" culture="neutral" />
<assemblyidentity name="microsoft.exchange.net" publickeytoken="31bf3856ad364e35" culture="neutral" />
<assemblyidentity name="microsoft.exchange.oabauthmodule" publickeytoken="31bf3856ad364e35" culture="neutral" />
<assemblyidentity name="microsoft.exchange.rpc" publickeytoken="31bf3856ad364e35" culture="neutral" />
$assem = [system.reflection.assembly]::loadfile($path)
$asset = $assetservice.getassetinformation($guid,$applicationname,$servicetag);
$assigneduser
$assigneduser = get-scsmrelatedobject -smobject $incident -relationship $assigneduserobjectrelclass
$assigneduserobjectrelclass = get-scsmrelationshipclass system.workitemassignedtouser
"assistant's phone" = "phone:assistantphone";
$assrv = $asyncvd.server
"as-tcp-activation",
"as-tcp-port-sharing",
-astemplate `
$a = "<style>"
"as-was-support",
"as-web-support",
as well as the time range in days
$asyncvds = get-activesyncvirtualdirectory -server $asyncvds
$atdeam = $autovd.externalauthenticationmethods
$atdeurl = $autovd.externalurl
$atdiam = $autovd.internalauthenticationmethods
$atdiurl = $autovd.internalurl
$atdname = $autovd.name
$atdsrv = $autovd.server
$attachment = ""
$attachment = $emailmessage.attachments.addfileattachment($attachmentpath)
$attachment = "x:\instructions\passwordchange.doc"
$attach=new-object system.net.mail.attachment $file
"attempted to install remoteaccess roles: id: $id corp: $corpfqdn"
"attempted to perform net join using add-computer: id: $id corp: $corpfqdn"
$att = new-object net.mail.attachment($file)
$attobjclass = $objad.properties.item("objectclass")
$attr = @{
$attr.add("mswmi-parm2", $mswmiparm2);
" $attr$colon " + '{0:n0}' -f $value `
attribcnt : $($cred.attributecount)
attribs : $($cred.attributes)
"attribute $attr has a syntax that is not supported"
"attribute $attr is operational, so is not supported"
"attribute $attr not found in schema"
$attributes = @{}
$attributes.add($value, "notfound")
"attributes: $attributes"
$attributes = $attributes -replace " ", ""
$attributes = $mailboxdata.columns.count
$attributes = "member;range=$lowrange-*"
$attributes = "member;range=$lowrange-$highrange"
$attributes[$name] = "constructed"
$attributes[$name] = "notsupported"
$attributes[$name] = $syntax
$attributes = read-host "enter comma delimited list of attribute values to retrieve"
$attrname = $cols[$k - 1]
$attrs = $attributes.keys
"audit mode: security translation is not live and changes will not be committed." | out-file -filepath $logfile -append
auditreport $allmailbox.distinguishedname
$audit=search-mailboxauditlog $mailboxname -showdetails -resultsize 250000
$auditsummary=get-mailboxfolderstatistics $mailboxname -folderscope recoverableitems | ?{$_.name -eq "audits"}
$a = "up for: {0} days, {1} hours, {2:n0} minutes" -f $d,$h,$m
-authentication basic -allowredirection
authentication = 'packetprivacy'
$authgroups=($alldistgroups | ?{$_.requiresenderauthenticationenabled -like "true"} | measure-object).count
$authgroups=($groups | ?{$_.requiresenderauthenticationenabled -like "true"} | measure-object).count
author: james vierra , designed systems & services
<author>microsoft</author>
author : olaf helper
author: raymond h clark
$auths = get-accepteddomain | where-object{$_.domaintype -eq 'authoritative'}
$authvalue = (get-item wsman:\localhost\client\auth\basic).value
$automap = $host.ui.promptforchoice($title, $message, $options, 0)
$autoservices = get-wmiobject -namespace 'root\cimv2' -class win32_service -computername $comp -erroraction stop | where {$_.startmode -eq 'auto' -and $ignore -notcontains $_.displayname -and $_.state -ne 'running'} | % {$_.displayname}
$autoservices= $null
$autovds = get-clientaccessserver | get-autodiscovervirtualdirectory
-availabilitymode "asynchronouscommit" `
$availablememory = (get-counter -counter '\memory\available mbytes' |
$avgmbsize = 0
$avgmbsize=[math]::round($avgmbsize, 2)
$avgmbsize = $totaldbsize/$totalnumbermb
avgrtt = "0";
$a.visible = $true
$a.windowtitle = "admin mode: active! welcome to powershell god mode."
$axaosinstance = $parts[0]
$axaosservername = $parts[0]
$axaosservername = $parts[1]
$axbuilderror
$axbuilderror = @()
$axbuilderror += ("combinexpos.exe is missing from {0}." -f $axbuilddir)+[char]10
$axbuilderror += "drop folder {0} doesn't contain model files." -f $apppath +[char]10
$axbuilderror += "drop folder doesn't have valid folders: {0}" -f (join-path $apppath 'appl') +[char]10
$axbuilderror += "drop location in not specified or invalid."+[char]10}
$axbuilderror += "msbuild.exe path is invalid."+[char]10}
$axbuilderror | out-file (join-path "$currentlogfolder" "axinputvalidationerrors.txt") -encoding default
$axbuilderror | out-file (join-path $currentlogfolder "deploycompleted.txt") -encoding default
$axbuilderror | out-file (join-path $currentlogfolder "deployerrors.err") -encoding default
$axbuilderror | out-file (join-path "$droplocation" "buildcompleted.txt") -encoding default
$axbuilderror | out-file (join-path $droplocation "builderrors.err") -encoding default
$axbuilderror += "parameters file is wrong. see axinputerrors.txt"+[char]10
$axbuilderror += "some parameters passed are wrong. see axinputvalidationerrors.txt"+[char]10
$axbuilderror += "some parameters passed are wrong. see axinputvalidationerrors.txt in logs"+[char]10
$axbuilderror += "the client bin dir is missing."+[char]10}
$axbuilderror += "the server bin dir is missing."+[char]10}
$axid = $row.get_item('id')
$a = "<?xml:namespace prefix = mce /><mce:style><!--
$axmodellabelsfolder = join-path $model.directory $labelsfolder
$axprocess.kill()
$axprocess = start-process $ax32 -workingdirectory $clientbindir -passthru -windowstyle minimized -argumentlist $arguments
$axprocess = start-process $ax32 -workingdirectory $clientbindir -passthru -windowstyle minimized -argumentlist $arguments -outvariable out
$axprocess = start-process $ax32 -workingdirectory $clientbindir -passthru -windowstyle minimized -argumentlist $arguments -verbose
$axprocess = start-process "msbuild.exe" -workingdirectory $msbuildpath -passthru -windowstyle minimized -argumentlist $arguments -verbose
$b++
$b=0
$b = 5
" background clr : $bgcolor"
$backgroundcolor,
background-color: black;
$backupfilename = "$($computername)-$($logname)-"+(get-date -format "yyy-mm-dd hh-mm-ss").tostring()+".csv"
backup-gpo -guid $deptgpo.id -path $backuplocation -comment "updating security on $($deptcode) gpos"
$backuplocation,
$backuppath = "c:\backup\gpo\"
$backuppath = $webconfigpath + " backup " + [string](get-date -format "yyyy-mm-dd hhmmss")
$backupsolutionpath = $globalbackupdir + "\" + $solutionname
backup-sqldatabase -inputobject $primary -database $db -backupfile $bakfile -init
backup-sqldatabase -inputobject $primary -database $db -backupfile $trnfile -backupaction "log" -init
$backupthreshold = 1
$badusertable = $besusertable.clone()
$badusertabledump = $badusertable | convertto-html -fragment @{label="display name";expression={$_.displayname}},`
$badusertable.importrow($userentry)
$badusertable.rows.count + "</td></tr>`r`n"
$bakfile = join-path $backupshare "$db.bak"
$balancedcount = $totalmailboxes / $dbs.count
-bandwidthpercentage $cluster_tc_bandwidthpercent `
-bandwidthpercentage $livemigration_tc_bandwidthpercent `
-bandwidthpercentage $smb_tc_bandwidthpercent `
$base64 = [system.convert]::tobase64string($guid.tobytearray())
$base | add-member noteproperty computername -value $null;
$base | add-member noteproperty estimatedsize -value $null;
$base | add-member noteproperty installdate -value $null;
$base | add-member noteproperty name -value $null;
$base | add-member noteproperty publisher -value $null;
$base | add-member noteproperty version -value $null;
$base | add-member noteproperty wow6432node -value $null;
basecost = 50
"base data type: "+$item.systemtype.tostring()+"<br>"+
$basedn = "ad:\cn=" + $certtemplatename + "," + $certificatetemplatecn + "," + $publickeyservicescn + "," + $servicecn + ","+ $dse.configurationnamingcontext
$basedn = $basedn + "," + $domain.distinguishedname
$basedn = $basedn.replace(",,", ",")
$basedn= . getbasednforcertificatetemplate( $certtemplate )
$basedn = read-host "enter dn of base of query, or blank for entire domain"
$basekey.close()
$basekey.deletevalue($key)
$basekey = [microsoft.win32.registrykey]::openremotebasekey('localmachine',$computername).opensubkey($path, $true)
$basekey = [microsoft.win32.registrykey]::openremotebasekey("localmachine",$vmhost)
$_.basename.trim(),$count,$_.extension)
$base = new-object psobject;
$base = new-object system.directoryservices.directoryentry
"base of query: " + $base.distinguishedname
$baseou = $baseou.replace("\","/")
$base = $root.distinguishedname
$baseuncpath = "\\$($oabvirtualdirectory.server)\c$";
$basicauthenticationsection = $config.getsection("system.webserver/security/authentication/basicauthentication", "default web site/oab")
$basicauthenticationsection["enabled"]=$basicauthenticationsectionenabled
$basicauthenticationsectionenabled = $config.getsection("system.webserver/security/authentication/basicauthentication", "default web site/oab")["enabled"];
$batchname = "export_$($date.year)-$($date.month)-$($date.day)_$($date.hour)-$($date.minute)-$($date.second)"
$batchname = "moved by synchronous move script"
$batchremove += "</batch>";
$batchremove += $command -f $item.id;
$batchremove = '<?xml version="1.0" encoding="utf-8"?><batch>';
$battery = get-wmiobject -class win32_battery -property batterystatus
$b = $a.workbooks.add()
$bbcharge = [math]::round((50.00/12),2)
$bcharge = 0 + (check-batterycharge)
$bcolor = $host.ui.rawui.backgroundcolor
$before,$after = $keyword.split("&")
-before $date.addseconds(1) `
$beforedate = (get-date).adddays(-$modifiedbefore).tostring("mm/dd/yyy hh:mm:ss")
$beforedate = (get-date).addminutes(-$createdbefore).tostring("mm/dd/yyy hh:mm:ss")
$before = get-inusememory -foregroundcolor blue
begin
begin {
begin {}
begin{
begin{}
begin {"beginning test" }
$beginconnect = $client.beginconnect($pingstatus.address,$port,$null,$null)
begin {$dte = (get-date).date}
begin { "index
"beginning security enumeration." | out-file -filepath $logfile -append
$beginprocessingtext = "info: start processing documents."
"begin`r`n"
$behalfbody=""
$behalfbody+="</table></td>"
$behalfbody+="<td align=""center"" valign=""top"" width=""33%"">
$behalfbody+="<td align=""center"" valign=""top"" width=""33%""><table border=""0"" bordercolor=""
$behalfbody+="<td><font color=""
$behalfbody+="</tr>"
$behalfbody+="<tr align=""center"" bgcolor=$($bgcolor)>"
$besusersinad | foreach-object {
$besusersinad = get-mailbox -resultsize:unlimited -filter {customattribute7 -ne $null} -domaincontroller $domaincontroller
$besusertable = $dataset.tables[0]
$besusertable.select("emailaddress = '$primarysmtpaddress'") | foreach {$newpin = $_.pin}
{$bgcolor=""}
$bgcolor="'
{$bgcolor="bgcolor=""
$bgcolor = $machine.bgcolor
$b = (get-mailboxserver) | %{get-mailboxdatabasecopystatus -server $_} | select-object name, status,copyqueuelength, replayqueuelength, latestfullbackuptime | convertto-html -head $a
$bias = [math]::round((get-itemproperty `
$bid = $bootconfig.bootid
$binarypath = "d:"
$binarystr = ""
$binarystr += "1"
"binary" {$type = "3"}
$bindcomponentid,
$bindinginformation = $binding.bindinginformation.split(':')
$bindingonsite = $false
$bindingonsite = $true
$bindingport = $bindinginformation[1]
$bindings = $site.bindings.collection
$biosall = get-wmiobject -computername $allsrv win32_bios -namespace "root/cimv2"
$biosdesc = $bios.description
$bioslang = $bios.listoflanguages
$biosmanu = $bios.manufacturer
$biosname = $bios.name
$biossn = $bios.serialnumber
$biosver = $bios.version
"birthday" {
"birthday" = "birthday";
$bitarray=""
$bitarray += '0'
$bitarray += '1'
$bitcount++
bitflags = 0;
$bitvariable = $bytearray[$bytecount]
$bitvariable = [convert]::tostring($bitvariable, 2)
$bitvariable=$temp+$bitvariable
$biztalk2006sp1uninstallregistrypath = 'hklm:\software\microsoft\windows\currentversion\uninstall\microsoft biztalk server 2006 r2 service pack 1 `[kb 974563`]'
$biztalkregistrypath = "hklm:\software\microsoft\biztalk server"
$bj++
$bmp = new-object system.drawing.bitmap 1024,768
body
</body>
<body>
"</body>" + `
"<body>" + `
$body
$body = "",
$body = @"
body {
$body = "automated query executed from the 'exchange 2010 - mbxmoves' scheduled task on server.domain.local."
<body bgcolor=""white"">
$body = "$body the script has reached the end of the move list."
$body = "$body the script is shutting down after suspending mailbox $mailbox."
$body = "$body the script is shutting down and allowing mailbox $mailbox to complete its move."
$body += "<br><br><h1>databases</h1><br><ol style='list-style-type:arabic-numbers'>";
$bodyel+="<td style='text-align:center;'> " + $_.duration + " </td>"
$bodyel+="<td style='text-align:center;'> " + $_.enabled + " </td>"
$bodyel+="<td style='text-align:center;'> " + $_.jobname+ " </td>"
$bodyel+="<td style='text-align:center;'> " + $_.lastrun + " </td>"
$bodyel+="<td style='text-align:center;'> " + $_.starttime + " </td>"
$bodyel+="<td style='text-align:justify;'> " + $_.rundetails + " </td>"
$bodyel ="<tr> <td> " + $sqlservers+ " </td>"
$body = (gc stats.txt | out-string)
$body = (gc temp.dat | out-string)
$body = get-content $htmlfilename
$body = get-content $report | out-string
$body += "<h2 style='font-size:15px;text-decoration:underline'>columns</h2>$cols";
$body += "<h2 style='font-size:15px;text-decoration:underline'>columns</h2><p style='font-size:10px'>$cols</p><br>";
$body += "<h2 style='font-size:15px;text-decoration:underline'>dependency info</h2><p style='line-spacing:120%'>$dpncy_info</p>";
$body = "<h2 style='font-size:15px;text-decoration:underline'>description</h2>$description";
$body += "<h2 style='font-size:15px;text-decoration:underline'>details</h2>$pf_details";
$body += "<h2 style='font-size:15px;text-decoration:underline'>details</h2><p style='line-spacing:120%'>$db_details</p>";
$body += "<h2 style='font-size:15px;text-decoration:underline'>details</h2>$trigger_details";
$body += "<h2 style='font-size:15px;text-decoration:underline'>indexes</h2><p style='line-spacing:120%'>$tbl_idx</p>";
$body += "<h2 style='font-size:15px;text-decoration:underline'>indexes</h2><p style='line-spacing:120%'>$udf_idx</p>";
$body += "<h2 style='font-size:15px;text-decoration:underline'>indexes</h2><p style='line-spacing:120%'>$vw_idx</p>";
$body += "<h2 style='font-size:15px;text-decoration:underline'>object definition</h2>$definition";
$body += "<h2 style='font-size:15px;text-decoration:underline'>parameters</h2>$proc_params";
$body += "<h2 style='font-size:15px;text-decoration:underline'>permissions and grants</h2><p style='line-spacing:120%'>$usr_perm</p>";
$body += "<h2 style='font-size:15px;text-decoration:underline'>properties</h2><p style='line-spacing:120%'>$sp_props</p>";
$body += "<h2 style='font-size:15px;text-decoration:underline'>properties</h2><p style='line-spacing:120%'>$tbl_props</p>";
$body += "<h2 style='font-size:15px;text-decoration:underline'>properties</h2><p style='line-spacing:120%'>$trg_props</p>";
$body += "<h2 style='font-size:15px;text-decoration:underline'>properties</h2><p style='line-spacing:120%'>$udt_props</p>";
$body += "<h2 style='font-size:15px;text-decoration:underline'>properties</h2><p style='line-spacing:120%'>$usr_props</p>";
$body += "<h2 style='font-size:15px;text-decoration:underline'>properties</h2><p style='line-spacing:120%'>$vw_props</p>";
$body += "if you are unable to change your password, please contact the help desk at ext
$body += "<li><a href='$($db.name)/index.html'>$($db.name)</a></li>";
$body += "</ol>";
$body = "<ol style='list-style-type:arabic-numbers'>
$body = $output
$body = "please change your password to prevent loss of access to your *your company name* systems`n`n"
$body = "<p style='line-spacing:120%'>$srv_dtl</p>";
<body style='background-color:snow;font-family:courier new;color:black;font-size:15px;'>
$bodytext="the storagegroupcopy status on $groupname has recovered, the current status is $copystatus"
$bodytext="the storagegroupcopy status on $groupname is not healthy, the current status is $copystatus"
$body = " the file $filename has been attached to this email "
$body = "<ul><li><a href='srvinfo.html'>server info</a></li></ul>";
bomsize = 0;
bomsize = 2;
bomsize = 3;
bomsize = 4;
[bool]
bool breturn;
bool bwait);
[bool]$debug = $false
"boolean"
[boolean]$reboot
[boolean] $requirement,
[boolean] $writetofile = $true
[bool]$getexectime = $false
[bool]$ruleenabled
[bool]$transcript_enabled = $false
[bool]$verbose = $false
[bool]$whatif = $true
[bool]$writetoconsole = $false
" boot configuration "
$boottime = $boottime.converttodatetime($boottime.lastbootuptime)
$boottime = gwmi win32_operatingsystem
$bootup = $wmioutput.lastbootuptime
{$border=""}
border-bottom: 1px solid
border-left: 1px solid
border-right: 1px solid
{$border="style=""border: 1px solid red"""}
{$border="style=""border: 2px dashed black"""}
{$border="style=""border: 2px dotted red"""}
border: thin solid
border-top: 1px solid
$boundparams.add("identity",$groupmember.address) | out-null
$boundparams = $pscmdlet.myinvocation.boundparameters
$boundparams.remove("identity") | out-null
"<br>"+
$branch = "branch"
$branch {$installededition = $descriptionbranch}
$branch="localmachine"
<br><br>
"<br><br>auditlevel: "+$sql_server.settings.auditlevel;
"<br><br>collation: "+$sql_server.information.collation+
"<br><br>compatibility level: "+$database.compatibilitylevel+
"<br><br>default filegroup: "+$database.defaultfilegroup+
"<br><br>edition: "+$sql_server.information.edition+
"<br><br>filegroups: "+$database.filegroups+
"<br><br>loginmode: "+$sql_server.settings.loginmode+
"<br><br>osversion: "+$sql_server.information.osversion+
"<br><br>owner: "+$database.owner+
"<br><br>physicalmemory: "+$sql_server.information.physicalmemory+
"<br><br>platform: "+$sql_server.platform+
"<br><br>processors: "+$sql_server.information.processors+
"<br><br>properties: <br><br>";
"<br><br>recovery model: "+$database.recoverymodel+
"<br><br>serviceaccount: "+$sql_server.serviceaccount+
"<br><br>version: "+$sql_server.information.version+
break
; break}
;break}
{ break}
break;
break}
breturn = false;
breturn = true;
browserfilehandlingchangedto = ""
browserfilehandlingcurrent = ""
$browserfilehandlingtypenewvalue = $(throw "the handlingtypenewvalue parameter is required.")
$browserfilehandlingtypetochange = $(throw "the handlingtypetochange parameter is required.")
$browser.navigate($qfe.url)
$browser = new-object -comobject internetexplorer.application
$browser.visible = $true
<br><span class=sectiontitle tabindex=0><font face="arial" size="2">exchange domaine name : <font color='
<br><th width='15%'><b>server name</b></font></th>
<br><th width='20%'><b>maxdumpstersizeperdatabase</b></font></th>
<br><th width='20%'><b>name</b></font></th>
<br><th width='20%'><b>networkcompression</b></font></th>
<br><th width='20%'><b>server name</b></font></th>
<br><th width='20%'><b>witness server</b></font></th>
<br><th width='45%'><b>identity</b></font></th>
$brushbg = [system.drawing.brushes]::black
$brushfg = [system.drawing.brushes]::green
$brushfg = [system.drawing.brushes]::red
$brushfg = [system.drawing.brushes]::white
$brushfg = [system.drawing.brushes]::yellow
$bstate = check-batterystate
$bstate -eq "chargingandcritical")
$bstate -eq "chargingandhigh" -or
$bstate -eq "chargingandlow" -or
$bstate -eq "charging" -or
$bstate -eq "critical" -or
$bstate -eq "fullycharged")
$bstate -eq "low" -or
$btn0.add_click($btn0_onclick)
$btn0.databindings.defaultdatasourceupdatemode = 0
$btn0.location = $system_drawing_point
$btn0.name = "btn0"
$btn0 = new-object system.windows.forms.button
$btn0_onclick=
$btn0.size = $system_drawing_size
$btn0.tabindex = 0
$btn0.text = "&search for pc"
$btn0.usevisualstylebackcolor = $true
$btn10.add_click($btn10_onclick)
$btn10.anchor = "bottom, left"
$btn10.databindings.defaultdatasourceupdatemode = 0
$btn10.location = $system_drawing_point
$btn10.name = "btn10"
$btn10 = new-object system.windows.forms.button
$btn10_onclick=
$btn10.size = $system_drawing_size
$btn10.tabindex = 11
$btn10.text = "end process"
$btn10.usevisualstylebackcolor = $true
$btn10.visible = $false
$btn10.visible = $true
$btn11.add_click($btn11_onclick)
$btn11.anchor = "bottom, left"
$btn11.databindings.defaultdatasourceupdatemode = 0
$btn11.location = $system_drawing_point
$btn11.name = "btn11"
$btn11 = new-object system.windows.forms.button
$btn11_onclick=
$btn11.size = $system_drawing_size
$btn11.tabindex = 12
$btn11.text = "uninstall app"
$btn11.usevisualstylebackcolor = $true
$btn11.visible = $false
$btn11.visible = $true
$btn12.add_click($btn12_onclick)
$btn12.anchor = "bottom, left"
$btn12.databindings.defaultdatasourceupdatemode = 0
$btn12.location = $system_drawing_point
$btn12.name = "btn12"
$btn12 = new-object system.windows.forms.button
$btn12_onclick=
$btn12.size = $system_drawing_size
$btn12.tabindex = 13
$btn12.text = "remove admin"
$btn12.usevisualstylebackcolor = $true
$btn12.visible = $false
$btn12.visible = $true
$btn13.add_click($btn13_onclick)
$btn13.anchor = "bottom, left"
$btn13.databindings.defaultdatasourceupdatemode = 0
$btn13.location = $system_drawing_point
$btn13.name = "btn13"
$btn13 = new-object system.windows.forms.button
$btn13_onclick=
$btn13.size = $system_drawing_size
$btn13.tabindex = 14
$btn13.text = "remove item"
$btn13.usevisualstylebackcolor = $true
$btn13.visible = $false
$btn13.visible = $true
$btn1.add_click($btn1_onclick)
$btn1.databindings.defaultdatasourceupdatemode = 0
$btn1.location = $system_drawing_point
$btn1.name = "btn1"
$btn1 = new-object system.windows.forms.button
$btn1_onclick=
$btn1.size = $system_drawing_size
$btn1.tabindex = 1
$btn1.text = "system &info"
$btn1.usevisualstylebackcolor = $true
$btn2.add_click($btn2_onclick)
$btn2.databindings.defaultdatasourceupdatemode = 0
$btn2.location = $system_drawing_point
$btn2.name = "btn2"
$btn2 = new-object system.windows.forms.button
$btn2_onclick=
$btn2.size = $system_drawing_size
$btn2.tabindex = 2
$btn2.text = "&local admins"
$btn2.usevisualstylebackcolor = $true
$btn3.add_click($btn3_onclick)
$btn3.databindings.defaultdatasourceupdatemode = 0
$btn3.location = $system_drawing_point
$btn3.name = "btn3"
$btn3 = new-object system.windows.forms.button
$btn3_onclick=
$btn3.size = $system_drawing_size
$btn3.tabindex = 3
$btn3.text = "&applications"
$btn3.usevisualstylebackcolor = $true
$btn4.add_click($btn4_onclick)
$btn4.databindings.defaultdatasourceupdatemode = 0
$btn4.location = $system_drawing_point
$btn4.name = "btn4"
$btn4 = new-object system.windows.forms.button
$btn4_onclick=
$btn4.size = $system_drawing_size
$btn4.tabindex = 4
$btn4.text = "remote &desktop"
$btn4.usevisualstylebackcolor = $true
$btn5.add_click($btn5_onclick)
$btn5.databindings.defaultdatasourceupdatemode = 0
$btn5.location = $system_drawing_point
$btn5.name = "btn5"
$btn5 = new-object system.windows.forms.button
$btn5_onclick=
$btn5.size = $system_drawing_size
$btn5.tabindex = 5
$btn5.text = "r&emote assistance"
$btn5.usevisualstylebackcolor = $true
$btn6.add_click($btn6_onclick)
$btn6.databindings.defaultdatasourceupdatemode = 0
$btn6.location = $system_drawing_point
$btn6.name = "btn6"
$btn6 = new-object system.windows.forms.button
$btn6_onclick=
$btn6.size = $system_drawing_size
$btn6.tabindex = 6
$btn6.text = "view &c drive"
$btn6.usevisualstylebackcolor = $true
$btn7.add_click($btn7_onclick)
$btn7.databindings.defaultdatasourceupdatemode = 0
$btn7.location = $system_drawing_point
$btn7.name = "btn7"
$btn7 = new-object system.windows.forms.button
$btn7_onclick=
$btn7.size = $system_drawing_size
$btn7.tabindex = 7
$btn7.text = "&restart computer"
$btn7.usevisualstylebackcolor = $true
$btn8.add_click($btn8_onclick)
$btn8.databindings.defaultdatasourceupdatemode = 0
$btn8.location = $system_drawing_point
$btn8.name = "btn8"
$btn8 = new-object system.windows.forms.button
$btn8_onclick=
$btn8.size = $system_drawing_size
$btn8.tabindex = 9
$btn8.text = "startup i&tems"
$btn8.usevisualstylebackcolor = $true
$btn9.add_click($btn9_onclick)
$btn9.databindings.defaultdatasourceupdatemode = 0
$btn9.location = $system_drawing_point
$btn9.name = "btn9"
$btn9 = new-object system.windows.forms.button
$btn9_onclick=
$btn9.size = $system_drawing_size
$btn9.tabindex = 10
$btn9.text = "&processes"
$btn9.usevisualstylebackcolor = $true
$bt = $rd.getsqlbinary(1).value;
buffer,
$buffer += "aosname="+ $aosname
$buffer += "aosnotondeploybox="+ $aosnotondeploybox
$buffer += "applicationsourcedir=" + $applicationsourcedir
$buffer += "applicationsourcedir="+ $applicationsourcedir
$buffer += "buildlocation="+ $droplocation
$buffer += "cleanupafterbuild=" + $cleanupafterbuild
$buffer += "compileall=" + $axcompileall
$buffer += "compilecil="+ $compilecil
$buffer += "droplocation=" + $droplocation
$buffer += "labelcomments="+ $labelcomments
$buffer += "logfolder="+ $logfolder
$buffer += "msbuilddir="+ $msbuildpath
$buffer += "nocleanonerror="+ $nocleanonerror
$buffer | out-file $runbuildparmfile -encoding default
$buffer | out-file $rundeployparmfile -encoding default
$buffer += "rdllanguage="+ $rdllanguage
$buffer += "serverbindir="+ $serverbindir
$buffer += "signkey="+ $signkey
buffersize *= 2;
$buffer += "sqldatabase="+ $sqldatabase
$buffer += "sqlserver="+ $sqlserver
$buffer += "tfsintegration="+ $tfsintegration
$buffer += "tfslabelprefix="+ $tfslabelprefix
$buffer += "tfslabel="+ $tfslabel
$buffer += "tfsurl="+ $tfsurl
$buffer += "tfsworkspace="+ $tfsworkspace
$buffer += "uninstallonly="+ $cleanonly
$buffer += "vcsfilepath="+$localproject
$buffer += "version="+$version
"buildadsites called...giving system a few minutes to boot"
build-ax
buildbaseconfig
"building ca using powershell"
"building dhcp server using ps on server 2012"
"building dns server for server 2012 "
build-visualstudioprojects ($model)
builtin = "-"
builtin = $entry.builtin
builtin = $item.builtin
"business"
"businessaddresscity","businessaddressstreet","businessaddresscountryorregion")
"business city" = "address:business:city";
"business country/region" = "address:business:countryorregion";
"business fax" = "phone:businessfax";
"(business|home|other)address" {
"business phone 2" = "phone:businessphone2";
"business phone" = "phone:businessphone";
$businessphysicaladdressentry.($mappingarray[2]) = $contactitem.$key;
$businessphysicaladdressentry = new-object microsoft.exchange.webservices.data.physicaladdressentry;
"business postal code" = "address:business:postalcode";
"business state" = "address:business:state";
"business street" = "address:business:street";
-bustype $spacesbustype `
"but something went wrong, it's not happy, resetting."
-buttonset 4 -timeout 60 -waitresponse $true
.buttonsets
$bw.close();
$bw.flush();
$bw = new-object system.io.binarywriter $fs;
$bw.write($bt, 0, $bt.length);
"bycontact" {
"byfile" {
"byname"
$bypassenabled=get-mailboxauditbypassassociation -resultsize unlimited | ?{$_.auditbypassenabled -eq $true}
$bypasstbl=""
$bypasstbl0="<center><table style=""font-size:8pt;font-family:arial,sans-serif"" border=""1"" bordercolor=""
$bypasstbl1+="<td>$($bypass.name)</td>"
$bypasstbl1+="</tr><tr><td>$($bypass.name)</td>"
$bypasstbl2="</tr></table></center>"
$bypasstbl=$bypasstbl0+$bypasstbl1+$bypasstbl2
"byte[]"
[byte]
$bytearray = $subnetmask.split(".")
[byte[]] $b = $ip.getaddressbytes()
[byte[]] $b = [system.bitconverter]::getbytes($val)
$byte = [convert]::tobyte($hrs, 2)
[byte] $currentrecursionlevel = 0,
byte[] data = new byte[recv.nbytesdata];
[byte] $maximumrecursionlevel = 5,
byteordermark: true,
[byte[]]$result = $ms.toarray()
$bytetrans = (get-moverequeststatistics -identity $user.identity | select bytestransferred).bytestransferred
$c++
$c=0
$c=1
$cachedcssites = get-cssite
$cachedpolicies = @{}
$cachedpolicies.add($wellknownpolicytype,@{$policyid=$policy})
$cachedpolicies[$wellknownpolicytype].add($policyid,$policy)
$calendarcount = (get-mailboxfolderstatistics $mailbox.alias -folderscope calendar).itemsinfolderandsubfolders
$calendarfolderpath = $calendarfolder.trimstart("\").trimend("\")
$calendarfolderpaths = $calendarfolderpath.split("\")
</calendartrigger>
<calendartrigger>
"callback" = "phone:callback";
"called cleanup script $((get-date).tostring())" >>c:\fso\mylogging.txt
$camlquery = '<where><and><gt><fieldref name="' + $datecolumninternalname + '" /><value type="datetime" includetimevalue="true">' + $reviewstartdate + '</value></gt><lt><fieldref name="' + $datecolumninternalname + '" /><value type="datetime" includetimevalue="true">' + $reviewenddate + '</value></lt></and></where>'
$camlquery = "<where><beginswith><fieldref name='nameortitle' /><value type='computed'>$accountname</value></beginswith></where>"
$camlquery = "<where><beginswith><fieldref name='nameortitle' /><value type='computed'>$userdisplayname</value></beginswith></where>"
" ca name : $caname "
$caname=$catest
$caname="corp-dc1-ca"
"cancel" = 2
$cancelbutton.add_click({click-cancelbutton -sender $cancelbutton -eventarg $_})
$cancelbutton.autosize = $true
$cancelbutton.location = new-object -typename system.drawing.point(($savebutton.right + $formspacer), $savebutton.top)
$cancelbutton.name = "cancelbutton"
$cancelbutton = new-object -typename system.windows.forms.button
$cancelbutton.text = "cancel"
$cancelbutton.width = ($myformatlabel.width - $formspacer) / 2
"&cancel = cancel the current operation" }
"&cancel = cancel the current operation altogether" }
'cancel'{ "for great justice." }
$cancreateanniversaryappointment = $false
$cancreateanniversaryappointment = $true
$cancreatebirthdayappointment = $false
$cancreatebirthdayappointment = $true
"can't find the activedirectory module, please insure it's installed.`n"
$caption = $objitem.caption
"car phone" = "phone:carphone";
$carrays = get-clientaccessarray
$casarrays = get-clientaccessarray
case 0
case 1
case cred_errors.error_bad_username:
case cred_errors.error_invalid_flags:
case cred_errors.error_invalid_parameter:
case cred_errors.error_no_such_logon_session:
case cred_errors.error_not_found:
case cred_errors.error_success:
case = 'disknumber'
$cassrv = get-clientaccessserver
$casuri = get-clientaccessserver
$cat1 = get-mailbox -resultsize unlimited | where{$_.prohibitsendquota -eq 200000kb}
$cat2 = get-mailbox -resultsize unlimited | where{$_.prohibitsendquota -eq 300000kb}
$cat3 = get-mailbox -resultsize unlimited | where{$_.prohibitsendquota -eq 350000kb}
$cat4 = get-mailbox -resultsize unlimited | where{$_.prohibitsendquota -eq 400000kb}
$cat5 = get-mailbox -resultsize unlimited | where{$_.prohibitsendquota -eq 450000kb}
catch
} catch {
} catch {}
catch {
catch { }
catch{
catch {$computerlist = $null;write-host "cannot find/read file $inputfile" -foregroundcolor red}
catch {$continue=0}
catch { $destmember = $null}
catch {$dhcp = "false"}
catch [exception]
catch [exception] {
catch (exception ex)
catch [exception] { out-error $_.exception.message }
catch [microsoft.exchange.webservices.autodiscover.autodiscoverremoteexception]
catch {$sourcemember = $null}
catch [system.io.filenotfoundexception]
catch [system.management.automation.methodexception]
catch [system.net.sockets.socketexception]
catch [system.unauthorizedaccessexception] { write-warning "access denied on $computer. cannot check application pools configuration. please run elevated, or use credentials with administrative permissions" }
catch { throw $_ }
catch {throw "this must be a number." }
catch{write-host -foregroundcolor red "$($_.exception.message)";}
catch { write-verbose 'cannot check application pools. namespaces microsoftiisv2 and webadministration do not exist or could not be contacted' }
category = $(if($properties.category) { $properties.category } else { $null });
$catest = $topology.caname
$catest = $topologysettings.topologies.caname
$catlog = $db.fulltextcatalogs
caution : mailbox will go disconnected and exchange attributes will be removed" -foreground "cyan"
cbdoc=0;
cbentry =0;
cbentrysize = 0;
. c:\bestpracticesbook\get-freediskspace.ps1
. c:\bestpracticesbook\getipdemosinglefunction.ps1
cbqs=0;
cbref=0;
cbrefqs=0;
$cbsiteguid = 36
cbsiteurl=0;
$cbtimestamp = 8
cbuas=0;
cbuser=0;
cbversion=0;
cbweb=0;
$cbwebappguid = 36
$c = $b.worksheets.item(1)
cbytes=0;
$c.cells.item(1,10) = "computer ou"
$c.cells.item(1,1) = "querry name"
$c.cells.item(1,2) = "ping status"
$c.cells.item(1,3) = "logged on account"
$c.cells.item(1,4) = "first name"
$c.cells.item(1,5) = "last name"
$c.cells.item(1,6) = "phone number"
$c.cells.item(1,7) = "e-mail address"
$c.cells.item(1,8) = "computer name"
$c.cells.item(1,9) = "ip address"
$c.cells.item($introw, 10) = $g1
$c.cells.item($introw,10).interior.colorindex = 3
$c.cells.item($introw,10).interior.colorindex = 4
$c.cells.item($introw,10) = "n/a"
$c.cells.item($introw, 1).interior.colorindex = 3
$c.cells.item($introw, 1).interior.colorindex = 4
$c.cells.item($introw, 1) = $strcomputer.toupper()
$c.cells.item($introw, 2).interior.colorindex = 3
$c.cells.item($introw, 2).interior.colorindex = 4
$c.cells.item($introw, 2) = "offline"
$c.cells.item($introw, 3) = $e[1]
$c.cells.item($introw, 3).interior.colorindex = 3
$c.cells.item($introw, 3).interior.colorindex = 4
$c.cells.item($introw, 3) = "n/a"
$c.cells.item($introw, 3) = "no user logged on"
$c.cells.item($introw, 3) = $username
$c.cells.item($introw, 4) = $e1
$c.cells.item($introw, 4).interior.colorindex = 3
$c.cells.item($introw, 4).interior.colorindex = 4
$c.cells.item($introw, 4) = "n/a"
$c.cells.item($introw, 5) = $e2
$c.cells.item($introw, 5).interior.colorindex = 3
$c.cells.item($introw, 5).interior.colorindex = 4
$c.cells.item($introw, 5) = "n/a"
$c.cells.item($introw, 6) = $e3
$c.cells.item($introw, 6).interior.colorindex = 3
$c.cells.item($introw, 6).interior.colorindex = 4
$c.cells.item($introw, 6) = "n/a"
$c.cells.item($introw, 7) = $e4
$c.cells.item($introw, 7).interior.colorindex = 3
$c.cells.item($introw, 7).interior.colorindex = 4
$c.cells.item($introw, 7) = "n/a"
$c.cells.item($introw, 8) = $cs.name
$c.cells.item($introw, 8) = "failed to resolve name"
$c.cells.item($introw, 8).interior.colorindex = 3
$c.cells.item($introw, 8).interior.colorindex = 4
$c.cells.item($introw, 8) = "n/a"
$c.cells.item($introw, 9) = "failed resolve ip"
$c.cells.item($introw, 9) = "failed to resolve ip"
$c.cells.item($introw, 9).interior.colorindex = 3
$c.cells.item($introw, 9).interior.colorindex = 4
$c.cells.item($introw, 9) = "n/a"
$c.cells.item($introw, 9) = $ns.ipaddress[0]
"c" { converttofahrenheit($value) }
cd ad:
cd $currentpath
cd $dir
cd $owapath
cd $path
$cd = $subregkey.getvalue($subx)
$cells.item(1,10)="city"
$cells.item(1,10).font.bold=$true
$cells.item(1,10)="title4"
$cells.item(1,11).font.bold=$true
$cells.item(1,11)="level5"
$cells.item(1,11)="state"
$cells.item(1,12)="country"
$cells.item(1,12).font.bold=$true
$cells.item(1,12)="title5"
$cells.item(1,13).font.bold=$true
$cells.item(1,13)="level6"
$cells.item(1,14).font.bold=$true
$cells.item(1,14)="title6"
$cells.item(1,15).font.bold=$true
$cells.item(1,15)="level7"
$cells.item(1,16).font.bold=$true
$cells.item(1,16)="title7"
$cells.item(1,17).font.bold=$true
$cells.item(1,17)="level8"
$cells.item(1,18).font.bold=$true
$cells.item(1,18)="title8"
$cells.item(1,19).font.bold=$true
$cells.item(1,19)="level9"
$cells.item(1,1).font.bold=$true
$cells.item(1,1)="level0"
$cells.item(1,1)="userid"
$cells.item(1,20).font.bold=$true
$cells.item(1,20)="title9"
$cells.item(1,21).font.bold=$true
$cells.item(1,21)="level10"
$cells.item(1,22).font.bold=$true
$cells.item(1,22)="title10"
$cells.item(1,2)="firstname"
$cells.item(1,2).font.bold=$true
$cells.item(1,2)="title0"
$cells.item(1,3).font.bold=$true
$cells.item(1,3)="lastname"
$cells.item(1,3)="level1"
$cells.item(1,4)="employeeid"
$cells.item(1,4).font.bold=$true
$cells.item(1,4)="title1"
$cells.item(1,5)="email"
$cells.item(1,5).font.bold=$true
$cells.item(1,5)="level2"
$cells.item(1,6).font.bold=$true
$cells.item(1,6)="office"
$cells.item(1,6)="title2"
$cells.item(1,7)="department"
$cells.item(1,7).font.bold=$true
$cells.item(1,7)="level3"
$cells.item(1,8).font.bold=$true
$cells.item(1,8)="title"
$cells.item(1,8)="title3"
$cells.item(1,9)="company"
$cells.item(1,9).font.bold=$true
$cells.item(1,9)="level4"
$cells.item($row,1).interior.colorindex = 3
$cells.item($row,1).interior.colorindex = 4
$cells.item($row,2).interior.colorindex = 3
$cells.item($row,2).interior.colorindex = 4
$cells.item($row,$col)=$_
$cells.item($row,$col) = $city
$cells.item($row,$col) = $company
$cells.item($row,$col) = $country
$cells.item($row,$col) = $department
$cells.item($row,$col) = $email
$cells.item($row,$col) = $employeeid
$cells.item($row,$col) = $fisrtname
$cells.item($row,$col).font.bold=$true
$cells.item($row,$col)=$ilo.description
$cells.item($row,$col)=$ilo.gatewayipaddress
$cells.item($row,$col)=$ilo.hostname
$cells.item($row,$col)=$ilo.ipaddress
$cells.item($row,$col)=$ilo.ipv4subnetmask
$cells.item($row,$col)=$ilo.licensekey
$cells.item($row,$col)=$ilo.url
$cells.item($row,$col).interior.colorindex = 3
$cells.item($row,$col).interior.colorindex = 4
$cells.item($row,$col).interior.colorindex = 6
$cells.item($row,$col) = $lastname
$cells.item($row,$col)="no ilo, most likely a virtual machine"
$cells.item($row,$col) = $office
$cells.item($row,$col)="offline"
$cells.item($row,$col)=$server
$cells.item($row,$col) = $state
$cells.item($row,$col) = $title
$cells.item($row,$col) = $userid
$cells=$worksheet.cells
$cells=$ws.cells
"$celsius celsius equals $((1.8 * $celsius) + 32 ) fahrenheit"
<center>"
$cerfilename = $script:certificatefilename.replace('.pfx', '.cer')
$cer.finish = [datetime]::now.adddays(4)
$cer.name = "jury duty";
$cer.recurrencefrequency = 1
$cer.recurrencetype = 0
$cer = $resds.calendarexceptions.newcalendarexceptionsrow()
$cer.res_uid = $resuid;
$cer.start = [datetime]::now.adddays(3)
$certar = $cert.accessrules
$certdom = $cert.certificatedomains
$certificatedata = $enrollment.createrequest(0)
$certificate.encode()
$certificateenrollmentcommonname = "cn=certificate-enrollment"
$certificate = get-qsadfscertificate
$certificate = get-qsadfscertificate -skipverification
$certificate = get-qsadfscertificate -skipverification -silent
$certificate.initializefromprivatekey(2, $key, '')
$certificate.issuer = $certificate.subject
$certificate | new-item 'iis:\sslbindings\0.0.0.0!443'
$certificate = new-object -comobject 'x509enrollment.cx509certificaterequestcertificate.1'
$certificate.notafter = $certificate.notbefore.adddays(365)
$certificate.notbefore = get-date
$certificatepassword = convertto-securestring -string 'secret' -force -asplaintext
$certificate.subject = $name
$certificatetemplatecn = "cn=certificate templates"
certificatetemplate = machine
certificatetemplate = webserver ;omit line if ca is a stand-alone ca
$certificate.x509extensions.add($enhancedkeyusageextension)
$certificate.x509extensions.add($extnames)
$certiss = $cert.issuer
$certna = $cert.notafter
$certnb = $cert.notbefore
$certpk = $cert.hasprivatekey
$certpks = $cert.publickeysize
$certroot = $cert.rootcatype
$certserv = $cert.services
$certs = get-exchangecertificate -server $allsrv
$certsn = $cert.serialnumber
$certssigned = $cert.isselfsigned
$certssltemplate=@"
$certssltemplate | out-file c:\config\cert\cert-ssl.inf
$certstatus = $cert.status
$certsubj = $cert.subject
$certtemplate =
$certtemplate | out-file c:\config\cert\cert-machine.inf
$certthumb = $cert.thumbprint
$cg = $_.childgroup
$c = get-content $filename
$c = (get-transportserver) | %{get-queue -server $_}| select-object identity, status, messagecount | convertto-html -head $a
$changed = $false
$changed = $true
-changepasswordatlogon $false `
"changereport.csv has been written to " + $dir + " for your records."
$changesetnumber = $w.checkin($pendingchanges, 'version updated');
$char = $acct[$len - 1]
char c = inputstr[ inputidx ];
char[] outputchars;
$char=$s.pathname[$len - 1]
$charstoremove=$tsenv:osdcomputername.length-4
check-cilerrors
check-compilererrors
$checkdate
$checkdate = $checkdate.adddays(1)
$checkdate = $checkdate.addyears(1)
$checkdate = $currentdate.adddays(-((7*$j)+$currentweekdayint-$dayofweek))
$checkdate = $currentdate.date.adddays(-((7*$j)+$currentweekdayint-$dayofweek))
$checkdate = $currentdate.date.addmonths(-$j).adddays($dayofmonth-$currentdate.day)
$checkdate = [datetime]::parseexact($daterange,'yyyy-mm-dd',$null)
$checkdate = [datetime]::parseexact($daterange,'yyyy\/mm\/dd',$null)
$checkdate = [datetime]::parseexact($date,'yyyy-mm-dd',$null)
$checkdate = [datetime]::parseexact($date,'yyyy\/mm\/dd',$null)
$checkdate = ([datetime]::parseexact("$($quarteryearint)0101",'yyyymmdd',$null)).adddays($dayofquarter-1)
$checkdate = [datetime]::parseexact("$($quarteryearint)0331",'yyyymmdd',$null)
$checkdate = ([datetime]::parseexact("$($quarteryearint)0401",'yyyymmdd',$null)).adddays($dayofquarter-1)
$checkdate = [datetime]::parseexact("$($quarteryearint)0630",'yyyymmdd',$null)
$checkdate = ([datetime]::parseexact("$($quarteryearint)0701",'yyyymmdd',$null)).adddays($dayofquarter-1)
$checkdate = [datetime]::parseexact("$($quarteryearint)0930",'yyyymmdd',$null)
$checkdate = ([datetime]::parseexact("$($quarteryearint)1001",'yyyymmdd',$null)).adddays($dayofquarter-1)
$checkdate = [datetime]::parseexact("$($quarteryearint)1231",'yyyymmdd',$null)
$checkdate = ([datetime]::parseexact("$($yearint)0101",'yyyymmdd',$null)).adddays($dayofyear-1)
$checkdate=$null
$checkdate = $null
checkdirectory
$checkerror = $error.count
$checkerror = $error.count - $checkerror
$checkfile = join-path ($drive + 'psarchive') $_
checkforreboot
$checkforupdates = invoke-expression $cmd
$check = get-module activedirectory
$check=$hashoutput = @{}
checkhost
checkhoststatus
$checkm = ([array]($output | where {$_ -match "manual check"})).count | %{ if ($_) {$_} else {'0'} }
checknesting $group @($group)
checknesting $member ($temp += $member)
$checkoutpath = "$($workingpath)\$($targetfolder)"
$checkpoint = get-date
check-powershellversion
$checkprocess = get-process -name ccmrepair* -computername $strcomputer
$check = $repl.check
checkrequiredattribute $property -name "name"
checkrequiredattribute $property -name "value"
checkrequiredattribute $sitecollection -name "name"
checkrequiredattribute $sitecollection -name "url"
checkrequiredattribute $site -name "name"
checkrequiredattribute $site -name "url"
checkrequiredattribute $solution -name "name"
checkrequiredattribute $webapplication -name "url"
checkwuinstall
$chguserrow = $chgusertable.newrow()
$chguserrow.displayname = $_.displayname
$chguserrow.emailaddress = $_.primarysmtpaddress
$chguserrow.newpin = $newpin
$chguserrow.oldpin = $customattribute7
$chgusertable.columns.add("displayname",[string]) | out-null
$chgusertable.columns.add("emailaddress",[string]) | out-null
$chgusertable.columns.add("newpin",[string]) | out-null
$chgusertable.columns.add("oldpin",[string]) | out-null
$chgusertabledump = $chgusertable | convertto-html -fragment @{label="display name";expression={$_.displayname}},`
$chgusertable.rows.add($chguserrow)
$chgusertable.rows.count + "</td></tr>`r`n"
$childdirs = @(get-childitem $dir.pspath -erroraction silentlycontinue | where-object{ $_.psiscontainer})
"childdomain"
$childfiles = @(get-childitem $dir.pspath -erroraction silentlycontinue -filter $filter| where-object{ -not($_.psiscontainer)})
$childnode.name = $name
$childnode = new-object microsoft.sharepoint.administration.spwebconfigmodification
$childnode.owner = $owner
$childnode.path = $path
$childnode.type = $type
$childnode.value = $value
$chksysobject = $false;
$chksysobject = $true;
$choice1 = new-object system.management.automation.host.choicedescription ("&" + $c1), $desc1
$choice1 = new-object system.management.automation.host.choicedescription $c1, $desc1
$choice2 = new-object system.management.automation.host.choicedescription ("&" + $c2), $desc2
$choice2 = new-object system.management.automation.host.choicedescription $c2, $desc2
$choice3 = new-object system.management.automation.host.choicedescription ("&" + $c3), $desc3
$choice3 = new-object system.management.automation.host.choicedescription $c3, $desc3
$choice4 = new-object system.management.automation.host.choicedescription ("&" + $c4), $desc4
$choice4 = new-object system.management.automation.host.choicedescription $c4, $desc4
$choice5 = new-object system.management.automation.host.choicedescription ("&" + $c5), $desc5
$choice5 = new-object system.management.automation.host.choicedescription $c5, $desc5
$choice = read-host 'enter your selection'
$choice = read-host $prompt
$choices = @()
$choices |% {
$choices += $env:psmodulepath -split ";"
$choices += new-object system.management.automation.host.choicedescription $keyword, $phrase
$choices += "other.."
$choices = [system.management.automation.host.choicedescription[]]($choice1,$choice2)
$choices = [system.management.automation.host.choicedescription[]]($choice1,$choice2,$choice3)
$choices = [system.management.automation.host.choicedescription[]]($choice1,$choice2,$choice3,$choice4)
$choices = [system.management.automation.host.choicedescription[]]($choice1,$choice2,$choice3,$choice4,$choice5)
"choose conversion: m(eters), f(eet) c(elsius),fa(renheit),mi(les),k(ilometers) and value"
$cillogfile = join-path $currentlogfolder 'generateil.log'
$cilxmlfile = join-path $currentlogfolder 'generateil.xml'
$city=$i.l
$city = $userobject.city
$c = . (join-path (split-path -parent $myinvocation.mycommand.path) "common.ps1")
$classaaddress = $bitarray.substring(0,8)
$classaaddress = [convert]::touint32($classaaddress, 2)
class = $accountclass
class = 'applicationpool'
$classbaddress = $bitarray.substring(8,8)
$classbaddress = [convert]::touint32($classbaddress, 2)
$classcaddress = $bitarray.substring(16,8)
$classcaddress = [convert]::touint32($classcaddress, 2)
$classdaddress = $bitarray.substring(24,8)
$classdaddress = [convert]::touint32($classdaddress, 2)
classes returned are from the root\cimv2 namespace.
$class = $_.gettype().invokemember("class", 'getproperty', $null, $_, $null)
$classheaderadm = "heading1"
$classheaderads = "heading1"
$classheaderadslink = "heading1"
$classheaderasc = "heading1"
$classheaderasc = "heading10"
$classheaderasyncvd = "heading1"
$classheaderautovd = "heading1"
$classheadercasarray = "heading1"
$classheadercasauto = "heading1"
$classheadercasoc = "heading1"
$classheadercasoc = "heading10"
$classheadercert = "heading1"
$classheadercert = "heading10"
$classheaderconstatus = "heading1"
$classheadercra = "heading1"
$classheadercs = "heading1"
$classheadercs = "heading10"
$classheaderdag = "heading1"
$classheaderdagnetworks = "heading1"
$classheaderdatabase = "heading1"
$classheaderdatabase = "heading10"
$classheaderdb = "heading1"
$classheaderdb = "heading10"
$classheaderdbsize = "heading1"
$classheaderecp = "heading1"
$classheaderecp = "heading10"
$classheaderecpvd = "heading1"
$classheaderexch = "heading1"
$classheaderexch = "heading10"
$classheaderexcosw = "heading1"
$classheaderexcosw = "heading10"
$classheaderexipsw = "heading1"
$classheaderexipsw = "heading10"
$classheaderflow = "heading1"
$classheaderflow = "heading10"
$classheaderhubbp = "heading1"
$classheadermbxbk = "heading1"
$classheadermbxbk = "heading10"
$classheadermbxdbsize = "heading1"
$classheadermbxi = "heading1"
$classheadermbxrpccas = "heading1"
$classheadermc = "heading1"
$classheadermc = "heading10"
$classheadermcpf = "heading1"
$classheadermcpf = "heading10"
$classheaderoab = "heading1"
$classheaderoabvd = "heading1"
$classheaderobjdisk = "heading1"
$classheaderobjdisk = "heading10"
$classheaderowa = "heading1"
$classheaderowa = "heading10"
$classheaderowavd = "heading1"
$classheaderowebs = "heading1"
$classheaderowebs = "heading10"
$classheaderows = "heading1"
$classheaderows = "heading10"
$classheaderpfd = "heading1"
$classheaderpwc = "heading1"
$classheaderpwc = "heading10"
$classheaderpwsh = "heading1"
$classheaderpwsh = "heading10"
$classheaderpwsvd = "heading1"
$classheaderqueue = "heading1"
$classheaderqueue = "heading10"
$classheaderrepl = "heading1"
$classheaderrepl = "heading10"
$classheaderrollup = "heading1"
$classheaderrpccas = "heading1"
$classheaderrpc = "heading1"
$classheadersc = "heading1"
$classheadersetspnd = "heading1"
$classheadersetspn = "heading1"
$classheadersetspn = "heading10"
$classheadersrvversion = "heading1"
$classheadertc = "heading1"
$classheaderwebsvd = "heading1"
$classheaderwsc = "heading1"
$classheaderwsc = "heading10"
class = 'iisapplicationpoolsetting'
$class = $memberobject.gettype().invokemember("class", 'getproperty', $null, $memberobject, $null)
$class=($parammissing=$true),
class = 'win32_service'
$cl = $c -split '`n'
-cl ($currentrecursionlevel+1) -pi $pathinfo `
clean-build
clean-buildmodels
clean-dependentbinaries
clean-models
cleanup
$cleanupmanager = $wsusserveradminproxy.getcleanupmanager();
{$cleanupresults = $cleanupmanager.performcleanup($cleanupscope);
$cleanupscope.cleanupobsoletecomputers = $true
$cleanupscope.cleanupobsoleteupdates = $true
$cleanupscope.cleanupunneededcontentfiles = $true
$cleanupscope.compressupdates = $true
$cleanupscope.declineexpiredupdates = $true
$cleanupscope.declinesupersededupdates = $true
$cleanupscope = new-object microsoft.updateservices.administration.cleanupscope;
clear
$clearconsolemenuitem.firstingroup = $true
clear-content $report
clear-disk -number $usbdisknumber -removedata -confirm:$false
clear-host
$clearreq = read-host "do you want to clear all existing moverequests? (y/n)"
client = $client
$client.close()
$client.dispose()
$client = $event307.properties[3].value
$client = new-object microsoft.windowsazure.internal.dhcpclient
$client = new-object system.net.sockets.tcpclient
$client = $printjob.properties[3].value
$client = $return.substring($return.indexof(" "),(($return.length) - $return.indexof(" "))).trim()
$client.send($message)
$client = $splitline[-2]
$client.timeout = 100
$c.listobjects.add().name = "table1"
$c.listobjects("table1").tablestyle = "tablestylemedium1"
$closedgroups=($alldistgroups | ?{$_.memberjoinrestriction -like "closed"} | measure-object).count
$closedgroups=($groups | ?{$_.memberjoinrestriction -like "closed"} | measure-object).count
$closestdcname = getclosestwritabledc($computername)
$closestdcname = $result.dcname
$cloudobject = get-sccloud "$cloud"
cls
$clu = get-clusterresource -cluster $cluster | ft -autosize cluster,ownergroup,ownernode,resourcetype,state
$clu | out-file $file
$cluster = @{
clusteraccess = @( clusteraccess -user @($clusterfullaccesslist) -full )
clusteraccess = @(clusteraccess -user @($clusterfullaccesslist) -full)
cluster = $cluster
$_.cluster['clusteraccess'],
$clustercmdtools = get-windowsfeature "rsat-clustering-cmdinterface"
$cluster_dcbqospolicy_priority = 5
$clusterfeature = get-windowsfeature "failover-clustering"
$_.cluster['featureset']
$_.cluster['fileservername'],
$clusterfullaccesslist = (,$adminaccount)
$_.cluster['ignorenetwork']
$_.cluster['ignorenetwork'],
$cluster = invoke-command -session $sessiontable[ $_.name ] -filepath .\helper\configurehypervcluster.ps1 -argumentlist @(
$clustermachineaccountstring = '{0}\{1}$' -f $domain, $hypervclustername
$_.cluster.name,
$clustername,
$clusternameresource = get-clusterresource "cluster name"
$clusternameresource | start-clusterresource -wait 60
$clusternameresource | stop-clusterresource
clusternet = @{
$_.cluster['networkrolesetting']
$_.cluster['networkrolesetting'],
clusternetworkrolesetting -name "$($hvnode.node1.clusternet.address)" -role 1 -metric 999
clusternetworkrolesetting -name "$($hvnode.node1.livemigrationnet.address)" -role 3
clusternetworkrolesetting -name "$($hvnode.node1.managementnet.address)" -role 3
$clusternodes,
@($clusternodes) | foreach-object {
@($clusternodes) | foreach-object { clear-clusternode "$_" -force }
$clusterpowershelltools = get-windowsfeature "rsat-clustering-powershell"
$cluster_qospolicy_minbandwidth = 100
$cluster_qospolicy_priority = 5
$cluster = read-host "type cluster name (windows 2008 clusters only)"
cluster res $nameofipv4resource /priv enabledhcp=0 overrideaddressmatch=1 address=169.254.1.1 subnetmask=255.255.0.0
$clusters = @{
clusters = $clusters
$_.cluster['spacessetting'],
$_.cluster.staticaddress,
$clusterstoragepoolname = 'clusterstoragepool'
$clustersubnetmatch = "192.168.2.0/16"
$cluster_tc_bandwidthpercent = 20
$cluster_tc_priority = 4
$clustertools = get-windowsfeature "rsat-clustering"
$cmd = ""
$cmdadd = "dnscmd $dnsserver /recordadd $dnszone $recordname $recordtype $recordaddress"
cmd /c $cmdline
$cmd = "cmd.exe /c psexec.exe \\$computername c:\windows\system32\rundll32.exe user32.dll,lockworkstation"
$cmd = "cmd.exe /c psexec.exe \\$computername -d c:\windows\system32\wuauclt.exe /resetauthorization /detectnow"
$cmd = "cmd.exe /c psexec.exe \\$computername -d gpupdate /force"
$cmd = "cmd.exe /c psexec.exe \\$computername -d wuauclt.exe /detectnow"
$cmd = "cmd.exe /c psexec.exe \\$computername -d wuauclt.exe /reportnow"
$cmd = $cmdselection
$cmd.commandtext = $commandtext
$cmd.connection = $conn
$cmddelete = "dnscmd $dnsserver /recorddelete $dnszone $recordname $recordtype /f"
$cmd = ".\deployment-v3.ps1 -inputfile '$filepath' -action internaldeploy"
$cmd = ".\deployment-v3.ps1 -inputfile '$filepath' -action internalinstall"
$cmd.dispose();
cmd.exe /c "c:\config\images\bginfo.exe c:\config\images\bg-$bgcolor.bgi /timer:0 /nolicprompt /silent"
cmd.exe /c "certreq -accept c:\config\cert\cert-machine.cer"
cmd.exe /c "certreq -accept c:\config\cert\cert-ssl.cer"
cmd.exe /c "certreq -adminforcemachine -submit -config ""$dcfqdn\$caname"" c:\config\cert\cert-machine.req c:\config\cert\cert-machine.cer"
cmd.exe /c "certreq -f -new c:\config\cert\cert-machine.inf c:\config\cert\cert-machine.req"
cmd.exe /c "certreq -f -new c:\config\cert\cert-ssl.inf c:\config\cert\cert-ssl.req "
cmd.exe /c "certreq -f -submit -config ""$dcfqdn\$caname"" c:\config\cert\cert-ssl.req c:\config\cert\cert-ssl.cer "
cmd.exe /c "certutil -setreg ca\crldeltaperiodunits 0 "
cmd.exe /c "certutil -setreg ca\crlperiodunits 5 "
cmd.exe /c "certutil -setreg ca\crlperiod ""years"" "
cmd.exe /c "certutil -setreg ca\crlpublicationurls \n"
cmd.exe /c "certutil -setreg ca\validityperiodunits 5 "
cmd.exe /c "c:\tools\dbg_amd64.msi /quiet"
cmd.exe /c "c:\tools\nm34_x64.exe /q"
cmd.exe /c "gpupdate /target:computer /force"
cmd.exe /c "net share files=c:\files"
cmd.exe /c "netsh int ipv4 add route prefix=0.0.0.0/0 interface=""$switch"" nexthop=$ipv4gateway "
cmd.exe /c "netsh int ipv6 add route ::/0 ""$switch"" $ipv6gateway "
cmd.exe /c "netsh routing ip nat add interface ""private internet"" "
cmd.exe /c "netsh routing ip nat add portmapping name=""private internet"" proto=tcp publicip=0.0.0.0 publicport=3389 privateip=$target privateport=3389"
cmd.exe /c "netsh routing ip nat add portmapping name=""private internet"" proto=tcp publicip=0.0.0.0 publicport=443 privateip=$target privateport=443"
cmd.exe /c "netsh routing ip nat add portmapping name=""private internet"" proto=tcp publicip=0.0.0.0 publicport=80 privateip=$target privateport=80"
cmd.exe /c "netsh routing ip nat install"
cmd.exe /c "netsh routing ip nat set int name=""private internet"" mode=full"
cmd.exe /c "netsh trace start nid_wpp,directaccess,internetclient filemode=circular persist=yes"
cmd.exe /c $prereqinstall
cmd.exe /c "setres -w $displaywidth -h $displayheight -f "
cmd.exe /c $sharepointinstall
$cmd = "$isodrive" + "\boot\bootsect.exe /nt60 $usbdriveletter" + ":"
[cmdletbinding(
[cmdletbinding()]
[cmdletbinding(defaultparametersetname="byguid")]
[cmdletbinding(defaultparametersetname="displayname")]
[cmdletbinding(defaultparametersetname="domaincsv")]
[cmdletbinding(defaultparametersetname='explicit')]
[cmdletbinding(defaultparametersetname="foldername")]
[cmdletbinding(defaultparametersetname="norecurrence")]
[cmdletbinding(defaultparametersetname="path")]
"[cmdletbinding()]`r`n"
[cmdletbinding(supportsshouldprocess=$true,
[cmdletbinding(supportsshouldprocess=$true)]
[cmdletbinding(supportsshouldprocess=$true,defaultparametersetname="addcategoryprefix")]
[cmdletbinding(supportsshouldprocess=$true,defaultparametersetname="byfile")]
[cmdletbinding(supportsshouldprocess=$true,defaultparametersetname="param")]
$cmdlet = $cmdlet + " -computername $computername"
$cmdline = "c:\windows\system32\wusa.exe $($qfefilename) /quiet /norestart /log:$($qfelogfilename)"
$cmdline = "c:\windows\system32\wusa.exe /uninstall $($qfefilename) /quiet /norestart /log:$($qfelogfilename)"
$cmdline = "import-gpo -backupgponame `"$name`" -targetname `"$name`" -createifneeded -path $backuppath"
$cmdlist = [string]::join(";", $cmd)
$cmdname = join-path $axbuilddir 'combinexpos.exe'
$cmd = "netdom renamecomputer $computername /newname:$newpcname /userd:$user /passwordd:$pwd /reboot:5 /force"
$cmd = new-object data.sqlclient.sqlcommand $sql, $con;
$cmd = new-object system.data.sqlclient.sqlcommand
$cmdselection = read-host "which cmd"
$cmd = $stringbuilder.tostring()
$cname=$_
c.name as 'column'
$cname = "cn="+$adsgroup.name
$c.name = "multi-ping.ps1"
$cname=$_.name
$cn = $last.trim()+","+$first.trim()
$cn = read-host -prompt "enter a computer name"
cn = $userobject.cn
$code=@'
$code = @"
$codelines = $txtcode.split("`n");
$codes = @{
<col>
$col++
$col=1
$col = 1
$colallprivusers = @()
$colallprivusers += $colofuniquemembers
$colallswitches = $topologysettings.switches
$colalltopologies = $topologysettings.topologies
$colattributelist = "cn","dnshostname","serverreference","distinguishedname"
$colattributelist = "distinguishedname","dnshostname","description","lastlogontimestamp"
$colclass = [wmiclass] "root\sms\site_$($sitecode):sms_collection"
$colclass = [wmiclass] "root\sms\site_$($sitecode):sms_objectcontaineritem"
$colcomputers = get-content machinelist.txt
$coldasids = @()
$coldasids += $dasid
$coldisks = get-wmiobject -computer $srv win32_volume | where-object {$_.driveletter -ne $null -or $_.capacity -ne $null -and $_.filesystem -like "ntfs"} | sort-object caption
$coldomaindns = @()
$coldomaindns += $domaindn
$coldomainnames = @()
$coldomainnames += $domainname
$colitems = get-wmiobject -class "win32_product" -namespace "root\cimv2" `
$colitems = get-wmiobject -query "select * from win32_logicaldisk"
$colitems = get-wmiobject -query "select * from win32_service where name = '$i'"
collect-build $models
collect $distgroupmembers
$collectionid = gwmi -namespace "root\sms\site_$sitecode" -query `
$collectionlimitid = gwmi -namespace "root\sms\site_$sitecode" -query `
$collectiontype = "1"
$collectiontype = "2"
collect $nest
$colmachines = $topologysettings.machines
$colmembers = $adobject.properties.item("member")
$colofdns
$colofdns = @()
$colofdns += $dn
$colofmembersexpanded
$colofmembersexpanded = @()
$colofmembersexpanded += $objmember
$colofrecords
$colofrecords = @()
$colofrecords | ft -auto
$colofrecords += $record
$colofrecords+= $record
$colofuniquemembers = @()
$colofuniquemembers += $objattribs
$colon = ":"
$colon = $item.indexofany(":")
$color = "
$color1 = "
$color2 = "
$color3 = "
$color4 = "
$color = "ff0000"
$color="green"
$color = "green"
$color = $orangecolor
$color="red"
$color = $redcolor
{$color="red"}else{$color="'
color:white;
$color = $whitecolor;
$color="yellow"
$color = "yellow"
$colour = "green";
$colpath = $newcol.put()
$colprivgroups += $coldasids
$colprivgroups = @("s-1-5-32-544";"s-1-5-32-548";"s-1-5-32-549";"s-1-5-32-551";"$rootdomainsid-519";"$rootdomainsid-518")
$colproplist = "name","samaccountname","objectsid","displayname","extensionattribute13"
$colresults = $objsearcher.findall()
$cols = @()
$cols = gettablecolumntable $item;
$cols = $objs | convertto-html -head $colstyl -property name, datatype, default, identity, inprimarykey, isforeignkey, description ;
$colsplit = $domainfqdn.split(".")
$colstyl = $colstylval;
$colstylval = "<style> ";
$colstylval += " </style>";
$colstylval += " table{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;}" ;
$colstylval += " td{background:
$colstylval += " th{background:
$cols += $value
$column = 1
$columncount = $columns.count
$columnfields,
$columnheaders = @{}
$columnnames = "computer","user"
$columnnames = "name","path"
$columnproperties = "name","executablepath"
$columnproperties = "name","installdate"
$columns | ? {$_.definition -match "system.double|system.int|system.int64|system.float"} | % {
$columns | ? {$_.definition -match "system.string"} | % {
$columns = $range.columns
$columns = $targetdata | get-member -membertype *property
$colusers=$adsisearcher.findall()
<col width=100px>
<col width=150px>
<col width=180px>
<col width=50px>
$combinedcsvfile = "$path\$($prefix)_$(get-date -uformat %y%m%d%h%m%s).csv"
$combinednetlogon = @()
$combinednetlogon += $roaminglist
combine-xpos $model.directory
$command,
$command = $cmd
$command = $command + "/force"
$command = $command + "/passwordd:*"
$command = $command + "/passwordd:$passwordd"
$command = $command + "/passwordo:*"
$command = $command + "/passwordo:$passwordo"
$command = $command + "/reboot"
$command = $command + "/securepasswordprompt"
$command.commandtext = "select * from master.sys.syslogins"
$command = $command + "/userd:$userd"
$command = $command + "/usero:$usero"
$command.connection = $connection
<command>c:\windows\system32\windowspowershell\v1.0\powershell.exe</command>
$command = '$documentlibrariesinitialfilter | where {' + $whereclause + '}'
$command = "get-cs$($wellknownpolicytype)policy -verbose:`$false"
$command = "get-cs$($wellknownpolicytype) -verbose:`$false"
$command = '<method><setlist scope="request">' +
$command = "new-cs$($wellknownpolicytype) -identity `"template`" -inmemory -verbose:`$false"
$command = "new-cs$($wellknownpolicytype)policy -identity `"template`" -inmemory -verbose:`$false"
$command = new-object system.data.sqlclient.sqlcommand
$command = "renamecomputer", "$computer", "/newname:$newname"
$command = [scriptblock]::create("iscsicli.exe refreshtargetportal $iscsi_portal $iscsiport")
$command = [scriptblock]::create("iscsicli logintarget $iscsi_target t $iscsi_portal $iscsi_port $iscsi_initiator $iscsiportid.port * $iscsi_mpio * * * * * * * * * 0")
$command = [scriptblock]::create("iscsicli persistentlogintarget $iscsi_target t $iscsi_portal $iscsi_port $iscsi_initiator $iscsiportid.port * $iscsi_mpio * * * * * * * * * 0")
$commandtext = "sp_configure 'max degree of parallelism', 1;reconfigure with override"
$commandtext = "sp_configure 'show advanced options', 1;reconfigure with override;"
comment:
$commentblock = @(
comment : $($cred.comment)
$comment = "restored webparts"
$comments = $labelcomments -f $currentversion
$comment = [string]::format("last edited by {0}\{1} on {2}",
$commonname = $displayname
"common store files" = ($sisresult[($sisresult.count)-4]).trimstart("common store files:")
$commonxp = "\\" + $computername + "\c$\documents and settings\all users\start menu\programs\startup\" + $remstitem.command
"companies|categories" {
-company $_.company -department $_.department -employeeid $_.id `
"company" = "companyname";
$company=$i.company
"company main phone" = "phone:companymainphone";
company = $_.publisher
$compare = compare-object -property id -referenceobject $referenceobject -differenceobject $differenceobject
compare-object $destmember.memberof $sourcemember.memberof | where-object {$_.sideindicator -eq '<='} |
compare-object $destmember.memberof $sourcemember.memberof | where-object {$_.sideindicator -eq '=>'} |
$compare | where-object { $_.sideindicator -eq "=>" } |
$comp = get-content env:computername
$comp = gwmi win32_computersystem -computer $computer
</compilation>
<compilation defaultlanguage="c
compile-ax
compile-build
compile-cil
$compileerrors = $false
$compileerrors = $true
$compileinlayerparm = ''
$compileinlayerparm = '-aol={0}' -f $compileinlayer
$compilerwarninglevel = $row.get_item('compilerwarninglevel')
compile-visualstudioprojects ($fileinfo)
compile-vscomponents
$completed = @{}
$completed[$child.location] = $true;
$completedcount = $_."move-mailbox".taskfooter.result.completedcount
$completed = get-mailboxexportrequest -batchname $batchname | where {$_.status -eq "completed"} | get-mailboxexportrequeststatistics | format-list
$completed = $jobs | where {$_.state -eq "completed"} | receive-job
$completed | out-file -filepath "$($reportshare)\$($batchname)_completed.txt"
"completing machine cert creation for $fqdn"
$complexityenabled = $currentpasswordpolicyobject."msds-passwordcomplexityenabled"
$complist =@()
$complist = get-content $compsfile
$comp.rename($newname)
$comps = $as.findall()
$comps = get-content 'd:\monthly reboot report\serverlist.txt'
{$computer = $_}
$computer = $_
$computer,
$computer = [adsi]$adspath
$computer.children.remove($identity.baseobject)
$computer.children.schemafilter.add("user")
computer = $computer
{$computer = $_.computername}
$computer = $computername
computer = $computername
$computer = $computer.toupper()
$computer = connect-commputer -computername $computername
$computer = connect-commputer -computername $identityelements.item('computer')
$computercontainer = $computerdn.replace( "cn=$computername," , "")
$computerdn = $_.distinguishedname
$computerdn = $_.dn
computer = $env:computername
$computer free disk space on drive $drive
$computer= gc env:computername
$computergroupmembernames = ($computergroupmembers.getrelatedmonitoringobjects() | select displayname)
$computergroupmembers = get-scommonitoringobject -displayname $computergroup
"computergroupname`tupdatetitle`tupdateguid`tupdatearticleid"
$computergroup = $wsusserver.getcomputertargetgroup($approval.computertargetgroupid)
$computergroup = $wsusserver.getcomputertargetgroups() | foreach-object -process {if ($_.name -eq $targetcomputergroup) {$_}}
$computer = "host1"
$computer = (& hostname)
$computerid = $resid.resourceid
$computerlist = enumeratecomputers $rootpath
$computerlist = $null
$computer = 'local system'
$computername
$computername = "."
$computername,
computername = $computer
-computername $computer -credential $credential
-computername $computer -filter "name = '$drive'"
computername = $computername
$computername = $computername.replace("`$", '')
"computername : "+$env:computername
$computername = "$env:computername"
$computername = $env:computername
$computername = $env:computername.tolower()
$computername | foreach-object {
$computername = @('fs1.company.com','fs2.company.com'),
$computername = gc env:computername
$computername = "(& hostname)",
$computername = (& hostname)
$computername = (& hostname),
$computername = (hostname)
computername = $identity;
$computername = $identityelements.item('computer')
$computername = "localhost"
$computername = "localhost",
$computername = $_.name
"\\$($computername)\$($namespace)" |out-file -filepath $fullpath -append
$computername = $oldcomputer.name
$computername = $result
$computername = $result.properties.item("name")
computername = "$($server.properties.name)"
$computername | %{$servers += $_}
-computername $strcomputer
$computername = [string]$env:computername
computername = [string]$workstation.name
$computername = $txt1.text
{$computer = $_."$parameter"}
$computerpasswordlastset = $_.passwordlastset
$computerpasswordlastset = $_.pwdlastset
computer = $session.gettype().invokemember("computer","getproperty",$null,$session,$null)
$computer.setpassword($($computer.name)+"$")
$computers = gc $path\computers.txt
$computers = get-adobjects $adspath
$computers = get-content $serverlist
$computers = get-content "servers_c.txt";
$computeruptime = new-object -typename psobject -property @{
$comp = [wmi]"\\$sccmserver\root\sms\site_$($sitename):sms_r_system.resourceid=$($resid.resourceid)"
$con.close();
$con.connectionstring = "data source=$server;initial catalog=$database;integrated security=true;";
$con.dispose();
" config boot : creating $filetest"
" config boot : $fileexit not present "
" config boot : performing bootconfig: $bid"
. \config\clienthelperfunctions.ps1
$configdb = get-spdatabase | ? {$_.name -eq $farm.name.tostring()}
" config done : boot $bid exiting successfully."
$configelement = $myxml.appendchild($myxml.createelement("configuration"))
$config = $iis.getapplicationhostconfiguration();
$confignc = $rootdse.get("configurationnamingcontext")
$configpath=$rootdse.configurationnamingcontext
" config ps : "
" config ps : recording successfull exit"
" config reboot : reboot needed: no"
" config reboot : reboot needed? $rebootneeded"
" config reboot : reboot needed: yes, restarting"
</configuration>
<configuration>
$configuration = get-coexistenceconfiguration -targetcredentials $script:msolcredential
-configurationipaddress $hvnode.node1.address `
-configurationipaddress $hvnode.node2.address `
-configurationipaddress $hvnode.node3.address `
-configurationipaddress $hvnode.node4.address `
-configurationipaddress $storagenode.node1.address `
configureiehomepages
configure-qsiisauthentication
$configwizardfilename = $env:programfiles + '\microsoft online directory sync\configwizard.exe'
$confirmadd = [microsoft.visualbasic.interaction]::msgbox("do you want to add `'$($destinationaccount)`' to the following groups:`n`n$((compare-object $destmember.memberof $sourcemember.memberof |
confirmimpact="high"
confirmimpact="low"
confirmimpact="low")]
confirmimpact='medium')]
$confirmpreference="none"
$confirm = read-host 'confirm password' -assecurestring
$confirm = read-host "please hit "s" for federating your existing office365 domain / hit "n" for adding and federating a new domain to office365"
$confirm = read-host "this script will delete all items from the list, proceed [y/n]"
$confirmremove = [microsoft.visualbasic.interaction]::msgbox("do you want to remove `'$($destinationaccount)`' from the following groups:`n`n$((compare-object $destmember.memberof $sourcemember.memberof |
$confnc = $root.get("configurationnamingcontext")
$_.co = "nl"
$conn.close()
$conn.connectionstring = $connectionstring
$connection
$connection.close()
$connection.connectionstring = "data source=$computername;initial catalog=master;user id=$username;password=$password;"
$connection.connectionstring = "data source=$identity;initial catalog=master;user id=$username;password=$password;"
$connection.connectionstring = "server=$computername;initial catalog=master;trusted_connection=true;"
$connection.connectionstring ="server=$databaseserver;database=$draftdb;trusted_connection=true"
$connection.connectionstring ="server=$databaseserver;database=$reportingdb;trusted_connection=true"
$connection.connectionstring = "server=$identity;initial catalog=master;trusted_connection=true;"
-connectionmodeinsecondaryrole "allowallconnections" `
$connection= new-object system.data.sqlclient.sqlconnection
$connection = new-object system.data.sqlclient.sqlconnection
$connection.open()
connection remains open for writting
$connectionstring = "server="+$server+","+$port+";database=master;integrated security=true;"
connect-msolservice -credential $cred
connect-msolservice -credential `$objcreds
connect-msolservice -credential $objcreds
connect-msolservice -credential $office365credentials
connect-msolservice -credential $script:msolcredential
connect-qadservice $ctd
connecttime = $session.gettype().invokemember("connecttime","getproperty",$null,$session,$null)
connectto-exchangeonline -office365adminusername $office365username -office365adminpassword $office365password
$connecttooffice365 = @'
connect-viserver $vc
connect-viserver $vc -warningaction 0
$con = new-object data.sqlclient.sqlconnection;
$conn = new-object system.data.sqlclient.sqlconnection
$conn.open()
$con.open();
[consolecolor]
[consolecolor] $domainlocalcolor = "red",
[consolecolor] $globalcolor = "green",
[consolecolor] $universalcolor = "cyan"
[console]::error.writeline("backing up: " + $gpo.displayname)
[console]::error.writeline([string]$allgpos.count + " gpos were successfully backed up.")
[console]::treatcontrolcasinput = $true
[console]::writeline()
console.writeline(ex.message);
console.writeline("if the error is 'error_not_found', this result is ok.");
console.writeline(string.format("'{0}' failed; 0x{1}.", testname, rtn.tostring("x")));
console.writeline(string.format("'{0}' failed; {1}.", testname, rtn));
console.writeline(string.format("'{0}' worked", testname));
console.writeline("testing creddelete()");
console.writeline("testing credenum()");
console.writeline("testing credread()");
console.writeline("testing credread() again");
console.writeline("testing credwrite()");
$consumerwebpart = $webpartmanager.webparts | where {$_.id -eq $currentwpconnection.consumerid}
) = $contact.$contactpropertyname
$contactcount = (get-mailboxfolderstatistics $mailbox.alias -folderscope contacts).itemsinfolderandsubfolders
$contactfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,`
$contact=get-contact $user.name | select-object windowsemailaddress
$contactgroup | add-member -membertype noteproperty -name "contacts" -value $groupproperty."
$contactgroup | add-member -membertype noteproperty -name "groupname" -value $groupproperty."
$contactgroup | add-member -membertype noteproperty -name "grouptype" -value $groupproperty."
$contactgroup | add-member -membertype noteproperty -name "overwrite" -value $groupproperty."
$contactgroup = new-object system.management.automation.psobject
$contactgroups = @()
$contactgroups += $contactgroup
$contactgroups = import-csv $filepath
$contactitem.firstname = $contactitem.displayname;
$contactmanager.endaddgroup($contactmanager.beginaddgroup($distributiongroup,$null,$null))
$contactmanager.endaddgroup($contactmanager.beginaddgroup($groupname,$null,$null))
$contactmanager = $lyncclient.contactmanager
$contactmapping=@{
$contactobject = [microsoft.exchange.webservices.data.contact]::bind($exservice,$contact.id,$propertyset)
) = $contactphysicaladdressentry
$contactphysicaladdressentry.$contactpropertyshortname = $contact.$contactpropertyname
$contactphysicaladdressentry = new-object microsoft.exchange.webservices.data.physicaladdressentry
"contact picture file" = "method:setcontactpicture"
$contactproperties = @{}
$contactpropertynames = @()
$contactpropertyshortname = $contactpropertyname -replace "(business|home|other)address",""
$contactreadonlyproperties = @{}
"contacts" {
$contactschemas = @{}
$contactschemas.remove($contactreadonlyproperty.name)
$contactschemas.remove($reservedproperty)
$contactsearchresults = $contactmanager.endsearch($contactmanager.beginsearch($specificcontact,$null,$null))
$contactsfolder.displayname = $foldername
$contactsfolder.empty([microsoft.exchange.webservices.data.deletemode]::harddelete, $true)
$contactsfolder = [microsoft.exchange.webservices.data.contactsfolder]::bind($service,$contactsfoldersearch.id);
$contactsfolder = [microsoft.exchange.webservices.data.contactsfolder]::bind($service, [microsoft.exchange.webservices.data.wellknownfoldername]::contacts);
$contactsfolder = new-object microsoft.exchange.webservices.data.contactsfolder($service);
$contactsfolderpath = $contactfolder.trimstart("\").trimend("\")
$contactsfolderpaths = $contactsfolderpath.split("\")
$contactsfolder.save([microsoft.exchange.webservices.data.wellknownfoldername]::msgfolderroot)
$contactsfoldersearch = $rootfolder.findfolders($folderview) | where {$_.displayname -eq $foldername}
$contacts | get-member -membertype noteproperty | %{$contactpropertynames += $_.name}
$contacts = import-csv $csvfile
$container = "ad:cn=system management,cn=system,$distinguishedname"
$content = get-content -encoding byte $args[0]
$content=$header+$message+$footer
$content = "`r`n`r`n$connecttooffice365`r`n`r`n$disconnectfromoffice365"
contentstatus = $(if($properties.contentstatus) { $properties.contentstatus } else { $null })
$content = [system.io.file]::readalltext($file.fullname)
$context = get-spservicecontext $site
$context = get-spservicecontext($site)
$context.items["httphandlerspweb"] = $web -as [microsoft.sharepoint.spweb]
$context = new-object system.directoryservices.activedirectory.directorycontext("domain")
$context = new-object system.directoryservices.activedirectory.directorycontext("forest",$_.dnsname)
$context = new-object system.web.httpcontext $request, $response
$contexttype = [system.directoryservices.accountmanagement.contexttype]::domain
continue
continue;
$continue = 1
"continue" = 11
$controlelement = $viewelement.appendchild($myxml.createelement("listcontrol"))
$controlelement = $viewelement.appendchild($myxml.createelement("tablecontrol"))
$controlelement = $viewelement.appendchild($myxml.createelement("widecontrol"))
$controls = get-content ($path + "\control_file.hican")
$controltype = $view.psobject.properties | where-object -filterscript { @("tablecontrol", "listcontrol", "widecontrol") -contains $_.name } | select-object -expandproperty name
" convert -a m -v 10 converts 10 meters to feet."
$convertcsvsuccess = $false
$convertcsvsuccess = $true
converted to module for importing
convert-msoldomaintofederated -domainname $domain
convert-sidhistoryntfs
convertto-html -body "<font size=3 color=green>$($vc)</font><font size=3 color=red>:</font><font size=3 color=green>datastores < 1000 gb free.</font>"|out-file c:\pscripts\gautham -test\respool\$($vc).html -append
convertto-html -body "<font size=3 color=green>$($vc)</font><font size=3 color=red>:</font><font size=3 color=green>over provisioned datastores.</font>"|out-file c:\pscripts\gautham -test\respool\$($vc).html -append
convertto-html -body "<font size=3 color=green>$($vc)</font><font size=3 color=red>:</font><font size=3 color=green>resource pool available reservation.</font>"|out-file c:\pscripts\gautham -test\respool\$($vc).html -append
convertto-html -body "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" |out-file c:\report\$($vc).html -append
convertto-html -body "<p>the report is generated at $date by user '$((get-item env:\username).value)' on computer '$((get-item env:\computername).value)'</p>" >> "$filename"
| convertto-html -head $a -body "<h2> software installed</h2>" >> "$filename"
convertto-html -title "software inventory" -body "<p><h1> computer name : $comp </h1></p>" >> "$filename"
convertto-wmifilter $adobject | write-output
copies = $jobid.event.userdata.renderjobdiag.copies
$copycount = $copycount + 2
"copy example.txt"
copyfile $_ $fsize
$copyflag = "c:\"+$testflag+".xml"
$copyfrom = "hklm:\security\policy\secrets\" + $key + "\" + $_
"copying image: $image "
"copying ncsi files."
"copying setres from $dcip"
"copying setres to c:\files"
copy-item c:\config\images\$image -destination c:\inetpub\wwwroot\$image -force
copy-item c:\config\ncsi.txt c:\inetpub\wwwroot\ncsi.txt
copy-item $customertemplate $excelfile -force
copy-item c:\windows\system32\en-us\setres.exe.mui c:\files\en-us\setres.exe.mui
copy-item c:\windows\system32\setres.exe c:\files\setres.exe
copy-item $eventlogs -destination $backuppath -recurse
copy-item $hostspath "$hostspath.backup"
copy-item $item.fullname -destination ($usbdestination + $item.directoryname.substring(2))}
copy-item $mastertemplate $excelfile -force
copy-item "$path" -destination "$folder\$sname" -erroraction silentlycontinue
copy-item -path (join-path $axbuilddir "axinputerrors.txt") -destination $currentlogfolder -force
copy-item -path (join-path $axbuilddir "axinputvalidationerrors.txt") -destination $currentlogfolder -force
copy-item -path (join-path $clientlogdir aotcomp.log) -destination $currentlogfolder -force -erroraction silentlycontinue
copy-item -path (join-path $clientlogdir aotprco.log) -destination $currentlogfolder -force -erroraction silentlycontinue
copy-item -path (join-path $clientlogdir axcompileall.html) -destination $currentlogfolder -force -erroraction silentlycontinue
copy-item -path (join-path $clientlogdir axcompileall.html) -destination (join-path $currentlogfolder axcompileall_pass1.html) -force -erroraction silentlycontinue
copy-item -path (join-path $clientlogdir *.*) -destination (join-path $currentlogfolder "detailedlogs") -force -erroraction silentlycontinue
copy-item -path (join-path $file.directory $file.name) -destination $clientbindir -force
copy-item -path (join-path $file.directory $file.name) -destination (join-path $droplocation "application\appl") -force
copy-item -path (join-path $file.directory $file.name) -destination (join-path $droplocation "application\bin") -force
copy-item -path (join-path $file.directory $file.name) -destination $serverbindir -force
copy-item -path (join-path (join-path $serverbindir xppil) dynamics.ax.application.dll.log) -destination $currentlogfolder -force -erroraction silentlycontinue
copy-item -path $qfe.fullname -destination $localpath
copy-item -path "$($qfeserver)\$($qfefilename)" -destination $localpath
copy-item -path $value -destination $newfolder -force
copy-item $webconfigpath $backuppath
copy-item $webcopypath -destination c:\inetpub -recurse -force
copyobjectstofiles $catlog $textcatalog_path
copyobjectstofiles $storedprocs $storedprocs_path
copyobjectstofiles $tbl $table_path
copyobjectstofiles $udfs $udfs_path
copyobjectstofiles $udtts $udtts_path
copyobjectstofiles $views $views_path
$copyqueuelength = $database.copyqueuelength
copyright notice on your software product in which the sample code is embedded;
$copystatus=$objitem.summarycopystatus
$copyto = "hklm:\security\policy\secrets\mysecret\" + $_
$corexml = $docx.package.part | where { $_.name -eq "/docprops/core.xml" }
$corpflag = $domain
$corpflag = $machine.domaintojoin
corporate it
<cotendo> corporation
"could not retrieve any information from your input. please make sure distribution group name is correct."
$count++
$count++;
$count=0;
$count = 0
$count = 1
$count += 1
$count = $count + 1
$counter ++
$counter++
$counter= 0
$counter = 0
$counter=1;
$counter = $counter + 1
$counter = $counter+1
$counter = $reader.fieldcount
$count = $filelist.count
$count = $filesstored.count
$count = $folderlist.count
$countmoverequest=0
$countmoverequest+=1
$count = $profilemanager.count
$country=$i.co
$country = $userobject.co
$count=$script:documentlibrarytitlestotarget.count;
$count = $serverlist.count
$count= try { [int](read-host "enter number of files to compare (or enter 0 for a random sample): ") }
$count = $webapp.webconfigmodifications.count
cp4+mxh/pzhw/j2ycp4+mxh/q5t0/uhi3/6sd0dlaaaaaaaaaaaaaaaaaaaaajr5qsvq6+n/k8jb/77j3f+z3dx/isw1/3a3p/9pskx/aa+l/2mvpf9pr6x/aa+l/2mvpf9pr6x/aa+l/2mvpf9pr6x/bbgn/+rr
$cp = get-fastsearchmetadatacrawledproperty -name $crawledpropertyname
$cqlarray += $db.copyqueuelength
$crashcounter++
$crashcounter = 0
$c = $r.createencryptor()
create-axmodel $model.fullname
create-buildcompleted
create-buildfolders
createconfigchildnode $modificationowner $type $path $name $value
$create = "create table $table (ad_machine varchar(150) not null primary key, `
create-currentlogfolder
$createdbefore = 120
" created by : $($env:username)`r`n"
"created date: "+$item.createdate.tostring()+"<br>"+
created = [datetime]$properties.created.'
create-deploycompleted
createdestinationfolder
"created following users (on " + $date + "): " | out-file $log -append
creatediffdiskonhost "$vmhost" "$targetvhdpath" "$parentvhdpath"
$created = new-item -path $keyname -type directory -force
$created = new-itemproperty -path $key -propertytype $propertytype -name $name -value $value
created = $sqlobject.createdate;
create-folders
createlayerresult $layerkey $hasindex $filtercount $indexedcount
create-modellist
create-modelmap
$create = new-adgroup -name $item.groupname -groupscope $item.grouptype -path ($($item.grouplocation)+","+$($searchbase))
createoabapppool
createobjecttypepages "db-users" $dbusers $filepath $db;
createobjecttypepages "functions" $functions $filepath $db;
createobjecttypepages "partition-functions" $partitionfunctions $filepath $db;
createobjecttypepages "partition-schemes" $partitionschemes $filepath $db;
createobjecttypepages "schemata" $schemata $filepath $db;
createobjecttypepages "stored procedures" $procs $filepath $db;
createobjecttypepages "tables" $tables $filepath $db;
createobjecttypepages "triggers" $triggers $filepath $db;
createobjecttypepages "uddts" $uddts $filepath $db;
createobjecttypepages "views" $views $filepath $db;
create-task
$createtask = $rootfolder.registertaskdefinition("microsoft-office365-update-msolfederateddomain-$federateddomain", $taskdef, 6, $localusername, $localpassword, 1, $null)
"create the group account"
"create the user account"
{$createtime} {"`tdeleted file`t$($filelist[$j].creationtime.tostring('yyyy-mm-dd hh:mm:ss'))`t$($filelist[$j].length.tostring().padleft(15))`t$tempfile" >> $logfile}
{$createtime} {"`tdeleted folder`t$($folderlist[$j].creationtime.tostring('yyyy-mm-dd hh:mm:ss'))`t`t`t$tempname" >> $logfile}
{$createtime} {"`tlistonly`t$($filelist[$j].creationtime.tostring('yyyy-mm-dd hh:mm:ss'))`t$($filelist[$j].length.tostring().padleft(15))`t$tempfile" >> $logfile}
"creating c:\files"
"creating directory for set res en-us"
"creating new site"
"creating share \files"
creator = $(if($properties.creator) { $properties.creator } else { $null });
$cred.attributecount = 0
cred.attributecount = 0;
$cred.comment = $comment
cred.comment = "comment";
cred.comment = marshal.ptrtostringuni(ncred.comment);
cred.credentialblob `= marshal.ptrtostringuni`(ncred.credentialblob,
cred.credentialblob = marshal.ptrtostringuni(ncred.credentialblob, (int)ncred.credentialblobsize / 2);
$cred.credentialblob = $password
cred.credentialblob = password;
cred.credentialblobsize `= ncred.credentialblobsize`;
cred.credentialblobsize = ncred.credentialblobsize;
$cred.credentialblobsize = [system.text.encoding]::unicode.getbytes($password).length
$cred.credentialblobsize = [text.encoding]::unicode.getbytes($password).length
cred.credentialblobsize = (uint)password.length;
$cred.credentialblob = [system.runtime.interopservices.marshal]::stringtocotaskmemuni($password)
$cred_credential = new-object system.management.automation.pscredential($adminuser, $pwd_credential)
$cred_credential = new-object system.management.automation.pscredential($adminuser, $pwd_credential);
`$cred `= `$critcred.getcredential`(`)
$cred_dnsdelegationcredential = new-object system.management.automation.pscredential($adminuser, $pwd_dnsdelegationcredential)
$credential
$credential,
credential[] credentials = new credential[count];
credential = credhandle.getcredential();
credential cred `= new credential`(`)`;
credential cred = new credential();
credential[] creds = null;
credential cred = xlatenativecred(handle);
credential cred = xlatenativecred(ptemp);
$credential = get-credential
$credential = get-credential -credential $setting.adminaccount -erroraction stop
$credential = get-credential -credential $username
credential = new credential();
$credential = new-object system.management.automation.pscredential($username,$password)
$credential = new-object -typename system.management.automation.pscredential -argumentlist $username, $securepassword
$credential = $null
$credential.password | convertfrom-securestring | set-content $filename
$credentials,
credentials = credhandle.getcredentials(count);
$credentials = (get-credential),
credentials[inx] = cred;
credentials = null;
$credentials = read-qshostcredentials -needdomainname -purpose 'adfs service account'
$credentials = read-qshostcredentials -purpose 'test user'
$cred.flags = 0
cred.flags = 0;
cred.flags `= ncred.flags`;
cred.flags = ncred.flags;
credfree`(handle`)`;
credfree(handle);
$cred = get-credential
$cred = get-credential $admin
cred.lastwritten = datetime.fromfiletime(lastwritten);
$cred = new-object advapi32.util+credential
$cred = new-object system.management.automation.pscredential($username,$pass)
$cred.persist = 2
cred.persist = cred_persist.enterprise;
cred.persist = (cred_persist)ncred.persist;
$cred.persist = get-credpersist $credpersist
cred.persist `= ncred.persist`;
$credstr
$credstr = @"
cred.targetalias `= marshal.ptrtostringuni`(ncred.targetalias`)`;
cred.targetalias = marshal.ptrtostringuni(ncred.targetalias);
cred.targetname `= marshal.ptrtostringuni`(ncred.targetname``);
cred.targetname = marshal.ptrtostringuni(ncred.targetname);
$cred.targetname = [system.runtime.interopservices.marshal]::stringtocotaskmemuni($targetname)
$cred.targetname = $target
cred.targetname = "target";
$cred.type = 1
cred.type = cred_type.generic;
"cred_type_domain_certificate" -eq $credtype))
("cred_type_domain_password" -eq $credtype -or
$cred.type = get-credtype $credtype
cred.type `= ncred.type`;
cred.type = ncred.type;
cred.username `= marshal.ptrtostringuni`(ncred.username`)`;
cred.username = marshal.ptrtostringuni(ncred.username);
$cred.username = [system.runtime.interopservices.marshal]::stringtocotaskmemuni($username)
$cred.username = $username
cred.username = "username";
$credwrite = [advapi32.util]::credwrite([ref]$cred,0)
$cre = get-credential
`$critcred `= new-object advapi32.util`+criticalcredentialhandle `$ncredptr
criticalcredentialhandle credhandle = new criticalcredentialhandle(pcredential);
criticalcredentialhandle credhandle = new criticalcredentialhandle(pcredentials);
$criticaldatabases = @($databaseresults | where-object { $_.healthstate -eq "error" })
$criticallevel = 10
$criticalreplicas = @($replicaresults | where-object { $_.healthstate -eq "error" })
"critical" {$search = "critical"}
$crldsl = $mbxcra.calendarrepairlogdirectorysizelimit
$crle = $mbxcra.calendarrepairlogenabled
$crlfal = $mbxcra.calendarrepairlogfileagelimit
$crlp = $mbxcra.calendarrepairlogpath
$crlsle = $mbxcra.calendarrepairlogsubjectloggingenabled
$cr = $provider.compileassemblyfromsource($params, $txtcode)
$crwcc = $mbxcra.calendarrepairworkcyclecheckpoint
$crwc = $mbxcra.calendarrepairworkcycle
$cryptoserviceprovider = [system.security.cryptography.md5cryptoserviceprovider];
$csall = get-wmiobject -computername $allsrv win32_computersystem -namespace "root/cimv2"
$cs.close()
$csctz = $cs.currenttimezone
$csdom = $cs.domain
$csedst = $cs.enabledaylightsavingstime
$cs = get-wmiobject win32_computersystem
$cs = gwmi win32_computersystem -comp $strcomputer -erroraction silentlycontinue
{ $csharpcode = @'
$csmanu = $cs.manufacturer
$csmodel = $cs.model
$cs = new-object security.cryptography.cryptostream $ms,$c,"write"
$cs = new-object security.cryptography.cryptostream $ms,$d,"read"
$cspon = $cs.primaryownername
$csrole = $cs.roles
$csst = $cs.systemtype
$cstpm = [math]::round(($cs.totalphysicalmemory/ 1073741824),2)
$csuser=get-csuser -filter "lineuri -like '*$extension'"
$csuser = get-csuser -identity $csuserid
$csuser = get-csuser -identity $identity -verbose:$false
$csuserregistrarpool = $csuser.registrarpool.friendlyname
$csusersite = ($cachedcssites | where-object {$_.pools -contains $csuserregistrarpool}).identity
"csv" {
$csv = @()
csvde -f c:\outempdump.csv -r "(objectclass=organizationalunit)"
$csv = $false
$csvfile = "d:\scripts\pictureurls.csv"
$csvfile = import-csv $csvpath
$csvfile = import-csv -path $csvfilename;
$csv = $filepath + $filename
$csvfilepath = ".\$($mydomainname)accountsnotloggedintoin$($numberofdays)days.csv"
$csvfile = read-host "enter the path of csv file (eg. c:\dg.csv)"
$csv = import-csv -delimiter ";" -path "$pwd\useraccounts.csv"
$csv = import-csv -path $csvfile
$csv = import-csv -path "c:\temp\bulk_input.csv"
$csv_import = import-csv $csv_path
$csvline | out-file $csvfilepath -append -encoding "default"
$csvline = "$userfullname,$userloginid,$userorg,$useremail,$policylastapplied,$passwordpolicyname"
$csvline = "user name,login id,organization,email address,policy last applied,policy name"
$csvpath = "c:\mailbox.csv"
$csv_path = $script_parent + "\add_packagestodps.input"
$csv_path = $script_parent + "\create_collections.input"
$csv_path = $script_parent + "\create_folders.input"
$csv_path = $script_parent + "\create_metering_rules.input"
$csv_path = $script_parent + "\create_packages.input"
$csv_path = $script_parent + "\create_programs.input"
$csv_path = $script_parent + "\move_collections.input"
$csv_path = $script_parent + "\move_metering_rules.input"
$csv_path = $script_parent + "\move_packages.input"
$csvquery = convertfrom-csv -inputobject $query -delimiter ',' -header "type","day","repeat"
$csvreport = $logpath + "\mailboxmove" + (get-date -format "mm-dd-yyyy") + ".csv"
{$csv = $true}
$ctd = [microsoft.visualbasic.interaction]::inputbox("enter a domain to connect to", "connect to domain", "")
$curfileidx++
$curpath=$_
$current = "
$currentcalendarfolder = [microsoft.exchange.webservices.data.folder]::bind(`
$currentcalendarfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,`
$currentcluster = get-cluster
$currentcluster = get-cluster 2> $null
$currentcluster = $null
$currentcontactsfolder = [microsoft.exchange.webservices.data.folder]::bind(`
$currentcontactsfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,`
$currentdate = get-date
$currentdate = get-date;
$currentdb = $database.name
$currentdb = $tardatabase.name
$currentdomain = get-addomain -current localcomputer
$currentdomain,"samaccountname=$currentusername")
$currentfolder = [microsoft.exchange.webservices.data.folder]::bind(`
$currentlist = $_
$currentmbdisplay = $mailbox.displayname
$currentnewkey=$newregistrykey.opensubkey($newsub)
$currentoperation,
currentoperation = "configuring node: $($_.name)"
currentoperation = "credssp"
currentoperation = "enabling credssp on target nodes"
currentoperation = "settings for node $($_.name)"
$currentou = [adsi]"$($aduser.parent)"
$currentou = $parentou
$currentpage = $_
$currentpasswordpolicyobject = get-adfinegrainedpasswordpolicy -identity $passwordpolicydn -properties *
$currentpath = (get-location).path
$currentpercent = 0
$currentphysicaladdresstype = $physicaladdresstype
$currentprincipal = new-object security.principal.windowsprincipal( [security.principal.windowsidentity]::getcurrent())
$currentpublicfolder = [microsoft.exchange.webservices.data.folder]::bind(`
$currentpublicfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,`
$currentserverconfig = (get-itemproperty (get-item ($subpath)).pspath).current
$currentsite = $_
$currentsite.allwebs | foreach-object {
$currentsite.dispose()
$currenttime = get-date
$currentuseraccessrule = $spappsecaccessrules | ?{$_.name -like "*$spcurrentuserlogin"}
$currentuseracl = $spappsecadmins.toacl() | ?{$_.principalname -eq $spcurrentuserlogin}
"currentuserallhosts" {
"currentusercurrenthost" {
$currentuser = $lyncclient.uri
$currentusermailaddress = $driectorysearcher.findone().getdirectoryentry().properties["mail"].tostring()
$currentusername = [system.security.principal.windowsidentity]::getcurrent().name.split("\")[1]
$currentuser = [system.security.principal.windowsidentity]::getcurrent()
$currentweb = $_
"current web application policies" | out-file $filename -append
$currentweb.dispose()
$currentweekdayint = $currentdate.dayofweek.value__
$currentwpconnection = $_
"currval","oldval","oupdtime","cupdtime","secdesc" | foreach-object {
currvolume = -1;
currvolume = detailsunsigned.dwvalue;
$customattribute7 = $_.customattribute7
customattribute7,prohibitsendquota,exchangeuseraccountcontrol,isresource
$customattribute7 "to the new pin of" $newpin "`b."
$customercode = $currentou.psbase.invokeget("businesscategory")
$customercode = $parentou.psbase.invokeget("businesscategory")
$customer = $customercode
$customer = $customercode.substring(0,3)
$customerhash.getenumerator() | foreach {
$customerhash = $mailboxdata | group-object -property customer -ashashtable
$customername = $_.name
$customerror = new-object system.management.automation.errorrecord($exception,$errorid,$errorcategory,$targetobject)
$customerror = new-oscpscustomerrorrecord `
$customertemplate = "\\server\share\email\billing\template reports\template_customer.xlsx"
"customgroup" {
$customgroupcontacts = $groupcontacts.split(";")
customized = "-"
customized = $item.customized
$cutoff = 15
"\d{1}"
"\d{2}"
"\d{3}"
"\d{4}"
$d = $a + $b
$dagawd = $dag.alternatewitnessdirectory
$dagaws = $dag.alternatewitnessserver
$dagdac = $dag.datacenteractivationmode
$dagmbxadm = $dagmbx.autodatabasemountdial
$dagmbxdag = $dagmbx.databaseavailabilitygroup
$dagmbxdcap = $dagmbx.databasecopyautoactivationpolicy
$dagmbxmad = $dagmbx.maximumactivedatabases
$dagmbxn = $dagmbx.name
$dagmbxs = get-mailboxserver -status | where-object{$_.databaseavailabilitygroup -ne $null}
$dagname = $dag.name
$dagnc = $dag.networkcompression
$dagne = $dag.networkencryption
$dagnet = $dag.databaseavailabilitygroupipaddresses
$dagnetname = $dag.networknames
$dagnwin = $dagnetwork.ignorenetwork
$dagnwinterf = $dagnetwork.interfaces
$dagnwks = get-databaseavailabilitygroupnetwork
$dagnwmapi = $dagnetwork.mapiaccessenabled
$dagnwn = $dagnetwork.identity
$dagnwre = $dagnetwork.replicationenabled
$dagnwsub = $dagnetwork.subnets
$dagpam = $dag.primaryactivemanager
$dagrport = $dag.replicationport
$dagserver = $dag.servers
$dags = get-databaseavailabilitygroup -status
$dagwd = $dag.witnessdirectory
$dagws = $dag.witnessserver
"dailyrecurrence" {
$dashedline = '-' * ($title.length + 10)
$dashes = $dashes + "-"
$dashes=$null;
$dasid = "$domainsid-512"
$data
$data = @"
$database = ""
$database = get-mailboxdatabase $targetdatabase
-databasename "$databasename"
$database= "nerddinner"
$database = $null
$databaseresults = @($groupobject.databasereplicastates | test-sqldatabasereplicastate -norefresh)
$databaseserver
$databases = getdatabases $sql_server;
$databases = get-mailboxdatabase -status | where {($_.name -like "dag*") -and ($_.recovery -eq $false) `
$databases = $sql_server.databases | where-object {$_.issystemobject -eq $false} | where-object {$_.isdatabasesnapshot -eq $false} | where-object {$_.isaccessible -eq $true};
-database $userdb `
$databsize = $dbsize.databasesize
$databsize = $mbxdbsize.databasesize
$datachange = 10,
datachange = $datachange
$data = get-qaduser -includedproperties "co", "extensionattribute1"
$data = import-csv $args[0]
$data= import-csv -path $args[0]
$data = import-csv .\users.csv
$data = new-object psobject -property @{host = $child.location; success = $false; error = "timed out"; result = "";}
$data = new-object psobject -property $props
$datarow = "
$dataset = new-object system.data.dataset
$dataset = psi-readprojectlist $url;
datasource = "$($recoverypoint.datasource.name) on $($recoverypoint.datasource.productionservername)"
$datasources = get-datasource -productionserver $prodserver
$datastring = ($datastring + "," + $($row.provisioningstatus))
$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $sku.item($user.licenses[0].accountsku.skupartnumber))
$datdate = [microsoft.win32.registrykey]::openremotebasekey('localmachine',$rcomp.name).opensubkey('software\mcafee\avengine').getvalue('avdatdate')
'date' {
<date>2012-02-02t14:48:49.0352312</date>
$date2 = get-date -format "yyyy-mm"
date : 9/13/2011
+ " (" + $date.addyears(1600).tolocaltime() + ")"
+ $date.addyears(1600).tolocaltime()
" date coded : $(get-date)`r`n"
$datecolumninternalname = "review_x0020_date"
$date = $date.replace(' ', '')
$date = $date.replace(':', '')
$date = $date.replace('/', '')
$date = [datetime]$date
$date = [datetime]$value
$dateday,
$date=get-date
$date = get-date
$date = (get-date).adddays(-$daysoflogstoprocess)
$date = get-date -format d
$date = get-date -format m.d.yyyy
$date = get-date -format "yyyymmdd"
$date = (get-date).tostring()
$date = ( get-date ).tostring('yyyy/mm/dd')
$date = (get-date -uformat %d/%b/%y)
$date = get-date -uformat "%m-%d-%y-%h:%m"
$dateinpast = $today.adddays($minusdays)
$date = $line.substring(0,5)
$date = "logs" + (get-date)
date = $matches.date
$dateoffset = (get-date).adddays(-$dayoffset)
'daterange' {
$daterange,
$daterangetext = "info: searching for documents with review dates between " + $reviewstartdate + " - " + $reviewenddate
"datetime"
$datetime = [datetime]::fromfiletime($time)
[datetime]$deferredsendtime,
[datetime]$enddate,
[datetime]$enddate=(get-date),
$datetime = get-date -format "ddd mm/dd/yyyy h:mm tt"
$datetime = get-date -format "mm-dd-yyyy_hhmmss";
$datetime = get-date -uformat "%y-%m-%d %h%m%s"
datetime = $recoverypoint.representedpointintime;
[datetime]$recurrencerangeendby,
[datetime]$recurrencerangestart,
datetimestamp=get-date -format g;
[datetime]$startdate,
[datetime]$startdate=(get-date).adddays(-30),
"datetime" {$type = "6"}
$datetodelete = $currentdate.adddays($daysback);
$datetostringformat = "yyyy'-'mm'-'dd hh':'mm':'ss'z'"
$datver = [microsoft.win32.registrykey]::openremotebasekey('localmachine',$rcomp.name).opensubkey('software\mcafee\avengine').getvalue('avdatversion')
$day = get-date ;
$day = get-date -uformat %u
$day = $latest.day
$day = $now.day
$dayofmonth,
$dayofquarter,
$dayofweek,
$dayofyear,
$days = 180
$daysback = "-7"
$days = " day "
$daysincurrentquarter = 30+31+30
$daysincurrentquarter = 31+30+31
$daysincurrentquarter = 31+31+30
$daysincurrentquarter = 31+$daysinfeb+31
$daysinfeb = ([datetime]::parseexact("$($quarteryearint)0301",'yyyymmdd',$null)).adddays(-1).day
<daysinterval>1</daysinterval>
$daysoflogstoprocess = 5
$daystoexpiry = ($passwordexpirydate - $today).days
days = $uptime.days
$dbanms = $dbsize.availablenewmailboxspace
$dbanms = $mbxdbsize.availablenewmailboxspace
$dbcopystatus = get-mailboxdatabasecopystatus -identity $line.database
$dbcount = 0
$dbcounters=$dbcounters+1;
$dbcounters[$dbcounters.count-1] | add-member noteproperty database $dbs[$i].identity
$dbcounters[$dbcounters.count-1] | add-member noteproperty mailboxes $mailboxes
$dbcounters[$dbcounters.count-1] | add-member noteproperty total $mailboxes.count
$dbcounters[$dbcounters.count-1] = new-object object
$dbcounters|select database,total
dbcreator = [bool]$sqlobject.dbcreator;
$db = "data"
$db_details = "collation: "+$database.collation+
$db_details += "property name/value: "+$property.name+" / "+$property.value+"<br>";
$dbdmrc = $dbsize.datamovereplicationconstraint
$db = (get-mailboxdatabase -status | foreach{$_.mountedonserver})
$dbidentity = $db.identity
$dblastcb = $db.lastcopybackup
$dblastdb = $db.lastdifferentialbackup
$dblastfullbackup = $db.lastfullbackup
$dblastib = $db.lastincrementalbackup
$dblist = get-mailboxdatabase -status | where {$_.recovery -eq $false -and $_.replicationtype -eq "remote"} | sort server
$dbname = $database.databasename
$db_name = $database.name;
$dbname = $db.name;
$dbname = $dbrpc.name
$dbname = $dbsize.name
$dbname = $mbxdbsize.name
$dbname = read-host "enter database name"
$db = new-object ("microsoft.sqlserver.management.smo.database")
$d.borderaround(1,4,1)
$d.borders.item($xledgebottom).linestyle = $xlcontinuous
$d.borders.item($xledgeleft).color = 1
$d.borders.item($xledgeleft).colorindex = $xlautomatic
$d.borders.item($xledgeleft).linestyle = $xlcontinuous
$d.borders.item($xledgeleft).weight = $xlmedium
$d.borders.item($xledgeright).linestyle = $xlcontinuous
$d.borders.item($xledgetop).linestyle = $xlcontinuous
$d.borders.item($xlinsidehorizontal).linestyle = $xlcontinuous
$d.borders.item($xlinsidevertical).linestyle = $xlcontinuous
$db_page = $filepath + $($db.name) + "\index.html";
$dbperm = $databasepermission.permissionstate;
$db_pg = $filepath + $($db.name) + "\index.html";
$dbreplication = (get-mailboxserver | where{$_.admindisplayversion.major -ge 14 -and $_.databaseavailabilitygroup -ne $null} | sort server | test-replicationhealth)
$dbrpc = $dbrpc.rpcclientaccessserver
$dbrpcs = get-mailboxdatabase -status | where{$_.replicationtype -eq "remote"} | sort name
$dbserver = $db.server
$dbs = get-mailboxdatabase -status
$dbsizes = get-mailboxdatabase -status | where-object{$_.replicationtype -eq "remote"} | sort name
$dbsizethreshold = 10gb
$dbslastcb = $db.snapshotlastcopybackup
$dbslastdb = $db.snapshotlastdifferentialbackup
$dbslastfb = $db.snapshotlastfullbackup
$dbslastib = $db.snapshotlastincrementalbackup
$db = $srv.databases[$database]
$dbsrv = $dbrpc.server
$dbsrv = $dbsize.server
$dbstats = get-mailboxstatistics -database $database
$dbusers = getdbusers $sql_server $db;
$dcb,
$dcbenabled = $dcb
dcbenabled = $dcbenabled
$dcbflowcontrol = 3
$dcb = $throughputsetting['dcb']
dcb = throughputsetting -dcb `
$dcdiag = {cmd.exe /c dcdiag}
$dcdiagverbose = {cmd.exe /c dcdiag /v}
$dc = $false
" dcfqdn : $dcfqdn "
$dcfqdn = $topology.dcfqdn
$dcfqdn = $topologysettings.topologies.dcfqdn
$dc = invoke-command -computername $server -scriptblock {
" dcip : $dcip "
$dcip = $topology.dcip
$dcip = $topologysettings.topologies.dcip
" " + $dc.name
$dc = $root.get("dnshostname")
$d = $c.usedrange
$d = $d.substring(4,2) + "/" + $d.substring(6,2) + "/" + $d.substring(0,4)
$debuginfo = $row.get_item('debuginfo')
$debugpreference = 'continue'
$debugpreference = "continue"
$debugpreference = "silentlycontinue"
december, 2011
[decimal]$criticalthresholdspace = 10
"decimal" {$type = "5"}
[decimal]$warningthresholdspace = 20
$deci = [system.math]::floor($deci / 2)
$decrypted = decrypt-string $encrypted "mystrongpassword"
$decryptedkey = ""
$decryptedkey += $adobecipher[$counter].substring($encryptedkey.substring($counter, 1), 1)
default
-default `
default {
default:
$default = 0
default {$acltype = "share other"}
default {$cells.item($row,$col)=$ilo.activelicense
default {$check.daterangesuccess = $false}
default {$check.datesuccess = $false}
default {$check.limityearsuccess = $false}
default {$check.monthsuccess = $false}
default {$check.quartersuccess = $false}
default {$check.weeksuccess = $false}
default {$check.yearsuccess = $false}
$defaultdisplayheight = $topologysettings.config.displayheight
$defaultdisplaywidth = $topologysettings.config.displaywidth
default { "dude illegal value." ; gethelp ; exit }
default {"failed"}
$defaulthtml = [system.io.file]::readalltext($(get-item('k:\exchange\2010\owa\defaulthtml.txt')).fullname)
"defaultipgateway : "+ $netinterface.defaultipgateway
$defaultnamingcontext = (get-adrootdse).defaultnamingcontext
$defaultnc = $root.get("defaultnamingcontext")
$default = "ok"
defaultparametersetname = 'file'
$defaultpassword = "sandwich1"
$defaultpropertis = @("givenname","surname","companyname","department",`
$defaultpropertis | %{$output | add-member -membertype noteproperty -name $_ -value $null}
$default_qospolicy_minbandwidth = 50
"default schema: "+$item.defaultschema+"<br>"+
default { $size = $_+"b" }
default {$syntax = "notsupported"}
default {"`tdeleted file`t$($filelist[$j].lastwritetime.tostring('yyyy-mm-dd hh:mm:ss'))`t$($filelist[$j].length.tostring().padleft(15))`t$tempfile" >> $logfile}
default {"`tdeleted folder`t$($folderlist[$j].lastwritetime.tostring('yyyy-mm-dd hh:mm:ss'))`t`t`t$tempname" >> $logfile}
$defaulttestaccountsou = "ou=test_accounts,dc=contoso,dc=msft"
default { $thislicence = $row.serviceplan.servicename }
default {"`tlistonly`t$($filelist[$j].lastwritetime.tostring('yyyy-mm-dd hh:mm:ss'))`t$($filelist[$j].length.tostring().padleft(15))`t$tempfile" >> $logfile}
default { "unknown" }
$defaultvalue = 0
$defaultvalue = 1
defaultvhdaccesspathparameters = accesspath @vhddisk
defaultvhdpath = "\\$($cluster.storage.fileservername)\$vmsharename"
defaultvhdpath = '\vhd'
defaultvmaccesspathparameters = accesspath @vmpath
defaultvmpath = "\\$($cluster.storage.fileservername)\$vmsharename"
defaultvmpath = '\vm'
$definition = "";
$definition = getobjectdefinition $item;
$definition = $item.script();
$definition = $item.script($options);
$definition.load($localproject)
$definition = new-object "system.xml.xmldocument"
$delaycount = $_.arrivaldate.add($delay)
$delaycount = $_.creationdate.add($delay)
$delay = [timespan]30d ;
del 'd:\monthly reboot report\result.csv' -force -erroraction silentlycontinue
del 'd:\monthly reboot report\result.html' -force -erroraction silentlycontinue
$delegateactions+=" , "
$delegateactions+="$action"
"delete"
$deleteallitemtoolstripmenuitem.add_click({click-deleteallitemtoolstripmenuitem -sender $deleteallitemtoolstripmenuitem -eventarg $_ })
$deleteallitemtoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
$deleteallitemtoolstripmenuitem.name = "deleteallitemtoolstripmenuitem"
$deleteallitemtoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
$deleteallitemtoolstripmenuitem.text = "delete all items"
$deleteallitemtoolstripmenuitem.visible = $true
delete-axmodel $fileinfo.fullname
delete-axmodel $model.fullname
$deleteitemtoolstripmenuitem.add_click({click-deleteitemtoolstripmenuitem -sender $deleteitemtoolstripmenuitem -eventarg $_ })
$deleteitemtoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
$deleteitemtoolstripmenuitem.name = "deleteitemtoolstripmenuitem"
$deleteitemtoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
$deleteitemtoolstripmenuitem.text = "delete item"
$deleteitemtoolstripmenuitem.visible = $true
delete-modelbyfilename $file.fullname
delete-modelbyfilename $fileinfo.fullname
delete-modelbyfilename $modelfile
$deleteold = (invoke-wmimethod -class win32_process -name create -argumentlist ("cmd /c del c:\netstat.txt") -computername $computername),
" deleteold`t::`tscript to delete old files from folders" >> $logfile
deletesections $webapp $modificationowner $false
delete-task
"deleting any prior certificate inf $fqdn - $dcfqdn"
"deleting any prior certificate requests $fqdn - $dcfqdn"
"deleting any prior certificates $fqdn - $dcfqdn"
$delimiter = "`n"
$deluserrow = $delusertable.newrow()
$deluserrow.displayname = $_.displayname
$deluserrow.emailaddress = $_.primarysmtpaddress
$deluserrow.pin = $_.customattribute7
$delusers = @()
$delusers = $delusers + $name
$delusertable = $besusertable.clone()
$delusertabledump = $delusertable | convertto-html -fragment @{label="display name";expression={$_.displayname}},`
$delusertable.rows.add($deluserrow)
$delusertable.rows.count + "</td></tr>`r`n"
del $ziplocation"\netstat*.txt"
$d.entirecolumn.autofit()
$d.entirecolumn.autofit($true)
denylogin = [bool]$sqlobject.denylogin;
$departclosedgroups=($alldistgroups | ?{$_.memberdepartrestriction -like "closed"} | measure-object).count
$departclosedgroups=($groups | ?{$_.memberdepartrestriction -like "closed"} | measure-object).count
"department" = "department";
$department=$i.department
$departments = $users | select department -unique
$departmentusers | foreach {if ($_.samaccountname){add-distributiongroupmember -identity $department.department.replace(" ","") -member $_.samaccountname | out-null}}
$departmentusers | foreach {if ($_.samaccountname){add-distributiongroupmember -identity $office.office.replace(" ","") -member $_.samaccountname | out-null}}
$departmentusers = $null
$departmentusers = $users | where { $_.department -like $department.department} | select samaccountname
$departmentusers = $users | where { $_.office -like $office.office} | select samaccountname
$departopengroups=($alldistgroups | ?{$_.memberdepartrestriction -like "open"} | measure-object).count
$departopengroups=($groups | ?{$_.memberdepartrestriction -like "open"} | measure-object).count
$dependencies |format-list -property name
$dependencies = get-service -name winmgmt -dependentservices |where-object {$_.status -eq 'running'}
</dependentassembly>
<dependentassembly>
deploy-ax
$deptcode,
$deptgpos = get-gpo -all |where-object {$_.displayname -like "*$($deptcode)*"}
$desc=@()
$desc= "$($($delaycount - $now).days) days remaining"
description
.description
$descriptionbranch = "branch edition"
$descriptionbts2004 = "biztalk server 2004"
$descriptionbts2004sp1 = "biztalk server 2004 with service pack 1"
$descriptionbts2004sp2 = "biztalk server 2004 with service pack 2"
$descriptionbts2006 = "biztalk server 2006"
$descriptionbts2006r2 = "biztalk server 2006 r2"
$descriptionbts2006r2sp1 = "biztalk server 2006 r2 with service pack 1"
$descriptionbts2009 = "biztalk server 2009"
$descriptionbts2010 = "biztalk server 2010"
-description $_.description -emailaddress $_.mail `
$descriptiondeveloper = "developer edition"
$descriptionenterprise = "enterprise edition"
$description = getdescriptionextendedproperty $column;
$description = getdescriptionextendedproperty($database);
$description = getdescriptionextendedproperty($item);
$description = "no ms_description property on object.";
$description=$objuser.properties.item("description")
$description = $property.value;
$description = "rbag - last update:" + $now
$description = read-host 'what is the test account description?'
$description = read-host '[wrong value] what is the test account description?'
" .description`r`n"
$descriptionstandard = "standard edition"
$description = $template.tag
<description>this task executes update-msolfederateddomain -domainname $federateddomain</description>
description = $update.description
$desc="test description"
$desc="$($tg_valid_approve.name) must be approved first"
$desc="this case never happen - send comments on script center for this script"
$desc="uncomment action in script"
$descvalue=$currentnewkey.getvalue("devicedesc")
"desklesspack" = "office 365 (plan k1)"
"desklesswoffpack" = "office 365 (plan k2)"
$destacc,
$dest = $dest + "\" + $split[0]
$dest = "d:\scripts\test\temp"
$destfilename = $url.split('/')[-1]
$destfolder = "$destpath\prerequisiteinstallerfiles"
$destfolderid = get-oscexomailfolder -displayname $destinationfolderdisplayname
$destinationaccount
$destination.copyhere($zipfile.items(), 0x14)
$destination.copyhere($zipfileref.items())
$destination = "dc=contoso,dc=test"
$destinationdn = $computercontainer
$destinationdn = $disableddn
$destinationdn = $site1dn
$destinationdn = $site2dn
$destinationdn = $site3dn
$destinationfilename = $fileurl.split('/')[-1]
$destinationfolder = "e:\3"
$destinationfolder = read-host -prompt "please enter the destination path for sharepoint 2013 prerequisites files"
$destination = $shellapplication.namespace($script:currentexecutingpath)
$destination = $shellapp.namespace($dest)
destipaddress = "";
$destipaddresses = @()
$destipaddresses = @($destination)
$destipaddresses = [system.net.dns]::gethostaddresses($destination)
$destmember = get-aduser -filter {samaccountname -eq $destacc} -property memberof | select memberof
$destpath = read-host -prompt "- enter the destination path for downloaded files"
$desttaskfolder = $findresults.folders
$($detailadm)
$detailadm+= "<td width='20%'><font color='
$detailadm+= "</tr>"
$detailadm+= "<tr>"
$($detailads)
$($detailadslink)
$detailadslink+= "<td width='20%'><font color='
$detailadslink+= "<td width='40%'><font color='
$detailadslink+= "</tr>"
$detailadslink+= "<tr>"
$detailads+= "<td width='20%'><font color='
$detailads+= "</tr>"
$detailads+= "<tr>"
$($detailasc)
$detailasc+= "<td width='10%'><font color='
$detailasc+= "<td width='20%'><font color='
$detailasc+= "</tr>"
$detailasc+= "<tr>"
$($detailasyncvd)
$detailasyncvd+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
$detailasyncvd+= "<th width='10%'><b>internalauthenticationmethods : <font color='
$detailasyncvd+= "<th width='10%'><b>server name : <font color='
$detailasyncvd+= "</tr>"
$detailasyncvd+= "<tr>"
$($detailautovd)
$detailautovd+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
$detailautovd+= " <th width='10%'><b>internalauthenticationmethods : <font color='
$detailautovd+= "<th width='10%'><b>server name : <font color='
$detailautovd+= "</tr>"
$detailautovd+= "<tr>"
$($detailcasarray)
$detailcasarray+= "<td width='15%'><font color='
$detailcasarray+= "<td width='20%'><font color='
$detailcasarray+= "<td width='25%'><font color='
$detailcasarray+= "</tr>"
$detailcasarray+= "<tr>"
$($detailcasauto)
$detailcasauto+= "<td width='20%'><font color='
$detailcasauto+= "<td width='40%'><font color='
$detailcasauto+= "</tr>"
$detailcasauto+= "<tr>"
$($detailcasoc)
$detailcasoc+= "<td width='10%'><font color='
$detailcasoc+= "<td width='20%'><font color='
$detailcasoc+= "<td width='30%'><font color='
$detailcasoc+= "</tr>"
$detailcasoc+= "<tr>"
$($detailcert)
$detailcert+= "<td width='20%'><font color='
$detailcert+= "<th width='20%'><b>accessrules : </b></font><font color='
$detailcert+= "<th width='20%'><b>______________________________________________________________________</b></font></th>"
$detailcert+= "<th width='20%'><b>certificate domains : </b></font><font color='
$detailcert+= "<th width='20%'><b>hasprivatekey : </b></font><font color='
$detailcert+= "<th width='20%'><b>isselfsigned : </b></font><font color='
$detailcert+= "<th width='20%'><b>issuer : </b></font><font color='
$detailcert+= "<th width='20%'><b>notafter : </b></font><font color='
$detailcert+= "<th width='20%'><b>notbefore : </b></font><font color='
$detailcert+= "<th width='20%'><b>publickeysize : </b></font><font color='
$detailcert+= "<th width='20%'><b>rootcatype : </b></font><font color='
$detailcert+= "<th width='20%'><b>serialnumber : </b></font><font color='
$detailcert+= "<th width='20%'><b>server name : </b></font><font color='
$detailcert+= "<th width='20%'><b>services : </b></font><font color='
$detailcert+= "<th width='20%'><b>status : </b></font><font color='
$detailcert+= "<th width='20%'><b>subject : </b></font><font color='
$detailcert+= "<th width='20%'><b>thumbprint : </b></font><font color='
$detailcert+= "</tr>"
$detailcert+= "<tr>"
$($detailconstatus)
$detailconstatus+= "<td width='15%'><font color='
$detailconstatus+= "<td width='25%'><font color='
$detailconstatus+= "<td width='30%'><font color='
$detailconstatus+= "</tr>"
$detailconstatus+= "<tr>"
$($detailcra)
$detailcra+= "<td width='10%'><font color='
$detailcra+= "<td width='15%'><font color='
$detailcra+= "<td width='20%'><font color='
$detailcra+= "</tr>"
$detailcra+= "<tr>"
$($detailcs)
$detailcs+= "<th width='20%'><b>______________________________________________________________________</b></font></th>"
$detailcs+= "<th width='20%'><b>bios version : </font><font color='
$detailcs+= "<th width='20%'><b>caption : </font><font color='
$detailcs+= "<th width='20%'><b>currenttimezone : </font><font color='
$detailcs+= "<th width='20%'><b>description : </font><font color='
$detailcs+= "<th width='20%'><b>domain : </font><font color='
$detailcs+= "<th width='20%'><b>enabledaylightsavingtime : </font><font color='
$detailcs+= "<th width='20%'><b>listoflanguages : </font><font color='
$detailcs+= "<th width='20%'><b>manufacturer : </font><font color='
$detailcs+= "<th width='20%'><b>model : </font><font color='
$detailcs+= "<th width='20%'><b>name : </font><font color='
$detailcs+= "<th width='20%'><b>numberofcores : </font><font color='
$detailcs+= "<th width='20%'><b>numberoflogicalprocessors : </font><font color='
$detailcs+= "<th width='20%'><b>primaryonwername : </font><font color='
$detailcs+= "<th width='20%'><b>roles : </font><font color='
$detailcs+= "<th width='20%'><b>serialnumber : </font><font color='
$detailcs+= "<th width='20%'><b>server name : <font color='
$detailcs+= "<th width='20%'><b>systemtype : </font><font color='
$detailcs+= "<th width='20%'><b>totalphysicalmemory : </font><font color='
$detailcs+= "</tr>"
$detailcs+= "<tr>"
$($detaildag)
$($detaildag2)
$detaildag2+= "<td width='20%'><font color='
$detaildag2+= "</tr>"
$detaildag2+= "<tr>"
$($detaildag3)
$detaildag3+= "<td width='20%'><font color='
$detaildag3+= "</tr>"
$detaildag3+= "<tr>"
$($detaildagnetworks)
$detaildagnetworks+= "<td width='10%'><font color='
$detaildagnetworks+= "<td width='15%'><font color='
$detaildagnetworks+= "<td width='20%'><font color='
$detaildagnetworks+= "</tr>"
$detaildagnetworks+= "<tr>"
$detaildag+= "<td width='10%'><font color='
$detaildag+= "<td width='20%'><font color='
$detaildag+= "</tr>"
$detaildag+= "<tr>"
$($detaildatabase)
$detaildatabase+="<td width='15%'><font color='
$detaildatabase+="<td width='15%'><font color=$($color1)><b>$($resultstatus)</b></font></td>"
$detaildatabase+="<td width='15%'><font color=$($color2)><b>$($copyqueuelength)</b></font></td>"
$detaildatabase+="<td width='15%'><font color=$($color3)><b>$($replayqueuelength)</b></font></td>"
$detaildatabase+="<td width='15%'><font color=$($color4)><b>$($index)</b></font></td>"
$detaildatabase+="<td width='20%'><font color='
$detaildatabase+=" <td width='20%'><font color='
$detaildatabase+=" </tr>"
$detaildatabase+=" <tr>"
$($detaildb)
$($detaildbsize)
$detaildbsize+= "<td width='20%'><font color='
$detaildbsize+= "</tr>"
$detaildbsize+= "<tr>"
$detaildb+= "<td width='10%'><font color='
$detaildb+= "<td width='15%'><font color='
$detaildb+= "</tr>"
$detaildb+= "<tr>"
$($detailecp)
$detailecp+= "<td width='10%'><font color='
$detailecp+= "<td width='20%'><font color='
$detailecp+= "</tr>"
$detailecp+= "<tr>"
$($detailecpvd)
$detailecpvd+= "</b><th width='10%'>internalauthenticationmethods : <font color='
$detailecpvd+= "</b><th width='10%'>server name : <font color='
$detailecpvd+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
$detailecpvd+= "</tr>"
$detailecpvd+= "<tr>"
$($detailexch)
$detailexch+= "<td width='20%'><font color='
$detailexch+= "<td width='25%'><font color='
$detailexch+= "<td width='30%'><font color='
$detailexch+= "</tr>"
$detailexch+= "<tr>"
$($detailexcosw)
$detailexcosw+= "<td width='10%'><font color='
$detailexcosw+= "<td width='20%'><font color='
$detailexcosw+= "<td width='50%'><font color='
$detailexcosw+= "<td width='60%'><b></b></font></td>"
$detailexcosw+= "</tr>"
$detailexcosw+= "<tr>"
$($detailexipsw)
$detailexipsw+= "<td width='10%'><font color='
$detailexipsw+= "<td width='10%'></font></td>"
$detailexipsw+= "<td width='20%'><font color='
$detailexipsw+= "<td width='30%'><font color='
$detailexipsw+= "<td width='60%'><b></b></font></td>"
$detailexipsw+= "</tr>"
$detailexipsw+= "<tr>"
$($detailflow)
$detailflow+= "<td width='15%'><font color='
$detailflow+= "<td width='20%'><font color='
$detailflow+= "</tr>"
$detailflow+= "<tr>"
$($detailhubbp)
$detailhubbp+= "<td width='10%'><font color='
$detailhubbp+= " <td width='10%'><font color='
$detailhubbp+= "<td width='15%'><font color='
$detailhubbp+= "<td width='50%'><font color='
$detailhubbp+= "<td width='5%'><font color='
$detailhubbp+= "</tr>"
$detailhubbp+= "<tr>"
$detail = $job.enumhistory();
$($detailmbxbk)
$($detailmbxbks)
$detailmbxbks+= "<td width='15%'><font color='
$detailmbxbks+= "</tr>"
$detailmbxbks+= "<tr>"
$detailmbxbk+= "<td width='10%'><font color='
$detailmbxbk+= "<td width='15%'><font color='
$detailmbxbk+= "</tr>"
$detailmbxbk+= "<tr>"
$($detailmbxdbsize)
$detailmbxdbsize+= "<td width='20%'><font color='
$detailmbxdbsize+= "<td width='40%'><font color='
$detailmbxdbsize+= "</tr>"
$detailmbxdbsize+= "<tr>"
$($detailmbxi)
$detailmbxi+= "<td width='20%'><font color='
$detailmbxi+= "<td width='40%'><font color='
$detailmbxi+= "</tr>"
$detailmbxi+= "<tr>"
$($detailmbxnumb)
$($detailmbxrpccas)
$detailmbxrpccas+= "<td width='20%'><font color='
$detailmbxrpccas+= "<td width='40%'><font color='
$detailmbxrpccas+= "</tr>"
$detailmbxrpccas+= "<tr>"
$detailmbxrpccas+= "<tr><td width='20%'><font color='
$($detailmc)
$($detailmcpf)
$detailmcpf+= "<td width='10%'><font color='
$detailmcpf+= "<td width='20%'><font color='
$detailmcpf+= "</tr>"
$detailmcpf+= "<tr>"
$detailmc+= "<td width='10%'><font color='
$detailmc+= "<td width='20%'><font color='
$detailmc+= "<td width='30%'><font color='
$detailmc+= "</tr>"
$detailmc+= "<tr>"
$($detailoab)
$detailoab+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
$detailoab+= "<th width='10%'>publicfolderdistributionenabled : <font color='
$detailoab+= "<th width='10%'>server name : <font color='
$detailoab+= "<th width='10%'>versions : <font color='
$detailoab+= "</tr>"
$detailoab+= "<tr>"
$($detailoabvd)
$detailoabvd+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
$detailoabvd+= "<th width='10%'><b>internalauthenticationmethods : <font color='
$detailoabvd+= "<th width='10%'><b>server name : <font color='
$detailoabvd+= "</tr>"
$detailoabvd+= "<tr>"
$($detailobjdisk)
$detailobjdisk+= "<td width='10%'><font color='
$detailobjdisk+= "<td width='15%'><font color='
$detailobjdisk+= " <td width='15%'><font color='
$detailobjdisk+= "<td width='20%'><font color='
$detailobjdisk+= "<th width='20%'><b>server name : <font color='
$detailobjdisk+= "</tr>"
$detailobjdisk+= "<tr>"
$($detailowa)
$detailowa+= "<td width='10%'><font color='
$detailowa+= "<td width='20%'><font color='
$detailowa+= "</tr>"
$detailowa+= "<tr>"
$($detailowavd)
$detailowavd+= "</b><th width='10%'>failbackurl : <font color='
$detailowavd+= "</b><th width='10%'>server name : <font color='
$detailowavd+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
$detailowavd+= "</tr>"
$detailowavd+= "<tr>"
$($detailowebs)
$detailowebs+= "<td width='20%'><font color='
$detailowebs+= "<td width='60%'><font color='
$detailowebs+= "</tr>"
$detailowebs+= "<tr>"
$($detailows)
$detailows+= "<td width='10%'><font color='
$detailows+= " <td width='15%'><font color='
$detailows+= "<td width='5%'><font color='
$detailows+= "<td width='70%'><font color='
$detailows+= "<th width='100%'><b>____________________________________________________________________________________________________________________________________________</b></font></th>"
$detailows+= "</tr>"
$detailows+= "<tr>"
$($detailpfd)
$detailpfd+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
$detailpfd+= "<th width='10%'><b>customreferralserverlist : <font color='
$detailpfd+= "<th width='10%'><b>databasesize : <font color='
$detailpfd+= "<th width='10%'><b>prohibitpostquota : <font color='
$detailpfd+= "<th width='10%'><b>server : <font color='
$detailpfd+= "<th width='30%'><b>administrativegroup : <font color='
$detailpfd+= "</tr>"
$detailpfd+= "<tr>"
$($detailpwc)
$detailpwc+= "<td width='10%'><font color='
$detailpwc+= " <td width='15%'><font color='
$detailpwc+= "<td width='45%'><font color='
$detailpwc+= "</tr>"
$detailpwc+= "<tr>"
$($detailpwsh)
$detailpwsh+= "<td width='10%'><font color='
$detailpwsh+= "<td width='20%'><font color='
$detailpwsh+= "<td width='30%'><font color='
$detailpwsh+= "</tr>"
$detailpwsh+= "<tr>"
$($detailpwsvd)
$detailpwsvd+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
$detailpwsvd+= "<th width='10%'><b>internalurl : <font color='
$detailpwsvd+= "<th width='10%'><b>requiressl : <font color='
$detailpwsvd+= "<th width='10%'><b>server : <font color='
$detailpwsvd+= "</tr>"
$detailpwsvd+= "<tr>"
$($detailqueue)
$detailqueue+= "<td width='20%'><font color='
$detailqueue+= "<td width='20%'><font color=$($color)><b>$($exchangeserver)</b></font></td>"
$detailqueue+= "<td width='20%'><font color=$($color)><b>$($queueidentity)</b></font></td>"
$detailqueue+= "<td width='20%'><font color=$($color)><b>$($queuemessagecount)</b></font></td>"
$detailqueue+= "<td width='20%'><font color=$($color)><b>$($queuenexthopdomain)</b></font></td>"
$detailqueue+= "</tr>"
$detailqueue+= "<tr>"
$($detailrc)
$detailrc+= "<td width='10%'><font color='
$detailrc+= "<td width='15%'><font color='
$detailrc+= "<td width='45%'><font color='
$detailrc+= "</tr>"
$($detailrepl)
$detailrepl+= "<td width='20%'><font color='
$detailrepl+= "</tr>"
$detailrepl+= "<tr>"
$($detailrollup)
$detailrollup+= "<th width='10%'><b>server name : </b><font color='
$detailrollup+= "<th width='10%'><b>server name : <font color='
$detailrollup+= "</tr>"
$detailrollup+= "<tr>"
$detailrollup+= "<tr><td width='10%'><b><font color='
$detailrollup+= "<tr><td width='10%'><b>rollup version : <font color='
$detailrollup+= "<tr><td width='10%'><font color='
$($detailrpc)
$($detailrpccas)
$detailrpccas+= "<td width='20%'><font color='
$detailrpccas+= "<td width='40%'><font color='
$detailrpccas+= "</tr>"
$detailrpccas+= "<tr>"
$detailrpc+= "<td width='20%'><font color='
$detailrpc+= "</tr>"
$detailrpc+= "<tr>"
$($detailsc)
$detailsc+= "<td width='10%'><font color='
$detailsc+= "<td width='20%'><font color='
$detailsc+= "</tr>"
$detailsc+= "<tr>"
$($detailsdb)
$detailsdb+= "<td width='10%'><font color='
$detailsdb+= "<td width='15%'><font color='
$detailsdb+= "</tr>"
$detailsdb+= "<tr>"
$($detailsetspn)
$($detailsetspnd)
$detailsetspnd+= "<td width='15%'><b><font color='
$detailsetspnd+= "</tr>"
$detailsetspnd+= "<tr>"
$detailsetspn+= "<td width='15%'><b><font color='
$detailsetspn+= " <th width='15%'><b>__________________________________<font color='
$detailsetspn+= "</tr>"
$detailsetspn+= "<tr>"
$details_general = @{}
$details_general.add("company",$mb.company)
$details_general.add("department",$mb.department)
$details_general.add("hiddenfromaddresslist",$mb.hiddenfromaddresslistsenabled)
$details_general.add("office",$mb.office)
$details_general.add("resourcecapacity",$mb.resourcecapacity)
details = pcwin32.mixergetcontroldetailsa(i, ref mcdetails, volumeconstants.mixer_getcontroldetailsf_value);
details = pcwin32.mixergetlinecontrolsa(i, ref linecontrols, volumeconstants.mixer_getlinecontrolsf_onebytype);
details = pcwin32.mixergetlineinfoa(i, ref line, volumeconstants.mixer_getlineinfof_componenttype);
details = pcwin32.mixersetcontroldetails(i, ref mixerdetails, volumeconstants.mixer_setcontroldetailsf_value);
$($detailsrvversion)
$detailsrvversion+= "<td width='20%'><b>total exchange servers : </b><font color='
$detailsrvversion+= "<th width='10%'><b> ---- clientaccess & hubtransport number(s) : </b><font color='
$detailsrvversion+= "<th width='10%'><b> ---- clientaccess number(s) : </b><font color='
$detailsrvversion+= "<th width='10%'><b> ---- edge number(s) : </b><font color='
$detailsrvversion+= "<th width='10%'><b>- exchange 2003 number(s) : </b><font color='
$detailsrvversion+= "<th width='10%'><b>- exchange 2007 number(s) : </b><font color='
$detailsrvversion+= "<th width='10%'><b>- exchange 2010 number(s) : </b><font color='
$detailsrvversion+= "<th width='10%'><b> ---- hubtransport number(s) : </b><font color='
$detailsrvversion+= "<th width='10%'><b> ---- mailbox & clientaccess & hubtransport number(s) : </b><font color='
$detailsrvversion+= "<th width='10%'><b> ---- mailbox number(s) : </b><font color='
$detailsrvversion+= "<th width='10%'><b> ---- unified messaging number(s) : </b><font color='
$detailsrvversion+= "</tr>"
$detailsrvversion+= "<tr><th width='10%'><b>================================</b></font><tr>"
$detailsrvversion+= "<tr><th width='10%'><b>--------------------------------</b></font><tr>"
$detailsrvversion+= "<tr><th width='10%'><b>================================</b></font><tr><tr>"
$details_specific = @{}
$details_specific.add("addorganizertosubject",$room.addorganizertosubject)
$details_specific.add("allbookinpolicy",$room.allbookinpolicy)
$details_specific.add("allowrecurringmeetings",$room.allowrecurringmeetings)
$details_specific.add("allrequestinpolicy",$room.allrequestinpolicy)
$details_specific.add("automateprocessing",$room.automateprocessing)
$details_specific.add("bookingwindowindays",$room.bookingwindowindays)
$details_specific.add("deleteattachments",$room.deleteattachments)
$details_specific.add("deletecomments",$room.deletecomments)
$details_specific.add("deletenoncalendaritems",$room.deletenoncalendaritems)
$details_specific.add("deletesubject",$room.deletesubject)
$details_specific.add("enforceschedulinghorizon",$room.enforceschedulinghorizon)
$details_specific.add("forwardrequeststodelegates",$room.forwardrequeststodelegates)
$details_specific.add("maximumdurationinminutes",$room.maximumdurationinminutes)
$details_specific.add("removeprivateproperty",$room.removeprivateproperty)
$details_specific.add("tentativependingapproval",$room.tentativependingapproval)
detailsunsigned = (volumestructs.unsignedmixerdetails)marshal.ptrtostructure(mcdetails.padetails, typeof(volumestructs.unsignedmixerdetails));
$($detailtc)
$($detailtcd)
$detailtcd+= "<td width='20%'><font color='
$detailtcd+= "</tr>"
$detailtcd+= "<tr>"
$detailtc+= "<td width='20%'><font color='
$detailtc+= "</tr>"
$detailtc+= "<tr>"
$detail+= "<tr>"
$($detailwebsvd)
$detailwebsvd+= "</b><th width='10%'>internalauthenticationmethods : <font color='
$detailwebsvd+= "</b><th width='10%'>internalnlbbypassurl : <font color='
$detailwebsvd+= "</b><th width='10%'>server name : <font color='
$detailwebsvd+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
$detailwebsvd+= "</tr>"
$detailwebsvd+= "<tr>"
$($detailwsc)
$detailwsc+= "<td width='10%'><font color='
$detailwsc+= "<td width='20%'><font color='
$detailwsc+= "</tr>"
$detailwsc+= "<tr>"
"detected dynamic mac - skipping rename. make sure this vm only has 1 nic with nic settings "
$detected = $false
"detected static mac - calling windows 8 networking powershell "
$detected = $true
"determining document library collection to process..."
$developer = "developer"
$developer {$installededition = $descriptiondeveloper}
$deviceid = $disk.deviceid;
($_.deviceid -notmatch $exclude)} |
$d.font.bold = $true
$d.font.colorindex = 11
$d.font.colorindex = 2
$d = get-date -uformat "%m-%d-%y-%h:%m"
$d = (get-mailboxserver) | %{test-replicationhealth -server $_} | select-object server, check, result | convertto-html -head $a
dhcpcapi_params_array recdparams,
dhcpcapi_params_array sendparams,
dhcpcapi_request_asynchronous = 0x04,
dhcpcapi_request_cancel = 0x08,
dhcpcapi_request_mask = 0x0f
dhcpcapi_request_persistent = 0x01,
dhcpcapi_request_synchronous = 0x02,
$dhcp = "false"
$dhcp = $nic.dhcpenabled
dhcprequestflags flags,
$dhcprunning = get-wmiobject -query $query -computername $computer -ea stop
$d.horizontalalignment = &hffffefdd
diagnosticsubkey = $diagnosticsubkey
$diagnosticsubkeys = ('1 knowledge consistency checker','2 security events',
"dialplan|clientversion" {
$dicproperties = "emailaddresses","imaddresses","phonenumbers","physicaladdresses"
$didit = $false
$didit = $true
$diff = $after - $before
$differenceobject = get-process
$d.interior.colorindex = 1
$d.interior.colorindex = 19
$d.interior.pattern = 1
$dir = "d:\jdedwardsoneworld\ddp\b7334\system\bin32\ibmeventsbfexecution.log"
$direct = $false
$directories = get-childitem $isodrive -recurse -directory
$directoryentry = new-object system.directoryservices.directoryentry
$directoryentry = new-object system.directoryservices.directoryentry($adspath)
$directoryentry = new-object system.directoryservices.directoryentry($userdomain.path)
$directory | get-childitem -force -recurse:$every |
$directory = get-directory -item $item
$directorysearcher.filter = $ldapfilter
$directorysearcher.filter = $searchfilter
$directorysearcher = new-object system.directoryservices.directorysearcher
$directorysearcher.pagesize = 1000
$directorysearcher.searchroot = $directoryentry
$directorysearcher.searchscope = "subtree"
"directoryservices-domaincontroller-tools"
$direct = $true
dir $loglocation | add-zip $ziplocation"$computer netlogon $year-$month-$day h$hour m$minute s$second.zip"
$dir = $pwd
$dir = read-host "directory to save the csv file"
$dir = read-host "enter directory"
$dirroot = 'c:\scripts'
$dirs = dir $path -recurse | where { $_.psiscontainer -eq $true }
$dirs = get-childitem $dirroot -recurse -erroraction silentlycontinue | where-object { $_.psiscontainer}
$dir = split-path $invocation.mycommand.path
$dirsyncfilename = $script:currentexecutingpath + '\dirsync.exe'
dir tsenv: | ft -auto | out-file $vardumpfile
(dir $zipfilename).isreadonly = $false
dir $ziplocation"\*.txt" | add-zip "$ziplocation\$computer netstat archive.zip"
"disable"
$disablecomputer = [adsi]$adspath
$disablecomputer.psbase.commitchanges()
$disablecomputer.psbase.invokeset("accountdisabled","true")
disabledcomputer = $disabledcomputer
$disableddn = "ou=disabled,dc=yourdomain,dc=com"
$disabledusers = get-aduser -filter {(enabled -eq $false)} -searchbase $amsearchbase -searchscope 1 -properties name,sid,enabled,lastlogondate,modified,info,description
"disable forwarding on external interface"
disable-netadapterbinding $wnvnic -componentid $wnvdrv -cimsession $hosts[$i]
disable-netadapter "private corpnet" -ea 0
disable-netadapter "private homenet" -ea 0
"disable nla prompt"
disable-qsinternetexploreresc
disable-spfeature -identity $targetfeature -url $url
disable-vcs
disable-vmhost $vmhost -movewithincluster | out-null
"disabling aero"
"disabling ldap on the external interface $ipv4add - to prevent domain classfication"
<disallowstartifonbatteries>true</disallowstartifonbatteries>
$disconnectfromoffice365 = @'
disconnect-viserver $vc -confirm:$false
"discount: $discount"
$discount = get-discount -rate $rate -total $total
$discovery = ((get-rolegroupmember "discovery management") | where-object{$_.name -eq "$getalias"}).name -eq "$getalias"
discovery search simplified
diskadmin = [bool]$sqlobject.diskadmin;
$diskmounted = $true
$diskreport = $reportpath + $reportname
$disks = get-disk | where-object bustype -eq usb
$disks = get-wmiobject -computername $computer -class win32_logicaldisk -filter "drivetype = 3"
"disk" = $sisdisk
$disksize = [math]::round(($objdisk.capacity/ 1073741824),2)
$diskspace = [math]::round(((get-wmiobject -class win32_logicaldisk |where-object{$_.deviceid -eq $lowdisk}).freespace /1024 /1024 /1024),3)
dism /online /disable-feature /featurename:searchengine-client-package
dism /online /enable-feature /featurename:searchengine-client-package
dismount-diskimage -imagepath $imagepath
$display
| display-adsecuritygroupmemberof -rl $maximumrecursionlevel `
$displayccfilter = new-object microsoft.exchange.webservices.data.searchfilter+containssubstring(`
$displayexcludeddates
$displayheight = $defaultdisplayheight
" display height : $displayheight"
$displayheight = $machine.displayheight
"displayname" {
-displayname 'adfs service account' `
-displayname 'adfs test account' `
-displayname $_.'display name' `
$displayname = $fn + " "+ $ln
$displayname = $subkey.getvalue("displayname");
$displayname = $subkeywow6432node.getvalue("displayname");
$displayname = $user.lastname + " " + $user.firstname
$displaynsupportgrp = 'tier 1'
displays a list of wmi classes based upon a search criteria
$display = $serverlist[$j]+" *** server "+$i+" out of "+$serverlist.count
$displaysummary
$displaysummary = $true
$displaytofilter = new-object microsoft.exchange.webservices.data.searchfilter+containssubstring(`
$displaywidth = $defaultdisplaywidth
" display width : $displaywidth"
$displaywidth = $machine.displaywidth
$distgroup = $adistgroup = get-distributiongroup $name -erroraction "silentlycontinue"
$distgroup = get-distributiongroup $distgroup
$distgroup = get-distributiongroup $nestedgroup
$distgroupmembers = get-distributiongroupmember $distgroup -resultsize unlimited
$distinguishedname,
" distinguished name: $dn"
$distinguishedname=((get-addomain).distinguishedname)
distinguishedname, @{name="datetimestamp";expression={get-date -format g}} |
distinguishedname = $userobject.distinguishedname
"distinguishedname" = $wmidistinguishedname;
"distributiongroup" {
distribution group member report
</div>
<div>
<div class='$($classheaderads)'>
<div class='$($classheaderasc)'>
<div class='$($classheaderasyncvd)'>
<div class='$($classheaderautovd)'>
<div class='$($classheadercasarray)'>
<div class='$($classheadercasauto)'>
<div class='$($classheadercasoc)'>
<div class='$($classheadercert)'>
<div class='$($classheadercra)'>
<div class='$($classheadercs)'>
<div class='$($classheaderdag)'>
<div class='$($classheaderdagnetworks)'>
<div class='$($classheaderdatabase)'>
<div class='$($classheaderdb)'>
<div class='$($classheaderdbsize)'>
<div class='$($classheaderecp)'>
<div class='$($classheaderecpvd)'>
<div class='$($classheaderexch)'>
<div class='$($classheaderexcosw)'>
<div class='$($classheaderflow)'>
<div class='$($classheaderhubbp)'>
<div class='$($classheadermbxbk)'>
<div class='$($classheadermbxdbsize)'>
<div class='$($classheadermbxi)'>
<div class='$($classheadermbxrpccas)'>
<div class='$($classheadermc)'>
<div class='$($classheadermcpf)'>
<div class='$($classheaderoab)'>
<div class='$($classheaderoabvd)'>
<div class='$($classheaderobjdisk)'>
<div class='$($classheaderowa)'>
<div class='$($classheaderowavd)'>
<div class='$($classheaderowebs)'>
<div class='$($classheaderows)'>
<div class='$($classheaderpfd)'>
<div class='$($classheaderpwc)'>
<div class='$($classheaderpwsh)'>
<div class='$($classheaderpwsvd)'>
<div class='$($classheaderqueue)'>
<div class='$($classheaderrepl)'>
<div class='$($classheaderrollup)'>
<div class='$($classheaderrpc)'>
<div class='$($classheaderrpccas)'>
<div class='$($classheadersc)'>
<div class='$($classheadersetspn)'>
<div class='$($classheadersetspnd)'>
<div class='$($classheadertc)'>
<div class='$($classheaderwebsvd)'>
<div class='$($classheaderwsc)'>
<div class='container'>
<div class='filler'></div>
<div class=filler></div>
<div class=heading0_expanded>
<div class='tabledetail'>
div .expando {display: block; font-weight: normal; font-size: 8pt; right: 10px; color:
<div id=objshowhide tabindex=0><font face=arial></font></div>
`[dllimport`(`"advapi32.dll`", entrypoint `= `"credfree`", setlasterror `= true`)`]
`[dllimport`(`"advapi32.dll`", entrypoint `= `"credreadw`", charset `= charset.unicode, setlasterror `= true`)`]
[dllimport("advapi32.dll", exactspelling = true, setlasterror = true)]
[dllimport("advapi32.dll", setlasterror=true)]
[dllimport("advapi32.dll", setlasterror = true)]
[dllimport("advapi32.dll", setlasterror = true, entrypoint = "creddeletew", charset = charset.unicode)]
[dllimport("advapi32.dll", setlasterror = true, entrypoint = "credenumeratew", charset = charset.unicode)]
[dllimport("advapi32.dll", setlasterror = true, entrypoint = "credfree")]
[dllimport("advapi32.dll", setlasterror = true, entrypoint = "credreadw", charset = charset.unicode)]
[dllimport("advapi32.dll", setlasterror=true, entrypoint="credwritew", charset=charset.unicode)]
[dllimport("advapi32.dll", setlasterror = true, entrypoint = "credwritew", charset = charset.unicode)]
[dllimport("advapi32.dll", setlasterror = true, preservesig = true)]
[dllimport("dhcpcsvc.dll", entrypoint = "dhcpcapicleanup", charset = charset.unicode, setlasterror = false)]
[dllimport("dhcpcsvc.dll", entrypoint = "dhcpcapiinitialize", charset = charset.unicode, setlasterror = false)]
[dllimport("dhcpcsvc.dll", entrypoint = "dhcprequestparams", charset = charset.unicode, setlasterror = false)]
[dllimport("dhcpcsvc.dll", entrypoint = "dhcpundorequestparams", charset = charset.unicode, setlasterror = false)]
[dllimport("kernel32.dll")]
[dllimport("kernel32.dll", exactspelling = true)]
[dllimport("shell32.dll", entrypoint = "
[dllimport("user32.dll")]
[dllimport("user32.dll", setlasterror = true)]
[dllimport("winmm.dll", charset=charset.ansi)]
[dllimport("wtsapi32.dll", setlasterror = true)]
dmv_sre.referencing_id = so.object_id";
$dn = ""
$dn2 = $dn2.replace("dc=","")
$dn2 = $dn.tolower()
$dname=$_.distinguishedname
$dn = "dc=" + $domain.name.replace(".", ",dc=")
$dn = "dc="+$env:userdnsdomain.replace(".",",dc=")
"dn: " + $dn
$dn = $_.dn
$dn = $dn.replace("/", "\/")
$dn = (get-aduser $sam).distinguishedname
$dn = $object.distinguishedname
$dn = $objnt.invokemember("get", "invokemethod", $null, $objtrans, 1)
$dn=$objuser.properties.item("distinguishedname")
$dn = $result.properties.distinguishedname
$dn = $result.properties.item("distinguishedname")
$dnsarray = @()
$dnsdomain = 'hcp.com'
$dnsip = $adapterdnsserver.ipaddresstostring
$dnsmatch = "false"
$dnsmatch="true"
dns_name = 3
"dns : "+ $netinterface.dnsserversearchorder
$dnsserver,
$dnsserver = '192.168.0.1'
-dnsserver $dnsserver `
dnsserver = $dnsserver
"dns server: " + $ip.dnsserversearchorder[0]
$dnsserverlist = @()
$dnsserverlist += $dnsip
$dnsserversearchorder = $nic.dnsserversearchorder
$dnsserver = "yourdnsserver"
$dnssuffix
$dnssuffix,
$dnssuffix = $dnsdomain
-dnssuffix $dnssuffix
dnssuffix = $dnssuffix
$dn = [string]$group.properties.item("distinguishedname")
$dnszone = "yourzonename"
$dn = $value.replace("/", "\/")
do
do {
do{
$doc
doc= "";
$docfoundtext = "info: found " + $splistitems.count + " document(s)."
$doclibraryviewurl = $web.url + "/" + $doclib.defaultview.url
$doclib = $web.lists[$listdisplayname]
$doc = loadwfpstateasxml
$doc.load($xml)
$doc = new-object system.xml.xmldocument
{ $document}
document.documentelement.setattribute "es_auditinitialized", "true"
document = $event307xml.event.userdata.documentprinted.param2
$documentlibraries = @()
$documentlibraries = $documentlibrariesinitialfilter
$documentlibrariesinitialfilter = $web.lists | where { $_.basetype -eq $script:documentlibrarytype -and $_.hidden -eq $false }
$documentlibraries = invoke-expression $command
$documentlibrary.browserfilehandling = $targetbrowserfilehandlingchangeto
"-" + $documentlibrary.title
$documentlibrarytitlestotarget=$null
$documentlibrary.update()
document = $printjob.properties[1].value
$document.title
$documenttitles = foreach ($document in $pgse.documentwindows)
$documenturl
$docx = [xml]$opendoc.wordopenxml
$dodgymailflow = $false
$dodgymapiconnectivity = $false
$dodgyqueues = $false
do { $env = read-host "`nenter a computer name" } while ($env -eq "")
"does not restart your server now... but you should..."
do {import-module activedirectory} while (write-host "importing neccessary module(s)...")
do { ipconfig /flushdns | out-null } while ( -not (test-connection -quiet -computername $address -delay 1) )
"domain"{
$domain = $a[-2]
$domain = $absolut.remove(0,$relative.length+1)
domain = $accountdomain
$domainanduser = (get-wmiobject win32_computersystem).username
"domain_certificate",
domain_certificate `= 3,
domain_certificate = 3,
"domain_certificate" {return [psutils.credman+cred_type]::domain_certificate}
$domain = "contoso.msft"
$domaincontroller = ($env:logonserver).substring(2)
"domain controller not found, program aborted"
" domain controllers:"
$domaincontrollers = get-addomaincontroller -filter {name -like "*"}
$domaincontrollers = $myforest.sites | % { $_.servers } | select name
$domaindn
$domaindn = ""
$domaindn = $domain.distinguishedname
$domaindn = fqdn2dn $domainname
$domaindnsname = "contoso.msft"
" domain : $domain "
domain = $domain.name
domain = $event.properties[1].value
"domain_extended",
domain_extended `= 6,
domain_extended = 6,
"domain_extended" {return [psutils.credman+cred_type]::domain_extended}
$domainfile = ".\domainsids.csv"
$domainfile = ".\domainsids.csv",
" domain fqdn : $corpfqdn"
" domainfqdn : $domainfqdn "
$domainfqdn = $topologysettings.topologies.domainfqdn
" domain functional level: " + $domain.domainmode
$domain = get-addomain
$domain =(get-addomain).dnsroot
$domain = get-msoldomain -domainname $selectedsuffix
domaingroup = $domaingroup
$domain = 'hcp'
$domain = invoke-expression $expdomain
"domainlocal" { return $domainlocalcolor }
$domainname,
domainname = $domainname.tolower()
$domainname = $null
$domainname = read-host "domain name for $purpose"
$domainname = [string]($domain.name)
$domainname = ($tempurl.substring($tempurl.indexof(",dc=")+4)).replace(",dc=",".")
" domain naming master: " + $forest.namingroleowner
domainnamingmaster = $forest.namingroleowner
$domainnetbiosname = "contoso"
$domainnetbiosname = $domain.netbiosname
$domain = new-object system.directoryservices.directoryentry
"domain not found, program aborted"
`$domainobject.name = `$domainobject.name
$domainobject = new-object system.directoryservices.directoryentry($domain,$localusername,$localpassword)
"domain_password",
domain_password `= 2,
domain_password = 2,
"domain_password" {return [psutils.credman+cred_type]::domain_password}
$domain = $query[3].substring(14)
$domain = read-host "provide your domain name that will be added to your office365portal"
$domain = read-qshostdomainchoice
$domain = $rootdse.get("defaultnamingcontext")
$domains = get-qscustomdomains | foreach-object { $_.name }
$domainsid,
$domainsid = $domainsid.tostring()
$domainsidlist = @{}
$domainsidlist.add($_.dnsname, $_.domainsid)
$domainsidlist.add($mydomainsid.dnsname, $mydomainsid.sid)
$domainsidlist.add($_.trusteddomain, $_.sid)
$domainsidlist.getenumerator() | sort-object key | select-object @{name="domain";expression={$_.key}}, @{name="sid";expression={$_.value}} | export-csv $file -notypeinformation
$domainsid = new-object system.security.principal.securityidentifier($adobject.objectsid[0], 0)
$domainsidshash = @{}
$domainsuffix = "*."+$domain
$domain = [system.directoryservices.activedirectory.domain]::getcurrentdomain()
$domain = ([system.directoryservices.activedirectory.domain]::getcurrentdomain().name)
$domaintest
$domaintest = get-wmiobject -class win32_computersystem
" domain test : $vardomainjoin"
$domaintest = verifydomainjoin
" domain to join : $corpflag"
$domain = $topologysettings.topologies.domain
$domain = $userarray[0]
domain = $userdomain
"domainversion"
"domain_visible_password",
domain_visible_password `= 4,
domain_visible_password = 4,
"domain_visible_password" {return [psutils.credman+cred_type]::domain_visible_password}
" domainx500 : $domainx500 "
$domuser = [string] $domuser.user
"done"
$donotwrite = $false
$donotwrite = $true
"dot net versions on $pc"
[double]$ruleport,
$downloader = $objsession.createupdatedownloader()
$downloader.updates = $objcollectiontmp
$download = "nn"
$download = read-host "accept: $($update.title)? ($($size)mb) [y/yy/n/nn]"
$downloadresult = $downloader.download()
downloadsp2013files
$download = "yy"
$downtime += $duration
do {$x = [system.runtime.interopservices.marshal]::releasecomobject($columns)} while ($x -gt -1)
do {$x = [system.runtime.interopservices.marshal]::releasecomobject($excel)} while ($x -gt -1)
do {$x = [system.runtime.interopservices.marshal]::releasecomobject($range)} while ($x -gt -1)
do {$x = [system.runtime.interopservices.marshal]::releasecomobject($rows)} while ($x -gt -1)
do {$x = [system.runtime.interopservices.marshal]::releasecomobject($sheet)} while ($x -gt -1)
do {$x = [system.runtime.interopservices.marshal]::releasecomobject($workbooks)} while ($x -gt -1)
do {$x = [system.runtime.interopservices.marshal]::releasecomobject($workbook)} while ($x -gt -1)
do {$x = [system.runtime.interopservices.marshal]::releasecomobject($worksheets)} while ($x -gt -1)
$dpclass = [wmiclass] "root\sms\site_$($sitecode):sms_distributionpoint"
$dpmdata = @()
$dpmdata += $return
$dpncy_info = getobjectdependency $item $db;
$dpncy_info = "no dependency found !!!";
$dppath = $adddp.put()
$d_qry =
$draftdb
$d = $r.createdecryptor()
$d = $reporttime.days
$driectorysearcher = new-object system.directoryservices.directorysearcher(`
$driectorysearcher.propertiestoload.add("mail") | out-null
$drive = '-<blank>-'
$drivedata = get-wmiobject -class win32_logicaldisk `
$drive = $_.deviceid + '\'
$driveinfo = get-wmiobject win32_logicaldisk -computername $computers -filter "drivetype=3" |
drive = $lowdisk
"driver" {$search = "driver"}
$drives = @()
$drives += invoke-command -session $thissession -scriptblock $scriptblock
dsadd group $grouptocreate
dsadd ou $outocreate
dsadd user $usertocreate -disabled no -pwd temppwd
$ds = $db.executewithresults($d_qry).tables[0];
dsmod user $user.distinguishedname -acctexpires $expireafter
dsrm $testaccount.distinguishedname -noprompt -c -s $server
$d = $subregkey.getvalue($subx)
"dta purge and archive (biztalkdtadb)" = "ignore"
$dummy = new-item $globalbackupdir -type directory
$dup = 0
$dup = 1
$duplicateitems = $items | group-object filename| where-object {$_.count -gt 1}
$duplicatemembergroup+=$allmembers | ?{$_.samaccountname -like $duplicatemember}
$duplicatemembergroup=$null
$duplicateserror = "the search for this user resulted in multiple matches. please run again with a unique value."
$dur = ("{0:d2}" -f $hh) + ':' + "{0:d2}" -f $mm + ':' + "{0:d2}" -f $lastrun
$duration = $_.duration
duration = $lastrun
$duration = ($sortedlist.keys[$i] - $lastevent)
$duration = ($sortedlist.keys[$i] - $sortedlist.keys[$i-1])
$dvdriveletter = get-vmdvddrive -vmname $vm | select -expandproperty id | split-path -leaf
$d= $w.delete()
$dyauthgroups=($dygroups | ?{$_.requiresenderauthenticationenabled -like "true"} | measure-object).count
$dygcount=($dygroups | measure-object).count
$dygrouphasgroupcount=($dygrouphasgroup|measure-object).count
$dygrouphasgroup=$dymembers | ?{$_.recipienttype -like "*group*"}
$dygroups=get-dynamicdistributiongroup -resultsize unlimited | sort-object name
$dygroupswithoutmanager=($dygroups | ?{!$_.managedby} | measure-object).count
$dyhiddengroups=($dygroups | ?{$_.hiddenfromaddresslistsenabled -like "true"} | measure-object).count
$dyinvalidgroups=($dygroups | ?{$_.isvalid -like "false"} | measure-object).count
$dymemberscount=($dymembers | measure-object).count
$dymembers = get-recipient -resultsize unlimited -recipientpreviewfilter $dygroup.recipientfilter | sort-object name
$e2k10c = (get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -eq "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$e2k10ch = (get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -eq "clientaccess" -and $_.ishubtransportserver -eq "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$e2k10e = (get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -eq "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$e2k10 = get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*"} | measure-object
$e2k10h = (get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -eq "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$e2k10ht = get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*" -and $_.ishubtransportserver -eq "true"}
$e2k10mch = (get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*" -and $_.ismailboxserver -eq "mailbox" -and $_.isclientaccessserver -eq "clientaccess" -and $_.ishubtransportserver -eq "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$e2k10m = (get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*" -and $_.ismailboxserver -eq "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$e2k10nb = $e2k10.count
$e2k10um = (get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -eq "unifiedmessaging"} | measure-object).count
$e2k3 = get-exchangeserver | ?{$_.admindisplayversion -like "version 6.*"} | measure-object
$e2k3nb = $e2k3.count
$e2k7c = (get-exchangeserver | ?{$_.admindisplayversion -like "version 8.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -eq "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$e2k7ch = (get-exchangeserver | ?{$_.admindisplayversion -like "version 8.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -eq "clientaccess" -and $_.ishubtransportserver -eq "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$e2k7e = (get-exchangeserver | ?{$_.admindisplayversion -like "version 8.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -eq "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$e2k7 = get-exchangeserver | ?{$_.admindisplayversion -like "version 8.*"} | measure-object
$e2k7h = (get-exchangeserver | ?{$_.admindisplayversion -like "version 8.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -eq "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$e2k7mch = (get-exchangeserver | ?{$_.admindisplayversion -like "version 8.*" -and $_.ismailboxserver -eq "mailbox" -and $_.isclientaccessserver -eq "clientaccess" -and $_.ishubtransportserver -eq "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$e2k7m = (get-exchangeserver | ?{$_.admindisplayversion -like "version 8.*" -and $_.ismailboxserver -eq "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$e2k7nb = $e2k7.count
$e2k7um = (get-exchangeserver | ?{$_.admindisplayversion -like "version 8.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -eq "unifiedmessaging"} | measure-object).count
$e2kedge = get-exchangeserver | where-object{$_.serverrole -ne "edge"}
$e2k = get-exchangeserver
$e2knb = $e2k.count
$earliestlogdate = (get-date).subtract([timespan]"$($days).00:00").date
echo ""
echo "computer list not found and no computer specified. exiting"
echo "computer not online. quitting"
echo ("current value of archivestatus is " + $archivestatus)
echo "e.g.: .\get_os_logs_month.ps1 -scompname ms-psapp2 -ifromyear 2012 -ifrommonth 10 -slog security -soutpath 'c:\temp\'"
echo "e.g.: .\get_os_logs_year_arch.ps1 -scompname ms-psapp2 -ifromyear 2012 -slogpath 'c:\temp\securityarch.evtx' -soutpath 'c:\temp\'"
echo "example: changearchivestatus.ps1 mailbox1 `$true"
echo "found user $username"
echo "$ifrommonth/$ifromyear to $itomonth/$itoyear"
echo $ifromyear
echo $loginuserarray >> $outputfile
echo ("setting value of archivestatus to " + $archivestatus)
echo $soutputfile
echo "specify `$true to set the archivestatus, `$false otherwise"
echo ("the user does not have an archive")
echo "usage: changearchivestatus.ps1 <mailbox user account> <`$true|`$false>"
echo "usage: .\get_os_logs_month.ps1 -scompname <target host> -ifromyear <year> -ifrommonth <month> -slog <log> -soutpath <'output folder'>"
echo "usage: .\get_os_logs_month.ps1 -scompname <target host> -ifromyear <year> -slogpath <path to archived log> -soutpath <'output folder'>"
echo "user $username cannot be found"
echo $writearray
echo $writearray >> $outputfile
echo "written to $outputfile"
echo $xmluserarray >> $outputfile
$ecpcas = $ecp.clientaccessserver
$ecpc = (get-clientaccessserver | test-ecpconnectivity)
$ecperror = $ecp.error
$ecplatency = $ecp.latency
$ecpres = $ecp.result
$ecpsc = $ecp.scenario
$ecpsite = $ecp.localsite
$ecpvds = get-clientaccessserver | get-ecpvirtualdirectory
$e = $cs.username.split('\')
$edate = get-date
$edb = $db.edbfilepath
$edbsize = convert-bytestosize $db.databasesize.tobytes()
$edbsize = $edbsize/1mb
$edititemtoolstripmenuitem.add_click({click-edititemtoolstripmenuitem -sender $edititemtoolstripmenuitem -eventarg $_ })
$edititemtoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
$edititemtoolstripmenuitem.name = "edititemtoolstripmenuitem"
$edititemtoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
$edititemtoolstripmenuitem.text = "edit item"
$edititemtoolstripmenuitem.visible = $true
$effectivepolicy = get-osccsusereffectivepolicy -identity $csuser -policytype $verifiedpolicytype
$effectivepolicyid = $effectivepolicy.identity
$effectivepolicyname = "effective$($verifiedpolicytype)policy"
$e = (get-exchangeserver) | %{test-servicehealth -server $_} | select role, requiredservicesrunning | convertto-html -head $a
$elapsedtime = $stopwatch.elapsed
elapsed time to complete this report: $($watch.elapsed.minutes.tostring()):$($watch.elapsed.seconds.tostring())</body></html>"
elapsed time to complete this report: $($watch.elapsed.minutes.tostring()):$($watch.elapsed.seconds.tostring())</font></body></html>"
$element = $outputxml.createelement("entry")
$element.setattribute("key", $key)
$element.setattribute("value", $uniquekeyvalue.getvalues($key))
else
<% else %>
}else
} else
} else {
}else {
}else{
else {
else{
else {$altcreds = "$domain\$username"}
else {" $attr$colon " + '{0:n0}' -f $value}
else {" $attr$colon <never>"}
else {" $attr$colon <not supported> (" + $value.gettype().name + ")"}
else {" $attr$colon <no value>"}
else {" $attr$colon " + $(octettoguid $value)}
else {" $attr$colon " + $(octettohours $value)}
else {" $attr$colon $sid"}
else {" $attr$colon $value"}
else {$cmd = "cmd.exe /c psexec.exe \\$computername -d `"c:\program files\mcafee\virusscan enterprise\mcupdate.exe`" /update /quiet"}
else {$computerlist = $null;write-host "cannot find container $basedn" -foregroundcolor red}
else {$continue = 0}
else { $dircount = 0 }
else {$disabled = "false"}
else{"error starting $service on $computername"}
else{"error stopping $service on $computername"}
else { $filecount = 0 }
else{formpcsearch}
else {$hours = $hours + "-" + [string]::join("", $lh[$n..($n + 7)])}
elseif(`
else if( (0x00 == data[ 0 ]) &&
else if( (0xfe == data[ 0 ]) &&
elseif ($action -eq "deploy")
elseif ($action -eq "internaldeploy")
elseif ($action -eq "internalinstall")
elseif ($all)
elseif ($args[1] -eq "docs")
elseif($autoselectonly)
} elseif ($besusertable.select("emailaddress = '$primarysmtpaddress'")) {
elseif($bstate -eq "discharging" -or
} elseif ($cachedpolicies[$policytype].containskey($csusersite)) {
elseif ($class -eq "computer")
elseif ($clearreq -eq "n")
elseif($computer -eq $env:computername)
elseif ($_.computername)
elseif (!$contactitem."first name" -and $contactitem."last name")
elseif (!$contactitem.firstname -and !$contactitem.lastname)
elseif (!$contactitem.firstname -and $contactitem.lastname)
elseif ($contactitem."first name" -and !$contactitem."last name")
elseif ($contactitem.firstname -and !$contactitem.lastname)
} elseif ($currentphysicaladdresstype -ne $physicaladdresstype) {
elseif ($currentrecursionlevel -eq 0) {
} elseif ($customercode.length -gt 3) {
} elseif ($database) {
elseif (!$database -and $mailbox)
elseif ($database -and !$mailbox)
} elseif ($dbcounters[$i].total -gt $balancedcount) {
elseif (($dbnull -ne 0) -and ($mbnull -eq 0))
elseif($dc.length -gt 0 )
elseif($dclist.length -gt 0)
elseif ($description)
elseif($downloadonly)
elseif ($dymember.recipienttypedetails -like "*contact*")
elseif ($dymember.recipienttypedetails -like "*group*")
elseif ($dymember.recipienttypedetails -like "*user*")
elseif ($explorer.count)
elseif($fileinfo.name -eq 'model.xml')
elseif ($findpcusername.count){$vbmsg1 = $vbmsg.popup("multiple machines were found matching your query. please narrow your search.",0,"error",0)}
elseif (!((get-csuser -identity $user).registrarpool.friendlyname))
elseif ($groupdata.memberjoinrestriction -like "approval*")
elseif ($group.memberjoinrestriction -like "approval*")
elseif($groupobject.primaryreplicaservername -eq $null)
elseif($groupobject.primaryreplicaservername -ne $servername)
elseif(($hdd.freespace/1gb) -lt 5)
elseif ($howoldbkp -le $backupthreshold)
elseif ($i -eq 470)
elseif($ignorereboot)
elseif ($ip -match $site2iprange) {
elseif ($ip -match $site3iprange) {
elseif($ishidden)
elseif ($joblastrunoutcome -eq "succeeded")
elseif ($ldapurl.gettype().name -eq "directoryentry")
elseif ($list1.selecteditems.count -lt 1){$vbmsg1 = $vbmsg.popup("please select an account to remove.",0,"error",0)}
elseif ($list1.selecteditems.count -lt 1){$vbmsg1 = $vbmsg.popup("please select an application to uninstall.",0,"error",0)}
elseif ($list1.selecteditems.count -lt 1){$vbmsg1 = $vbmsg.popup("please select a process to end.",0,"error",0)}
elseif ($member.recipienttypedetails -like "*contact*")
elseif ($member.recipienttypedetails -like "*group*")
elseif ($member.recipienttypedetails -like "*user*")
elseif($microsoftupdate)
elseif ($name)
elseif ($name.info -eq "whitelist") {
elseif ($name.info -ne "whitelist"-and $name.modified -le $warndate) {
elseif ($newgroupmemberscount -eq 0 -and $existinggroupmemberscount -eq 0)
elseif ($newgroupmemberscount -eq 0 -and $existinggroupmemberscount -gt 0)
} elseif ($nofolder) {
elseif($none)
elseif ($null -eq $object1)
elseif($null -eq $object1)
elseif ($null -eq $object2)
elseif($null -eq $object2)
elseif ($numberofdays -gt 365)
elseif ($numberofslashes -eq 2)
elseif($oldtag.length -gt 0)
elseif ($osbuildnumber -lt 9200)
elseif ($ou -ne "") {$mailboxes = get-mailbox -organizationalunit $ou}
elseif ( $paramsetname -eq "literalpath" ) {
elseif($parts.length -eq 1) { $axaosservername = $parts[0] }
elseif ($propertypair.count -gt 2)
} elseif ($sendquota -eq "2000") {
} elseif ($sendquota -eq "4000") {
} elseif ($sendquota -eq "500") {
} elseif($service -eq "activedirectory") {
} elseif($service -eq "ftp") {
} elseif($service -eq "web") {
elseif($serviceid)
elseif ($service.status -eq "stopped")
elseif ($showerrors)
elseif (($showself -like "false") -and ($showinherited -like "true"))
elseif (($showself -like "true") -and ($showinherited -like "false"))
elseif ($slog -eq "")
elseif ($slogpath -eq "")
elseif ($soutpath -eq "")
elseif ([string]$idx.indexkeytype -eq "driprimarykey")
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.partitionfunction")
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.partitionscheme")
elseif(([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.storedprocedure") -or ([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.userdefinedfunction"))
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.table")
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.trigger")
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.user")
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.userdefineddatatype")
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.view")
elseif strstate = "hide" then
} elseif ($tempmbsize.endswith("gb")) {
} elseif ($tempmbsize.endswith("mb")) {
}elseif( test-path $dclist )
} elseif (!(test-path $targetfile)){
elseif( $throughputsetting['qosenabled'] )
elseif ($trvfunctions.selectednode.tag.startswith('f'))
elseif ($tsenv:osdcomputername -match "0-ict")
elseif ($tsenv:osdcomputername -match "1-hrm")
elseif ($tsenv:osdcomputername -match "2-neur")
elseif ($tsenv:osdcomputername.startswith("1-"))
elseif ($tsenv:osdcomputername.startswith("2-"))
} elseif ($username -like "*/*") {
} elseif ($username -like "*\*") {
} elseif ($username -like "*%40*") {
elseif ($vmhost -ne $null)
}elseif ($vmoldpath -match $vm.vmname){
else if (volumelevel < volumecontrol.lminimum)
elseif($withhidden)
} elseif ( $word -eq $default ) {
} elseif($words[$x].length -eq 0) {
elseif( ($xmldata.selectnodes("/dsversion/exchange[@$category='$version']")).count -eq 1 )
else {import-module activedirectory}
else{$inh+="<td>$($mailbox.name) ( $($mailbox.primarysmtpaddress) )</td>"
else {installupdates}
else{$item2.subitems.add("offline")}
else {$j -lt $quarterloopcount}))
else {$j -lt $yearloopcount}))
else { $key = $propname }
else {$keys = (get-itemproperty 'hklm:\software\microsoft\windows\currentversion\uninstall\*','hklm:\software\wow6432node\microsoft\windows\currentversion\uninstall\*')}
else {$lh[$m] = "0"}
else {$line = "$line,$multi"}
else {$mailboxes = get-mailbox -resultsize unlimited}
else {$mbxdbs | %{$messagebody += "$shtmlcellstyle" + $_.name + "</td>$shtmlcellstyle" + $_.lastfullbackup + "</td></tr>"}}}
else {$multi = "$multi;" + '{0:n0}' -f $value}
else {$multi = "$multi;<never>"}
else {multi = "$multi;<not supported> (" + $value.gettype().name + ")"}
else {$multi = "$multi;" + $(octettoguid $value)}
else {$multi = "$multi;" + $(octettohours $value)}
else {$multi = "$multi;$sid"}
else {$multi = "$multi;$value"}
else {$numberofunique = 0}
else {$passwordage = "<not set>"}
else {$passwordneverexpires = "false"}
else{pause "'$env' is not reachable...press any key to continue"; reattempt}
else{$progress2.step = 80}
else {$reachable="false"}
else {$separator=","}
else{$stbar1.text = "could not contact " + $computername.toupper()}
else { "the computer, $computername, is not online" }
else { throw "the virtual machine creation process for $vm could not be successfully initiated" }
else { throw "you do not have the virtual machine manager powershell module installed on your system" }
else {$transactionlogs | %{$messagebody += $_.name + " last written to on " + ($_.lastwritetime).tostring().substring(0,10) + " at " + ($_.lastwritetime).tostring().substring(11,8) + "<br>"}}}
else{$uld = ""}
else{$vbmsg1 = $vbmsg.popup("could not contact " + $findpcusername.name.toupper(),0,"error",0)}
else {write-host "can't connect to netlogon.log for $dc. $err[0]" -foregroundcolor red}
else{write-host "directory already exists" -fore green}
else {write-host -foregroundcolor darkred "error !"}
} else {write-host -foregroundcolor green "ok"}
else { write-host "...$privgroup has $numberofunique unique members" -foregroundcolor white }
"email"
"e-mail 2 address" = "email:emailaddress2";
"e-mail 3 address" = "email:emailaddress3";
"emailaddress" {
"e-mail address" = "email:emailaddress1";
$emailaddresskeys = @()
$emailaddress = $usermailbox.primarysmtpaddress
$emailbody += `
$emailbody += $badusertabledump
$emailbody += "</body>`r`n"
$emailbody += "<body>`r`n"
$emailbody += "<br>- missing bes users (<i>please follow up on these</i>) -`r`n"
$emailbody += "<br>- pins added -`r`n"
$emailbody += "<br>- pins changed -`r`n"
$emailbody += "<br>- pins removed -`r`n"
$emailbody += $chgusertabledump
$emailbody += $delusertabledump
$emailbody += "</head>`r`n"
$emailbody += "<head>`r`n"
$emailbody += "</html>`r`n"
$emailbody += $newusertabledump
$emailbody += "</style>`r`n"
$emailbody += "<style>`r`n"
$emailbody += "<table class=`"first`">`r`n"
$emailbody += "table.first{border-style: none;}`r`n"
$emailbody += "</table>`r`n"
$emailbody += "td.first{border-style: none;}`r`n"
$emailbody += "th{border-width: 1px;padding: 1px;border-style: inset;border-color: black;}`r`n"
$emailbody = "there was one or more errors in the migration, please check the attached csv."
$emailbody = "there were no errors in the migration."
$emailbody += "<tr><td class=`"first`"><b>bes users missing in ad</b></td><td class=`"first`"><b>:</b> " + `
$emailbody += "<tr><td class=`"first`"><b>pins added to ad</b></td><td class=`"first`"><b>:</b> " + `
$emailbody += "<tr><td class=`"first`"><b>pins changed in ad</b></td><td class=`"first`"><b>:</b> " + `
$emailbody += "<tr><td class=`"first`"><b>pins removed from ad</b></td><td class=`"first`"><b>:</b> " + `
$emailcontent = $emailmsg.mimecontent.content
$emailfromaddress = "annualreview@dev.com"
$emailfrom = "domaincontroller@company.com"
$emailfrom = "email@yourdomain.com"
$emailfrom = "<helpdesk>@<cotendo>.com"
$emailfrom = "suport@mail.net"
$emailfrom = 'svc-acct@company.com'
$emailfrom = "yourhelpdesk@yourdomain.com"
$email=$i.primarysmtpaddress
$emailmessage += "attempting to reboot $($workstations.count)"
$emailmessage.body = $body
$emailmessage.ccrecipients.add($bccrecipient) | out-null
$emailmessage.ccrecipients.add($ccrecipient) | out-null
$emailmessage += "$($failcount.count) was unreachable due to power or network issues.`n"
$emailmessage += "$($failcount.count) were unreachable due to power or network issues.`n"
$emailmessage += "failed attempts:`n"
$emailmessage += $failmessage
$emailmessage.from = $from
$emailmessage.importance = $priority
$emailmessage.isdeliveryreceiptrequested = $requestdeliveryreceipt.tobool()
$emailmessage.isreadreceiptrequested = $requestreadreceipt.tobool()
$emailmessage = new-object microsoft.exchange.webservices.data.emailmessage($exservice)
$emailmessage = "searching for computers in:`n`t$($adspath)`nfound $($workstations.count) computers.`n"
$emailmessage.sendandsavecopy()
$emailmessage.setextendedproperty($prdeferredsendtime,$sendtime)
$emailmessage.subject = $subject
$emailmessage += "$($successcount.count) computers were successfully rebooted. "
$emailmessage += "$($successcount.count) computer was successfully rebooted. "
$emailmessage += "successful reboots:`n"
$emailmessage += $successmessage
$emailmessage.torecipients.add($torecipient) | out-null
$emailmsg.load($itempropertyset)
$emailmsg = [microsoft.exchange.webservices.data.emailmessage]::bind(`
$emailmsgsize = ($emailmsg.size / 1024).tostring("n2")
$emailsentmessage = "email sent to " + $owneremail
$emailsmtp = 'smtp.company.com'
$emailsubject = "daily blackberry user reconciliation report for $datetime."
$emailsubjectline = "annual review documents notification"
$emailsubject = "mailbox migration completed at $datetime."
$emailsubject = "rebooting computers in $($adspath)"
$emailto = 'administrator@company.com'
$emailto = "deletedaccountnotifications@company.com"
$emailto = "email@yourdomain.com"
$emailto = "$mail"
$emailto = "$_.primarysmtpaddress"
$employeeid=$i.extensionattribute1
$emptydocemail = "error: no email is set for '" + $item.name + "' with document owner: " + $user.displayname
$emptygroup=@()
$emptygroup+=$distgroup
"enable"
enable-adsystemonlychange
enable-csuser -identity $name -registrarpool lync-fe.mydomain.com -sipaddress $sipaddr
enable-csuser $newuser.samaccountname -registrarpool $lyncfepoolname -sipaddress "sip:$($newuser.samaccountname)@$sipdomain"
enabled = $entry.enabled
$enabledfeature = $null
enabled = $item.enabled
enabled = $jobenabled
-enabled $true
-enabled $true `
<enabled>true</enabled>
$enableflag = $false
$enableflag = $null
$enableflag = $true
enable-mailbox $newuser.samaccountname | out-null
enable-netadapterbinding $wnvnic -componentid $wnvdrv -cimsession $hosts[$i]
enable-netfirewallrule -displaygroup "file and printer sharing"
enable-netfirewallrule -displaygroup "remote desktop"
enable-spfeature -identity $targetfeature -url $url
enable-sqlalwayson -inputobject $serverobject -force
enabletracing
enabletsandfp
enable-vcs
enable-vmhost $vmhost | out-null
enable-wsmancredssp -role client -delegatecomputer * -force | out-null
enable-wsmancredssp -role client -delegatecomputer *.hcp.com -force | out-null
enable-wsmancredssp -role server -force | out-null
encoding enc = getencodingforbytes( input, out bomsize );
$encrypted = [convert]::frombase64string($encrypted)
$encrypted = encrypt-string $string "mystrongpassword"
$encryptedkey
$enc = [system.text.encoding]::ascii
end
end {
end {}
end{
end{}
end}
$endapp = invoke-expression $exprstring
end { "completed test" }
$enddatefilter = new-object microsoft.exchange.webservices.data.searchfilter+islessthanorequalto(`
$enddate = "$((get-date).toshortdatestring()), $((get-date).tolongtimestring())"
$enddaterangedays = 31
$enddate = $startdate.addminutes(30)
endexecution;
end function
$end=get-date
$end = get-date
<% end if %>
end if
endmaintenance
$endpoint = get-scsmrelatedobject -smobject $assigneduser -relationship $userpref|?{$_.channelname -like '*smtp'}
$endpointobject = new-sqlhadrendpoint -inputobject $serverobject -name $endpointname -port $endpointport
$endpointobject = $serverobject.endpoints |
-endpointurl $endpointurl `
$endprocessingtext = "info: finished processing documents."
$endproc = invoke-expression $exprstring
} -end { $quorumdisknumber }
"end`r`n"
end select
end sub
$endtime = get-date;
$endtime = get-date -displayhint time
$endtime = get-date -format "dd/mm/yyyy hh:mm:ss"
$endtime = $_."move-mailbox".taskfooter.endtime
"$endtime [$script] ended."
$end="</tr>"
$enginever = [microsoft.win32.registrykey]::openremotebasekey('localmachine',$rcomp.name).opensubkey('software\mcafee\avengine').getvalue('engineversionmajor')
[enhancedkeyusageextension]
$enhancedkeyusageextension.initializeencode($enhancedkeyusageoids)
$enhancedkeyusageextension = new-object -comobject 'x509enrollment.cx509extensionenhancedkeyusage.1'
$enhancedkeyusageoids.add($serverauthenticationoid)
$enhancedkeyusageoids = new-object -comobject 'x509enrollment.cobjectids.1'
$enrollment.certificatefriendlyname = $key.friendlyname
$enrollment.initializefromrequest($certificate)
$enrollment.installresponse(2, $certificatedata, 0, '')
$enrollment = new-object -comobject 'x509enrollment.cx509enrollment.1'
$ensureattribute = 1
ensurebinarypath
$ensurechildnode = 0
ensureloggingdirectory
$enterprefix = read-host "enter the prefix of the account"
enterprise = 3
$enterprise = "enterprise"
$enterprise {$installededition = $descriptionenterprise}
"enterprisepack_b_pilot" = "office 365 (enterprise preview)"
"enterprisepack_faculty" = "office 365 (plan a3) for faculty"
"enterprisepacklrg" = "office 365 (plan e3)"
"enterprisepack" = "office 365 (plan e3)"
"enterprisepack_student" = "office 365 (plan a3) for students"
"enterprise" {return [psutils.credman+cred_persist]::enterprise}
"enterprise")][string] $credpersist
"enterprise")][string] $credpersist = "enterprise"
"enterprisewithscal_faculty" = "office 365 (plan a4) for faculty"
"enterprisewithscal" = "office 365 (plan e4)"
"enterprisewithscal_student" = "office 365 (plan a4) for students"
$enteruser = read-host "enter alias"
"entourage*"
$entrieselement = $controlelement.appendchild($myxml.createelement("listentries"))
$entrieselement = $controlelement.appendchild($myxml.createelement("tablerowentries"))
$entrieselement = $controlelement.appendchild($myxml.createelement("wideentries"))
$entries = $feed | select -expandproperty feed | select -expandproperty entry -erroraction silentlycontinue
$entry = $base | select-object *
$entry.computername = $computername;
$entryelement = $entrieselement.appendchild($myxml.createelement("listentry"))
$entryelement = $entrieselement.appendchild($myxml.createelement("tablerowentry"))
$entryelement = $entrieselement.appendchild($myxml.createelement("wideentry"))
$entry = $entries | select -first 1
$entry.estimatedsize = [math]::round($subkey.getvalue("estimatedsize")/1kb,1);
$entry.estimatedsize = [math]::round($subkeywow6432node.getvalue("estimatedsize")/1kb,1);
$entry.installdate = $parsedinstalldate.value
$entry.name = $displayname.trim();
$entry.publisher = $subkey.getvalue("publisher");
$entry.publisher = $subkeywow6432node.getvalue("publisher");
-entrytype error `
$entry.version = $subkey.getvalue("displayversion");
$entry.version = $subkeywow6432node.getvalue("displayversion");
$entry.wow6432node = $true;
$_enumerationjob = start-job -inputobject $source {& cmd /c "dir /a:-d /s /b $input"}
$_enumstatus = [math]::round(($filesstored.count/$count)*100,2)
$env = $args[0]
$env:computername)
$env:jobcount = 1
$env:jobcount = [int]$env:jobcount+1
&"$env:systemroot\system32\rundll32.exe" powrprof.dll,setsuspendstate hibernate
&"$env:systemroot\system32\rundll32.exe" powrprof.dll,setsuspendstate hybrid sleep
$env:userdomain,
$env:username,
$envvargroupcount = "storagegroupmonitor" + $groupname + "count"
$envvargroupfail = "storagegroupmonitor" + $groupname + "fail"
$env:vmtpath = "c:"
ep = ""
ep = "cloud"
$epeam = $ecpvd.externalauthenticationmethods
$epeurl = $ecpvd.externalurl
ep = "france"
$epiam = $ecpvd.internalauthenticationmethods
$epiurl = $ecpvd.internalurl
$epname = $ecpvd.name
$epsrv = $ecpvd.server
ep = "washington"
$equalhostratings++
$equalhostratings = 1
$er = [adsi]$basedn
$err = ""
$err = $line.contains('0 error(s)')
$errlogfile = join-path $currentlogfolder ('vscompileerror.{0}.err' -f $modelname)
$errlogfile = join-path $currentlogfolder ('vsimporterror.{0}.err' -f $modelname)
$erroractionpreference = 0
$erroractionpreference = "continue"
$erroractionpreference = "continue";
`$erroractionpreference `= `"silentlycontinue`"
$erroractionpreference="silentlycontinue"
$erroractionpreference = "silentlycontinue"
$erroractionpreference = 'stop'
$erroractionpreference = "stop"
$erroractionpreference = $temperraction
-erroraction "silentlycontinue"
-erroraction "silentlycontinue" | `
erroraction = 'silentlycontinue'
erroraction = 'stop'
"error assigning value from active directory: $_"
error_bad_username = 0x8007089a
-errorcategory notspecific -errorid 1 -targetobject $pscmdlet
-errorcategory notspecified -errorid 1 -targetobject $pscmdlet
-errorcategory objectnotfound -errorid 1 -targetobject $pscmdlet
-errorcategory resourceunavailable -errorid 1 -targetobject $pscmdlet
$error.clear()
" errorcodes`r`n"
$errorcount1 = $error.count
$errorcount2 = $error.count
$errorcount = $_."move-mailbox".taskfooter.result.errorcount
"error deleting value from active directory: $_"
"error during cleanup: $_"
$errorflag = $false
$errorflag = $true
error_invalid_flags = 0x800703ec,
error_invalid_parameter = 0x80070057,
$errorlevel=@{0="success";1="warning";2="error"}
$errorlist = @{}
$errormessage
$errormessage = "*** invalid entry ***"
$errormessagesamaccountname = "the is no such login in " + $domaindnsname + " domain, please try another one!"
$errormsg = $errormsg -f $attchment
$errormsg = $errormsg -f $calendarfolder,"calendar"
$errormsg = $errormsg -f $contactfolder,"contact"
$errormsg = $errormsg -f $contactfolder.displayname
$errormsg = $errormsg -f $csvfile
$errormsg = $errormsg -f $csvfilepath
$errormsg = $errormsg -f $currentusername
$errormsg = $errormsg -f $destinationfolderdisplayname
$errormsg = $errormsg -f $foldername
$errormsg = $errormsg -f $identity
$errormsg = $errormsg -f $path
$errormsg = $errormsg -f $spcurrentuserlogin
$errormsg = $errormsg -f $username
$errormsg = $errormsg -f $userpicturelibrary
$errormsg = $errormsg -replace "placeholder01",$filepath
$errormsg = $errormsg -replace "placeholder01",$listname
$errormsg = $errormsg -replace "placeholder01",$policytype
$errormsg = $messages.attachmentfeaturedisabled
$errormsg = $messages.cannotfindattachments
$errormsg = $messages.cannotfinddestfolder
$errormsg = $messages.cannotfindfile
$errormsg = $messages.cannotfindfolder
$errormsg = $messages.cannotfindspecifieditem
$errormsg = $messages.cannotfindspecifiedlist
$errormsg = $messages.cannotfindtaskfolder
$errormsg = $messages.cannotopencsvfile
$errormsg = $messages.cannotopenfile
$errormsg = $messages.cannotresolveusername
$errormsg = $messages.fbadisabled
$errormsg = $messages.findduptaskfolders
$errormsg = $messages.installexservicemodule
$errormsg = $messages.installexwebsvcmodule
$errormsg = $messages.installlyncruntime
$errormsg = $messages.invalidfolderpath
$errormsg = $messages.invalididentity
$errormsg = $messages.invalidpolicytype
$errormsg = $messages.invalidrecurrencerangeend
$errormsg = $messages.lackofpermission
$errormsg = $messages.outputfilewithwrongextenstion
$errormsg = $messages.requireconnection
$errormsg = $messages.requirescolumnheadera
$errormsg = $messages.requirescolumnheaderb
$errormsg = $messages.requirescolumnheadern
$errormsg = $messages.requirescontactfolder
$errormsg = $messages.requiresrecipient
$errormsg = $messages.requiresusermailaddress
$errormsg = $messages.signinrequired
$errormsg = $messages.wrongcolumnheaders
$errormsg = $messages.wronglib
error_no_such_logon_session = 0x80070520,
error_not_found = 0x80070490,
$errorpreference="silentlycontinue"
$error.removeat($error.count-1)
"error retrieving value from active directory: $_"
"error saving to active directory: $_"
$errorstate = "false"
$errorstate = "true"
error_success = 0x0,
"error translating name: $_"
$err = $repl.error
$errtext = $error[0].exception.message
$event2013 = get-winevent -logname system |where-object {$_.id -eq 2013}
$event307 = get-winevent -logname $eventchannel -filterxpath "<querylist><query id='0' path='$eventchannel'><select path='$eventchannel'>*[system[(eventrecordid=$eventrecordid)]]</select></query></querylist>"
$event307xml = ([xml]$event307.toxml())
$eventarg.node.collapes()
$eventarg.node.expandall()
$eventchannel
$eventid = 1149,
$eventid = 4625
$_.eventid -eq $down }
$_.eventid -eq $up `
$eventlogs = "\\$($computername)\$($logpath.replace(":","$"))"
$eventlogs = get-winevent -listlog * -computername $computername
$eventrecordid,
$event.sender | foreach {
$events = $events |where-object {(get-date($_.timecreated) -format "yyy-mm-dd") -eq (get-date -format "yyy-mm-dd")}
$events = get-winevent -computername $computername -logname $logname -credential $credentials |where-object {$_.id -eq $eventid}
$events = get-winevent -logname $logname -computername $computername -credential $credentials -erroraction silentlycontinue `
$events = invoke-command -session $mysession -scriptblock {`
$eventtbldata+="<td>$($event.clientinfostring)</td>"
$eventtbldata+="<td>$($event.clientipaddress)</td>"
$eventtbldata+="<td>$($event.folderpathname)</td>"
$eventtbldata+="<td>$($event.itemsubject)</td>"
$eventtbldata+="<td>$($event.lastaccessed)</td></tr>"
$eventtbldata+="<td>$($event.logontype)</td>"
$eventtbldata+="<td>$($event.logonuserdisplayname)</td>"
$eventtbldata+="<td>$($event.operationresult)</td>"
$eventtbldata+="<td>$($sourceitemcount)</td>"
$eventtbldata+="<tr><td>$($event.operation)"
$eventtbl=$eventtblheader+$eventtbldata+"</tbody></table>"
$eventtblheader="<table border=""1"" bordercolor=""
$eventvwr = "eventvwr.exe $computername"
"/ews/*"
$ewsclient = $arrlog[10].replace("+"," ")
$ewsclient = $arrlog[9].replace("+"," ")
$ewsclient = $_.key
$ewsentourage = ""
$ewsentourage=$ewsclient
$ewsmacmail = ""
$ewsmacmail=$ewsclient
$ewsmacoutlook = ""
$ewsmacoutlook=$ewsclient
$ewsmanagedapidllfilepath = "c:\program files\microsoft\exchange\web services\1.2\microsoft.exchange.webservices.dll"
$ewsother = ""
$ewsother+="$($ewsclient); "
$ewspcoutlook = ""
$ewspcoutlook=$ewsclient
$ewsurl = ([array](get-webservicesvirtualdirectory))[0].internalurl.absoluteuri
$exactkey=$key
example
.example
" .example`r`n"
"excel application not found, program aborted"
$excel.application.quit()
$excelfile
$excelfile = $reportpath + "\" + $date2 + "_" + $customername + ".xlsx"
$excelfile = $reportpath + "\" + $date2 + " master_billing_summary.xlsx"
$excel=new-object -comobject "excel.application"
$excel = new-object -comobject "excel.application"
$excel = new-object -comobject excel.application
$excel = $null
$excelpath = "c:\scripts\updateusers.xls"
$excel.quit()
$excelrange = "a2:" + ([char]($attributes+64)) + ($passedmailboxes.count + 1)
$excel.save()
"excel spreadsheet not found, program aborted"
$excel.visible = $false
$excel.visible=$true
$excelworkbook.close()
$excelworkbook = $excel.workbooks.open($excelfile)
$excelworkbook = $null
$excelworkbook.refreshall()
$excelworkbook.save()
$excel.workbooks.close()
$excel.workbooks.open($filename)
$excelworksheet = $excelworkbook.worksheets.item(1)
$excelworksheet = $excelworkbook.worksheets.item("data")
$excelworksheet = $null
$excelworksheet.range("a1").value2 = (get-date -format "mmmm yyyy") + " billing report"
$excelworksheet.range("a3").value2 = "report data generated: " + (get-date -format "m/d/yyyy")
$excelworksheet.range($excelrange).value2 = $mailboxarray
$_.exception.message
$exception = new-object system.management.automation.runtimeexception($exceptionstring)
-exceptionstring $errormsg `
"/exchange/*"
$exchangecontact.($contactmapping[$key]) = $contactitem.$key;
$exchangecontact.displayname = $exchangecontact.nickname;
$exchangecontact.emailaddresses[[microsoft.exchange.webservices.data.emailaddresskey]::($mappingarray[1])] = $contactitem.$key;
$exchangecontact.emailaddresses[[microsoft.exchange.webservices.data.emailaddresskey]::($mappingarray[1])] = $contactitem.$key.tostring();
$exchangecontact.fileas = $exchangecontact.nickname;
$exchangecontact = new-object microsoft.exchange.webservices.data.contact($service);
$exchangecontact.nickname = $contactitem.displayname;
$exchangecontact.nickname = $contactitem."first name";
$exchangecontact.nickname = $contactitem.firstname;
$exchangecontact.nickname = $contactitem."first name" + " " + $contactitem."last name";
$exchangecontact.nickname = $contactitem.firstname + " " + $contactitem.lastname;
$exchangecontact.nickname = $contactitem."last name";
$exchangecontact.nickname = $contactitem.lastname;
$exchangecontact.phonenumbers[[microsoft.exchange.webservices.data.phonenumberkey]::($mappingarray[1])] = $contactitem.$key;
$exchangecontact.physicaladdresses[[microsoft.exchange.webservices.data.physicaladdresskey]::($mappingarray[1])] = $businessphysicaladdressentry;
$exchangecontact.physicaladdresses[[microsoft.exchange.webservices.data.physicaladdresskey]::($mappingarray[1])] = $homephysicaladdressentry;
$exchangecontact.physicaladdresses[[microsoft.exchange.webservices.data.physicaladdresskey]::($mappingarray[1])] = $otherphysicaladdressentry;
$exchangecontact.save();
$exchangecontact.save($contactsfolder.id);
$exchangecontact.setcontactpicture($contactitem.$key);
$exchangeinstallpath = $setupregistrypath.msiinstallpath
$exchangeserverlist = get-exchangeserver | where {$_.serverrole -ne "edge"}
$exchangeserverlist = get-transportserver | get-exchangeserver | where{($_.admindisplayversion.major -gt "8") -and ($_.serverrole -ne "edge")}
$exchangeservers = get-exchangeserver
$exchangeservers | %{if($_.ishubtransportserver -eq $true){if($transportserverfilter -eq ""){$transportservers += $_}elseif($_.name -like $transportserverfilter){$transportservers += $_}}}
$exchangeservers | %{if($_.ismailboxserver -eq $true){if($mailboxserverfilter -eq ""){$mailboxservers += $_}elseif($_.name -like $mailboxserverfilter){$mailboxservers += $_}}}
"exchangestandard" = "office 365 exchange online only"
$excludearray=@()
$excludearray = get-content $excludefile
$excludearray = ("security update for windows",
$excludearray = ("@%systemroot%\system32\drivers\mup.sys",
$excludedate | convertfrom-csv -header:'item1','item2','item3' -erroraction silentlycontinue | foreach-object {
$excludeddates = @(convertto-dateobject @splatdate | select-object -unique | sort-object -descending)
$excludeddates[$j].tostring('yyyy-mm-dd')
$exclude = "[$exclude]:"
$exclusionfile = $args[1]
$exclusionlist = get-content $exclusionfile
$exclusions | foreach-object {
"exc*" { $thislicence = "exchange online" }
</exec>
<exec>
exec-spshell $cmd
`"executing update for $federateddomain`" `| out-file `$logfile -append
$executions = foreach ($row in $timerows) {
<executiontimelimit>pt1h</executiontimelimit>
$exefilename = $script:currentexecutingpath + '\office365deploymentreadinesstool.exe'
$exepolicy = get-executionpolicy
$exist_child = ""
$exist_child = get-adgroup $_.childgroup -erroraction stop
$existinganniversaryappointment = test-oscexoduplicateappointment `
$existingbinding = $null
$existingbinding = $sslbinding
$existingbirthdayappointment = test-oscexoduplicateappointment `
$existingcontactobject = $groupobject.trygetcontact($contactobject.uri,[ref]$outcontact)
$existingexsvcvar = (get-variable -name exservice -scope global -erroraction:silentlycontinue) -ne $null
$existinggroup = $contactmanager.groups.trygetgroup($groupname,[ref]$groupobject)
$existinggroupmemberscount = 0
$existinggroupmembers = get-adgroupmember $group | sort-object distinguishedname
$existingitemscount = (get-childitem -path $path -filter "$filename*" | measure-object).count
$existingmailboxes
$existingmailboxes = @()
$existingmailboxes += $mailbox
$existingmailboxes | move-mailbox -targetdatabase $targetdatabase | out-file stats.txt
$existinguser
$existinguser = get-aduser $script:adfsaccountname
$existinguser = $null
$existinguser = $users |where-object {$_.properties.name -like "*$($existinguser)"}
$existinguser = $users |where-object {$_.samaccountname -like "*$($existinguser)"}
$exist_parent = ""
$exist_parent = get-adgroup $_.parentgroup -erroraction stop
$exists = "0"
$exists = "1"
$exists = get-adgroup $item.groupname
exit
exit;
exit}
exit 0
exit 1
exit(1)
exit 3
exit 4
exitcode = $lastexitcode
$exitcode = (start-process -wait -passthru -filepath msiexec -argumentlist /i, $msifilename, /qb, /l*vx, $env:temp\$filename.txt).exitcode
$exitflag = $false
$expdomain = '$list1.selecteditems | foreach-object {$_.tag} | foreach-object {$_.domain}'
$expdura = ("{0:d2}" -f $h) + ':' + "{0:d2}" -f $m + ':' + "{0:d2}" -f $imedia
expectedduration = $media
$expected = get-qsmsoldnsverificationtext -domain $unverifieddomain.name
$exp = 'install-axmodel {0} -file "{1}" -details -noprompt -server "{2}" -database "{3}" -outvariable out -verbose' -f $extraarguments, $file, $sqlserver, $sqldatabase
$expireafter = 30 * [int]$expiry
$expiry = read-host 'the account will expire after how many months (supported values: 1-6)?'
$expiry = read-host '[wrong value] the account will expire after how many months (supported values: 1-6)?'
'explicit' {
$explorer = $explorer | sort creationdate
explorer $files
$explorer = $rproc | ?{$_.name -match "explorer.exe"}
exportable = false
| export-csv "$filename" -notype
export-csv -inputobject $failcount -path '.\exitcodes.csv' -notypeinformation
export-csv $output
| export-csv -path $filename -notypeinformation
export-csv sidmap0.csv -notypeinformation
export-csv sidreport.csv -notypeinformation
export-domainsids
export-modulemember -function "connect-oscexowebservice","get-oscexocalendarfolder",`
export-modulemember -function convert-sidhistoryntfs
export-modulemember -function export-domainsids
export-modulemember -function export-sidhistoryshare
export-modulemember -function export-sidmapping
export-modulemember -function get-sidhistory
export-modulemember -function remove-sidhistory
export-modulemember -function update-sidmapping
export of small blob data using the getsqlbinary of ado.net sqldatareader without any conversions.
export of small blob data with ado.net
$exportpath = "c:\scripts\drive_info"
exportpolicies $filename
$exportshare = "\\server\share"
export-sidhistoryshare
export-sidmapping
exporttoexcel $customerhash.$customername $excelfile
exporttoexcel $mailboxdata $excelfile
$exporttofile | out-file $logfile -append -encoding utf8
$exporttofile = "servername,drive letter,total space(gb),free space(gb),free percentage"
$exporttofile = "servername,filename,filesize,file version,product version,last modified"
$exporttofile = $tempoutput.systemname+","+$tempoutput.deviceid+","+("{0:n1}" -f ($tempoutput.size/1gb))+","+("{0:n1}" -f ($tempoutput.freespace/1gb))+","+$freespace
$exporttofile = $tempserver+","+$tempvar.name+","+$tempvar.length+","+$tempversion.fileversion+","+$tempversion.productversion+","+$tempvar.lastwritetime
expressed or implied, including but not limited to the implied warranties of
@{expression = {$_.avgrtt};label = "avgrtt";width = 7}
@{expression={$_.destinationprefix};label="destinationprefix";width=40}, `
" expression : $expression "
$expression | foreach-object {
@{expression = {$_.lost};label = "lost";width = 6},
@{expression = {$_.maxrtt};label = "maxrtt";width = 7},
@{expression = {$_.minrtt};label = "minrtt";width = 7;alignment = "right"},
@{expression={$_.nexthop};label="nexthop";width=25},
@{expression = {$_.received};label = "received";width = 9},
@{expression = {$_.remoteipaddress};label = "remote ip address";width = 41},
@{expression={$_.routemetric};label="routemetric";width=12},
@{expression = {$_.rtt};label = "time(ms)";width = 9;alignment = "right"},
@{expression = {$_.sent};label = "sent";width = 6},
" expression : setting expression: $expression "
@{expression = {$_.size};label = "size(bytes)";width = 12},
@{expression = {$_.status};label = "status";width = 18}
$expression = "$"+$testflag+" = ""yes"" "
$expression = "$"+$topology+" = ""yes"" "
@{expression = {$_.ttl};label = "ttl";width = 6},
$expropdefpathname = new-object microsoft.exchange.webservices.data.extendedpropertydefinition(`
$expropdefpathname,$path)
$expropfoldersize = new-object microsoft.exchange.webservices.data.extendedpropertydefinition(`
$exprstring = '$list1.selecteditems | foreach-object {$_.tag} | foreach-object {$_.name}'
$exprstring = '$list1.selecteditems | foreach-object {$_.tag} | foreach-object {$_.processid}'
$expstartup = '$list1.selecteditems | foreach-object {$_.tag} | foreach-object {$_.name}'
$expuser = '$list1.selecteditems | foreach-object {$_.tag} | foreach-object {$_.name}'
$exservice.autodiscoverurl($username,$validateredirectionurlcallback)
$exservice.credentials = $credential.getnetworkcredential()
$exservice,$findresult.id)
$exservice,$findresult.id,$msgpropertyset)
$exservice,$findresults.folders[0].id,
$exservice,$findresults.folders[0].id)
$exservice,$findresults.id)
$exservice,$folderid,`
$exservice.impersonateduserid = $impersonationuserid
$exservice.impersonateduserid = $null
$exservice,[microsoft.exchange.webservices.data.wellknownfoldername]::calendar)
$exservice,[microsoft.exchange.webservices.data.wellknownfoldername]::root)
$exservice,[microsoft.exchange.webservices.data.wellknownfoldername]::searchfolders)
$exservice = new-object microsoft.exchange.webservices.data.exchangeservice(`
$exservice,"owa.useroptions",`
$exservice.usedefaultcredentials = $true
$extendedrightscommonname = "cn=extended-rights"
$extension = $newuser.ipphone
$extension = [system.io.path]::getextension($file).tostring()
$externaldns = "."+$externalfqdn
" externalfqdn : $externalfqdn "
$externalfqdn = $topologysettings.topologies.externalfqdn
$externalserver = "209.244.0.3"
$externalserver = $newhost
$extnames.initializeencode($altnamescollection)
$extnames = new-object -comobject 'x509enrollment.cx509extensionalternativenames'
$ext.put("extensionattribute1", $_.extensionattribute1)
$extraarguments = ''
$extraarguments = $importoverrideparams.get_item($file)
$extractdir = join-path $usermodulepath (gi $savefilename).basename
$ext = read-host "enter the file extension"
$ext.setinfo()
$f++
$f=0
"fa" { converttocelsius($value) }
$factor = .5
"$fahrenheit fahrenheit equals $( (($fahrenheit - 32)/9)*5 ) celsius"
$failcount = @()
$failcount += $thiscode
$failedcount = 0;
$failedcount += 1;
failed = $failedcount
failedfile size(mb) : $failedsize
$failedprerequisitescount = ($prereqisitereport | where-object {$_.checkresult -match "failed|pending"} | measure-object).count
$failedsize = $failedsize/1mb
$failmessage += "$($message)`n"
-failovermode "manual" `
$false {$cred.flags = [psutils.credman+cred_flags]::none}
$false {$global:messagebody += "`r`n<tr>$shtmlcellstyle $wsusserver</td>$shtmlcellstyle $parentwsusserver</td>$stemp <b> something went wrong connecting to the wsus interface on $wsusserver using port $portnumber without ssl: <br> `r`n $error</b></td></tr>"}
$false {$messagebody = "$shtmltablestyle `r`n<tr>$shtmlcellstyle <b> something went wrong connecting to the wsus interface on $wsusserver using port $portnumber without ssl: <br> `r`n $error</b></td></tr></table>"}
farm { $enabledfeature = get-spfeature -identity $targetfeature -farm -erroraction silentlycontinue }
$farm = get-spfarm | select name
$favorites = $true,
$fbaenabled = ($spwebappprov | where-object {$_.displayname -like "forms*"}) -ne $null
f_checkforemptyfolder
fcmdlembers($obj.name)
$fcolor = $host.ui.rawui.foregroundcolor
"f" { converttometers($value) }
f_deleteoldfiles
$f = $e[1]
$feature,
$feature = add-windowsfeature data-center-bridging
$featureenableaction = !($feature.action -eq "disable")
$featureidentity = $feature.id
$featureidentity = $feature.name
$featurename = $featureidentity
$featurename = $feature.name
$featurename = $targetfeature.displayname
$feature = $node.node
$featurestate = $searchfeatureinfo | select-string "state"
" -federated domain: $federateddomain" | out-file $logpath -append
-federationservicename $script:adfssubjectname `
-federationservicetrustcredential $script:adfscredentials
$fedocument.functions.add($function)
$fedocument = new-object functionexplorer.document($document.title, $document.document.lines.count)
$feed = [xml]$webclient.downloadstring($nugetcmdlinefeed)
$feet = 5
"$feet feet equals $($feet*.31) meters"
' -f $entry[1],$entry[2]
$f = $functionexplorer_documents.getfunctionbyname($functionname, $pgse.currentdocumentwindow.title)
$f = get-date | select-object datetime | convertto-html -head $a
$fielddata = ($item.substring($item.indexofany(":") +2, ($item.length)-$item.indexofany(":") -2)).trim()
$fieldname = ($item.substring(0,$item.indexofany(":"))).trim()
$fields.add($passtag,$password)
$fields.add($usertag,$username)
$fields=new-object system.collections.specialized.namevaluecollection
"file" {
file {
"file and print sharing "
$file = ($arg -as [string]) + $((get-date).tostring("ddmmyyyyhhmmss")) + ".csv"
$filebits = [system.io.file]::readallbytes($attachmentpath)
$file = "c:\clusterresource_1.1.txt"
$filecontent[1..$rows] | add-content $combinedcsvfile
$filecontent = get-content $csv.fullname
$filecontent = get-content $errlogfile -erroraction silentlycontinue
$filecontent = get-content $filename.fullname
$filecontent = get-content $logfile -erroraction silentlycontinue
$filecontent = get-content $modellist
$filecontent = get-content $runbuildparmfile
$filecontent = get-content $rundeployparmfile
$filecontent = get-content $versionfile
filecount = $filecount; subdirs = $dircount}
$file="c:\report\$($vc).html"
$file = $currentpage.file
$filedata = [byte[]]$(get-content -path $path -encoding byte -readcount 0);
$filedomain.add_click($setdomain)
$filedomain = new-object system.windows.forms.toolstripmenuitem("connect to domain...")
$file = ".\domainsids.csv"
$fileexit.add_click({$form1.close()})
$fileexit = "c:\config\logs\bootconfig"+$bid+"end.xml"
$fileexit = new-object system.windows.forms.toolstripmenuitem("e&xit")
$fileext = $filepath.substring($filepath.length - 3,3)
$file = "$filename"
$file = get-content d:\powershell\computers.txt
$file = import-csv $sourcefile
$fileinfo = get-item -path $file
$fileinfo = new-object system.io.fileinfo $filepath
$file = join-path $folder $file
$filelist = @($filelist | where-object {$_.creationtime -le $lastwrite})
$filelist = @($filelist | where-object {$excludeddates -notcontains $_.creationtime.date})
$filelist = @($filelist | where-object {$excludeddates -notcontains $_.lastwritetime.date})
$filelist = @($filelist | where-object {$_.extension -notlike $excludefileextension[$j]})
$filelist = @($filelist | where-object {$_.fullname -notmatch [regex]::escape($excludepath[$j])})
$filelist = @($filelist | where-object {$_.lastwritetime -le $lastwrite})
$filelist = @($filelist | where-object {(split-path -path $_.fullname) -notmatch $excludepath[$j]})
$filelist = @($fullarray | where-object {$_.psiscontainer -eq $false})
$filelist = $newfilelist
$filelocked = $false;
$filemenu.dropdownitems.add($filedomain) > $null
$filemenu.dropdownitems.add($fileexit) > $null
$filemenu.dropdownitems.add($filepcuser) > $null
$filemenu.dropdownitems.add($fileuser) > $null
$filemenu = new-object system.windows.forms.toolstripmenuitem("&file")
$filename,
$filename2 = "c:\config\logs\" + $x+$y + "-transcript.txt"
$filename = "archivestatisticsplanner_results.csv"
$filename = "c:\bigmailbox$(get-date -f 'yyyymmdd').csv"
$filename = 'c:\users\jspatton\dpmvolumesizing v3.3\dpmvolumesizing.xlsx',
$filename = "dbreport.htm"
$filename = "diskspace-$((get-date -format "yyymmdd-hhmmss")).xml"
$filename = $emailmsg.subject
$filename = $entry.title."
$filename = "$($env:windir)\system32\oobe\info\backgrounds\backgrounddefault.jpg"
$filename = "$filename - ($existingitemscount)"
$filename = $filename.replace($invalidchar,"")
$filename = $folder + "\setspnx.txt"
$filename = $folder + "\" +$usr2.samaccountname + ".txt"
$filename = $inlineattachmentpath.split("\")[-1]
$filename_log = "delay-wsus-auto-approvals.log"
$filename = "$loggingdirectory" + "policyreport_" +$starttime +".txt"
$filename = "$(($log.logname).replace('/','-')).csv"
$filename = "myfile.txt"
$filename_reports = "delay-wsus-auto-approvals_" + $(get-date -format yyyy-mm-dd_hh\hmm\mss\s) + ".html"
$filename = $result.qfeid
$filename = ($script_parent + "\$($comp)_softwarereport.csv")
$filename = ($script_parent + "\$($comp)_softwarereport.html")
$filename=((split-path ($myinvocation.mycommand.path))+"lastrunlog.txt")
$filename = "temp-printlog-$((get-date -format "yyymmdd")).csv",
$file = new-item -path $profilepath -itemtype file
$fileoffset=300
$fileoffset = $fileoffset + $logitem["cbentrysize"]
$file = $output
$filepath
$filepath = 'c:\logfiles'
$filepath = "c:\scripts\exportad.xlsx"
$filepath = "c:\scripts\hierarchy.xlsx"
$filepath = "c:\temp\users.xlsx"
$filepath = "$env:userprofile\database_documentation\";
$filepath = $env:userprofile + "\" + "desktop" + "\"
$filepath = (get-childitem $filename).fullname
$filepath = (join-path (join-path $applicationdir $modeltobuild.folder) 'model.xml' )
$filepath = "p:\printlogs",
$filepath = resolve-path -literalpath $inputfile -erroraction silentlycontinue
$filepath = $rootdir + $dbname + "\script\";
$filepaths = $executioncontext.sessionstate.path.getresolvedproviderpathfrompspath( $file, [ref] $providerinfo )
$filepath += $srv_path+"\";
$filepcuser.add_click($findpcuser)
$filepcuser = new-object system.windows.forms.toolstripmenuitem("find user on &pc")
$files= @()
$files = "\\" + $computername + "\c$"
$files = $directory | get-childitem -force -recurse:$recurse | where-object { -not $_.psiscontainer }
fileservername = $fileservername
$fileservername = 'scaleoutfs'
files failed : $filesfailed
files : $filesnumber
$files = get-childitem $logdir
$files = get-childitem -path $dir.fullname -filter *.jpg -recurse
$files = get-childitem $path *.txt -recurse | where-object { !($_.psiscontainer) }
$files = get-childitem -recurse | where { $_.name -like $type }
fileshare = @(
fileshare -name $vhdlibrarysharename -disknumber $storagenode.node1.vhdlibrarydisknumber -subpath $vhdlibrarysharedir `
fileshare -name $vhdlibrarysharename -vdiskfriendlyname $vmlibraryvdisk[0] -subpath $vhdlibrarysharedir `
fileshare -name $vmsharename -disknumber $storagenode.node1.vmsharedisknumber -subpath $vmsharedir `
fileshare -name $vmsharename -vdiskfriendlyname $vmsharevdisk[0] -subpath $vmsharedir `
filesize(mb) : $filessize
$filespec
$filespec,
$filessize = $filessize/1mb
$filesstored= @()
$filesstored = $filesstored | where {$_ -ne ''}
$_filestocheck = @()
$_filestocheck += $targetfile
$filestoopen = get-childitem $filespec
$filestoopen = get-childitem $filespec -filter "*.ps1"
$filestream.close()
$filestream = $fileinfo.open( [system.io.filemode]::openorcreate, [system.io.fileaccess]::readwrite, [system.io.fileshare]::none )
$filestream = new-object system.io.filestream($filename,[system.io.filemode]::open)
$filetest = "c:\config\logs\bootconfig"+$bid+"begin.xml"
$filetestresult = $true
$fileuser.add_click($finduser)
$fileuser = new-object system.windows.forms.toolstripmenuitem("find &user in ad")
.filler {border-right: medium none; border-top: medium none; display: block; background: none transparent scroll repeat 0% 0%; margin-bottom: -1px; font: 100%/8px arial; margin-left: 43px; border-left: medium none; color:
"*" == filter)
$filter = '*'
$filter | add-member -membertype noteproperty -name guid -value $guid -passthru | add-member -membertype noteproperty -name content -value $_."mswmi-parm2" -passthru | write-output
filter addone
$filtercount = $layer.selectnodes("./filters/item[not(flags/item = ""fwpm_filter_flag_boottime"")]").count
"filter: $filter"
$filter = $filter + "))"
$filter = $filter + "(ldapdisplayname=$attr)"
$filter = $filter.replace("\","\\")
filter get-propertyvalues
$filter = $gpdomain.getwmifilter($path)
$filter = $group.info
filter hasmessage
filter = $iis6filter
filter = $iis7filter
-filter "ipenabled='true'" -erroraction silentlycontinue
filter istoday
filter largefiles($size)
$filter = "localaccount=true"
filter = null;
$filter = "(&(objectcategory=attributeschema)(|"
$filter = "(&(objectcategory=group)(samaccountname=$group))"
-filter 'passwordlastset -ge $time')
$filter = read-host "enter ldap syntax filter"
filter = $servicefilter
$filter = 'sidhistory -like "*"'
$filter = "unprovisioning *" + $webapplication.displayname + "*"
$finalcertificate = get-qsadfscertificate
finally
} finally {
} finally { }
finally{
finally {$dhcp}
"find complete log file here:"
"find csv report of security translation here:"
$findpcuser=
$findpcusername = get-qadcomputer $computername
$findpcusername = get-qadcomputer $pc1
$find,$replace = [regex]::split($replacetoken,"::=")
$findresults = $contactfolder.finditems($itemview)
$findresults = $currentcalendarfolder.findfolders($searchfilter,$folderview)
$findresults = $currentcontactsfolder.findfolders($searchfilter,$folderview)
$findresults = $currentcontactsfolder.finditems($itemview)
$findresults = $currentcontactsfolder.finditems($searchfiltercollection,$itemview)
$findresults = $currentfolder.finditems($searchfilter,$itemview)
$findresults = $currentpublicfolder.findfolders($searchfilter,$folderview)
$findresults = $desttaskfolder.finditems($itemview)
$findresults = $exservice.findfolders([microsoft.exchange.webservices.data.wellknownfoldername]::root,$searchfiltercollection,$folderview)
$findresults = $parentfolder.finditems($searchfiltercollection,$itemview)
$findresults = $rootcalfolder.findfolders($searchfilter,$folderview)
$findresults = $rootfolder.findfolders($searchfilter,$folderview)
$findresults = $rootsearchfolder.findfolders($searchfilter,$folderview)
$findresults = $searchfolder.finditems($itemview)
$find = $results.trim()
$finduser=
$findusername = $txt1.text
find-webpart-collection $temprelativeurl $webpartname
find-webpart-collection $webappurl $webpartname
find-webpart $url $webpart
"finished builddhcp server"
"finished builddns server"
$finishedmoves = get-moverequest | where {$_.status -eq "completed"}
$finishedmoves | remove-moverequest -confirm:$false
$finishedmoves | select displayname, targetdatabase
finished time : $enddate
$finish = get-date; $global:messagebody += "`r`n<tr>$shtmlcellstyle $wsusserver</td>$shtmlcellstyle $parentwsusserver</td>$shtmlcellstyle " + $wsusserveradminproxy.version + "</td>$shtmlcellstyle $start</td>$shtmlcellstyle $finish</td>$shtmlcellstyle" + $cleanupresults.supersededupdatesdeclined + "</td>$shtmlcellstyle" + $cleanupresults.expiredupdatesdeclined + "</td>$shtmlcellstyle" + $cleanupresults.obsoleteupdatesdeleted + "</td>$shtmlcellstyle" + $cleanupresults.updatescompressed + "</td>$shtmlcellstyle" + $cleanupresults.obsoleteupdatesdeleted + "</td>$shtmlcellstyle" + [math]::truncate($cleanupresults.diskspacefreed/1mb) + "</td></tr>"}
{$finish = get-date; $global:messagebody += "`r`n<tr>$shtmlcellstyle $wsusserver</td>$shtmlcellstyle $parentwsusserver</td>$shtmlcellstyle " + $wsusserveradminproxy.version + "</td>$shtmlcellstyle $start</td>$shtmlcellstyle $finish</td>$shtmlcellstyle trial run</td>$shtmlcellstyle trial run</td>$shtmlcellstyle trial run</td>$shtmlcellstyle trial run</td>$shtmlcellstyle trial run</td>$shtmlcellstyle trial run</td></tr>"}
$firewall = new-object -comobject "hnetcfg.fwmgr"
$firewallpolicy = $firewall.localpolicy.currentprofile
$firewallportclosing = "& netsh advfirewall firewall delete rule name=`"open tcp 24158 (wmifixedport)`" protocol=tcp localport=24158"
$firewallportopening = "& netsh advfirewall firewall add rule name=`"open tcp 24158 (wmifixedport)`" dir=in action=allow protocol=tcp localport=24158"
'first' {
$firstipv4resource = @($allipv4resources)[0];
$firstipv4resource | remove-clusterresource -force
$firstipv4resource | stop-clusterresource
-firstname $_.'first name'`
-firstname $firstname `
"first name" = "givenname";
"firstname" = "givenname";
$firstname=$_.givenname
$firstname="john"
$firstname = read-host 'first (given) name of new user'
$first = $prop.givenname |out-string; $last = $prop.sn |out-string
$fisrtname=$i.givenname
fixes:
$fj++
fl *
"flag","culture","generation","isreminderset","reminderdueby",`
$flagresult = invoke-expression ($expression)
[flags]
flags,
flags : $($cred.flags)
" flags to test "
[float]$freespace = $disk.freespace;
[float]$size = $disk.size;
"float" {$type = "4"}
$flow = $dbflow | test-mailflow
$fmatches = ([array]($output | where {$_ -match "true"})).count | %{ if ($_) {$_} else {'0'} }
$fn = $applicationname
$folder
$folder1count = $folder1.count
$folder1 = ls "e:\1" -recurse
$folder2count = $folder2.count
$folder2 = ls "e:\2" -recurse
$folderclass = [wmiclass] "root\sms\site_$($sitecode):sms_objectcontainernode"
folder="\\$($computername)\$($share.name)";
$foldercount = $folders.count
folder=$folder.fullname;
" folder : $folderpath" >> $logfile
$folder = $folder + "\results"
"folderid" {
-folderid $currentcalendarfolder.id -subject $appointmentanniversarysubject
-folderid $currentcalendarfolder.id -subject $appointmentbirthdaysubject
$folderid = gwmi -namespace "root\sms\site_$sitecode" -query "select containernodeid from sms_objectcontainernode where name = '$($item.foldername)' and objecttype = '$objecttype' and parentcontainernodeid = '$parentid'"
$folderid = new-object microsoft.exchange.webservices.data.folderid(`
$folderid = new-object -typename psobject -property @{
$folder = (join-path $droplocation "application\appl\")
$folderlist = @()
$folderlist = @($filelist | foreach-object {
$folderlist = @($folderlist | sort-object @{expression={$_.fullname.length}; ascending=$false})
$folderlist = @($folderlist | where-object {$_.fullname -notmatch [regex]::escape($excludepath[$j])})
$folderlist = @($folderlist | where-object {(split-path -path $_.fullname) -notmatch $excludepath[$j]})
$folderlist = @($fullarray | where-object {$_.psiscontainer -eq $true})
$folderlist = $newfolderlist
$folderlocation = (get-regvalue -computer $computername -hive users -key ($strsid.value + "\software\microsoft\office\14.0\outlook\security") -value outlooksecuretempfolder).data
$foldermembers = @()
$foldermembers = gwmi -namespace "root\sms\site_$sitecode" -query `
"foldername" {
$foldername = "customer folder name"
$folderobject = [microsoft.exchange.webservices.data.folder]::bind($exservice,$folder.id,$propertyset)
$folderparentid = gwmi -namespace "root\sms\site_$sitecode" -query "select containernodeid from sms_objectcontainernode where name = '$($item.folderparent)' and objecttype = '$objecttype'"
$folderpath = $newfolder.put()
$folder.permissions.add($newpermission) | out-null
$folder.permissions.remove($oldpermission) | out-null
$folderpropertyset.add($expropdefpathname)
$folderpropertyset.add($expropfoldersize)
$folderpropertyset = new-object microsoft.exchange.webservices.data.propertyset(`
$folder.resetroleinheritance()
$folders = @()
folders failed : $foldersfailed
folders : $foldersnumber
$folders += get-item $startpath
$folderstatistics = get-mailbox -identity $mbx | get-mailboxfolderstatistics -folderscope all -includeoldestandnewestitems
$folder.update()
$folderview = new-object microsoft.exchange.webservices.data.folderview(100)
$folderview = new-object microsoft.exchange.webservices.data.folderview(1000)
$folderview = new-object microsoft.exchange.webservices.data.folderview($pagesize)
$folderview.offset = 0
$folderview.offset += $pagesize
$folderview.propertyset.add($expropdefpathname)
$folderview.propertyset = $folderpropertyset
$folderview.propertyset = $propertyset
$folderview.traversal = $foldertraversal
$folderview.traversal = [microsoft.exchange.webservices.data.foldertraversal]::deep
<font color=""black"" face=""arial"" size=""3"">
<font face='tahoma' color='
font-family: tahoma;
$font = new-object system.drawing.font("arial",10,[system.drawing.fontstyle]::regular)
font-size: 11px;
<font size=""1"" face=""arial,sans-serif"">
$foo1 = [environment]::getenvironmentvariable($envvargroupfail, "user")
$foo2 = [environment]::getenvironmentvariable($envvargroupcount, "user")
($footer = @"
$footer="}`r`n"
$footer="</table></center><br><br>
for($bitcount=0; $bitcount -lt 8; $bitcount++)
for($bitcount=0; $bitcount -lt $numzeroes; $bitcount++)
for($bitcount = 0; $prefixlength -ne "0"; $bitcount++)
for($bytecount = 0; $bytecount-lt 4; $bytecount++)
$force,
for ($count = 0; $count -le $total; $count++)
for ($counter = 0;$counter -ile $len;$counter++) {
for ($counter = 0; $counter -lt $choices.count; $counter++) {
for ($counter = $pos;$counter -ile $acct.length;$counter++) {
foreach {
foreach { "`
foreach ($ace in $gwmi) {
foreach($ace in $sd.dacl){
foreach ($action in $mailboxname.auditadmin)
foreach ($action in $mailboxname.auditdelegate)
foreach ($action in $mailboxname.auditowner)
foreach ($adapterdnsserver in $adapterdnsservers) {
foreach ($adapter in $adapters) {
foreach ($address in $_.emailaddresses){
foreach ($addr in $int.ipaddress)
foreach ($admin in $members){
foreach ($adobject in $adobjects)
foreach($adsite in $adsiteall){
foreach($adsitelink in $adsitelinkall){
foreach ($agent in $computergroupmembers.getrelatedmonitoringobjects())
foreach($a in ($startaddress.split(".")[0]..$endaddress.split(".")[0])) {
foreach ($allmailbox in $allmailboxes)
foreach ($allsrv in $allsrvs){
foreach ($app in $software) {
foreach ($approval in $approvals)
foreach ($arg in $args)
foreach ( $args in $file) {
foreach ($asyncvd in $asyncvds){
foreach ($asyncvds in $cassrv){
foreach ($attachmentpath in $attachment) {
foreach ($attachmentpath in $attachments) {
foreach ($attchmentpath in $attachments) {
foreach ($attr in $arrattrs)
foreach ($attr in $attrs)
foreach($auth in $auths)
foreach ($autovd in $autovds){
foreach ($bccrecipient in $bcc) {
foreach -begin { $quorumdisknumber = @{} } -process {
foreach ($binding in $bindings) {
foreach($b in ($startaddress.split(".")[1]..$endaddress.split(".")[1])) {
foreach ($bios in $biosall) {
foreach ($bit in $prefixarray)
foreach ($bootconfig in $machine.bootconfigs.bootconfig)
foreach ($bypass in $bypassenabled)
foreach($casarray in $casarrays)
foreach ($cas in $casuri)
foreach($cat in $category)
foreach($cat in $notcategory)
foreach ($ccrecipient in $cc) {
foreach ($ccrecipient in $emailmsg.ccrecipients) {
foreach ($ce in $cr.errors){
foreach ($cert in $certs) {
foreach($child in $job.childjobs) {
foreach ($c in $colattributelist)
foreach ($c in $colattributelist){[void]$adsisearcher.propertiestoload.add($c)}
foreach ($c in $moverequestidentity)
foreach($c in ($startaddress.split(".")[2]..$endaddress.split(".")[2])) {
foreach($clus in get-cluster){
foreach($column in $table_columns)
foreach ($comp in $complist) {
foreach ($comp in $comps) {
foreach($comp in $comps){
foreach ($comp in $servers)
foreach ($comp in $vmcomputername)
foreach ($computer in $computerlist)
foreach ($computer in $computername)
foreach($computer in $computername)
foreach($computer in $computername) {
foreach ($computer in $computers)
foreach($computer in $computers)
foreach ($computername in $computers){
foreach ($contactgroup in $contactgroups) {
foreach ($contactgroupname in $customgroupcontact.keys.getenumerator()) {
foreach ($contact in $contacts) {
foreach ($contact in $groupobject) {
foreach ($contactitem in $csvfile)
foreach ($contactitem in $users)
foreach ($contactobject in $searchresults.contacts) {
foreach ($contactpropertyname in $contactpropertynames) {
foreach ($contactreadonlyproperty in $contactreadonlyproperties.getenumerator()) {
foreach ($contactschema in $contactschemas.getenumerator()) {
foreach ($contactsearchresult in $contactsearchresults) {
foreach ($control in $controls)
foreach($cred in $creds)
foreach ($cs in $csall) {
foreach ($csuserid in $identity) {
foreach ($csv in $allcsv) {
foreach ($currentfoldername in $calendarfolderpaths) {
foreach ($currentfoldername in $contactsfolderpaths) {
foreach ($currentfoldername in $pfpaths) {
foreach ($currentkey in $sortedlist.keys)
foreach ($currentview in $list.views)
foreach ($customgroupcontact in $customgroupcontacts) {
foreach($dag in $dags){
foreach($dagmbx in $dagmbxs){
foreach($dagnetwork in $dagnwks)
foreach ($database in $databases) {
foreach($database in $mailboxdatabaseslist)
foreach($databasepermission in $db.enumdatabasepermissions($user.name))
foreach ($datasource in $datasources)
foreach ($date in $dateday) {
foreach($dbflow in $db)
foreach ($db in $databaselist)
foreach ($db in $databases)
foreach ($db in $dbcopystatus) {
foreach ($db in $dblist)
foreach($db in $dbs)
foreach ($db in $sqlinstance.databases)
foreach($db_perm in $db.enumdatabasepermissions($item.name))
foreach ($dbrpc in $dbrpcs){
foreach ($dbsize in $dbsizes){
foreach ($dbstat in $dbstats) {
foreach ($dc in $alldcsinforest)
foreach ($dc in $domain.domaincontrollers)
foreach ($dc in $listofdcs)
foreach($dc in $server)
foreach ($department in $departments){
foreach ($deptgpo in $deptgpos)
foreach($dg in $alldg)
foreach ($dg in $distributiongroup) {
foreach ($diagnosticsubkey in $diagnosticsubkeys)
foreach($d in $dictionary.getenumerator()){
foreach ($d in $procs) {
foreach($d in ($startaddress.split(".")[3]..$endaddress.split(".")[3])) {
foreach($dir in $directories)
foreach ($dir in $dirs)
foreach ($dir in $dirs) {
foreach($disk in $disks)
foreach ($distgroup in $nestedgroups.keys)
foreach ($distributiongroup in $searchresults.groups) {
foreach ($dnsserver in $dnsserversearchorder)
foreach ($document in $pgse.documentwindows)
foreach($documentlibrary in $documentlibraries) {
foreach ($domaincontroller in $domaincontrollers)
foreach($domaincontroller in $domaincontrollers)
foreach ($domaindn in $coldomaindns)
foreach ($domain in $forest.domains)
foreach ($domain in $forestdomains)
foreach ($domainname in $coldomainnames)
foreach ($domuser in $result)
foreach($dup in $duplicateitems) { foreach($item in $items | where-object {$_.filename -eq $dup.name}) { if ($duplicateshelper -notcontains $item.fullpath) { $duplicateshelper += $item.fullpath $found = new-object -typename system.object $found | add-member noteproperty filename ($item.filename) $found | add-member noteproperty fullpath ($item.fullpath) $duplicates += $found } } }
foreach($duplicatemember in $duplicatemembergroup)
foreach ($duplicatemember in $membercount.keys)
foreach ($dygroup in $dygroups)
foreach($dygroup in $dygroups)
foreach ($dymember in $dymembers)
foreach($ecp in $ecpc)
foreach ($ecpvd in $ecpvds){
foreach ($emailaddresskey in $emailaddresskeys) {
foreach($empty in $emptygroup)
foreach ($entry in $acl.access){if ($entry.identityreference -eq ("dommydomain01\" + $grp.samaccountname)){$grpexist = 1}}
foreach ($entry in $csvquery) {
foreach ($entry in $item.globallyopenports)
foreach ($entry in $propertiestoadd) {
foreach($entry in $result)
foreach {$errorlist[$_.location] = receive-job -job $_ 2>&1}
foreach ($event in $audit)
foreach ($event in $eventid4625)
foreach ($event in $events)
foreach($event in $events)
foreach($event in get-eventlog application | where-object {$_.source -eq "dynamics server 01" -and $_.entrytype -eq "error" -and $_.timegenerated -gt $synchstarttime})
foreach ($eventlog in $eventlogs)
foreach($exchangeserver in $exchangeserverlist)
foreach($exch in $exchangeserverlist)
foreach($excip in $e2kedge){
foreach ($exclude in $excludearray) {
foreach($excos in $e2kedge){
foreach ($extension in $gporeport.gpo.computer.extensiondata)
foreach ($extension in $gporeport.gpo.user.extensiondata)
foreach ($fg in $db.filegroups)
foreach ($file in $files)
foreach ($file in $files){
foreach ($_file in $_filestocheck)
foreach ($file in $filestoopen)
foreach ($file in (get-childitem $localpath -recurse))
foreach ($file in get-childitem $parentdir -recurse -include *.rss)
foreach ($file in (get-childitem -path $axmodellabelsfolder -filter "*.ald" -recurse -erroraction silentlycontinue))
foreach ($file in (get-childitem -path $folder -filter "*.axmodel" -erroraction silentlycontinue))
foreach ($file in (get-childitem -path $path -erroraction silentlycontinue))
foreach ($file in (get-childitem -path $path -filter "*.axmodel" -erroraction silentlycontinue))
foreach ($file in (get-childitem -path $path -recurse -erroraction stop))
foreach($file in $input)
foreach($file in $m.value)
foreach ($filename in get-childitem $axbuilddir -filter 'aolcodes.*' )
foreach( $filepath in $filepaths )
foreach ($fileurl in $filesurllist)
foreach ($findresult in $findresults) {
foreach ($findswitch in $colallswitches | where {$_.id -eq $switchid})
for each folder
foreach ($folder in $findresults.folders) {
foreach ($folder in $folders) {
foreach ($folder in $list.folders) {
foreach ($folder in $searchresults.folders) {
foreach ($fullsender in $fullsenders)
foreach ($gc in $forest.globalcatalogs)
foreach($getdc in ([directoryservices.activedirectory.domain]::getcurrentdomain().domaincontrollers))
foreach ($gpo in $allgpos)
foreach ($gpo in $gpos)
foreach ($group in $computer.children)
foreach ($group in $group1.memberof)
foreach ($group in $groups)
foreach ($group in $nestedgroups.keys)
foreach ($group in $rbaggroups)
foreach ($group in $results)
foreach ($group in $user1.memberof)
foreach ($groupmember in $groupmembers) {
foreach ($groupproperty in $groupproperties) {
foreach ($gw_addr in $int.defaultipgateway)
foreach($hbp in $hbpevt){
foreach($hdd in $hdds) {
foreach ($hostinstanceitem in $hostinstancelist) {
foreach($htbp in $e2k10ht){
foreach($hubrece in $hubreces){
foreach($hubsend in $hubsends){
foreach ($hubtransport in $hubtransports)
foreach($id in $categoryids)
foreach($id in $updateid)
foreach($idxcol in $idx.indexedcolumns)
foreach($idx in $item.indexes)
foreach($i in $adfind)
foreach ($i in $colproplist)
foreach ($i in $data)
foreach( $i in $data )
foreach ($i in $ip)
foreach ($i in $srvarray) {
foreach ($imaddresskey in $imaddresskeys) {
foreach ($incident in $incidents)
foreach ($inlineattachmentpath in $inlineattachments) {
foreach ($inlineattachmentpath in $inlineattchments) {
foreach ($int in $ints)
foreach ($invalidchar in $invalidchars) {
foreach ($ipaddress in $netconfig.ipaddress) {
foreach ($ip in $sortedexclusionlist.values)
foreach($item in $array)
foreach ($item in $arritem) {
foreach ($item in $cat1)
foreach ($item in $cat2)
foreach ($item in $cat3)
foreach ($item in $cat4)
foreach ($item in $cat5)
foreach ($item in $csv)
foreach ($item in $csv_import)
foreach($item in $firewallpolicy.authorizedapplications)
foreach($item in $firewallpolicy.globallyopenports)
foreach($item in $firewallpolicy.services)
foreach ($item in get-childitem $serverpath)
foreach ($item in $info)
foreach($item in $installitems)
foreach($item in $items)
foreach($item in $list.items)
foreach ( $item in $menutext.split( $delimiter ) ) {
foreach ($item in $myformatcontextmenustrip.items)
foreach ($item in $objectarray)
foreach ($item in $searchresult)
foreach ($item in $splistitemcollection)
foreach ($item in $splistitems) {
foreach($item in $tempobjectarray)
foreach ($item in $wmi)
foreach($item in $wpcatalog.items)
foreach ($itemip in $arritemip) {
foreach ($itemnode in $($viewnode.nodes.item("list view items").nodes))
foreach ($itemnode in $($viewnode.nodes.item("table view items").nodes))
foreach ($itemnode in $($viewnode.nodes.item("wide view items").nodes))
foreach($items in $servicehealth)
foreach ($key in $basekey.getvaluenames())
foreach ($key in $contactmapping.keys)
foreach ($key in $keys)
foreach($key in $registrykey) {
foreach ($key in $sortedlist.getkeylist()) {
foreach ($key in $subkeys)
foreach ($key in ($uniquekeyvalue.allkeys | sort))
foreach ($largemailitem in $largemailitems) {
foreach ($layer in $layers)
foreach ($legacydn in $legacydns.keys.getenumerator()) {
foreach ($lib in $script:documentlibrarytitlestotarget) {
foreach ($license in $licensetype)
foreach ($line in $csv)
foreach($line in $csvfile)
foreach ($line in $document.document.lines)
foreach ($line in $file) {
foreach ($line in $filecontent)
foreach ($line in (get-content (join-path $clientlogdir "axcompileall.html")))
foreach ($line in (get-content (join-path $xpplpath dynamics.ax.application.dll.log)))
foreach ($line in (get-content $logpath))
foreach($line in $infolog)
foreach ($line in $library)
foreach ($line in $netstat)
foreach($list in $lists)
foreach ($list in $spweb.lists)
foreach ($list in $web.lists)
foreach ($listitem in $reflist.items) {
foreach ($locale in $locales)
foreach ($logfile in $logfiles){
foreach ($log in $activelogs)
foreach ($machine in $colmachines | where { $_.name -eq $id})
foreach ($mailbox in $gatheredmailboxes) {
foreach ($mailbox in $mailboxes)
foreach ($mailbox in $mailboxes) {
foreach($mailbox in $movedmailboxes)
foreach ($mailbox in $suspendedmoves) {
foreach ($mailboxserver in $mailboxservers) {
foreach ($manager in $managers)
foreach ($mapitem in $volumemaps)
foreach ($mbxbk in $mbxbklist)
foreach($mbxcra in $mbxcraall)
foreach ($mbxdbrpc in $mbxdbrpcs){
foreach ($mbxdbsize in $mbxdbsizes){
foreach ($mbxinfo in $mbxinfos)
foreach($mbxinfo in $mbxinfos){
foreach ($mbxinfo in $tardbinfo) {
foreach ($mbx in $mailbox) {
foreach($mc in $mapimbx)
foreach($mcpf in $mapipf)
foreach($mdcscs in $mdcscss)
foreach ($member in $allusers)
foreach ($member in $distgroupmembers)
foreach ($member in $existinggroupmembers)
foreach ($member in $foldermembers)
foreach ($member in get-adgroupmember $group) {$member.samaccountname | out-file $memberlist -encoding unicode -append}
foreach ($member in $group.members)
foreach ($member in $members)
foreach ($member in $memberstoadd)
foreach ($member in $memberstoremove)
foreach ($member in $newgroupmembers)
foreach ($member in $script:groupmembers[$group])
foreach ($memberobject in $memberobjects)
foreach ($members_a in $groupamembers){
foreach ($members_b in $groupbmembers){
foreach ($mimetypeitem in $mimetype) {
foreach ($m in $matches)
foreach($m in ($modellayermap.getenumerator()))
foreach ($model in $models)
foreach($model in $models)
foreach($modeltobuild in ((get-modelstobuild).getenumerator()))
foreach ($modification in $section.modifications.childnodes)
foreach ($mon in $rmon) {
foreach ($msxserver in $msxservers)
foreach ($nalpath in $nalpaths)
foreach ($name in $30daysusers) {
foreach ($name in $computername)
foreach ($name in $delusers) {
foreach ($name in $disabledusers) {
foreach($name in $listname)
foreach ($name in $names) {
foreach($name in $properties){
foreach ($name in $warnusers) {
foreach ($name in $wlistusers) {
foreach ($namespace in $smsnamespaces)
foreach ($nestedgroup in $nestedgroup.values)
foreach ($netroute in $netrouteobjects)
foreach (networkinterface nic in networkinterface.getallnetworkinterfaces())
foreach ($newsub in $newsubkeys) {
foreach ($newuser in $users) {
foreach ($nic in $machine.networkadapters.networkadapter )
foreach ($nic in $objnicinfo)
foreach ($node in $trvfunctions.nodes)
foreach ($nonoptimaldb in $nonoptimaldbs) {
foreach ($oab in $oabs)
foreach ($oab in $oabs){
foreach ($oabvd in $oabvds){
foreach ($oabvirtualdirectory in $oab.virtualdirectories)
foreach ($obj1 in $allobj1)
foreach ($obj1 in $object1)
foreach ($obj2 in $object2)
foreach ($objdisk in $coldisks)
foreach ($objdistributiongroup in $objdistributiongroups)
foreach-object `
foreach-object {
foreach-object{
foreach-object -begin {$count = 0} -process {
foreach-object {$_.gettype().invokemember("name", 'getproperty', $null, $_, $null)}
foreach($object in $adarray){
foreach($objectpermission in $db.enumobjectpermissions($user.name))
| foreach-object -process {
foreach-object {$_.smtpaddress}}}
for each obji in objbody
foreach ($obj in $allobj)
foreach ($obj in $members)
foreach ($objitem in $colitems) {
foreach ($objitem in get-storagegroupcopystatus)
foreach ($objmailbox in $objmailboxes)
foreach ($objmember in $colmembers)
foreach ($objmember in $objdgmembers)
foreach ($objnewsearchresult in $allnewsearchresult)
foreach($obj_perm in $db.enumobjectpermissions($item.name))
foreach ($objpermission in $objusermailbox)
foreach ($objsearchresultcheck in $allsearchresult)
foreach ($objsearchresult in $allnewsearchresult)
foreach ($objsearchresult in $allsearchresult)
foreach ($objserver in $objservers)
foreach ($objservice in $objservicemanager.services)
foreach($objuser in $colusers)
foreach ($objuser in $objusers)
foreach ($octet in $range)
foreach ($office in $offices){
foreach ($o in $objects) {
foreach ($oldcomputer in $oldcomputers) {
foreach ($optimaldb in $optimaldbs) {
foreach ($ou in get-ou)
foreach ($owavd in $owavds){
foreach($owebs in $tows)
foreach ($ows.runspaceid in $owss.runspaceid){
foreach ($parent in $parents)
foreach($pc in $pcs){
foreach ($pcutlog in $pcutlogs)
foreach ($person in $adobj){
foreach ($pfd in $pfdall){
foreach ($phonenumberkey in $phonenumberkeys) {
foreach ($physicaladdresskey in $physicaladdresskeys) {
foreach ($p in $prjds)
foreach ($pivotfield in $pivottable.pivotfields()) {
foreach ($pivottable in $worksheet.pivottables()) {
foreach ($policy in $policies) {
foreach ($port in $ports)
foreach ($poshfile in $filestoopen)
foreach ($p $projname in $projectlist)
foreach ($prerequisitename in $prerequisites.keys.getenumerator()) {
foreach ($printjob in $printjobs)
foreach ($printqueue in $printqueues)
foreach ($printserver in $printservers)
foreach($privgroup in $colprivgroups)
foreach ($privgroup in $forestprivgroups)
foreach ($proc in $procall) {
foreach ($profile in $profiles)
foreach ($property in $adproperties)
foreach($property in $database.properties)
foreach($property in $groupmember.gettype().getproperties()) {
foreach($property in $item.extendedproperties)
foreach ($propertypair in $propertypairs)
foreach ($provisionjob in $provisionjobs)
foreach ($psfile in $psise.currentpowershelltab.files)
foreach($pwcy in $tpwc)
foreach ($pws in $pwss){
foreach ($pwsvd in $pwsvds){
foreach ($qfefile in $qfefilename)
foreach ($qfe in $qfes)
foreach ($qspart in $arrlog[5].split("&"))
foreach ($qspart in $arrlog[6].split("&"))
foreach ($queryresult in $queryresults) {
foreach($queue in $queuelist)
foreach($record in $axxml.axaptacompileroutput.record)
foreach ($record in $records) {
foreach ($recoverypoint in $recoverypoints)
foreach ($remotetrust in $remotetrusts) {
foreach {remove-vmdrive -diskonly -vm $_.vmelementname -controllerid $_.controllerid -lun $_.drivelun}
foreach($remstitem in $removestartupitem)
foreach ($replacetoken in $replacetokens)
foreach($repl in $dbreplication)
foreach ($reservedproperty in $reservedproperties) {
foreach ($resource in $resources)
foreach ($result in $results)
foreach($result in $results)
foreach($result in $results){
foreach ($results in get-content $file)
foreach ($r in $ds.rows)
foreach ($row in $dataset.tables[0])
foreach ($row in $($license.servicestatus))
foreach ($row in $sidreport) {
foreach($row in $table)
foreach ($row in $($user.licenses[0].servicestatus)) {
foreach($rpc in $rpcall)
foreach ($script in (get-childitem c:\config\*.psm1 -recurse))
foreach ($searchresult in $allsearchresult)
foreach ($sec in $secinfo)
foreach ($secondary in $secondaries)
foreach($secondary in $secondaries)
foreach ($section in $data.sections.section)
foreach ($sendbehalf in $sendbehalfs)
foreach ($sender in $senders)
foreach($server in $input){
foreach ($server in $serverlist)
foreach ($server in $servers)
foreach ($server in $servers) {
foreach($server in $servers)
foreach($server in $servers){
foreach($servername in $serverlist)
foreach ($servername in $servers)
foreach ($service in $autoservices) {
foreach ($service in $dependencies)
foreach ($service in $getservice)
foreach($service in $items.servicesnotrunning)
foreach ($session in $sessions)
foreach ($setspnd in $setspnds){
foreach ($setspn in $setspns){
foreach ($setting in $settings)
foreach ($shareddrive in $shareddrives)
foreach ($share in $shares) {
foreach ($sid in $usersid)
foreach($s in $allsites){write-host "- $s"}
foreach ($s in $services)
foreach ($s in $services) {
foreach($sitecollection in $sitecollections)
foreach ($site in $forest.sites)
foreach ($site in $sites)
foreach ($site in $sites) {
foreach($site in $sites)
foreach ($site in $sslbinding.sites) {
foreach ($site in $webapp.sites)
foreach ($sites in $oapp.sites)
foreach($soc in $oc)
foreach ($spattachmentname in $spattachmentnames) {
foreach ($specificcontact in $specificcontacts) {
foreach ($speclogin in $newdisnames.keys.getenumerator()) {
foreach($spweb in $site.allwebs)
foreach($spweb in $sitecollection.allwebs)
foreach ($spweb in $spsite.allwebs)
foreach ($srkn in $srknvrgl)
foreach($srv in $servers)
foreach ($srv in $servicearray)
foreach ($srv in $srvlist)
foreach ($srvlist in $allsrvlist){
foreach ($sslbinding in $sslbindings) {
foreach ($start in $startup){
foreach ($stick in $rram){
foreach ($strcomputer in $arrcomputer)
foreach ($strcomputer in $colcomputers)
foreach ($string in $strings) {
foreach ($subfolder in $subfolders.folders) {
foreach($sub in $regkey.getsubkeynames())
foreach ($submember in $submembers)
foreach ($subnet in $siteobjbl){
foreach ($subweb in $web.webs)
foreach($subx in $subregkey.getvaluenames())
foreach($sync in $asc)
foreach($table in $tables)
foreach ($tardatabase in $tardatabases) {
foreach ($targetcontact in $targetcontacts) {
foreach ($tcontact in $contactsearchresult.contacts) {
foreach ($temp in $global:temparray) {
foreach ($tempnode in $myformattreeview.selectednode.nodes)
foreach ($testflag in $arrflags)
foreach ($thisentry in $loginuserarray) {
foreach ($thislogin in $loginallarray) {
foreach ($thislogoff in $logoffallarray) {
foreach ($toc in $tocs){
foreach ($token in get-content $tokenfile)
foreach ($topology in $colalltopologies)
foreach ($topology in $topologycollection)
foreach ($torecipient in $emailmsg.torecipients) {
foreach ($torecipient in $to) {
foreach($tows in $owscas)
foreach($tpwc in $pwccas)
foreach ($trust in $trusts) {
foreach ($uniquemember in $uniquemembers)
foreach ($unverifieddomain in $unverifieddomains) {
foreach($update in $objcollection)
foreach($update in $objcollection2)
foreach($update in $objcollectionchoose)
foreach($update in $objcollectiondownload)
foreach($update in $objcollectionupdate)
foreach($update in $objresults.updates)
foreach ($update in $updates)
foreach ($upnsuffix in $upnsuffixes) {
foreach ($url in $urllist)
foreach ($userdn in $usercollection) {
foreach ($userdn in $usershashtable.keys){
foreach ($userdn in $userswithpolicycurrentlyappliedhashtable.keys){
foreach ($userdn in $userswithpsocurrentlyapplied){
foreach ($userdn in $userswithpsopreviouslyapplied){ $userswithpolicycurrentlyappliedhashtable.add($userdn, $null) }
foreach ($userentry in $besusertable) {
foreach ($usergroup in $usergroups)
foreach ($user in $arrdlmembers.keys)
foreach($user in $colofuniquemembers)
foreach($user in $colresults)
foreach ($user in $computer.children)
foreach ($user in $csv)
foreach($user in $db.users)
foreach ($user in $members)
foreach ($user in $moverequestidentity)
foreach ($user in $usercollection){ $usershashtable.add($user.distinguishedname, $null) }
foreach ($user in $users)
foreach ($user in $users) {
foreach($user in $users)
foreach($usernametoadd in $passedusernames)
foreach ($userneu in $ad)
foreach ($userprofile in $profiles)
foreach ($userprofile in $userprofiles) {
foreach ($userspecifiedfeaturename in $userspecifiedfeaturenames) {
foreach ($userspecifiedpolicy in $feature.keys.getenumerator()) {
foreach ($usr in $usrarray2){
foreach ($value in $($itemnode.nodes))
foreach ($value in $sids)
foreach ($value in $values)
foreach($vc in $input1)
foreach($vc in $vcs)
foreach ($verfiedfeaturename in $verfiedfeaturenames) {
foreach ($verifiedpolicytype in $verifiedpolicytypes) {
foreach($version in $xmldata.dsversion.exchange)
foreach ($view in $($loadxml.configuration.viewdefinitions.view))
foreach ($viewnode in $viewnodes)
foreach ($vm in $vmname)
foreach ($vm in $vms) {
foreach ($volumeidentifier in $volumes)
foreach($webapplication in $webapplications)
foreach($web in $myweb.webs) {
foreach($web in $site.allwebs)
foreach($web in $webs)
foreach($webs in $wsc)
foreach ($websvd in $websvds){
foreach ($wellknownpolicytype in $knownpolicytypes) {
foreach ($wmioutput in $wmiresult){
foreach ($worksheet in $excelworkbook.worksheets) {
foreach ($workstation in $workstations)
foreach($wpa in $wparray)
foreach($wp in $wps)
foreach ($xcip in $xcipnic){
foreach ($xmlfile in get-childitem $logpath -filter move*.xml ) {
foreach ($zipfile in $zipfiles)
$foregroundcolor,
-foregroundcolor (&$groupcolor $adsgroup.groupscope)
" -foreground "green"
$forest.domains | foreach-object {
$forestdomains = $forest.domains
forest = $forest.name
" forest functional level: " + $forest.forestmode
"forest name: " + $forest.name
$forestobject = new-object psobject -property $forestproperties
$forestobject.pstypenames.insert(0,"forestroles")
$forestprivgroups = getforestprivgroups
$forestproperties = @{
$forestrootdn = fqdn2dn $rootdomain
$forest = [system.directoryservices.activedirectory.forest]::getcurrentforest()
for ($i = 0; $i -le 470; $i++)
for ($i = 0; $i -le $count; $i++){
for($i = 0;$i -le $count;$i++){
for ($i = 0; $i -le $l;$i++) {
for($i=0;$i -le $listcounter;$i++)
{for ($i=0; $i -le $mbxdbs.length-1; $i++)
for($i=0;$i -le $numberofmailboxes;$i++)
for($i=0;$i -le $removenull;$i++)
for ($i = 0;$i -le $splistitem.attachments.count;$i++) {
for ($i = 0; $i -lt 60; $i++) {
for ($i = 0; $i -lt $arr.length; $i++)
for ($i=0; $i -lt $calendarfolderpaths.count; $i++) {
for ($i=0; $i -lt $contactsfolderpaths.count; $i++) {
for ($i = 0; $i -lt $counter; $i++) {
for ($i=0; $i -lt $count; ++$i)
for ($i = 0; $i -lt $dbcounters.count; $i++)
for ($i = 0; $i -lt $dbs.count; $i++)
for ($i = 0; $i -lt $files.count; $i++)
for ($i=0;$i -lt ($fqdndepth);$i++)
for ($i=0; $i -lt $hosts.length; $i++) {
for ($i = 0; $i -lt $oa_dbcounters.count; $i++)
for ($i=0;$i -lt $output.length;$i++)
for ($i=0; $i -lt $pfpaths.count; $i++) {
for($i = 0; $i -lt $pings; $i++)
for ($i = 0;$i -lt $usrarray.count;$i++) {
for($i = 0; $i -lt $variationcount; $i++)
for($i = 0; $i -lt $words.length; $i++)
for($i=0; $i -lt ($xmldata.selectnodes("/dsversion/exchange[@$category='$version']")).count; $i++)
for($i = 1; $i -le $ports.count;$i++) {
for ($i=1;$i -lt $sddlsplit.length;$i++) {
for($i = 1; $i -lt $sortedlist.count; $i++ )
for($i =1; $i -lt $split.length; $i++) {$iesecondary += $split[$i] +"`0"}
for ($i=$count ;$i -gt -1; $i--)
for($idx=0; $idx -lt $columns.count; $idx++) {
for ($idx = 0; $idx -lt $m.count; $idx++) {$version+='{0}.' -f $m.get($idx)}
for ($idx = $models.length - 1; $idx -ge 0;$idx--)
for ($ifrommonth=1; $ifrommonth -le 12; $ifrommonth=$ifrommonth+1)
for( int inputidx = 0; inputidx < inputstr.length; inputidx++ )
for (int inx = 0; inx < count; inx++)
for ($j = 0; $j -le 20; $j = $j + 1)
for ($j = 0; $j -le 7; $j = $j + 1)
for ($j=0;$j -lt $checkerror;$j++) {
for ($j=0;$j -lt $count;$j++) {
for ($j=0;$j -lt $excludefileextension.count;$j++) {
for ($j=0;$j -lt $excludefileextension.count;$j++) {$switches+= "`r`n`t`t`t";$switches+= $excludefileextension[$j]}
for ($j=0;$j -lt $excludepath.count;$j++) {
for ($j=0;$j -lt $excludepath.count;$j++) {$switches+= "`r`n`t`t`t";$switches+= $excludepath[$j]}
for ($j=0;$j -lt $folder1count;$j++) {
for($j = 0;$j -lt $i;$j++) {
for ($j=0;$j -lt $includefileextension.count;$j++) {
for ($j=0;$j -lt $includefileextension.count;$j++) {$switches+= "`r`n`t`t`t";$switches+= $includefileextension[$j]}
for ($j=0;$j -lt $includepath.count;$j++) {
for ($j=0;$j -lt $includepath.count;$j++) {$switches+= "`r`n`t`t`t";$switches+= $includepath[$j]}
for ($j = 0; $j -lt $log.count; $j++)
for ($j = 0; $j -lt $monthrepeat; $j++)
for ($j=0;$j -lt $serverlist.count;$j++) {
for ($j = 0; $j -lt $weekrepeat; $j++)
for ($j=$balancedcount; $j -lt $oa_mailboxes.count; $j++)
for ($k = 0; $k -le 20; $k = $k + 1)
for ($k=0; $k -le $groups.count -1; $k++)
for ($k=0; $k -le $ousorted.count -1; $k++)
for ($k=0; $k -le $users.count -1; $k++)
for ($k = 0; $k -lt $daterangerepeat; $k++) {
for ($k=0;$k -lt $folder2count;$k++) {
for ($k=0;$k -lt $tempvar.count;$k++) {
for ($k = 1; $k -le $columns.count; $k = $k + 1)
for ($k = 7; $k -ge 0; $k = $k - 1)
$form1.add_keydown({if ($_.keycode -eq "escape")
$form1.add_load($onloadform_statecorrection)
$form1.clientsize = $system_drawing_size
{$form1.close()}})
$form1.controls.add($btn0)
$form1.controls.add($btn10)
$form1.controls.add($btn11)
$form1.controls.add($btn12)
$form1.controls.add($btn13)
$form1.controls.add($grp1)
$form1.controls.add($grp2)
$form1.controls.add($lbl2)
$form1.controls.add($list1)
$form1.controls.add($menustrip)
$form1.controls.add($stbar1)
$form1.controls.add($txt1)
$form1.databindings.defaultdatasourceupdatemode = 0
$form1.keypreview = $true
$form1.name = "form1"
$form1 = new-object system.windows.forms.form
$form1.showdialog()| out-null
$form1.startposition = "centerscreen"
$form1.text = "arposh admin tool $version - connected to $((get-qadrootdse).dnshostname)"
$form1.windowstate = $initialformwindowstate
$form2.add_keydown({if ($_.keycode -eq "escape")
$form2.add_load($onloadform_statecorrection2)
$form2.add_load({updatepclist})
$form2.clientsize = $system_drawing_size
{$form2.close()}})
$form2.close()
$form2.controls.add($lblpc)
$form2.controls.add($list2)
$form2.controls.add($progress2)
$form2.databindings.defaultdatasourceupdatemode = 0
$form2.keypreview = $true
$form2.name = "form2"
$form2 = new-object system.windows.forms.form
$form2.showdialog()| out-null
$form2.startposition = "centerscreen"
$form2.text = "loading..."
$form2.text = "select computer"
$form2.windowstate = $initialformwindowstate2
$formatedit_ico = @"
$formatelement.innertext = $($value.tag)
$formatelement = $itemelement.appendchild($myxml.createelement("formatstring"))
format-table -property driveletter,drivetype,filesystem,healthstatus -autosize}
format-table -property id, script, command, variable, enabled -autosize
format-volume -driveletter $usbdriveletter -filesystem $filesystemtype -confirm:$false -erroraction stop |
$formcomponents = new-object -typename system.componentmodel.container
for more details:
for more information execute:
$formspacer = 8
for ($r = 1; $r -le $hostratings.count; $r++)
for ($x = 0; $x -lt $fqdnarray.length ; $x++)
" found boot : $filetest , skipping bootconfig start for $bid"
found credentials as:
"found! \\$dcip\files\$passedfilename test-path value: $test"
" found existing : not present"
" found existing : this is ok since it was to be created"
" found existing : this is ok since it was to be deleted"
" found existing : this is ok since were are going to overwrite"
" found exit : $fileexit , skipping bootconfig $bid"
$found = $false
" found flag : $testflag "
" found machine : $machinename"
$found = $matches[0]
$foundnodes = $false
$foundnodes = $true
"found! \\$passedip\files\$passedfilename : test-path value: $test"
"found! $passedip test-path value: $result "
"found path $webcopypath, begin copy"
"found topology $tname"
$foundtopology = $topology
$foundtopology = $topology.id
$found = $true
$foundupdatestodownload = $objcollectionupdate.count
$foundupdatestodownload = $updatecollection.count
$founduser = $objsearcher.findone()
"@ -f $physicalmemory, $inusememory, $availablememory, $percentmemory
$fqdnarray = $fqdn.split(".")
$fqdn = $casarray.fqdn
$fqdndepth = $colsplit.length
"fqdn: " + $ip.dnshostname + "." + $ip.dnsdomain
$fqdn = $serverobject.information.fullyqualifiednetname
"fqdn to request: $fqdn "
free: {2:n0} mb
"free (gb)" = [math]::round(($thisdisk.free /1024 /1024 /1024),2)
$frees = "{0:p0}" -f ($objitem.freespace / $objitem.size)
$freespace = "{0:n1}" -f ($tempoutput.freespace/$tempoutput.size*100)
freespace = $diskspace
$freespacegb = [math]::round($freespace / 1073741824, 2);
$freespace = [math]::round(($objdisk.freespace / 1073741824),2)
'fri' {
$friendlyvalue=$currentnewkey.getvalue("friendlyname")
$fri = $_.fri
from
$from = "",
$fromaddress = "messaging@company.com"
$fromaddress = "wsus@company.com"
$from = "admin monitor dfs <support@yourdomain.com>"
$fromemail = "suport@mail.net"
$fromfilter = new-object microsoft.exchange.webservices.data.searchfilter+containssubstring(`
$from = $from.adddays(7)
$from = get-date "19/03/2012"
from '$input'
$from = "mbxmoves<noreply@domain.com>"
from [production].[document] as [doc]
$from = "reports@contoso.com"
$fromsmall = $from.toshortdatestring()
"$fromsmall, $tempto, $inttotalsent, $inttotalsentsize, $inttotalsentint, $inttotalsentintsize, $inttotalsentext, $inttotalsentextsize, $inttotalrec, $inttotalrecsize, $inttotalrecint, $inttotalrecintsize, $inttotalrecext, $inttotalrecextsize" >> $strfile
from the use or distribution of the sample code.
"from, to,
$fs.close();
$fs.dispose();
$fsize = "{0:0000}" -f ($_.length /1kb)
$fsize = '<1kb'
$fs = new-object system.io.filestream ($folder + $rd.getstring(0)), create, write;
$f = [system.text.regularexpressions.regex]::matches(
$ftprequest.credentials = new-object system.net.networkcredential($username, $password)
$ftprequest.method = [system.net.webrequestmethods+ftp]::listdirectorydetails
$ftprequest = [system.net.ftpwebrequest]::create($source)
-fullaccess (@($hvmachineaccesslist) + $adminaccount, 'administrators', $clustermachineaccountstring, "system")
-fullaccess (@($hvmachineaccesslist) + $adminaccount, 'administrators',$clustermachineaccountstring, "system")
$fullaccess = new-object system.management.automation.host.choicedescription "&full access", ""
$fullarray = ""
$fullarray = @(get-childitem -literalpath $folderpath -recurse -erroraction silentlycontinue -force | select-object @selectproperty)
$fullbody=""
$fullbody+="</table></td>"
$fullbody+="<td align=""center"" valign=""top"" width=""33%""><table border=""0"" bordercolor=""
$fullbody+="<td><font color=""
$fullbody+="<td><font color=$font>$($fullsender.deny)</font></td>"
$fullbody+="<td><font color=$font>$($fullsender.isinherited)</font></td>"
$fullbody+="</tr>"
$fullbody+="<tr align=""center"" bgcolor=$($bgcolor)>"
$fullpath = "$($logfolder)\$($logfile)"
$fullpublish="true"
$fullsenders=get-mailbox $mailbox | get-mailboxpermission | ?{($_.accessrights -like "*fullaccess*") -and ($_.user -notlike "*nt authority\self*") -and ($_.user -notlike "*nt authority\system*") -and ($_.user -notlike "*exchange trusted subsystem*") -and ($_.user -notlike "*exchange servers*")}
$fullsenders=get-mailbox $mailbox | get-mailboxpermission | ?{($_.accessrights -like "*fullaccess*") -and ($_.user -notlike "*nt authority\self*") -and ($_.user -notlike "*nt authority\system*") -and ($_.user -notlike "*exchange trusted subsystem*") -and ($_.user -notlike "*exchange servers*") -and ($_.isinherited -like "false")}
$fullsenders=get-mailbox $mailbox | get-mailboxpermission | ?{($_.accessrights -like "*fullaccess*") -and ($_.user -notlike "*nt authority\system*") -and ($_.user -notlike "*exchange trusted subsystem*") -and ($_.user -notlike "*exchange servers*")}
$fullsenders=get-mailbox $mailbox | get-mailboxpermission | ?{($_.accessrights -like "*fullaccess*") -and ($_.user -notlike "*nt authority\system*") -and ($_.user -notlike "*exchange trusted subsystem*") -and ($_.user -notlike "*exchange servers*") -and ($_.isinherited -like "false")}
function addaccounts($passedcorpflag)
function adddhcp()
function adddns()
function add-domaingrouptolocalgroup
function add-fenodes
function add-hostsentryforadfs {
function add-layerorder($name, $modellayer)
function addlocaladmin($passedusernames=@("administrator"),[string]$passeddomain=$domain)
function add-localgroupmembership
function add-localusertogroup
function addone
function addone([int]$num)
function addoner2
function add-oscsplistitemattachment
function add-oscspwebappmimetypes
function add-qsadfsdnsentry {
function add-qsmsoldomain {
function addremoveadgroups
function add-repoitem
function add-spfiletodoclib
function addtwo([int]$num)
function add-usertogroup
function add-usertolocalgroup
function addwindowsfeatures()
function add-zip
function appendlogmessage($text) {
function apply-label
function auditreport
function backup-eventlogs
function buildadaccount()
function buildadsites()
function build-ax
function buildbaseconfig()
function buildbaseprepdc()
function buildca([switch]$skipcrl)
function builddc($domaintocreate=$domain,$domaintocreatefqdn=$domainfqdn,$domaintype="primary",$sitename="default-first-site-name",$parentdomainname)
function buildhtmltable($report){
function buildlinklist
function buildnat($target)
function buildnlb()
function build-visualstudioprojects([system.io.filesysteminfo]$model)
function buildwebserver($corpsite="washington",$image="washington.jpg",[switch]$simple,[switch]$skipcopy)
function byteswap {
function calculatestats()
function check-batterycharge
function check-batterystate
function check-cilerrors
function check-combinexpoerror
function check-compilererrors
function checkdirectory
function checkforreboot {
function checkhost{
function checkhoststatus {
function checknesting ($group, $parents)
function check-powershellversion
function checkprovidedsharepoint2013path()
function checkrequiredattribute
function checktimeservers {
function checkwuinstall {
function clean-build
function clean-buildmodels
function clean-dependentbinaries
function clean-models
function cleanup
function clear-olkfolder {
function clear-qfelocalstore
function click-cancelbutton()
function click-deleteallitemtoolstripmenuitem( )
function click-deleteitemtoolstripmenuitem( )
function click-edititemtoolstripmenuitem( )
function click-itemnewtoolstripmenuitem()
function click-netcancelbutton()
function click-netsavebutton()
function click-nevcancelbutton()
function click-nevsavebutton()
function click-nlicancelbutton()
function click-nlisavebutton()
function click-savebutton()
function click-typeedittoolstripmenuitem()
function click-viewdeletealltoolstripmenuitem()
function click-viewdeletetoolstripmenuitem()
function click-viewedittoolstripmenuitem()
function click-viewloadtoolstripmenuitem()
function click-viewnewtoolstripmenuitem()
function collect-build([system.array]$models)
function collect($distgroupmembers)
function combine-xpos([system.io.filesysteminfo]$modelpath)
function commit-repoitem
function commonbootconfig1()
function commonbootconfig2()
function compare-datetime($timeofobject,$property)
function compareleaseobjects($object1, $object2, $primarykey)
function compareobjectproperties($object1, $object2, $exclusionlist = @())
function compile-ax
function compile-build
function compile-cil
function compile-visualstudioprojects([system.io.filesysteminfo]$model)
function compile-vscomponents
function configureiehomepages($passurl)
function configure-qsadfs {
function configure-qsadfsproxyrole {
function configure-qsdirsync {
function configure-qsiisauthentication {
function configure-qsiisssl {
function configure-qsiissslexplicit {
function configure-qswindowsfirewall {
function confirm-azurevm {
function connect-commputer([string] $computername)
function connect-oscexchangeonline
function connect-oscexowebservice
function connect-oscexwebservice
function connectto-exchangeonline
function contentsearch ($pattern, $path, $type)
function convert-bytestosize
function convertfrom-datequery {
function convertfrom-encryptedadobekey {
function convertfrom-qssecurestringtoplaintext {
function convert-fsptousername
function convert-qsmsoldomain {
function convert-sidhistoryntfs {
function convertto-adobject([microsoft.grouppolicy.wmifilter[]] $wmifilter)
function convertto-dateobject {
function convertto-relativepath( [string] $path )
function convertto-wmifilter([microsoft.activedirectory.management.adobject[]] $adobject)
function copyfile ([string]$value, [string]$value1) {
function copyobjectstofiles($objects, $outdir) {
function create-axmodel($axmodelmanifest)
function create-buildcompleted
function create-buildfolders
function createceedictionaryfromsplist ($url, $listname, $keyfieldname, $valuefieldname, $addwordvariants){
function createconfigchildnode($owner, $type, $path, $name, $value)
function createcpedictionaryfromsplist ($url, $listname, $keyfieldname, $valuefieldname, $valueflag, $output){
function create-currentlogfolder
function create-deploycompleted
function createdestinationfolder()
function creatediffdiskonhost
function createfolder($mailboxname)
function create-folders
function createlayerresult($layerkey, $hasindex, $filtercount, $indexedcount)
function createlistentries ($url, $listname, $keyfieldname, $valuefieldname, $addwordvariants)
function create-modellist
function create-modelmap
function createnewace( [string] $account, [string] $guidstr )
function createoabapppool
function createobjecttypepages
function createresultobject()
function create-sccmsystemmanagementcontainer {
function create-scvirtualmachinewithdiffdisk
function createstatsobject()
function create-task
function createusers
function createwordvariations($phrase)
function credmanmain
function decrypt-string($encrypted, $passphrase, $salt="saltcrypto", $init="iv_password")
function del-creds
function delete-axmodel($model)
function delete-modelbyfilename($model)
function deletesections($webapp, $owner, $removeonly)
function delete-task
function del-leafobject
function deploy-ax
function deploysite
function deploysitecollection
function deploywebapplication
function disableaero()
function disableautologon()
function disable-corp()
function disable-home()
function disableinternetforwarding()
function disableinternetldap()
function disable-localuser
function disable-qsinternetexploreresc {
function disable-vcs
function disconnect-oscexchangeonline
function display-adsecuritygroupmemberof {
function dividenum([int]$num)
function document_onclick()
function dotnetping
function downloadsp2013files()
function download-xml
function draw-menu {
function edit-file
function emailstructure($to, $doclibraryviewurl
function enable-adsystemonlychange([switch] $disable)
function enable-localuser
function enableordisablefeature
function enable-rdp
function enable-testusersad {
function enable-testuserslync {
function enable-testusersmail {
function enabletracing()
function enabletsandfp()
function enable-tsduplicatetoken {
function enable-vcs
function encrypt-string($string, $passphrase, $salt="saltcrypto", $init="iv_password", [switch]$arrayoutput)
function endexecution
function endmaintenance {
function ensurebinarypath
function ensureloggingdirectory
function enum-creds
function enumeratecomputers
function enumeratedcs
function escape-csv( [string] $text )
function eventviewer
function exec-cmd-with-culture([system.globalization.cultureinfo] $onewculture, [scriptblock] $sscript)
function exec-spshell($cmd)
function expand-gzipfile
$functionexplorercommand.addshortcut('ctrl+4')
$functionexplorercommand.image = $imagelist.images.item('gotodefinition')
$functionexplorercommand = new-object -typename quest.powergui.sdk.itemcommand('gocommand','functionexplorer')
$functionexplorercommand.scriptblock = {
$functionexplorercommand.text = 'functionexplorer'
$functionexplorer_documents.clear()
[functionexplorer.treenodefactory]::updatetreenodes($trvfunctions, $functionexplorer_documents)
function export-domainsids {
function export-eventlogs
function export-oscexocontact
function export-oscexoemailmessage
function exportpolicies ($filename)
function export-qscertificate {
function export-sidhistoryshare {
function export-sidmapping {
function exporttoexcel {
function f_autolog {
function f_checkforemptyfolder {
function fcmdlembers ($group)
function f_deleteoldfiles {
function filterupdates($updates){
function findcaname()
function finddcfqdn()
function find-dn { param([string]$adfindtype, [string]$cname)
function find-webpart-collection([string]$sitecollectionurl,[string]$webpartname)
function find-webpart([string]$webappurl,[string]$webpartname)
function fixdhcpserver($value="10.0.0.1",$scopeid="10.0.0.0")
function fixtime()
function format-ipoutput($ip)
function format-nonipoutput($ip)
function format-output {
function formpcsearch{
function fqdn2dn
"function $functionname`r`n"
function generateform {
function generatereport
function get-adapterindex([string]$networkinterface = "local area connection"){
function get-adgroupmembers
function get-adminstatus
function get-adobjects
function get-aduserlastlogon([string]$username)
function getaltcreds
function get-aolcode([string]$layer)
function get-ast {
function getbasednforcertificatetemplate( [string] $certtemplatename )
function get-buildversion
function getcertificateenrollmentguid()
function get-chanukah {
function get-choice
function get-christmas {
function getclosestwritabledc($server)
function getcompname{
function get-credpersist
function get-credtype
function getdata {
function getdatabasefunctions
function getdatabaseinfo
function getdatabasepartitions
function getdatabasepartitionschemes
function getdatabases
function getdatabaseschemata
function get-databasesizes([string] $sqlinstancename = $env:computername)
function getdatabasestoredprocedures
function getdatabasetables
function getdatabasetriggers
function getdatabaseviews
function get-dbinfo
function getdbusers
function get-dellassetinformation{
function getdescriptionextendedproperty
function get-directory {
function get-directorylisting
function get-directorystats {
function get-discount([double]$rate,[int]$total)
function get-diskspace($drive,$computer)
function get-doc($path)
function get-domain {
function get-domainname
function get-duplicatefiles ($rootsiteurl)
function get-enabledbreakpoints
function getenvironmentvariable($variablename)
function getextendedrightsguid( [string] $name )
function get-extension {
function get-fefunctions
function get-filehash([string] $filename,$hashname = "md5")
function getfoldersize($path){
function getforestprivgroups
function get-freediskspace($drive,$computer)
function get-fsmoroleowner
function get-fwapplications
function get-fwgloballyopenports
function get-fwservices
function get-gpwmifilter {
function get-groupmembersrecursive
function get-grouppoliciesbygroup {
function gethash($fqdn)
function gethelp()
function get-hkcuvalue {
function get-hostip
function get-hostname
function get-identitypathelements([string] $identitystring)
function get-importoverrideparameters
function getinclude()
function getindexinfo
function get-info($computername) {
function get-inputvariables ($homepath)
function getinstalldir()
function get-installedsoftware{
function get-inusememory {
function get-invalidlogonattempts
function get-ipaddress {
function get-ipdemo
function get-iphttps()
function getipinfo
function get-ipobject
function get-ipobject([bool]$ipenabled = $true)
function get-layerid([string]$layername)
function get-localgroup
function get-localgroupmembers
function get-localgroupmembership
function get-localuser
function get-localuseraccounts
function get-machinecerts($fqdn)
function get-malwarestats {
function get-md5([system.io.fileinfo] $file = $(throw 'usage: get-md5 [system.io.fileinfo]'))
function getmemberexpanded
function get-modelstobuild
function get-model([system.io.filesysteminfo]$model)
function get-netstatreport
function get-nextversion($oldversion)
function get-nicinfo([string]$networkinterface = "local area connection"){
function get-nonstandardserviceaccounts
function getobjectdefinition
function getobjectdependency
function get-openfiles
function get-opensessions
function get-operatingsystemversion
function get-osccsusereffectivepolicy
function get-osccsuserpolicyassignment
function get-oscexlegacydn
function get-oscexocalendarfolder
function get-oscexodistributiongroupmember
function get-oscexoemailstatistics
function get-oscexomailboxfoldersize
function get-oscexomailfolder
function get-oscexoprerequisitereport
function get-oscexosearchfolder
function get-oscexotask
function get-oscexpublicfolder
function get-oscspwebappmimetypes
function get-ou
function get-overrideparameters
function get-papercutlogs
function get-pendingupdates
function get-printerlogs
function get-printers
function get-printjobs
function get-printqueue
function getprocparametertable
function get-pro { notepad $profile }
function get-qfe
function get-qfelist
function get-qotd {
function get-qsadfscertificate {
function get-qscustomdomains {
function get-qsdomainsuffixes {
function get-qselevationstatus {
function get-qseventlogsyncronizationevents {
function get-qsmsoldnsverificationtext {
function get-qsmsoldomainverificationdnsall {
function get-qsunverifieddomains {
function get-rdploginevents
function getserverinfo
function get-serviceaccountusage {
function get-services
function get-servicetag
function get-sharepoint3sites
function get-sidhistory {
function get-sisreport
function get-splistids
function get-splistitem
function get-sslcerts ($sslfqdn)
function get-stalecomputeraccounts
function getstatuscode
function get-stringfromarray([string[]] $array) {
function get-stringhash([string] $string,$hashname = "md5")
function getstringmatch
function get-svninfo
function gettablecolumntable
function get-textstatistics($path)
function get-textstats([string[]]$textin)
function get-tfs (
function gettriggerdetailstable
function get-tslsasecret {
function get-tssqlsyslogin {
function get-tswordxmetadata {
function get-type
function getuddts
function get-uninstallstring
function get-updates ($vmhost) {
function get-uptime
function getuseraccountattribs
function get-usergroupmembership
function get-users-from-activedirectory([string]$domaincnx, [string]$userlogin)
function getusrrights
function get-wmiclasses(
function get-wmifilterinadobject {
function get-wuinstall
function get-wuinstall_oldmode
function get-wulist
function getzipfileitems
function getzipfileitemsrecursive
function getzipfiles
function global:get-localgroup{
function global:select-menuitem {
function global:test-online {
function god-mode {
function grant-oscexocalendarfolderpermission
function hello {
function hide-powershellwindow()
function hideunuseditems{
function hide-wuupdate
function import-axcode([system.io.filesysteminfo]$model)
function import-buildmodels
function import-oscexcontact
function import-osclynccontacts
function import-qscertificates {
function installca()
function install-dependentbinaries
function install-importpsmodule()
function install-model($folder, $file)
function installnetmon()
function installorupdatesolution
function installorupdatewebappsolution
function installprereqfiles()
function installprereqs()
function install-qfepatch
function install-qsadfsproxyrole {
function install-qsadfsrole {
function install-qsdirsync {
function install-qsmsolservicesmodule {
function install-qsmsolservicesmoduleexplicit {
function install-qssigninassistant {
function install-qssigninassistantexplicit {
function installremoteaccess()
function installupdates {
function install-vmintegrationservice
function invoke-cmd {
function invokecmdletwithcomputername($cmdlet)
function invoke-hibernate
function invoke-qscommand() {
function invoke-standby
function invoke-ternary ([scriptblock]$decider, [scriptblock]$iftrue, [scriptblock]$iffalse)
function invoke-tsmedusa {
function invoke-tspingsweep {
function invoke-wsusdetect
function invoke-wsusreport
function ip2long {
function ip2longrev {
function ismember ($adobject, $groupname)
function isrunningdhcp
function issectionexpandedbydefault(objheader)
function issectionheader(obj) : issectionheader = (obj.classname = "heading1_expanded") or (obj.classname = "heading10_expanded") or (obj.classname = "heading1") or (obj.classname = "heading10") or (obj.classname = "heading2"): end function
function iswindowsserver
function join-domain {
function killie-startpage()
function launch-qsietestpages {
function launch-qsoffice365deploymentreadinesstool {
function listlocalgroupmember($grouptocheck="administrators")
function load-models($folder, $list)
function loadwfpstateasxml
$functionlocation = "c:\powershell\webconfigmodifications"
. $functionlocation\web_config_modifications_functions.ps1
function lock-computer
function lock-workstation
function main {
function mcafeelogs
function menu-helper {
function merge-csv {
function message($message) {
function migrateofflinevms {
function mod-acl {
function moveobj
function move-oscexoemailmessage
function movestatuscheck {
function move-vmstorage2
function my-test( [int]$myinput)
$functionname
$functionname = $f[0].value.substring($f[0].value.indexof(" ") + 1)
" functionname : $functionname`r`n"
$functionname = ($line.remove(0,9)).trim()
{ $functionname = $m.value }
"== $($functionname) ==" |out-file ".\$($wikifilename).wiki" -append -encoding ascii
" functionname : `r`n"
$functionname = [string]::empty
function new-bootableusb
function new-commentblock
function new-fastmanagedproperty([string]$name, [string]$crawledpropertyname, [string]$type,[bool]$refinement,$sortable)
function new-function
function new-fwportopening
function new-gpwmifilter {
function new-iprangewithexclusions {
function new-ipsetting {
function new-line([string]$stringin)
function new-localgroup
function new-localuser
function new-nicteam {
$function = new-object functionexplorer.function($document.title, $functionname, $linenumber)
function new-oscexcontactimportfile
function new-oscexoappointment
function new-oscexocontactreminder
function new-oscexosearchfolder
function new-oscexsearchfolder
function new-oscpscustomerrorrecord
function new-qfepatch
function new-qsadfsserviceaccount {
function new-qstestuser {
function new-repo
function new-scheduledtask
function new-script
function new-sharepoint3path
function new-sharepoint3site
function new-sharepoint3subweb
function new-spdoclibfolder
function new-splistitem
function new-throughputsetting {
function new-treenode()
function new-webclient{
function new-wikipage
function new-zip
function nextip {
function nodemouseclick-myformattreeview()
function nodemousedoubleclick-myformattreeview()
function objshowhide_onclick()
function octettoguid ($octet)
function octettohours ($octet)
function oldcomp
function out-error
function out-osclynccontacts
function outputline([string] $message)
function outputsuccess([string] $message)
function out-success
function out-version
function parseaction()
function parse-sddl ($sddlstring) {
function pause ($message="press any key to continue..."){
function pause($message="press any key to continue...")
function pendingreboot ($comp) {
function performcleanup($wsusserver, $parentwsusserver)
function pingtargetaddresses {
function pingtest
function pingtest($passedip)
function previousip {
function print_parameter($dictionary) {
function process-browserfilehandling($web) {
function process-qscertificate {
function process-scriptblockwrapper([scriptblock]$block) {
function process-spweb([microsoft.sharepoint.spweb]$myweb) {
function _progress
function put-buildnumber($axmodelmanifest)
function querycomputer($computer) {
function query-version
function read-axclientconfiguration
function read-axserverconfiguration
function read-creds
function readerie
function readlistpermissioninheritance($list)
function read-modellist($folder)
function readnetlogon
function read-qshostadfsservicecredentials {
function read-qshostconfirmedpassword {
function read-qshostcredentials {
function read-qshostdnsserveraddress {
function read-qshostdomainchoice {
function read-qshostyesno {
function read-qslistchoice {
function read-qswebsite {
function readwebpermissioninheritance($web)
function read-xml
function reattempt {
function reboot($timeout=0){
function regedit($regaction,$regkey,$regname,$regvalue=$null,$regtype="string")
function register-sqlsnapin
function release-qscomobject {
function remote-netstat {
function removeautorunflag()
function remove-comobject {
function remove-fileextension( [string] $f )
function remove-gpwmifilter {
function remove-localgroup
function remove-localgroupmembership
function remove-localuser
function remove-oscsplistitemattachment
function remove-repoitem
function remove-sidhistory {
function remove-userfromlocalgroup
function removev6($passedip)
function rename-computer
function rename-computer {
function rename-fileextension($path,$oldextension, $newextension)
function renamefiles
function rename-gpwmifilter {
function renamenic()
function rename-oscexotask
function rename-pc([string]$computer=$env:computername, [string]$newname){
function repair_sccm
function replacebackground ()
function replace-tabswithspace
function require-qsactivemsolconnection {
function require-qsadfssubjectname {
function require-qsdownloadablefile {
function require-qslocalfile {
function require-qsmodule {
function require-qsproduct {
function require-qsregistrykey {
function require-qsregistryvalue {
function require-qswindowsfeature {
function resetboot()
function reset-computeraccount
function resetlistpermissioninheritance($list)
function reset-localuserpassword
function reset-susclientid
function resetwebpermissioninheritance($web)
function resolve-whois($whois)
function resolve-zipcode([int]$zip)
function restartpc()
function revoke-oscexocalendarfolderpermission
function rulebasedadgroups()
function run-script {
functions added in this release:
function save-all
function scan-inputerrors
function script:converttocelsius($fahrenheit)
function script:converttofahrenheit($celsius)
function script:converttofeet($meters)
function script:converttokilometers($miles)
function script:converttometers($feet)
function script:converttomiles($kilometer)
function search-oscexocontact
function search-oscexoemailmessage
function selectitem
function sendemail
function sendemail($owneremail, $doclibraryviewurl, $documentname) {
function sendemailstatus
function sendemailstatus($messagesubject, $messagebody)
function send-lotusnotesmail {
function send-mail
function sendmail {
function send-oscexoemailmessage
function sendping($destination)
function send-tsmessagebox
function service($comp){
function services
function set-accountdisabled
function set-adaptersetting {
function set-adobjectproperties
function set-aduserpwd
function setcatemplateperms( $certificatetemplate, $objectname )
function set-computername
function set-gpwmifilter {
function set-interfacemetric {
function set-ipaddress {
function setip-netsh($nic,$switch)
function setip-ps($nic,$switch)
function set-ipsetting {
function set-localuser
function setmaxdegreeofparallelism()
function set-modellayerorder($folder)
function set-nextbuildversion
function set-nextversion
function set-oscexocalendarfolderpermission
function set-oscexoemailsignature
function set-oscexoprofile
function set-oscspuserpicture
function set-oscwindowssearchfeature
function set-parameter($name, $defaultval)
function set-pass
function setpermissions( [string]$object, [string] $certtemplate )
function setpublishingwebproperty
function set-qfeserver
function set-qsmsoldirsyncenabled {
function setrebootflag($userid,$domainname=$corpflag)
function set-repoprops
function set-shutdownmethod
function set-spsmailoptin
function set-timezone {
function setvariationlanguages
$functions = getdatabasefunctions $sql_server $db;
function shown-newedittypeform()
function shown-neweditviewform()
function shown-newlistitemform()
functions modified in this release:
function soft-inventory{
$functions = $sql_server.databases[$db_name].userdefinedfunctions | where-object {$_.issystemobject -eq $false};
function start-aos
function startmaintenance {
function start-process
function startprocess()
function stop-aos
function subone([int]$num)
function suspendcheck {
function sync-files
function sync-filestoalabel
function synchronize-ax
function sysinfo {
function test
function test-adauthentication {
function testdccorpready($passedip)
function testfilelock
function test-oscexoduplicateappointment
function test-oscpsexecutionpolicy
function test-oscpsversion
function test-oscuserprivilege
function test-oscwinrmauthsetting
function test-oscwinrmservice
function test-oscwinrmversion
function test-qfepatch
function test-qsexternaldnsrecords {
function test-qsrequirement {
function test-qsserveros() {
function test-qswin32() {
function test-qswin64() {
function test-qswindows8orlater() {
function test-qswow64() {
function testready($passedip,$passedfilename="dcdone.txt")
" function test : $supportingfunctionspath"
function textchanged-nlipropertytextbox()
function textchanged-nliscripttextbox()
function timesone([int]$num)
function timestwo([int]$num)
function traversesubkeys($newregistrykey) {
function truncatesplist
"function type: "+$item.functiontype+"<br>"+
function uninstall-qfepatch
function uninstallsolution
function unzip($zipfile, $dest)
function update-compilerinfo
function update-fedata
function update-formtitle
function updategp()
function update-grouppolicy
function update-inputvariables
function update-mcafeedat
function updateoabwebconfig()
function update-oscspfbauserdisplayname
function updatepclist
function updateprogress {
function update-repo
function update-sidmapping {
function updatestats()
function uptime($comp){
function usersgroups
function validatefeature
function validate-inputvariables
function verifydomainjoin ()
function verifytimerjob ($filter)
function waitforsolutionjob
function window_onload()
function wmidatestringtodate($bootup) {
function write-creds
function writedata
function write-errorlog($message)
function writehtmlfooter
function writehtmlheader
function writehtmlpage
function write-infolog($message)
function write-path()
function write-qscompletionmessage {
function write-qserror {
function write-qstitle {
function write-qswarning {
function writetableheader
function write-terminatingerrorlog($message, $errormsg)
function wsuslogs
$fw = invoke-command -computername $computername -scriptblock {netsh firewall set service remoteadmin enable} -erroraction silentlycontinue
$fw = invoke-command -computername $computername -scriptblock {netsh firewall set service remotedesktop enable} -erroraction silentlycontinue
$fwmgr = new-object -comobject hnetcfg.fwmgr
$fwport.enabled = $ruleenabled
$fwport.name = $rulename
$fwport = new-object -comobject hnetcfg.fwopenport
$fwport.port = $ruleport
$fwport.protocol = $ruleprotocol
$fwport.remoteaddresses = $ruleremoteaddresses
$fwprofile = $fwmgr.localpolicy.currentprofile
$fwservices = @()
$fwservices += $thisentry
$fwservices += $thisservice
$g1 = $g1.replace(",","")
$g1 = $g1.replace("cn=","")
$g1 = $g1.replace("dc=",".")
$g1 = $g1.replace($dn2,"")
$g1 = $g1.replace($g,"")
$g1 = $g1.replace(".gunter.afmc.ds.af.mil","/")
$g1 = $g1.replace("ou=","/")
$g1 = $g1.trimstart("/")
$gateway,
$gateway = '192.168.0.1'
-gateway $gateway `
gateway = $gateway
gateway = $gw
"gateway: " + $ip.defaultipgateway
$gateway = $nic.defaultipgateway[0]
$gatheredmailboxes = get-mailbox -organizationalunit "ad.comany.com/$baseou" -domaincontroller $domaincontroller `
gc "\\$computername\c$\windows\system32\drivers\etc\hosts"
$gc = $forest.findglobalcatalog()
gci "$dir" *$ext -r | select-object fullname,lastwritetime, @{name="megabytes"; expression={"{0:f2}" -f ($_.length / 1mb)}} | sort-object megabytes -desc | export-csv c:\files.csv
$gcount=($groups | measure-object).count
$g = $cs.name
generatereport
generic `= 1,
generic = 1,
"generic_certificate",
generic_certificate `= 5,
generic_certificate = 5,
"generic_certificate" {return [psutils.credman+cred_type]::generic_certificate}
$generic.makegenerictype($t)
"generic" {return [psutils.credman+cred_type]::generic}
$generic = [type]($generictype + '`' + $t.count)
$gen="<table border=""1"" bordercolor=""
$gen+="<td><a href=""
{$gentitle="mailboxes"}
{$gentitle="mailboxes with custom permissions"}
$gen+="</tr></table><br>"
$gen+="</tr><tr><td><a href=""
get
get-acl | function for sddl parsing
get-adcomputer -filter { operatingsystem -like "windows 7*" } -properties passwordlastset | foreach-object {
get-adcomputer -ldapfilter $ldapfilter |
get-addresslist | where {$_.name -ne ".contoso" } | where {$_.name -ne "contoso" } | set-addresslist -includedrecipients contacts -forceupgrade:$true
get-adgroup $_ `
(get-adgroup -properties memberof `
get-adobject -ldapfilter $ldapfilter -properties $wmifilterattr | write-output
get-adobject -ldapfilter "(sidhistory=*)" -property objectsid, sidhistory |
get-aduser -identity "administrator" | set-aduser -passwordneverexpires $true -displayname "administrator"
get-aduser -identity "user1" | set-aduser -passwordneverexpires $true -displayname "user1"
"$getalias is a member of discovery management"
"$getalias is a member of mailbox import export permission"
$getalias = read-host "enter alias of the user to add discovery management permissions"
$getalias = read-host "enter alias of the user to add mailbox import export permissions"
$getalias = read-host "enter alias of the user to check for discovery search permissions"
$getalias = read-host "enter alias of the user to check for mailbox import export permissions"
$getalias = read-host "enter alias of the user to search for a subject"
$getalias = read-host "enter alias of the user to search for a subject and delete it"
$getalias = read-host "enter the mailbox name to cleanup - empyting a mailbox"
$getalias = read-host "enter the mailbox name to cleanup the dumpster alone"
get-buildversion
get-childitem -filter move-mailbox*.xml $migrationlogs | ?{$_.creationtime -gt $date} | %{
(get-childitem $folder -filter "*.$types") |
get-childitem $logpath -filter *.csv | move-item -destination $logpath\old
get-childitem $logpath -filter *.log | move-item -destination $logpath\old
get-childitem $logpath -filter *.xml | move-item -destination $logpath\old
get-childitem $path | format-list | out-file "$folder\$sname\filelist.txt"
get-childitem -path $path -filter $oldextension |
get-childitem -path $path -include *.doc,*.docx,*.dot -recurse
get-childitem -path $path\* -include *.$extension
get-childitem -path $path\* -include *.$extension |
get-childitem -path $path -recurse |
get-childitem -path $psscriptroot\*.ps1 | foreach-object{ . $_.fullname }
get-childitem $regpath -erroraction stop | out-null
get-childitem $reportpath | where-object { $_.lastwritetime -lt $datetodelete } | remove-item;
get-command -module sidhistory
get-command -module sidhistory | get-help -full
get-content $allcsv[0].fullname | select-object -first 1 | add-content $combinedcsvfile
get-content \\edge01\c$\script.txt -ea 0 | out-file temp.dat -append
get-content \\edge02\c$\script.txt -ea 0 | out-file temp.dat -append
get-content -path $path |
get-content .\sidmap0.csv | foreach-object {$_.replace("`"","")} |
getdata
getdatabaseinfo $sql_server $db;
get-date
get-date | out-file c:\files\example.txt
get-date | out-file -filepath $logfile
get-date | out-file -filepath $logfile -append
get-date `| out-file `$logfile -append
get-dbinfo
get-directorystats -directory $directory -recurse:$false -format:$formatnumbers
get-directorystats -directory $_ -recurse:(-not $every) -format:$formatnumbers
get-eventlog `
get-eventlog -after ((get-date).addminutes(-30)) -logname 'application' -source 'directory synchronization' | sort-object -property timegenerated
get-fefunctions
get-fefunctions -documenttitle $pgse.currentdocumentwindow.title
get-help convert-sidhistoryntfs -full
get-help $functionname -full
get-help $functionname -full |out-file ".\$($wikifilename).wiki" -append -encoding ascii
get-help import-psmodule
get-help $poshfile.fullname -full
get-help $poshfile.fullname -full |out-file ".\$($wikifilename).wiki" -append -encoding ascii
$gethostentry = [net.dns]::begingethostentry($pingstatus.address, $null, $null)
get-importoverrideparameters
getinclude
get-info $_
get-inputvariables(split-path -parent $myinvocation.mycommand.path)
get-ipaddress -networkinterface "wireless network connection"
get-item -literalpath $_ -erroraction silentlycontinue | select-object @selectproperty})
(get-itemproperty (get-item ($path)).pspath).application
get-job -name movearray* | remove-job
get-mailbox -resultsize unlimited | get-mailboxstatistics | where {$_.totalitemsize -gt 500mb} `
get-mailbox | search-mailbox -searchquery "subject:'$getsubject'" -deletecontent
get-mailboxstatistics -server $server | where {$_.objectclass -eq "mailbox"} |
$getmailboxtosendlog = read-host "enter the mailbox alias to send the generated log"
get-managementroleentry "$orgname\$managementrole\*"
getmemberexpanded $objmember
get-messagetrackinglog -start $start -end $end -resultsize unlimited |
getmixer(mixercontrol, volumeconstants.mixerline_componenttype_dst_speakers, controltype, out volumecontrol, out currvolume);
getmixer(mixercontrol, volumeconstants.mixerline_componenttype_dst_speakers, type, out mixer, out currvolume);
get-model $model
get-moverequest | where {$_.status -eq "completed"}
get-msolfederationproperty -domainname $federateddomain `| out-file `$logfile -append
get-netadapter -name $targetnetadapter |
get-netadapterqos | enable-netadapterqos
get-netadapter | where {$_.networkaddresses -like "$mac"} | rename-netadapter -newname "$switch"
| get-netfirewalladdressfilter | where-object { $_.remoteaddress -eq 'any' } `
| get-netfirewallapplicationfilter | where-object { @('any', 'system').contains($_.program.tolower()) } `
| get-netfirewallinterfacefilter | where-object { $_.interfacealias -eq 'any' } `
| get-netfirewallinterfacetypefilter | where-object { $_.interfacetype -eq 'any' } `
| get-netfirewallrule
| get-netfirewallrule `
get-netipinterface |
get-oscexodistributiongroupmember @boundparams
get-oscexoemailstatistics @boundparams
get-oscexomailboxfoldersize @boundparams
$getother=get-user -filter "otherfax -like '*$extension*'"
get-overrideparameters
get-process excel -erroraction silentlycontinue
$getprocess = get-process -name ccmrepair* -computername $strcomputer
get-psbreakpoint |
get-pssession | remove-pssession
get-pssnapin -registered
get-qadcomputer -computerrole member -includedproperties pwdlastset -sizelimit 0 -osname 'windows 7*' | foreach-object {
get-qaduser $i.userid | set-qaduser -objectattributes @{c = $i.countrycode.trim()}
get-qaduser $i.userid | set-qaduser -objectattributes @{co = $i.country.trim()}
get-qaduser $i.userid | set-qaduser -objectattributes @{l = $i.city.trim()}
get-qaduser $i.userid | set-qaduser -objectattributes @{postalcode = $i.zip.trim()}
get-qaduser $i.userid | set-qaduser -objectattributes @{st = $i.state.trim()}
get-qaduser $i.userid | set-qaduser -objectattributes @{streetaddress = $i.physicaladdress.trim()}
get-qaduser $i.userid | set-qaduser -objectattributes @{telephonenumber = $i.officetelephone.trim()}
get-qaduser -ou 'ou=<ou>,dc=<company>,dc=<>' -enabled -size 0 | where {($_.passwordneverexpires -eq $false)} | foreach-object {
get-qaduser -sizelimit 0 | select-object samaccountname,mail,passwordstatus |
get-qsmsoldnsverificationtext -domain $selectedsuffix
get-queue -server hub01 | out-file temp.dat -append
get-queue -server hub02 | out-file temp.dat -append
$getramdata = join-path $scriptpath get-inusememory.ps1
get recursive folder list.
get-regvalue -computername $computername -hive localmachine -key ("software\microsoft\windows\currentversion\explorer\browser helper objects") -recurse | where-object {$_.data -notlike $null -and $_.data -notlike "1" } | select-object data | ft -hidetableheaders
get-regvalue -computername $computername -hive localmachine -key ("software\microsoft\windows\currentversion\url\defaultprefix\") -recurse | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet connection wizard") -value "shellnext" | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet explorer\main") -value "default_page_url" | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet explorer\main") -value "search bar" | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet explorer\main") -value "search page" | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet explorer\main") -value "start page" | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet explorer\main") -value "window title" | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet explorer\menuext") -recurse | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet explorer\searchurl") -value "(default)" | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\windows\currentversion\internet settings") -value "proxyoverride" | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\windows\currentversion\policies\system") -recurse | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\windows\currentversion\runonce") -recurse | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\windows\currentversion\run") -recurse | select-object value,data | ft -hidetableheaders
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\policies\microsoft\internet explorer\restrictions") -recurse | select-object value,data | ft -hidetableheaders
get-regvalue -hive localmachine -key software\microsoft\windows\currentversion\uninstall -computername $computername -value displayname -recurse | where-object {$_.data -notlike "*ccc*" -and $_.data -notlike "*windows*" -and $_.data -notlike "*apple*" -and $_.data -notlike "*microsoft*"} | select-object data | ft
get-resourcepool -location $clus| where-object {$_.name -eq "serverprovisioning"} | select @{n="cluster";e={$clus.name}},name,
get { return _hwnd;}
get { return new win32window(system.diagnostics.process.getcurrentprocess().mainwindowhandle); }
getserverinfo $sql_server;
get-service adws | % {write-host $_.status }
$getservice = get-service -computername $computer
get-service remoteaccess
get-sidhistory
get-spcontentdatabase -site $site | set-spcontentdatabase -maxsitecount 1 -warningsitecount 0
(get-spfarm).solutions | where{$_.deployed -ne $null} | foreach-object{$solution = $exportfolder + "\" + $_.name; $_.solutionfile.saveas($solution); write-host "exporting $solution"}
get-spsite -limit all | % {$webs += $_.allwebs}
get-spwebapplication
get-storagegroup -server $hostname | sort name |
$getsubject = read-host "enter the subject"
$getsubject = read-host "enter the subject of the email to delete from the entire organization"
get-textstatistics("c:\fso\test.txt")
$gettingemailsuffix = "((get-accepteddomain)[0]).name"
"getting machine certs for $fqdn - $dcfqdn"
$gettingpassword = read-host "enter the password for the accounts"
"getting ssl certs for $sslfqdn - $dcfqdn"
get-transportserver |
get-transportserver | get-messagetrackinglog -resultsize unlimited -start $from -end $to | ? {$_.messagesubject -ne "folder content"} | foreach {
$_.gettype().getfield("encodindg","nonpublic,instance").setvalue($_, [text.encoding]::ascii)
$getum=get-ummailbox -filter "emailaddresses -like '*$extension*'"
$_.getupdateapprovals() | foreach {
$getuser=get-user -filter "phone -like '*$extension'"
get-variable -scope 1 | where-object {
get-view -viewtype datastore | where-object {$_.name -notmatch "pag"} | `
get-vmdisk -vm $virtualmachine.vmelementname | `
get-vmnetworkadapter "blue1" | where {$_.macaddress -eq "060600000005"} | set-vmnetworkadapter -virtualsubnetid 5001;
get-vmnetworkadapter "blue2" | where {$_.macaddress -eq "060600000007"} | set-vmnetworkadapter -virtualsubnetid 5001;
get-vmnetworkadapter "blues1-vm1" | where {$_.macaddress -eq "101010101105"} | set-vmnetworkadapter -virtualsubnetid 6000;
get-vmnetworkadapter "blues1-vm2" | where {$_.macaddress -eq "101010101107"} | set-vmnetworkadapter -virtualsubnetid 6000;
get-vmnetworkadapter "red1" | where {$_.macaddress -eq "080800000005"} | set-vmnetworkadapter -virtualsubnetid 6001;
get-winevent -logname $eventlog.logname -computername $computername |export-csv -path ".\$($backupfilename)"
get-wmiclasses
get-wmiclasses -class disk -ns root\cimv2"
get-wmiclasses [[-class] [string]] [[-ns] [string]] [-help]
get-wmiobject -class win32_networkadapterconfiguration -filter "ipenabled = $ipenabled"
get-wmiobject -class win32_networkadapterconfiguration -filter "ipenabled = $true"
(get-wmiobject -class win32_operatingsystem).version
(get-wmiobject -computer $computername win32_service -filter "name='remoteregistry'" -erroraction silentlycontinue ).invokemethod("startservice",$null) | out-null
(get-wmiobject -computer $computername win32_service -filter "name='termservice'" -erroraction silentlycontinue ).invokemethod("startservice",$null) | out-null
(get-wmiobject -computer $computername win32_service -filter "name='termservice'" -erroraction silentlycontinue ).invokemethod("stopservice",$null) | out-null
(get-wmiobject -computer $computername win32_service -filter "name='umrdpservice'" -erroraction silentlycontinue ).invokemethod("startservice",$null) | out-null
(get-wmiobject -computer $computername win32_service -filter "name='umrdpservice'" -erroraction silentlycontinue ).invokemethod("stopservice",$null) | out-null
get-wmiobject -computername $cmp win32_logicaldisk |
get-wmiobject -namespace $ns -list |
get-wmiobject @paramservices | foreach-object {
get-wmiobject win32_logicaldisk -credential $cre -computername $args -filter "drivetype=3" |
get-wmiobject win32_logicaldisk -filter 'drivetype = 2 or drivetype = 3' |
get-wmiobject win32_networkadapterconfiguration -computername $computername -filter "ipenabled=true" | foreach-object {
getzipfileitemsrecursive $item.getfolder.items()
getzipfileitemsrecursive $items
getzipfileitems $zipfile
$g = get-mailboxdatabase -status | select-object name,databasesize,availablenewmailboxspace | convertto-html -head $a
-givenname $firstname `
$gj++
$gj=0
$gj=-1
$globaladadminmail = "administrator@contoso.msft"
$globalbackupdir = $pwd.path + "\backup\" + (get-date -format yyyymmdd_hhmmss)
"global catalogs:"
$global:counter = 0
$global:erroractionpreference="continue"
$global:erroractionpreference="silentlycontinue"
$global:functionexplorer_documents.add($fedocument)
$global:functionexplorer_documents.addrange($global:functionexplorer_documents.getnewdocuments($documenttitles))
$global:functionexplorer_documents = new-object functionexplorer.documentcollection
$global:functionexplorer_documents.remove($global:functionexplorer_documents.getorphaneddocuments($documenttitles))
$global:icmd = @()
$global:icmd += $data
$global:messagebody = "$shtmltablestyle <tr>$shtmlheadingstyle wsus server</th>$shtmlheadingstyle parent wsus server</th>$shtmlheadingstyle wsus version</th>$shtmlheadingstyle start</th>$shtmlheadingstyle finish</th>$shtmlheadingstyle superseded updates deleted</th>$shtmlheadingstyle expired updates declined</th>$shtmlheadingstyle obsolete updates deleted</th>$shtmlheadingstyle updates compressed</th>$shtmlheadingstyle obsolete computers deleted</th>$shtmlheadingstyle disk space freed (mb)</th></tr>"
$global:nestedgroups=$nestedgroups
$global:o365session = new-pssession -configurationname microsoft.exchange `
$global:qfeserver = $qfeserver
$global:rebootneeded = $true
"global" { return $globalcolor }
$global:temparray =@()
$global:temparray += $descvalue
$global:temparray += $descvalue + " || " + $currentnewkey
$global:temparray += $friendlyvalue
$global:temparray += $friendlyvalue + " || " + $currentnewkey
$global:totalgroupschecked = $global:totalgroupschecked + 1
$global:totalgroupsupdated = $global:totalgroupsupdated + 1
$global:totalsiteswithwebpartfound += 1
$global:totalusersnoupdateneeded += 1
$global:totalusersprocessed+=1
$global:totalusersupdated += 1
$global:totaluserswithoutpicture += 1
$global:valid = 0
$gname = $_.samaccountname
$gotodefinitioncommand.addshortcut('f12')
$gotodefinitioncommand.image = $imagelist.images.item('gotodefinition')
$gotodefinitioncommand = new-object -typename quest.powergui.sdk.itemcommand('editcommand','gotodefinition')
$gotodefinitioncommand.scriptblock = {
$gotodefinitioncommand.text = 'go to definition'
goto retry;
$gpdomain = new-object -type microsoft.grouppolicy.gpdomain
$gpobackup = backup-gpo $gpo.displayname -path $backuppath
$gpocomputercontext = $true
$gposettingguid = "{8a28e2c5-8d06-49a4-a08c-632daa493e17}",
$gposettingguid = "*$($gposettingguid)*"
$gposettingname = "deployed printer connections policy",
$gpos = get-adobject -filter {(objectclass -eq "grouppolicycontainer") -and (gpcmachineextensionnames -like $gposettingguid)}
$gpos = get-adobject -filter {(objectclass -eq "grouppolicycontainer") -and (gpcuserextensionnames -like $gposettingguid)}
$gpos = get-gpo -all -domain $domain
gps |
$graphics.dispose()
$graphics.drawstring("computername: $($env:computername)",$font,$brushfg,800,100)
$graphics.drawstring($hddstring,$font,$brushfg,800,$ypos)
$graphics.drawstring(" last boot: $($boottime)",$font,$brushfg,800,140)
$graphics.drawstring(" logonserver: $($env:logonserver)",$font,$brushfg,800,120)
$graphics.fillrectangle($brushbg,0,0,$bmp.width,$bmp.height)
$graphics = [system.drawing.graphics]::fromimage($bmp)
$group1 = [adsi]$group1dn
$group2 = [adsi]$group2dn
$group.add($dn)
$group = [adsi]$groupdn
$groupamembers = ""
$groupamembers = get-adgroupmember group_a
group -ashashtable -property computername
$groupbmembers = ""
$groupbmembers = get-adgroupmember group_b
$groupcn = "cn="+$objnewgroup.cn.tostring() + ","
$groupcolor = {
$group = $computer.create("group", $name)
"group '$computername\$localgroupname' contains these members:"
"group '$computername\$localgroupname' is empty."
$group = $computer.psbase.children.find("administrators")
$group = $computer.psbase.children.find($groupname)
$groupcontacts = $contactgroup.contacts
$groupcount = 0
$groupcount = $args.count
$groupdata=get-distributiongroup $group
$groupdn,
groupdn = $group
groupdn = $groupdn
$groupentry = new-object -typename psobject -property @{
$group = get-adgroup $gname
$group = get-group $group -erroraction silentlycontinue
$group = get-group $group -erroraction silentlycontinue;
"[group]-group account was moved = " + ($groups[$k] -replace $source,$destination)
"[group]-group creation = " + $grouptocreate
"group $group not found"
$grouphasgroupcount=($grouphasgroup|measure-object).count
$grouphasgroup=$members | ?{$_.recipienttype -like "*group*"}
$groupiscritical = $groupresult.healthstate -eq "error"
$group = $item.getdirectoryentry()
$grouplist = @{}
$grouplist.add($adobject.samaccountname.tostring() `
$grouplist.add($adobject.samaccountname.tostring() + "\", $true)
group = $localgroup
$group.members() |
$groupmembers = @{}
$groupmembers = $exservice.expandgroup($identity)
$group.members() |foreach `
$groupmembership = @()
$groupmembership += $groupentry
$groupn.add($account.path)
"groupname" {
$groupname = $contactgroup.groupname
$groupname = $objitem.storagegroupname
$group.name | out-file $memberlist -encoding unicode -append
"[group]-no changes were done on = " + ($groups[$k] -replace $source,$destination).tostring()
$groupobject = $computerobject.psbase.children.find("$($localgroup)")
$groupobject.endaddcontact($groupobject.beginaddcontact($contactobject,$null,$null))
$groupobject.endremovecontact($groupobject.beginremovecontact($contact,$null,$null))
$groupobject = $null
$groupobject = $serverobject.availabilitygroups[$groupname]
$grouppolicy = invoke-expression $cmd
$groupproperties = $xmldoc.selectnodes("objects/object/property")
$group = read-host "enter group ""pre-windows 2000"" name"
$groupresult = test-sqlavailabilitygroup $groupobject -norefresh
$groups = ([adsi]$userdn).memberof
$groups = dsquery group $source -limit 0
$groups | format-table -autosize
$groups=get-distributiongroup -resultsize unlimited | sort-object name
$groups = get-localgroupmembers $computer.properties.name $groupname
$group = $sid.translate([system.security.principal.ntaccount])
groups = $membernames
groups= $membernames -join ", "
$groups = $script:groupmembers.keys
$groupswithoutmanager=($alldistgroups | ?{!$_.managedby} | measure-object).count
$groupswithoutmanager=($groups | ?{!$_.managedby} | measure-object).count
$grouptocreate = ($groups[$k] -replace $source,$destination).tostring()
"grouptype" {
$groupupdated = $false
$groupupdated = new-object -typename psobject -property @{
$groupupdated = $true
$groupusers = get-distributiongroupmember -identity 'exchange activesync allowed'
+ "\" + $group.value.split("\")[1], $true)
$grp1.controls.add($btn1)
$grp1.controls.add($btn2)
$grp1.controls.add($btn3)
$grp1.controls.add($btn8)
$grp1.controls.add($btn9)
$grp1.databindings.defaultdatasourceupdatemode = 0
$grp1.location = $system_drawing_point
$grp1.name = "grp1"
$grp1 = new-object system.windows.forms.groupbox
$grp1.size = $system_drawing_size
$grp1.tabindex = 4
$grp1.tabstop = $false
$grp1.text = "information"
$grp2.controls.add($btn4)
$grp2.controls.add($btn5)
$grp2.controls.add($btn6)
$grp2.controls.add($btn7)
$grp2.databindings.defaultdatasourceupdatemode = 0
$grp2.location = $system_drawing_point
$grp2.name = "grp2"
$grp2 = new-object system.windows.forms.groupbox
$grp2.size = $system_drawing_size
$grp2.tabindex = 5
$grp2.tabstop = $false
$grp2.text = "tools"
$grpexist = $null
$grp = get-adgroup mygroup
gsv|
guid = "";
$guid | foreach-object {
$guid = . getcertificateenrollmentguid
guid = $gpo.name
[guid[]] $guid,
[guid]$guid = $match.value
[guid]$guid = $_.name.substring(1, $_.name.length - 2)
$guid = [guid]::newguid()
$guid = [guid]::newguid();
$guid = [guid]::newguid().tostring()
$guid = [guid]$octet
$guid = $localuser.objectguid
$guid = new-object guid( $guidstr )
$guid = [system.guid]::newguid()
$guid=[system.guid]::newguid().tostring()
gw 12773399 -extended
$g = $w.get($labelspec, 1)
$g = $w.get($versionspec, 1)
$gw = $gw_addr
gwmi -computer $env win32_computersystem | format-list name,domain,manufacturer,model,systemtype
$gwmi = get-wmiobject -query $query -computername $computername -erroraction:silentlycontinue | where-object {$_.sidlength -gt 16}
gwmi -namespace root\microsoftactivedirectory -class microsoft_domaintruststatus -computername $_.name |
gwmi win32_networkadapterconfiguration | where {($_.interfaceindex -eq $nicidx)}| select $partialinfo
(gwmi win32_networkadapter | where {$_.netconnectionid -eq $networkinterface}).interfaceindex
$gw = $null
gzstream.copyto( outputstream );
$h = 0
<h1>$heading</h1>
<h1 style='font-family:arial;'><b>disk space storage report</b></h1>
<h1 style='font-family:arial;'><b>sql jobs report</b></h1>
<h1>welcome to $id! <br></h1>
<h1>welcome to $id! ($corpsite)</h1>
<h1>you arrived through the <u><%= ep %></u> entry point</h1>
<h3 align=""center"">distribution group report</h3>
<h3 align=""center"">$($mailboxname) mailbox audit log report</h3>
<h3 align=""center"">mailbox send as, full permission and send on behalf report</h3>
<h3>your ip is <u><%= ip %></u></h3>
<h4 align=""center"">generated $((get-date).tostring())</h4>
<h4 align=""center"">generated $((get-date).tostring())</h4>"
<h4 align=""right""><font size=3 color=""
<h5 align=""center"">distribution groups summary</h5>
<h5 align=""center"">dynamic distribution groups summary</h5>
$handler_currentdocumentwindowchanged =
$handler_trvfunctions_mousedoubleclick =
$handler_tsbclearfilter_click =
$handler_tsbrefreshtreeview_click =
$hardwareprofile = get-schardwareprofile -vmmserver $vmmserver | ? {$_.name -eq $hardwareprofilename}
hasaccess = [bool]$sqlobject.hasaccess;
$hasconnectionpermission = $false
$hasconnectionpermission = $true
$hash=@{}
$hash = @{
$hash = @{}
$hashalgorithm = new-object $cryptoserviceprovider
$hash.archiveitemscount = $mbxsearch.resultitemscount
$hash.archiveitemssizebytes = "{0:n0}" -f $archiveitemsizebytes
$hash.archiveitemssizembs = "{0:n4}" -f ($archiveitemsizebytes / 1mb)
$hashbytearray = $hashalgorithm.computehash($stream)
$hash = @{computername=$computername;members=$arr}
$hash.database = $duplicateserror
$hash.database = $mbxdatabase
$hash.identity = $mbxsearch.identity
$hash.itemscount = $mbxstats.itemcount
$hash.itemssizebytes = "{0:n0}" -f $itemsizebytes
$hash.itemssizembs = "{0:n4}" -f ($itemsizebytes / 1mb)
$hash.$name=$null
$hash.$name=$_.properties[$name][0]
$hashoutput
$hashoutput.daterange += $entry.day
$hashoutput.daterangerepeat += $entry.repeat
$hashoutput.dayofmonth = 0
$hashoutput.dayofmonth = 1
$hashoutput.dayofmonth = $entry.day
$hashoutput.dayofquarter = 0
$hashoutput.dayofquarter = 1
$hashoutput.dayofquarter = $entry.day
$hashoutput.dayofweek = 0
$hashoutput.dayofweek = 1
$hashoutput.dayofweek = 2
$hashoutput.dayofweek = 3
$hashoutput.dayofweek = 4
$hashoutput.dayofweek = 5
$hashoutput.dayofweek = 6
$hashoutput.dayofyear = 0
$hashoutput.dayofyear = 1
$hashoutput.dayofyear = $entry.day
$hashoutput.dayofyearrepeat = $entry.repeat
$hashoutput.limityear = $entry.day
$hashoutput.monthrepeat = $entry.repeat
$hashoutput.quarterrepeat = $entry.repeat
$hashoutput.weekrepeat = $entry.repeat
$_hashresult = ""
$_hashresult = "manual check required"
$_hashresult = "not found"
[hashtable[]]
[hashtable]
[hashtable]$customgroupcontact,
[hashtable] $errorcategory = @{0x80070057 = "invalidargument";
[hashtable]$feature
[hashtable]$newdisplayname,
[hashtable]$obj = @{activesyncuser=0; activesyncproxyuser=0; activesyncclients=@{}; activesynclastaccess=""; ewsuser=0; ewsclients=@{}; ewslastaccess=""; webdavuser=0; webdavclients=@{}; webdavlastaccess=""}
[hashtable]$returnvalues = @{ "version" = $version; "dc" = $dc}
[hashtable]$users = @{}
$hash.user = $mbx
$hasindex = $totalindexedcount -gt 0
$hasmanageprofilespermission = $false
$hasmanageprofilespermission = $true
$hbpetype = $hbp.entrytype
$hbpevt = get-eventlog -logname application -computername $htbp -newest 100 | ?{$_.source -like "msexchange transport" -and $_.eventid -eq "15004" -or $_.eventid -eq "15005" -or $_.eventid -eq "15006" -or $_.eventid -eq "15007"}
$hbpinst = $hbp.eventid
$hbpmsg = $hbp.message
$hbpsource = $hbp.source
$hbptw = $hbp.timewritten
hc4n10 = 3
hc4n9 = 3
$hdds = gwmi win32_logicaldisk -filter "drivetype=3"
$hddstring = " $($hdd.deviceid) ({0:n2} gb/{1:n2} gb)" -f ($hdd.freespace/1gb),($hdd.size/1gb)
$hdfree = $rhd.freespace / 1gb
$hdsize = $rhd.size / 1gb
</head>
<head>
"</head>" + `
"<head>" + `
$header="
$header = "
$headerelement = $headerselement.appendchild($myxml.createelement("tablecolumnheader"))
$header+="{\*\generator riched20 6.2.8102}\viewkind4\uc1 `r`n"
$header="<html><body>
$header+="\pard\sl276\slmult1\f0\fs22\lang9 \par`r`n"
$header+="{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 consolas;}}`r`n"
$headerselement = $controlelement.appendchild($myxml.createelement("tableheaders"))
$headerstring = "displayname,userprincipalname,accountsku"
$headerstring = ($headerstring + "," + $thislicence)
.heading0_expanded {border-right:
.heading10 {border-right:
.heading1 {border-right:
$heading = "demonstration mode: the available menu shortcuts are shown as"
<head><title>welcome to $id! ($corpsite)</title>
<head><title>welcome to $id !</title>
$height = $cellheight * 4
hello
hello $firstname,
helpdesk@<cotendo>.com
helpmessage='allows you to type a comment about the maintenance activity.')]
helpmessage='an array of property names'
helpmessage='ldap filter'
helpmessage='ldap path of container to root search in'
helpmessage = 'list services, scheduled tasks or application pools run by non system accounts (localsystem / localservice / netwokservice / etc.)')]
helpmessage='pagesize for returned entries'
helpmessage = 'path to file to process',
helpmessage='specifies the time the maintenance will end. the minimum amount of time a resource can be in
helpmessage = 'string to process',
helpmessage = 'the name of the [remote] computer or an array of computer names')]
helpmessage = 'the user account being used on a service, scheduled task or application pool')]
helpmessage='unplannedother, plannedhardwaremaintenance, unplannedhardwaremaintenance,
helpmessage='what is the computergroup you want to put in maintenance mode?')]
helpmessage='what is the description for the choice?')]
helpmessage='what is the descrition for the choice?')]
helpmessage='what is the first choice?')]
helpmessage='what is the headline for the choice?')]
helpmessage='what is the help text for the choice?')]
helpmessage='what is the second choice?')]
helpmessage='what is the short description for the choice?')]
helpmessage='what is the text for the choice?')]
helpmessage='which choice is the default?')]
$helpstring
$helpstring = @"
hfmaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabtsqutfmg9/5kmg/+tj4z/k4+m/5opjp+tj4z/k4+m/5opjp+tj4z/k4+m/5opjp+tj4z/k4+m/5opjp+tj4z/k4+m/5opjp+tj4z/k4+m/5op
$hh = 0
$hh = [int][math]::truncate($lastrun/10000);
<hidden>false</hidden>
$hiddengroups=($alldistgroups | ?{$_.hiddenfromaddresslistsenabled -like "true"} | measure-object).count
$hiddengroups=($groups | ?{$_.hiddenfromaddresslistsenabled -like "true"} | measure-object).count
hidesection obji
hideunuseditems
$highestcql = $cqlarray | sort-object {[int] $_} | select-object -last 1
$highrange = $lowrange + $rangestep
hklm:\software\microsoft\windows\currentversion\uninstall -recurse
hklm:\software\wow6432node\microsoft\windows\currentversion\uninstall -recurse
"home"
"home city" = "address:home:city";
"home country/region" = "address:home:countryorregion";
"home fax" = "phone:homefax";
"home phone 2" = "phone:homephone2";
"home phone" = "phone:homephone";
$homephysicaladdressentry.($mappingarray[2]) = $contactitem.$key;
$homephysicaladdressentry = new-object microsoft.exchange.webservices.data.physicaladdressentry;
"home postal code" = "other:home:postalcode";
"home state" = "address:home:state";
"home street" = "address:home:street";
$hosternetnicteamname = 'hosternet'
$hosternetteammembers = 'hosternet 1', 'hosternet 2'
$hostgroup = $cloudobject.hostgroup
$hosticversion= get-itemproperty "hklm:\software\microsoft\windows nt\currentversion\virtualization\guestinstaller\version" | select -expandproperty microsoft-hyper-v-guest-installer
$hostinstancelist = $hostinstancesearch.get()
$hostinstancesearch = new-object system.management.managementobjectsearcher($query)
'hostintegration services version' = $hosticversion
$hostip = [system.net.dns]::gethostaddresses($computername)
$hostname = $domaincontroller.hostname
$hostname = $env:computername.tolower()
hostname = $hostname;
$hostname = ([net.dns]::endgethostentry([iasyncresult]$gethostentry)).hostname
$hostname = [system.net.dns]::gethostentry($computername)
$hostratings = get-scvmhostrating -vmhostgroup $hostgroup -template $template -diskspacegb $vhdsize -vmname $vm | sort-object -descending rating
$host.runspace.threadoptions = "reusethread"
$hosts = "example-host1", "example-host2"
$hosts = "example-host1", "example-host2", "example-host3"
$hosts = get-content $hostspath
$hosts = get-vmhost -vmhostgroup "hostgroup"
$hosts = $hosts | foreach {
$hosts = $hosts + "`n$ipaddress adfs.$domain"
$hosts | out-file $hostspath -encoding ascii
$hostspath = "$env:systemroot\system32\drivers\etc\hosts"
$hoststate = get-vmhost $vmhost
$host.ui.rawui.foregroundcolor = $originalcolor
$host.ui.rawui.foregroundcolor = "red"
$host.ui.writeline("adse = " + $dse.defaultnamingcontext)
$host.ui.writeline("import-module grouppolicy")
"hotfix for microsoft .net framework")
"hotfix for windows",
$hour = $latest.hour
$hour = $now.hour
$hours = 2,
$hours = 24
$hours = " hour "
$hours = $hours.replace(" ", "")
$hours = $hours.replace("-", "")
$hours = $hours.replace(",", "")
$hours = $hours.replace("/", "")
$hours = $hours.replace("\", "")
$hours = $hours.replace("+", "")
$hours = "$str2$str1"
$hours = "$sun$mon$tue$wed$thu$fri$sat"
hours = $uptime.hours
$howoldbkp = $currentdate - $lastbackup
$howoldbkp = $howoldbkp.days
$howoldbkp = $null
$hq = "mydomain.com/hq/users"
$h = $reporttime.hours
$hrs = ""
$hrs = $value.substring($j, 1) + $hrs
$h = [system.double][math]::truncate($imedia/10000);
</html>
</html>";
<html>
"</html>"
$html = @'
$html += "
$htmlautoservices = $newobj.autoservices
$html_body + `
$html_body = "<h2> $title - date of reports : $($now.tostring("yyyy/mm/dd hh:mm:ss"))</h2>`
$htmlend = @"
<html es_auditinitialized='false'><head><title>audit</title>
$html_head = "<style> `
$html = "<html>
$html += "<html><body><table border=1 cellpadding=0 cellspacing=0 id=header><caption><b>creaded by abhishek borole</b></caption>
$html += "<html><body><table border=1 cellpadding=0 cellspacing=0 id=header><caption><font size=3 color=green><h1 align=""center"">~$vc-datastore verification report~ </h1></font>
$htmlmessage = @"
$htmlmessagebody = ""
{$htmlmessagebody = $shtmlparagraphstyle + "<br>mail flow problem: " + $dodgymailflow + "`r`n" + "<br>mapi connectivity problem: " + $dodgymapiconnectivity + "`r`n" + "<br>mail queues problem: " + $dodgyqueues + "`r`n"
$html | out-file -filepath $filepath;
$html | out-file $outputfile
$htmlpendingreboot = $newobj.pendingreboot
$htmlreport = "$($adistgroup.windowsemailaddress.local)-$($t).html"
$htmlreport = "$($mailboxname.samaccountname).html"
$htmlreport = "$($mailboxname.samaccountname)-$t.html"
$htmlreport=$reportname
$htmlserver = $newobj.server
$html | set-content $report_filename
$html_style + `
$htmlstyleparams += "body{background-color:
$htmlstyleparams += $htmlstyleparams + "</style>"
$htmlstyleparams += $htmlstyleparams + "table{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;}"
$htmlstyleparams += $htmlstyleparams + "td{border-width: 1px;padding: 5px;border-style: solid;border-color: black;background-color:palegoldenrod}"
$htmlstyleparams += $htmlstyleparams + "th{border-width: 1px;padding: 5px;border-style: solid;border-color: black;background-color:thistle}"
$htmlstyleparams += "<style>"
$html = '<style type="text/css">
$html += "</table></body></html>"
$htmltitlerow = "<font face='verdana'>user objects with <b>$passwordpolicyname</b> applied:</font>"
$html += "<tr>"
$html += "<tr bgcolor=red>"
$htmluptime = $newobj.uptime
http:\\helpdesk.<cotendo>.com
httpstatus=0;
$hubas = $hubsend.addressspaces
$hubenab = $hubsend.enabled
$hubhmsi = $hubsend.homemtaserverid
$hubi = $hubsend.identity
$hubmdsd = $hubtc.maxdumpstersizeperdatabase
$hubmdt = $hubtc.maxdumpstertime
$hubmms = $hubsend.maxmessagesize
$hubmrel = $hubtc.maxrecipientenvelopelimit
$hubmrs = $hubrece.server
$hubmrs = $hubtc.maxreceivesize
$hubmss = $hubtc.maxsendsize
$hubp = $hubsend.port
$hubrbind = $hubrece.bindings
$hubreces = get-receiveconnector
$hubrenab = $hubrece.enabled
$hubri = $hubrece.identity
$hubrmms = $hubrece.maxmessagesize
$hubsends = get-sendconnector
$hubshrc = $hubtc.shadowheartbeatretrycount
$hubshti = $hubtc.shadowheartbeattimeoutinterval
$hubsmadi = $hubtc.shadowmessageautodiscardinterval
$hubsre = $hubtc.shadowredundancyenabled
$hubsts = $hubsend.sourcetransportservers
$hubtc = get-transportconfig
$hubtransports = get-exchangeserver | where {$_.serverrole -like "*hub*"}
$hvclusterignorenetwork = '192.168.13.100/24'
$hvclusterignorenetwork = $null
$hvmachineaccesslist = $hvnode[ $hvnode.keys ] | % { '{0}\{1}$' -f $domain, $_.name }
$hvnode = @{
$hvresult = invoke-command -session $hvsessiontable[$_.name] -filepath .\helper\configurehypervcluster.ps1 -argumentlist @(
$hvsessiontable = new-pssession -authentication 'credssp' -credential $credential -computername (
$hvsessiontable, $storagesessiontable | % { $_.values | remove-pssession }
_hwnd = handle;
hyperv = @{
$hypervclusteraddress = '192.168.11.100/24', '192.168.12.100/24'
$hypervclusteraddress = '192.168.2.117/16'
$hypervclustername = 'converged'
$hypervclustername = 'non-converged'
'hyper-v host name' = hostname
$hypervsetting = @{
$_.hypervsetting['defaultvhdaccesspathparameter'],
$_.hypervsetting['defaultvhdpath'],
$_.hypervsetting['defaultvmaccesspathparameter']
$_.hypervsetting['defaultvmpath'],
$_.hypervsetting['virtualswitch'],
$i++
$i=0
$i = 0
$i = 0;
$i = 0}
$i = 1
$i+=1
$icmprequest = new-object system.net.networkinformation.ping
$id,
$id = 0
id = 1
ideltime = $session.gettype().invokemember("idletime","getproperty",$null,$session,$null)
$identity
$identity.baseobject.accountdisabled = $false
$identity.baseobject.accountdisabled = $true
$identity.baseobject.description = $description
$identity.baseobject.fullname = $fullname
$identity.baseobject.psbase.invoke("add", $member.baseobject.path)
$identity.baseobject.psbase.invoke("remove", $member.baseobject.path)
$identity.baseobject.rename($name)
$identity.baseobject.setinfo()
$identity.baseobject.setpassword($password)
$identityelements = get-identitypathelements $identity
$identityelements = get-identitypathelements $name
$identity = new-object system.security.principal.ntaccount( $account )
$identity = $_.source.identity
$identity.subject = $newsubject
$identity.update([microsoft.exchange.webservices.data.conflictresolutionmode]::autoresolve)
/idfx11:`"$sharepoint2013path\prerequisiteinstallerfiles\microsoftidentityextensions-64.msi`" `
/idfx:`"$sharepoint2013path\prerequisiteinstallerfiles\windows6.1-kb974405-x64.msu`" `
$id = $_.id
id = $_.id.tostring()
</idlesettings>
<idlesettings>
id = $spfolder.id
id = $splistitem.id
$id = $system.name
$idx_cat ="clustered";
$idx_cat = "non-clustered";
$idx_cols = "<br><b>indexed on: </b><br>";
$idx_cols += $idxcol.name + "<br>";
$idx_inc_cols = "<br><b>with the included columns: </b><br>"
$idx_inc_cols += $idxcol.name + "<br>";
$idx_info = "";
$idx_info += "<b>filegroup:</b> "+$idx.filegroup+"<br>";
$idx_info += "<b>index type:</b> "+$idx_type+ "<br>";
$idx_info += "<b>partition scheme:</b> "+$idx.partitionscheme+"<br>";
$idx_info += "<br><b> index name:</b> "+ $idx.name+ "<br>";
$idx_info += $idx_cols+$idx_inc_cols+"<br><br><hr/>";
$idx_info = "no index defined on $item";
$idx_type = $idx_cat+ " non-unique";
$idx_type = $idx_cat+ " primary key";
$idx_type = $idx_cat+ " unique key";
$iehomepage=$null
$iehomepage = $split[0]
$ie = new-object -comobject "internetexplorer.application"
$iesecondary += "`0"
$iesecondary=$null
$ie.visible = $true
iex $cmd
iex $eventvwr
iex $mcafeelog
iex $remote
iex $services
iex $usergrps
iex $wsuslog
if (!$?) {
if ($?)
if ($?) {
if ($?){
if(`
if($?) {
if (0,2,4,6,8 -contains "$bj"[-1]-48)
if (0,2,4,6,8 -contains "$fj"[-1]-48)
if (0,2,4,6,8 -contains "$i"[-1]-48)
if (0,2,4,6,8 -contains "$i"[-1]-48) {
if (0,2,4,6,8 -contains "$sj"[-1]-48)
if(0 -eq $results)
if (0 < ncred.credentialblobsize)
if(0 -ne $results)
if( (0xef == data[ 0 ]) &&
if( (0xff == data[ 0 ]) &&
if ($30daysusers -ne $null){
if (6 <= environment.osversion.version.major)
if ( $accelerator -eq $default ) {
if($acceptall)
if($acceptupdatestodownload -eq 0)
if ($accessusers.count)
if (($accountname -eq $null) -or ($accountname -eq '')) {
if ( $ace -eq $null )
$iface = get-netadapter $wnvnic -cimsession $hosts[0]
$iface = get-netadapter $wnvnic -cimsession $hosts[1]
$iface = get-netadapter $wnvnic -cimsession $hosts[2]
if ($ace.trustee.domain -ne $null) {$username = "$($ace.trustee.domain)\$username"}
if ($ace.trustee.name -eq $null) {$username = $ace.trustee.sidstring }
if ($aclentrysid) {
if ($aclsplit[1].contains("id")) {
if ($action -eq 0)
if ($_.action -eq "add")
if ($_.action -eq "remove")
if ($action -eq "uninstall")
if(!$action) { "missing action" ; gethelp ; exit }
if ($activedocument)
if( $adaptersetting ){
if($addcred)
if ($address -like $null)
if ($address.prefixstring -eq "smtp"){
if ($addr -match "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}")
if($addwordvariants -and $valuefieldvalue) {
if ($adenable) {enable-testusersad}
if ($adfind.count -gt 1) {
if ($admin.name -ne $null){
if ($admin.name -ne $null){$item.subitems.add($admin.name)}
if ($adminos.caption -match "windows 7"){msra /offerra $computername}
if ($adminos.caption -match "windows vista"){msra /offerra $computername}
if ($adminos.caption -match "windows xp"){
if ($adsgroup.groupcategory -eq "security") {
if ($a -eq 0) { write-warning "you must supply a site collection url"; break}
if ($a -like "*cannot find path*"){write-host -foregroundcolor darkcyan "zone" $ptr "does not exist."}
if ($all)
if(!$all)
if($all)
if ((!$all) -and (!$mailbox)){write-host -foregroundcolor red "please use either mailbox parameter or all switch. ""all"" switch will let you report all mailboxes. ""mailbox"" parameter will report a single mailbox"
if ($alldistgroups)
if ($all.ispresent-eq $true)
if ($allmembers)
if($allmembers)
if ($allnewsearchresult.count -eq 0)
if ($all -or (-not $layerkey.endswith("_discard") -and $filtercount -gt 0))
if ($allproperty) {
if ($allsearchresult.count -eq 0)
if ($allsearchresult.count -eq 1)
if(!($allsites).count -eq 0)
if ($altnamescollection -ne $null) {
if($a -ne $null)
if ($aolcode -eq '' -and $axlayer -ne '' -and $axlayer.substring(0,2).toupper() -ne 'us')
if ($aolcode -ne '') {$aolparm = '-aolcode={0}' -f $aolcode}
if ($aolcode -ne '') {$aolparm = '/p:axaolcode={0}' -f $aolcode}
if ($aosname -eq $null) {$axbuilderror += "aos name is missing." +[char]10}
if ($aosname -eq $null) {{$axbuilderror += ("the ax aos {0} can not be found." -f $axaos)+[char]10}}
if($aosnotondeploybox -ne $true)
if ($aos.state -ne [system.serviceprocess.servicecontrollerstatus]::running)
if ($aos.state -ne [system.serviceprocess.servicecontrollerstatus]::stopped)
if ($app.displayname) {write-output $app}
if ($app.installdate -ne $null){
if ( $applicationdir -eq $null -or (test-path $applicationdir) -eq $false)
if ($applicationsourcedir -eq $null) {$axbuilderror += "the environment variable %applicationsourcedir% is missing."+[char]10}
if ($applicationsourcedir -ne $null -and (test-path $applicationsourcedir) -eq $false) {$axbuilderror += "the environment variable %applicationsourcedir% : {0} is not a valid path." -f $applicationsourcedir+[char]10}
if ($applicationsourcedir -ne $null) {$script:dependencypath= join-path $applicationsourcedir "dependencies"}
if ($apppool)
if ($apppools = get-wmiobject @paramiis6) {
if($apppools = get-wmiobject @paramiis7) {
if ($archivestatus -ne $null)
if (($args[0] -eq $null) -or ($args[1] -eq $null))
if ($args[0] -eq $null -or $args[1] -eq $null -or $args[1].gettype().name -ne "boolean")
if (($args[0].tolower() -eq "/csv") -or ($args[0].tolower() -eq "csv"))
if($args[1] -eq "scripts")
if($args[2] -ne $null)
if ($args.count -eq 1)
if($args.length -eq 0)
if ($args.length -lt 3)
if($args -ne $null)
if($array)
if($arrdlmembers.containskey($objmember.primarysmtpaddress))
if ($arrlog[4] -eq "/microsoft-server-activesync/proxy")
if ($arrlog[5] -eq "/microsoft-server-activesync/proxy")
if( ($arrversions -contains $objitem.version) -like "true")
if ($assigneduser.displayname -eq $null)
if ($assigneduser.displayname -ne $null)
if ($attachment -ne "") {
if ($attobjclass -eq "group")
if ($attributes.containskey($value) -eq $false)
if ($attrname.tolower -eq "samaccountname")
if ($attr -ne "")
if ($attr -ne "") { $line = $line + "," + $attr }
if ($attr -ne "") { $searcher.propertiestoload.add($attr) > $null }
if (!$auditsummary)
if ($authvalue -eq $true) {
if($autoclosexl) {
if ($autolog) {f_autolog}
if ($automap -eq 0)
if ($auto:og) {$switches+="`r`n`t`t-autolog"}
if($autoreboot)
if ($autoservices -ne $null){
if ( ($axaosinstance -eq $null) -or ($instancename -eq $axaosinstance) -or ($portnumber -eq $port))
if ($axbuilderror -ne $null)
if ($axcompileall -eq "true")
if($axcompileall -eq $true)
if ($axid -ne $null)
if ($axprocess.waitforexit(60000*$compilealltimeout) -eq $false)
if ($axprocess.waitforexit(60000*$compileciltimeout) -eq $false)
if ($axprocess.waitforexit(60000*$importtimeout) -eq $false)
if ($axprocess.waitforexit(60000*$synctimeout) -eq $false)
if ($badusertable.rows.count -gt 0) {
if ($basedn)
if ($basedn -eq "")
if ($basedn.tolower().contains("dc=") -eq $false)
if ($basicauthenticationsectionenabled)
if($battery.batterystatus -eq 2)
if($bcharge -le $criticallevel)
if ($besusertable.select("emailaddress = '$primarysmtpaddress' and pin = '$customattribute7'")) {
if ($bias -gt 0)
if ($bias -lt 0)
if ($bid -ne "1")
if ($binarypath.endswith("\"))
if( $bindcomponentid )
if( $bindcomponentid ){
if ($bindingport -eq 443) {
if($bit -eq "0")
if($bit -eq "1")
if ($bitvariable[$bitcount] -eq "1")
if($bitvariable.length -lt 8)
if([bool](get-spuser $line.username -web $rootweb -ea silentlycontinue) -eq $true)
if($browserfilehandlingtypetochange -eq $browserfilehandlingtypenewvalue) {
if($bstate -eq "notdischarging" -or
if($buildmodelstarted -eq $true)
if (!$bypassenabled)
if ($c1 -match "&")
if ($c2 -match "&")
if ($c3)
if ($c3 -match "&")
if ($c4)
if ($c4 -match "&")
if ($c5)
if ($c5 -match "&")
if ($cachedpolicies[$policytype].containskey($csusersite)) {
if ($cachedpolicies[$policytype].containskey("service:registrar:" + $csuserregistrarpool)) {
if ($calendarfolder -ne "\") {
if (($calendercount -eq 0) -or ($inboxcount -eq 0) -or ($contactcount -eq 0) -or ($sentcount -eq 0)) {
if ($cancreateanniversaryappointment) {
if ($cancreatebirthdayappointment) {
if (($caption -like "*biztalk*") -and (($caption -notlike "*biztalk server setup*")))
if($category -eq "organizationversion"){$tab = "`t"}else{$tab = "`t`t"}
if($categoryids)
if($category -ne "")
if ($catest)
if ($c.cells.item($introw, 3).value2 -eq $env:username)
if ($ccrecipient.routingtype -eq "ex") {
if ($c -eq 10)
if ($certificate -eq $null) {
if ($certificate -ne $null) {
if($certs -eq $null)
if ($changed -eq $true)
if ($char -eq '\'){$pos = $len + 1}
if(!$check) {
if ($checkdate) {
if ($checkdate -le $currentdate) {
if ($checkdate -le $currentdate -and $checkdate -ne $null) {
if ($checkdate -le $currentdate -and $(if ($dayofmonth -ne 0) {$checkdate.day -eq $dayofmonth} else {$true})) {
if ($checkdate.year -ge $limityear -and $dayofyearrepeat -eq -1) {
if ($checkdate.year -ge $limityear -and $quarterrepeat -eq -1) {
if ($check -eq $true)
if (!checkerror("creddelete", (cred_errors)rtn))
if (!checkerror("credenum", (cred_errors)rtn))
if (!checkerror("credread", (cred_errors)rtn))
if (!checkerror("credwrite", (cred_errors)rtn))
if ($checkerror -gt 0) {
if ($checkm -gt 0){
if ($checkprocess -eq $null)
if ($chgusertable.rows.count -gt 0) {
if ($childdirs ){ $dircount = ($childdirs.count)}
if ($childfiles) { $filecount = ($childfiles.count)}
if($child.state -eq "completed" -and !$child.error) { $success = $true; }
if($child.state -match "notstarted|running|stopping|suspending") { continue; }
if($child.state -ne "notstarted") { $timers[$child.location]++; }
if (( $chksysobject -eq $true ) -and ( $nonpfps -eq $true ))
if ($choice -eq 0) {
if ($choices.count -eq 0) {
if ($choices.count -eq 1) {
if ($city -like $null)
if ($class -eq "user")
if ($cleanfolders) {
if ($cleanfolders) {$switches+="`r`n`t`t-cleanfolders"}
if($cleanonly -ne $true)
if ($cleanupafterbuild -eq "true")
if ($clearconsolemenuitem = $viewmenu.items['editcommand.gotodefinition'])
if ($clearconsolemenuitem = $viewmenu.items['gocommand.functionexplorer'])
if ($clearreq -eq "y")
if ($clientbindir -eq $null) {
if ($clientbindir -ne $null) {
if($client.connected) {
if($client.indexof("\\") -gt -1)
if (!$closestdcname)
if ($cloud -ne "" -and $vmhost -ne "") { throw "you cannot specify both a cloud and a host when executing this cmdlet" }
if ($cloud -ne $null)
if ($cloudobject -eq $null) { throw "cannot obtain the specified cloud" }
if ($clusterfeature.installed -eq $false -or $clusterfeature.installed -eq $false)
if ($clusterfeature.installed -eq $false -or $clusterpowershelltools.installed -eq $false -or $clustercmdtools.installed -eq $false)
if(!($cmd)) {
if( c == '\n' )
if($_.co -eq "netherlands")
if ($collectionid -eq "" -or $collectionid -eq $null)
if ($collectionid -ne "" -and $collectionid -ne $null)
if ($collectionlimitid -eq "" -or $collectionlimitid -eq $null)
if($colresults.count -eq 0)
if($colresults.count -gt 0)
if ($cols[$id - 1] -eq "distinguishedname")
if ($cols[$id - 1] -eq "samaccountname")
if($columnfields) {
if(!$command) { "error: must pass in command. get-help icmd -full"; return; }
if (compare-object $destmember.memberof $sourcemember.memberof | where-object {$_.sideindicator -eq '<='}) {
if (compare-object $destmember.memberof $sourcemember.memberof | where-object {$_.sideindicator -eq '=>'}) {
if (compare-object $folder1[$j].basename $folder2[$k].basename -excludedifferent -includeequal) {
if ($compilecil -eq 'true')
if ($compileerrors -eq $true)
if($compileinlayer -ne $null)
if (($compilerwarninglevel -ne 4) -or ($debuginfo -ne 524))
if ($completed)
if($completed[$child.location]) { continue; }
if( compressionmode.compress == mode )
if ($computer -eq ".")
if ($computer -eq '.') { $computer = $env:computername }
if($computer -eq $env:computername)
if ($computer -eq (& hostname))
if ($computer -eq $null){}
if($computergroupmembers)
if ($computerlist)
if ($computername.count -ne $null)
if ($computername -eq "") {$computername = "$env:computername"}
if ($computername -eq (& hostname))
if ($computername -eq (hostname))
if($computername -eq $null)
if ($computername -eq [string]::empty)
if ($computername -ine "localhost")
if ($computername.length -lt 1) {
if($computername.length -lt 4){$vbpcsearch = $vbmsg.popup("search queries must include at least four characters.",0,"error",0)}
if($computername -match "=")
if ($computername -ne $env:computername) {$param.add("computername",$computername)}
if ($computerpasswordlastset -le $old) {
if ($computerpasswordlastset -le $veryold) {
if ($computer.schemaclassname -eq "computer")
if (!$computers) {$computers = $comp}
if (!$computers) {$computers = $env:computername}
if ($_.computertargetgroupid -eq $tg_to_approve.id ){
if ($_.computertargetgroupid -eq $tg_valid_approve.id ){
if ($confirm)
if ($confirmadd -eq "yes") {
if ($confirm -eq "s")
if ($confirm -ne 'y')
if ($confirmremove -eq "yes") {
if ($contactfolder -ne "\") {
if ($contactgroup.grouptype -eq "distributiongroup") {break}
if ($contactitem."first name" -and $contactitem."last name")
if ($contactitem.firstname -and $contactitem.lastname)
if ($contactitem.$key)
if ($contactmapping[$key] -eq "birthday" -or $contactmapping[$key] -eq "weddinganniversary")
if ($contactmapping[$key] -like "*:*")
if ($contactobject.birthday -eq $null) {$cancreatebirthdayappointment = $false}
if ($contactobject.uri -eq $currentuser) {
if ($contactobject.weddinganniversary -eq $null) {$cancreateanniversaryappointment = $false}
if ($contactschemas.containskey($contactreadonlyproperty.name)) {
if ($contactschemas.containskey($reservedproperty)) {
if ($contactsearchresults.contacts.count -ne 0) {
if ($contactsfoldersearch)
if ($convertcsvsuccess) {
if ((convertfrom-qssecurestringtoplaintext $accountpassword) -eq '') {
if ((convertfrom-qssecurestringtoplaintext $password) -eq (convertfrom-qssecurestringtoplaintext $confirm)) {
if($copyqueuelength -lt 10)
if ($count -eq 0){
if ($count -eq 0) {$last = $true}
if ($counter -gt 0)
if($counter -ne $count) {
if ($count -gt 1) { $key = $propname[$i] }
if ($country -like $null)
if ($cp -eq $null){
if( c != '\r' )
if ($createtask)
if ($createtime) {
if ($createtime) {$switches+="`r`n`t`t-createtime"}
if (!creddeletew(target, type, 0))
if ($credential -eq $null)
if ($credential -ne $null) {
if ($credentials)
if ($credentials -eq $null) {
if (!credenumeratew(filter, flags, out count, out pcredentials))
if($cred -is [management.automation.errorrecord])
if (!credreadw(target, type, 0, out pcredential))
if($creds -is [management.automation.errorrecord])
if($creds -split [array] -and 0 -eq $creds.length)
if ($credwrite)
if (!credwritew(ref usercredential, 0))
if ($cr.errors.count) {
if($criteria)
if ($cs.name -ne $null)
if ($cs.username -ne $null)
if ($csuser -ne $null)
if ($csuser -ne $null) {
if ($csuser-ne $null)
if ($csuser.$policytypename -ne $null) {
if ($csv -eq $false)
if ($csv -eq $true)
if ($csv -eq $true) {$line}
if ($csv -eq $true) {$line = "$line,<no value>"}
if (!$csvfile[0]."first name")
if ($csvfile."first name")
if (!$csvfilename)
if ($csv -ne "") {import-csv -path $csv | foreach {$mailboxes += get-mailbox $_.emailaddress}}
if ($ctd){
if ($currentcluster -eq $null)
if ($currentcluster -ne $null)
if($currentlogfolder -ne $null)
if($currentprincipal.isinrole([security.principal.windowsbuiltinrole]::administrator) -ne $true) {
if ($currentrecursionlevel -ge $maximumrecursionlevel) {
if ($currentuseraccessrule -ne $null) {
if ($currentuseracl -ne $null) {
if ($customercode.length -le 3) {
if ($customgroupcontact -ne $null) {
if(!$database -and !$mailbox)
if (!$database){$dbnull=0}
if ($database -eq $null)
if( data.length > 1 )
if( data.length > 2 )
if( data.length > 3 )
if ($dateday -ne $null) {
if ($date -gt $dateinpast)
if ($daterange -ne $null) {
if ([datetime]::tryparseexact($subkey.getvalue("installdate"),"yyyymmdd",$null,[system.globalization.datetimestyles]::none,$parsedinstalldate)){
if ([datetime]::tryparseexact($subkeywow6432node.getvalue("installdate"),"yyyymmdd",$null,[system.globalization.datetimestyles]::none,$parsedinstalldate)){
if ($dayofmonth -ne $null) {
if ($dayofquarter -eq 0) {
if ($dayofquarter -gt $daysincurrentquarter) {
if ($dayofquarter -ne $null) {
if ($dayofweek -ne $null) {
if ($dayofyear -eq 0) {
if (($dayofyear -eq 366) -and !([datetime]::isleapyear($yearint))) {
if ($dayofyear -ne $null) {
if ($dayofyearrepeat -ne -1) {
if ($daystoexpiry -lt 9 ) {
if ($dbcounters[$i].total -lt $balancedcount)
{if ($dbcount -gt 1)
if($dblastfullbackup -eq $null)
if($dblastfullbackup -gt (get-date).adddays(-1))
if($dblastfullbackup -gt (get-date).adddays(-2))
if (($dbnull -eq 0) -and ($mbnull -eq 0))
if(($dbnull -eq 0) -and ($mbnull -eq 0))
if ($dbs[0].gettype().name -ne "mailboxdatabase")
if ($dbs.count -eq 1)
if ($dbstat.disconnectdate -eq $null) {
if( $dcb )
if( $dc.contains(".") )
if($dc.length -eq 0)
if( $dclist -and $dc )
if($dclist -eq "ad")
if ($dcs) {$computerlist = enumeratedcs}
if ($debug) {
if($debuginfo) { $debugpreference = "continue" }
if ($debug) { write-host($member) }
if (&$decider)
if ($deferredsendtime -ne $null) {
if($delcred)
if ($deleteold.returnvalue -eq 0) {
if ($delusers -ne $null){
if ($delusertable.rows.count -gt 0) {
if($dependencypath -ne $null)
if ($dependencypath -ne $null -and (test-path $dependencypath) -eq $true)
if($dependencypath -ne $null -and ((test-path $dependencypath) -eq $true))
if($dependencypath -ne $null -and ((test-path (join-path $dependencypath 'appl')) -eq $true))
if ($description) { [void]$user.put("description", $description) }
if (($descvalue -eq $null) -and ($friendlyvalue -eq $null)) {
if ($destfolderid -eq $null) {
if(!$destipaddresses)
if ($destmember -eq $null) {"destination user not found";return}
if ($destmember -eq $null) {[microsoft.visualbasic.interaction]::msgbox("destination user not found",0,"exit message");return}
if ($d.executablepath -ne $null){
if ($dhcprunning){$dhcp = "true"}
if ($didit) {
if($direct)
if ($disable)
if($disable)
if ($discovery -eq 'true')
if($diskmounted)
if ($disksize -eq 0){
if ($displayname.length -gt 0){
if ($displaysummary.ispresent) {
if(!$distgroup)
if ($distgroupmembers)
if ($_.distinguishedname)
if ($dn -ne "")
if ($dnsarray -ne @()){
if ($dnsip -match '^.*\..*\..*\..*$') {
if ($dnsserver -eq $dnsserverfind)
if ($dnsserverfind -and $dnsserverreplace) {$pressany = read-host "replacing all static dns server entries of $dnsserverfind with $dnsserverreplace. press any key to continue, or ctrl-c to terminate"}
if ($dnsserverfind -eq $primdns -or $dnsserverfind -eq $secdns -or $dnsserverfind -eq $terdns){$dnsmatch="true"}
if ($dnsserverlist.count -eq 0) {
if($documentlibraries -ne $null) {
if($documentlibrary.browserfilehandling -eq $targetbrowserfilehandlingtochange) {
if ($documenttitle)
if ($document.title -eq $trvfunctions.selectednode.tag.split(';')[1])
if ($document.title -ne $documenttitle)
if ($dodgymailflow -eq $true){$htmlmessagebody += $mailflow}
if ($dodgymailflow -eq $true -or $dodgymapiconnectivity -eq $true -or $dodgyqueues -eq $true)
if ($dodgymapiconnectivity -eq $true){$htmlmessagebody += $mapiconnectivity}
if ($dodgyqueues -eq $true){$htmlmessagebody += $queues}
if ($domain)
if ($domaincontroller.name -like $domainsuffix )
if ($domain -eq $null) {
if ($domain -eq $null -or $domain -eq '')
if($domain.ispresent)
if ($domainname) {
if (($domainname -eq $null) -or ($domainname -eq '')) {
if ($domainname) {$querystring += ' | where-object {$_.accountdomainsid -eq "' + $domainsidshash.item($domainname) +'"}'}
if ($domainobject.name -eq $null)
if ($domains.count -eq 0) {
if ($domainsid) {$querystring += ' | where-object {$_.accountdomainsid -eq "' + $domainsid +'"}'}
if ($domain.status -eq 'verified') {
if ($domaintest -eq "workgroup")
if ($domuser -ne "")
if ($donotwrite -eq $false) {
if (($donotwrite -eq $false) -and (($writearray -contains $temp) -eq $false)) {
if ($doubledashedline) {
if ($download)
if($download -eq "nn")
if($download -eq "yy")
if($download -match "y")
if(!$downloadonly)
if($downloadresult.resultcode -eq 2)
if(download-xml)
if ( $dpncy_info -eq $null)
if ($drive -eq '-<blank>-') {
if ($droplocation -eq $null) {$axbuilderror += "folder containing models files to deploy is missing."+[char]10}
if($droplocation -eq $null -or (test-path $droplocation) -eq $false)
if ($droplocation -eq $null -or (test-path $droplocation) -ne $true)
if($droplocation -ne $null)
if (($droplocation -ne $null) -and (test-path $droplocation) -eq $false) {$axbuilderror += "folder containing models files to deploy {0} is not a valid path." -f $droplocation +[char]10}
if ($droplocation -ne $null -and (test-path $droplocation) -eq $true)
if($droplocation -ne $null -and ((test-path $droplocation) -eq $true)) {
if ($ds -ne $null)
if ($dup -eq 0){
if ($duplicatemembergroup)
if ($_.duration) {
if ($dygcount -eq 0){write-host -foregroundcolor cyan "no dynamic distribution groups found." }
if ($dygcount -ne 0)
if ($dygcount -ne 0){$dyemptygroups=($dygroups | ?{!(get-recipient -recipientpreviewfilter $_.recipientfilter)} | measure-object).count}
if(!$dygrouphasgroup){$dymembernote="members"} else {$dymembernote="members including $($dygrouphasgroupcount) groups"}
if ($dygroup.hiddenfromaddresslistsenabled -like "true")
if ($dygroup.isvalid -notlike "true")
if ($dygroup.moderationenabled -like "true")
if ($dygroup.requiresenderauthenticationenabled -like "true")
if ($dymember.isvalidsecurityprincipal -like "false")
if($dymember.recipienttypedetails -like "*room*")
if(!$dymembers)
if(!$dymembers){}
if ($ecpres -like "success")
if ($edbsize -gt $dbsizethreshold)
if (!$emailaddress)
if (!$emailaddress.contains("@"))
if ($emailmsg.from.routingtype -eq "ex") {
if($emptygroup)
if($enable)
if ($enabledfeature)
if($enableflag)
if($encrypted -is [string]){
if ($enddate -eq $null) {
if($endpointobject -eq $null)
if($endtime -lt 5)
if($e -ne $null)
if(!$entries) {
if($entry.freespace -lt "20")
if($entry.status -ne "online")
if ($_enumerationjob.state -eq' completed'){
if ($_enumstatus -gt 100) {$_enumstatus = 100}
if($env){checkhost}
if($env:computername -eq $axaosservername)
if ([environment]::getenvironmentvariable($envvargroupfail, "user") -eq 1) {
<% if ep = "" then %>
if ($? -eq $false)
if ($? -eq $false) {
if( $? -eq $false )
if($? -eq $false )
if ($? -eq $true)
if ($equalhostratings -gt 1)
if (err != 0)
if($err -eq $true)
if(!$err) { $err = $child.error }
if($errlogfile -eq $null -or $errlogfile.trim() -eq '')
if (err == nativemethods.error_more_data)
if ($_.errorcode -ne "0") {
if ($errorcount1 -eq $errorcount1)
if ($error.count -gt 0)
if ($errorflag -eq $false)
if ($errorflag -eq $true)
if($errormessage.length -gt 0)
if ($errorstate -eq "true") {
if ($err) {throw ""}
if ($event2013.count -eq $null)
if ($eventarg.button -ne "right")
if ($eventarg.node.isexpanded)
if ($eventarg.node.nodes.count -eq 0)
if ($eventarg.node.nodes.count -ne 0)
if ($_.eventid -eq "deliver")
if ($_.eventid -eq "receive" -and $_.source -eq "storedriver")
if (!($event.itemid))
if ($eventlog.recordcount -gt 0)
if ($events.count -ge 1)
if ($events.count -ne $null)
if (!$ewsmanagedapidllfilepath)
if ($ewsurl)
if ($exactmatch) {
if (!$exchange2007)
if ($exchange2007)
if ($exchange2010)
if ($excludedate) {
if ($excludefileextension) {
if ($excludefileextension[$j].substring(0,1) -ne '.') {$excludefileextension[$j] = ".$($excludefileextension[$j])"}
if ($excludefileextension -or $includefileextension) {
if ($excludepath) {
if($exclusionfile -eq $null)
if($exclusionlist -contains $username)
if ($exepolicy -ne "restricted") {
if ($existinganniversaryappointment) {
if ($existingbinding -ne $null) {
if ($existingbirthdayappointment) {
if ($existinggroup) {
if ($existinggroupmemberscount -eq 0 -and $newgroupmemberscount -gt 0)
if ($existingitemscount -gt 0) {
if ($exist_parent -ne "" -and $exist_parent -ne $null -and $exist_child -ne "" -and $exist_child -ne $null)
if(!$exists)
if ($exists -eq "0")
if ($exitcode -eq 0) {
if ($expand)
if (!$explorer)
if ($export)
if ($expression)
if ($expression.count -lt 1)
if ($exservice -eq $null) {
if ($extension -eq ".evtx" -or $extension -eq ".evt"){
if ($extension.name -eq $gposettingname)
if ($failcount.count -eq 1)
if ($failedprerequisitescount -eq 0) {
&$iffalse
if ($false -eq $retval) { $result = $false }
if ($favorites -eq $true)
if ($fbaenabled) {
if ($f.count)
if ($featureenableaction)
if($featurestate -match "disable")
if($featurestate -match "enable")
if ($federateddomain -ne $confirmfederateddomain)
if ($file)
if ($file) {
if ($filebits.length -ne 0) {
if($filedata.count -gt 10240)
if (!(($file.extension -eq '.zip') -or (($file.extension -eq '.zip'))))
if($fileinfo.extension -eq '.axmodel')
if($fileinfo.name -eq 'model.xml')
if($fileinfo -ne $null)
if (!($filename)) {$filename = ($username -replace "\\", "_")+".pwd"}
if ($file -ne $null)
if ($file -ne $null) {
if($file -ne $null -and $folder -ne $null)
if ($filepath.substring($filepath.length - 3,3) -notmatch "xml|csv") {
if ($file.psiscontainer -eq $false)
if ( $files ) {
if ($filesstored.count -eq 1)
if ($filestored.count -eq 0)
if ($filestream)
if ($filter)
if ($filter.endswith(")") -eq $false) {$filter = $filter + ")"}
if ($filter.startswith("(") -eq $false) {$filter = "(" + $filter}
if ($finalcertificate -eq $null) {
if ($find -like "*data sources*")
if (!$findpcusername){
if ($findpcusername){
if (!$findpcusername){$vbmsg1 = $vbmsg.popup("no computer was found matching your query. please try again.",0,"error",0)}
if ($findresults.totalcount -eq 0) {
if ($findresults.totalcount -eq 1) {
if ($findresults.totalcount -ge 1) {
if ($findresults.totalcount -ne 0) {
if ($findusername -eq ""){$vbmsg1 = $vbmsg.popup("please enter a full or partial username into the textbox.",0,"error",0)}
if (!($finishedmoves -eq $null))
if ($firstname -eq '') {
if ($folder.hasuniqueroleassignments)
if ($folderid -eq "" -or $folderid -eq $null)
if ($force)
if ($force) {
if ($(for ($k=0;$k -lt $excludepath.count;$k++) {$error[$j].targetobject -match $excludepath[$k].substring(0,$excludepath[$k].length-2)}) -notcontains $true) {
if ($found -eq $expected) {
if ( $found -eq $false )
if ($found -eq $false)
if ($found -eq $true)
if ($foundnodes -and $removeonly)
if($foundupdatestodownload -eq 0)
if ($founduser -eq $null)
if ($fqdn -eq "") {
if ($frees -lt 25) {
if ($friendlyvalue -ne $null) {
if ($fsize -eq '0000') {
if ($fullname) { [void]$user.put("fullname", $fullname) }
if ($fullsender.deny -like "true"){$font="red"}else{$font="'
if ($fullsender.isinherited -like "false"){$font="red"}else{$font="'
if (!$fullsenders)
if (($functionname -cmatch "-[a-z][a-z]") -eq $true)
if(!($fw -match "ok."))
if (($gcount -eq 0) -and ($dygcount -eq 0)){exit}
if ($gcount -eq 0){write-host -foregroundcolor cyan "no distribution groups found." }
if ($gcount -ne 0)
if ($gcount -ne 0){
if("generic" -ne $credtype -and 337 -lt $target.length)
if ($get)
if(!(get-adminstatus))
if (($get) -and ($set)) {write-output "both get and set specified, exiting script";return}
if (!($get) -and !($set)) {write-output "no get or set, exiting script";return}
if ((get-childitem -literalpath $globalbackupdir).count -eq 0)
if ((get-clusterresource "cluster name").state -ne "online")
if (!(get-command get-exchangeserver -erroraction silentlycontinue))
if ((get-command get-gpo -erroraction silentlycontinue) -eq $null)
if (!(get-command get-mailboxdatabase -erroraction silentlycontinue))
if (!(get-command get-user))
if ((get-content -path $csvfilepath -totalcount 1) -eq "`"userlogin`",`"newdisplayname`"") {
if ((get-content -path $filepath -totalcount 1) -eq "`"groupname`",`"grouptype`",`"overwrite`",`"contacts`"") {
if($getcred)
if (($(get-date) - $startdatetime).get_minutes() -gt $aosrestarttimeout)
if (!(get-exchangeserver $server -erroraction silentlycontinue))
if($getexectime) { $props["execseconds"] = $timers[$child.location] }
if ((get-executionpolicy) -eq "restricted"){
if (get-group $member -erroraction silentlycontinue)
if ((get-host).name -eq 'windows powershell ise host')
if ((get-host).name -ne 'windows powershell ise host')
if (!(get-item -path $contactitem.$key -erroraction silentlycontinue))
if (!(get-item -path $csvfilename -erroraction silentlycontinue))
if (!(get-item -path $ewsmanagedapidllfilepath -erroraction silentlycontinue))
if ((get-itemproperty $key -name $name).$name -eq $value) {
if ((get-itemproperty -path $key -name $name -erroraction 'silentlycontinue') -eq $null) {
if (!(get-mailboxdatabase $database -erroraction silentlycontinue))
if (!(get-mailboxdatabase -server $server -erroraction silentlycontinue))
if ((get-md5 $($packagepath -as [string] -as [system.io.fileinfo])) -eq (get-md5 $backupsolutionpath))
if (get-module -listavailable | ? {$_.name -eq $vmmmodule}) { import-module -name $vmmmodule }
if((get-module -name activedirectory) -eq $null)
if (!(get-module | ? {$_.name -eq $vmmmodule}))
if(!(get-module operationsmanager))
if(!(get-module operationsmanager).description -eq "operations manager operationsmanagerv10 module")
if(!(get-module taskscheduler)){import-module taskscheduler}
if( !(get-module | where {$_.name -eq 'sqlps'}))
if ((get-msolcompanyinformation).directorysynchronizationenabled) {
if ($getother -ne $null)
if ($getprocess)
if(get-process | where-object { $_.id -eq $id -and $_.processname -eq "winword" }) {
if ((get-pssnapin "microsoft.sharepoint.powershell" -erroraction silentlycontinue) -eq $null) {
if ((get-pssnapin microsoft.sharepoint.powershell -erroraction silentlycontinue) -eq $null) {add-pssnapin microsoft.sharepoint.powershell}
if ( (get-pssnapin -name microsoft.adfs.powershell -erroraction silentlycontinue) -eq $null )
if ( (get-pssnapin -name "microsoft.sharepoint.powershell" -erroraction silentlycontinue) -eq $null ) {
if ( (get-pssnapin -name quest.activeroles.admanagement -erroraction silentlycontinue) -eq $null )
if (!(get-pssnapin -registered -name microsoft.exchange.management.powershell.e2010))
if ( get-pssnapin -registered | where {$_.name -eq 'sqlserverprovidersnapin100'} )
if (!(get-pssnapin | where {$_.name -eq "microsoft.exchange.management.powershell.e2010"}))
if( !(get-pssnapin | where {$_.name -eq 'sqlservercmdletsnapin100'}))
if( !(get-pssnapin | where {$_.name -eq 'sqlserverprovidersnapin100'}))
if ((get-pssnapin | where {$_.name -match "exchange.management"}) -eq $null)
if (!(get-pssnapin |where-object {$_.name -eq "microsoft.dataprotectionmanager.powershell"}))
if ((get-random -min 1 -max 10) -gt 5) {
if ((get-service -name sptimerv4).status -eq "running")
if ($getum -ne $null)
if (!(get-user $domuser -erroraction silentlycontinue))
if ($getuser -ne $null)
if ((get-variable o365session -scope global -erroraction silentlycontinue) -ne $null) {
if((get-volume | where drivetype -eq removable | select -expandproperty driveletter) -notcontains $usbdriveletter)
if( (get-windowsfeature data-center-bridging).installed ){
if ((get-windowsfeature $featurename).installed -eq $false) {
if ((get-wmiobject -class win32_operatingsystem).osarchitecture -eq '64-bit')
if((get-wmiobject -class win32_quickfixengineering -filter "hotfixid like '*$($qfemanifest.kb)*'"))
if((get-wmiobject -class win32_quickfixengineering -filter "hotfixid like '*$($qfemanifest.kb)*'") -eq $null)
if ((get-wmiobject win32_computersystem).systemtype -like "x64*")
if ((get-wmiobject win32_operatingsystem -computername $computername).osarchitecture -notlike '64-bit') {$keys= (get-itemproperty 'hklm:\software\microsoft\windows\currentversion\uninstall\*')}
if ($gj -eq 4)
if ($global:counter -ge $timethresholdmins) {
if($global:functionexplorer_documents.item($document).linecount -eq $document.document.lines.count)
if ($gpos -ne $null)
if (!$group)
if ($groupcount -eq 0)
if ($groupdata.hiddenfromaddresslistsenabled -eq $true)
if ($groupdata.isvalid -notlike "true")
if ($groupdata.memberdepartrestriction -like "open")
if ($groupdata.memberjoinrestriction -like "open")
if ($groupdata.moderationenabled -like "true")
if ($groupdata.requiresenderauthenticationenabled -like "true")
if ($group -eq $null)
if(!$grouphasgroup){$membernote="members"} else {$membernote="members including $($grouphasgroupcount) groups"}
if ($group.hiddenfromaddresslistsenabled -like "true")
if ($group.info -ne $null)
if($groupiscritical -or $criticalreplicas.count -gt 0 -or $criticaldatabases.count -gt 0)
if ($group.isvalid -notlike "true")
if ($grouplist.containskey($adobject.samaccountname.tostring() + "\") -eq $false)
if ($grouplist.containskey($adobject.samaccountname.tostring() + "\" + $groupname))
if ($group.memberdepartrestriction -like "open")
if ($group.memberjoinrestriction -like "open")
if ($groupmember.mailboxtype -match "contactgroup|publicgroup") {
if ($group.moderationenabled -like "true")
if($groupobject -eq $null)
if ($groupobject.type -eq "customgroup") {
if ($group.path)
if ($group.requiresenderauthenticationenabled -like "true")
if ($groups)
if ($groups -ne $null)
if ($groupupdated)
if(($groupusers | where-object{$_.name -eq $member.name}))
if (!$grpexist){
if ($grpexist){write-host -foregroundcolor darkgreen "group added."}
if ($guid)
if ($gw_addr -match "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}")
if ($gwmi) {
if ($hardwareprofile -eq $null) { throw "cannot obtain the specified hardware profile"; exit 1 }
if ($hasanniversary) {
if ($hasbirthday) {
if ($hasindex)
if ($hasmanageprofilespermission -and $hasconnectionpermission) {
if(($hdd.freespace/1gb) -lt 10)
if($help)
if($help) { gethelp ; exit }
if ($hideerrors)
if($hidestatus)
if ($highestcql -ge 1) {
if($hosticversion -eq $vmicversion) {
if ($host.name -ne 'windows powershell ise host' )) {
if ($hostratings[0].rating -eq 0)
if ($hostratings[0].rating -eq $hostratings[$r].rating)
if (($hoststate.computerstate -match "responding") -and ($hoststate.clusternodestatus -match "running") -and ($hoststate.virtualserverstate -match "running") -and ($hoststate.virtualserverstatestring -match "running") -and ($hoststate.communicationstatestring -match "responding") -and ($hoststate.communicationstate -match "responding")) {
if ($host.ui.rawui.keyavailable -and (3 -eq [int]$host.ui.rawui.readkey("allowctrlc,includekeyup,noecho").character))
if ($host.version -lt $minimumpowerguiversion) {
if ($howoldbkp -eq $null)
if (!$identity)
if ($identity.baseobject.psbase.invoke("ismember", $member.baseobject.path))
if ($identity -eq "\") { return $currentpublicfolder }
if ($identity -ne "\") {
if ($id -eq 0)
if($idxcol.isincluded -eq $false)
if($idx_info -eq "")
if ($idx.isclustered -eq "false")
if($idx.ispartitioned -eq "true")
{if ($i -eq 0)
if($i -eq 0)
if ($i -eq 1)
if ($i -eq 500){$continue=0}
if ($i -eq ($fqdndepth - 1)) {$separator=""}
if ($i -eq $menuposition) {
if ($ifrommonth -eq "")
if ($ifromyear -eq "")
if($ignorerebootrequired)
if($ignorerebootrequired -and $updateaccess -eq $true)
if($ignoreuserinput -and $updateaccess -eq $true)
if ($i -gt 0)
if ($i -gt 0) {$line = $line.substring($i+1)}
if ($ilo -eq $null) {
if ($i -lt $arr.length - 1)
if($imagesize -gt $usbdisksize)
if ($imedia -gt 99) {
if ($imedia -gt 9999) {
if ($impersonate)
if ((import-clixml -path $qfe.fullname |select-object -property os).os -like $localos)
if($importoverrideparams.contains($file))
if($importoverrideparams -ne $null)
if ($importphotos) {
if(!$importpsmodule)
if ($incidents.count -gt 0)
if ($includefileextension) {
if ($includefileextension[$j].substring(0,1) -ne '.') {$includefileextension[$j] = ".$($includefileextension[$j])"}
if ($includekey) {
if ($includepath) {
if ($incomplete)
if($index -eq "healthy")
if($input){
if ($input -eq "") { return } else {
if ($inputfile)
if (!($inputfile)) {write-warning "inputfile not specified, please provide this parameter";return}
if(!$inputisalreadyipaddress)
if ($input.substring(0,1) -ne "y") { return }
if ($installedversion -eq $null)
if (!$installmenu)
if ($installmenu)
if($installpath -eq "show")
if ([int][environment]::getenvironmentvariable($envvargroupcount, "user") -eq [int]$alertthreshold -or [int][environment]::getenvironmentvariable($envvargroupcount, "user") -gt [int]$realertthreshold) {
if ([int][environment]::getenvironmentvariable($envvargroupcount, "user") -gt [int]$realertthreshold)
if( $interfacemetric ){
if ($interval -le 60) {$interval = 60}
if ([intptr]::size -eq 8){
if ($ints -ne $null)
if ((invoke-expression "test-osc$prerequisitename") -eq $false) {
if ((ip2long($ip)) -eq 0)
if ((ip2long($ip)) -eq 4294967295)
if ($ipaddress -eq '') {
if ($ipaddress -eq $null) {
if($ipenabled) { format-ipoutput($ip) }
if($ip -eq "wmi error collecting data") {write-host "can't wmi connect to $computername" -foregroundcolor red}
if ($ip -match $site1iprange) {
if ($ip -ne $null)
if ($ip -ne $null) {
if ($ipv4address){
if ($ipv4address2){
if ($ipv4dns){
if ($ipv4dns2){
if ($ipv4dns2){ $dnsarray+=$ipv4dns2}
if ($ipv4dns) { $dnsarray+=$ipv4dns}
if ($ipv4gateway) {
if ($ipv6address)
if ($ipv6dns){
if ($ipv6dns2){
if ($ipv6dns2){ $dnsarray+=$ipv6dns2}
if ($ipv6dns) { $dnsarray+=$ipv6dns}
if ($ipv6gateway){
if (!$isadfs)
if ($isalive -ne $null)
if ($isalive.__server.tostring() -eq $computername)
if ( $_.isapproved ){
if ( $_.isapproved -eq $false ){
if ($iscredspecified -ne $false) {
if ($iscredspecified) { $paramiis6.add('credential',$credential) }
if ($iscredspecified) { $paramiis7.add('credential',$credential) }
if ($iscredspecified) { $paramservices.add('credential',$credential) }
if ($isdelayexceeded){
if ($iselevated) {
if ($isexist) {
if($ishidden)
if($isinstalled)
if `(`!isinvalid`)
if (isinvalid)
if (ismember $computer "deploy" -eq $true)
if (ismember $user "domain users" -eq $true)
if (ismember $user "engineering" -eq $true)
if($isnothidden)
if issectionexpandedbydefault(obji) then
if issectionheader(obji) then
if ($isvalidationapproved -or $wsus_targetgroup_validation -eq $null ){
if($isvalidinput)
if ($isvalidinput -eq $false)
if (iswindowsserver)
if ($itanium.count -gt 0)
if ( $item -and ($item -is [system.io.directoryinfo]) ) {
if ($item.collectiontype.tolower() -eq "device")
if($item.file.length -gt 0)
if ($item.folderparent -eq "root")
if ($item.foldertype.tolower() -eq "advertisement") { $objecttype = "3" }
if ($item.foldertype.tolower() -eq "application") { $objecttype = "31" }
if ($item.foldertype.tolower() -eq "devicecollection") { $objecttype = "5000" }
if ($item.foldertype.tolower() -eq "driverpackage") { $objecttype = "23" }
if ($item.foldertype.tolower() -eq "metering") { $objecttype = "9" }
if ($item.foldertype.tolower() -eq "package") { $objecttype = "2" }
if ($item.foldertype.tolower() -eq "tasksequence") { $objecttype = "20" }
if ($item.foldertype.tolower() -eq "usercollection") { $objecttype = "5001" }
if ($item.getfolder -ne $null)
if($item.hasindex)
if ($item.hasuniqueroleassignments)
if ($item.implement.tolower() -eq "y")
if ($itemip -eq $null) {
if($item.ispartitioned -eq "true")
if($item.issystemobject -eq $false)
if ($item.length -gt 0)
if($item.name.contains(".gif"))
if( $item.name.indexof('\') -ne $null)
if ( $itemname.tolower() -eq $webpartname.tolower() )
if ($itemnode.checked)
if($item.rtt -eq "<1")
if($items.servicesnotrunning.count -gt 0)
if($item.status -eq "success")
if ($itomonth -eq 13)
if ((($j+1) % 6) -eq 0) {"`n`t`t "}
if ($j -eq 0) {
if ($j -eq 0) {$hours = [string]::join("", $lh[$n..($n + 7)])}
if ($jobcount -eq $jobsplit) {
if($job.enumhistory().rows[0] -ne $null){
if($job.enumhistory().rows[1] -ne $null){
if($joblastrunoutcome -eq "failed")
if ($_job.state -eq "completed") {break}
if(!($kbarticleid -match $update.kbarticleids -and "" -ne $update.kbarticleids))
if($kbarticleid -ne $null -and $updateaccess -eq $true)
if( keeplinefeedonly )
if (!$key) {
if ($key -eq $remstitem.name)
if($keyfieldvalue) {
if($key -match "^_sc_") {
if ($k -ne $id)
if ($knownpolicytypes -notcontains $policytype) {
if ($knownpolicytypes -notcontains $userspecifiedpolicy) {
if (!$kval) {
if ($largeemailsize -ne 0) {
if ($lastbackup -eq $null)
if ($last -eq $latest)
if ($last -eq $true)
if ($last -eq $true) {$exitflag = $true}
if($lastline.contains('warnings:') -and $lastline.split(':')[0].trim() -eq 'warnings' -and $lastline.split(':')[1].trim() -ne 0)
if($lastline -ne $null)
if ($lastname -eq '') {
if ($lastrun -gt 99) {
if ($lastrun -gt 9999) {
if ($layerid -ge $higestlayer)
if($layerid -ne $null)
if ($layerkey.startswith("fwpm_layer_"))
if (($layersetting -ne 1) -or ($warninglevel -ne 0))
if ($layer.substring(0,2).toupper() -eq $line[0].substring(0,2).toupper())
if ($ldapurl.gettype().name -eq "string")
if($leafobject)
if len(ip) >= 16 then
if (($len -ne 168) -or ($hours -match"[^0-1]")) {"invalid hours for $dn"}
if ($libraryfile -eq $true)
if (($libraryname.indexofany("-")) -gt -1)
if ($_ -like "*copy*access*denied*") { throw "access to the vhd share path on the vmm library server is denied. try executing the cmdlet with credentials" }
if ($line[0].length -ge 2)
if ($line.contains('service group started:') -eq $false)
if($line.count -eq 2)
if ($line -eq 'the full cil generation from x++ is done.')
if ($line -eq '<xml id="compilerinfo">') {$xmlstarted = $true}
if ($line.length -gt 0)
if ($line -like "function*")
if ($line -like "*no_client_site*")
if(($line -ne $null) -and ($line.trim() -ne ''))
if($line -ne $null -and $line.trim() -ne '')
if (($linenum -gt 1) -and ($line -eq 'ok')) {$importok = $true}
if($list){
if ($list1.selecteditems.count -gt 1){$vbmsg1 = $vbmsg.popup("you may only select one account to remove at a time.",0,"error",0)}
if ($list1.selecteditems.count -gt 1){$vbmsg1 = $vbmsg.popup("you may only select one application to uninstall at a time.",0,"error",0)}
if ($list1.selecteditems.count -gt 1){$vbmsg1 = $vbmsg.popup("you may only select one process to end at a time.",0,"error",0)}
if($list.basetype -eq "documentlibrary") {
if ($list.hasuniqueroleassignments)
if($listname -is [array]) {
if ($listofroamingclients){$listofroamingclients | export-csv .\listofroamingclients.txt}
if(!$listonly)
if($listonly)
if($listonly) {
if ($listonly) {$switches+="`r`n`t`t-listonly"}
if ($listonly){write-host "`t*** running in listonly mode, no files will be modified ***`n"}
if (!($listpath)) {"no list of computers specified, exiting";return}
if (($localhostname -eq 'adfs') -and ($domain -eq $localdnsdomainname)) {
if ($localmachinealiases -contains $computer -and $iscredspecified) {
if ($localnodepresent -eq $false)
if($local:parammissing)
if ($localproject -eq $null) {$axbuilderror += "the environment variable %localproject% is missing."+[char]10}
if($localproject -ne $null -and $applicationsourcedir -ne $null) {
if ($lockstate.islocked) { start-sleep -s 30 }
if ($logfile -ne $null)
if (!($logfilepath)) {write-warning "logfilepath not specified, please provide this parameter";return}
if ($logfile.substring($logfile.length-1,1) -eq "\") {
if ($logfolder -eq $null) {$axbuilderror += "log folder is missing."+[char]10}
if($logfolder -eq $null -or (test-path $logfolder) -eq $false)
if ($logfolder -ne $null -and (test-path $logfolder) -eq $false) {$axbuilderror += "log folder {0} is not a valid path." -f $logfolder +[char]10}
if ($loggingdirectory.endswith("\"))
if($logging -eq 0)
if ($logintarget -eq $true)
if (!($logpath)) {$logpath = ".\"}
if ($lookupresults -match 'request to .* timed-out') {
if($loopcount -gt 0)
if($lsantstatustowinerror -ne 0) {
if($lsaopenpolicyhandle -ne 0) {
if ($lwthdd -gt $lwtusb) {
if ($lyncclient -ne $null) {
if ($lyncclient.state -ne [microsoft.lync.model.clientstate]::signedin) {
if ($machine.displayheight)
if ($machine.displaywidth)
if ($machine.domaintojoin)
if ($machine.domaintojoinfqdn)
if ($mactype -eq "dynamic")
if ($mactype) {" vm nic rename : mactype: $mactype"}
if ($mac) {" vm nic rename : mac: $mac - $switch"}
if (!$mailbox) {
if ($mailbox.activesyncenabled -eq "true")
if (!$mailbox) {continue}
if ($mailbox.customattribute7.length -eq 8) {
if ($mailbox -eq $null) {
if (!$mailboxes)
if (!$mailboxes.count)
if ($mailbox.exchangeuseraccountcontrol -match "accountdisabled") {
if ($mailboximportexport -eq "true")
if ($mailbox.isresource -eq $true) {
if (!$mailbox){$mbnull=0}
if($mailboxname.auditenabled -eq $false) {write-host -foregroundcolor red "audit logging is not enabled on this mailbox!"} else
if (!$mailboxname) {write-host -foregroundcolor red "please make sure you typed correct alias! script couldn't find any mailbox with that alias!"} else
if ($mailbox.prohibitsendquota -match "unlimited") {
if ($mailboxstats.totalitemsize -ne $null) {
if($maildb.isopen)
if ($mailenable) {enable-testusersmail}
if ($maintenance -match "maintenancemode") {
if ($managedproperty -eq $null){
if (!$manager){$output+="<td>no manager</td>"}
if (!$managers){$output+="<td>no manager</td>"}
if($mark -eq $false)
if($mark -eq $true)
if ( $mark_tg_approved ) {
if ($mask -eq "16"){[int]$count = 255}
if ($mask -eq "17"){[int]$count = 127}
if ($mask -eq "18"){[int]$count = 63}
if ($mask -eq "19"){[int]$count = 31}
if ($mask -eq "20"){[int]$count = 15}
if ($mask -eq "21"){[int]$count = 7}
if ($mask -eq "22"){[int]$count = 3}
if ($mask -eq "23"){[int]$count = 1}
if ($mask -ge "24"){mod-acl $scope $grp}
if ($_ -match "(.*?\d{1,3}.*?adfs\.$domain*)") {
if ($matched.count -eq 0) {
if ($matched.count -ne 1) {
if ($matches)
if ($matches.code)
if($_ -match "hresult: 0x80072ee2")
if($_ -match "hresult: 0x80240044")
if ($match.success)
if($mbxbklastfullbackup -eq $null)
if($mbxbklastfullbackup -gt (get-date).adddays(-1))
if($mbxbklastfullbackup -gt (get-date).adddays(-2))
if ($mbxcount -gt $mailboxcountthreshold)
if (!$mbxdatabase){
if ($mbxdbsearch.gettype().isarray) {
if ($mbxdbs.gettype().name -ne "mailboxdatabase")
if ($mbxdbs -ne $null){
if ($mbxdbs -ne $null) {if ($mbxdbs.gettype().name -ne "mailboxdatabase"){$dbcount = ($mbxdbs).count} else {$dbcount = 1}}
if ($mbx.gettype().isarray -or $mbx.database -eq $line.database) {
if ($mbxinfo.usedatabasequotadefaults -eq $true) {
if ($mbxusercheck) {
if ($mbxusercheck.customattribute7 -ne $userentry.pin) {
if ($mcafeefile -eq "agent" -and ($useros.caption -match "windows 7" -or $useros.caption -match "2008")){$mcafeelog = "notepad.exe \\$computername\c$\programdata\mcafee\common framework\db\agent_$computername.log"}
if ($mcafeefile -eq "agent" -and $useros.caption -match "windows xp"){$mcafeelog = "notepad.exe \\$computername\c$\documents and settings\all users\application data\mcafee\common framework\db\agent_$computername.log"}
if ($mcafeefile -eq "ap"){$mcafeelog = "$mcafeepath\accessprotectionlog.txt"}
if ($mcafeefile -eq "oas"){$mcafeelog = "$mcafeepath\onaccessscanlog.txt"}
if ($mcafeefile -eq "ods"){$mcafeelog = "$mcafeepath\ondemandscanlog.txt"}
if ($mcafeefile -eq "ud"){$mcafeelog = "$mcafeepath\updatelog.txt"}
if ($mcount -eq 0){
if ($mcpfres -like "success")
if ($mcres -like "success")
if ($membercount.$duplicatemember -gt 1)
if ($member -eq $parent)
if ($member -eq $submember)
if ($member -eq $user)
if ($member.isvalidsecurityprincipal -like "false")
if ($member -ne $null)
if ($member -ne $null) { $existinggroupmemberscount += 1 }
if ($member -ne $null) { $newgroupmemberscount += 1 }
if ($memberof) {$filter += ' -and memberof -eq "' + (get-adgroup $memberof).distinguishedname + '"'}
if(($member.recipienttypedetails -like "*group*") -and ($member.recipienttypedetails -notlike "*dynamic*"))
if($member.recipienttypedetails -like "*room*")
if ($members)
if(!$members)
if(!$members){}
if ($members_a.name -eq $members_b.name)
if ($members.count -eq 0) {
if ($members -eq $null)
if ($members.gettype().name -eq "object[]")
if ($members -ne $null)
if ($message)
if ($meteringid -eq "" -or $meteringid -eq $null)
if ($meteringid -ne "" -and $meteringid -ne $null)
if($microsoftupdate)
if ($m.index -gt $lineposition)
if ($minute -le 9) {$minute = "0$minute"}
if ($missing.count) {
if ($m -lt 0) {$m = $m + 168}
if($m -ne $null)
if($modeldata -ne $null)
if($modellayermap.containskey($layerid))
if($modellayermap -eq $null)
if($modellayermap.gettype().name -eq 'dictionaryentry')
if($modellayermap -ne $null)
if($modelmanifest -ne $null)
if($models -ne $null)
if ($modification.type -eq "ensureattribute")
if ($modules.name -contains "hyperv")
if ($monthrepeat -eq -1) {
if ($movereqs = get-moverequest | where {($_.status -notlike "completed") -and ($_.status -ne $null)})
if ($movetorecyclebin) {
if ($movingmailbox.customattribute7.length -ne 8) {
if ($movingmailbox.usedatabasequotadefaults -eq $true) {
if ($msbuildpath -eq $null -or (test-path $msbuildpath) -ne $true)
if(($mss | select displayname) -eq $agent)
if ($msxservers -ne $null)
if($multi)
if ($multi -eq "")
if ($multi -eq "") {$multi = '{0:n0}' -f $value}
if ($multi -eq "") {$multi = "<never>"}
if ($multi -eq "") {$multi = "<not supported> (" + $value.gettype().name + ")"}
if ($multi -eq "") {$multi = $(octettoguid $value)}
if ($multi -eq "") {$multi = $(octettohours $value)}
if ($multi -eq "") {$multi = $sid}
if ($multi -eq "") {$multi = "$value"}
if ($multi -eq "") {$multi = $value}
if ($myformattreeview.selectednode.nodes.count -eq 0)
if ($myformattreeview.selectednode.parent.text -eq "table view items")
if ($myformattreeview.selectednode.parent.text -eq "wide view items")
if ($myformattreeview.selectednode.text -eq "table view items")
if ($myformattreeview.selectednode.text -eq "wide view items")
if ($myuserad -ne $null)
if (!$name)
if ($name)
if ($name.contains('/'))
if ($name.info -ne "whitelist" -and $name.modified -le $olddate) {
if($_.name.length -ne $_.name.trim().length)
if ($_.name -match "__"){}
if ($nameresolutioncollection.count -ne 1) {
if ($name.tolower() -eq "distinguishedname") {$syntax = "dn"}
if ($_ -ne "") {
if($_ -ne 0){
if ($needdomainname) {
if(!$needsreboot)
if($needsreboot)
if ($nestedgroup.containskey($name) -eq $false)
if($nestedgroups)
if($nestedgroup.values.count -gt 0)
if (($nevviewcombobox.selecteditem -ne " - select view - ") -and (![string]::isnullorempty($nevnametextbox.text)) -and (![string]::isnullorempty($nevtypetextbox.text)))
if ($newdisnames -ne $null) {
if ($newedittypeform.showdialog() -eq [system.windows.forms.dialogresult]::ok)
if ($neweditviewform.showdialog() -eq [system.windows.forms.dialogresult]::ok)
if ($newhost -ne '') {
if ($newlistitemform.showdialog() -eq [system.windows.forms.dialogresult]::ok)
if (new-scvirtualmachine -name $vm -vmhost $vmhostobject -vmtemplate $template -uselocalvirtualharddisk -hardwareprofile $hardwareprofile -computername $vm -path $vmhostpath -delaystartseconds $startdelay -description "$description" -mergeanswerfile $true -blockdynamicoptimization $false -startvm -jobgroup "$guid" -runasynchronously -startaction "alwaysautoturnonvm" -stopaction "savevm")
if ($newsddl -ne $null) {
if ($newuser.manager){ set-aduser $newuser.samaccountname -manager $newuser.manager }
if ($newusertable.rows.count -gt 0) {
if ($nic.dnsserversearchorder)
if (nic.networkinterfacetype != networkinterfacetype.ethernet) continue;
if (!nic.supports(networkinterfacecomponent.ipv4)) continue;
if ($nic.tcpipnetbiosoptions -eq 0){$netbios="default"}
if ($nic.tcpipnetbiosoptions -eq 1){$netbios="enabled"}
if ($nic.tcpipnetbiosoptions -eq 2){$netbios="disabled"}
if( $nicteam ){
if ($nj -eq 4)
if ($nlialigncombobox.selecteditem -ne "none")
if ($nlipropertytextbox.text -eq $nlilabeltextbox.text)
if ($nliwidthnumericupdown.value -ne 0)
if($nocleanonerror -ne $true)
if ($nocleanonerror -ne $true -or (test-path (join-path $currentlogfolder 'builderrors.err')) -ne $true)
if ($noconfirm){
if ($nofolder) {$switches+="`r`n`t`t-nofolder"}
if ($nonfeatures -notcontains $_.name) {
if ($nonoptimaldb.excludefromprovisiong -like "false") {
if( $normalizenewlines )
if (-not $?) {
if(-not $?) {
if (-not ($activedomains -contains $upnsuffix)) {
if (-not $alldayevent) {
if (-not $allowoverwrite) {
if (-not $bindingonsite) {
if (-not $cachedpolicies.containskey($wellknownpolicytype)) {
if($notcategory -ne "" -and $updateaccess -eq $true)
if( ( -not $_.cluster['spacessetting'] ) -or $_.cluster['preparedquorumdiskenabled'] )
if (-not ($columnheaders.containskey("anniversary"))) {
if (-not ($columnheaders.containskey("birthday"))) {
if (-not ($columnheaders.containskey("name"))) {
if (-not (compare-object $destmember.memberof $sourcemember.memberof)) {
if (-not (compare-object $destmember.memberof $sourcemember.memberof | where-object {$_.sideindicator -eq '=>'})) {write-host "no difference between $sourceacc & $destacc groupmembership found. $destacc will not be added to any additional groups.";return}
if (-not (configure-qsiisssl)) {
if ($notconnected) {
if ( -not $credential )
if( -not($dc) )
if (-not $destacc) { $destacc = read-host "please input destination user name, the user which will be added to the groups of the source user" }
if (-not $destinationaccount) { $destinationaccount = [microsoft.visualbasic.interaction]::inputbox("enter the name of the account to set the groups to...", "destination account", "") }
if (-not $dhcp -and $dnsserverfind -and $dnsserverreplace)
if ( -not $directory ) {
if (-not $dnsserverfind){$colofrecords += $record}
if (-not $dnsserverfind -or $dnsmatch -eq "true")
if (-not ($dnsserverlist -contains $dnsip)) {
if (-not ($domainsidshash.item($domainname))) {
if (-not $enabledfeature)
if (-not $exactlymatch) {
if (-not $existingcontactobject) {
if ((-not $existingexsvcvar) -or $force) {
if (-not $featureidentity)
if (-not $featureidentity) {
if (-not $featurename) {
if (-not $feature) { return }
if (-not $fileage) {write-warning 'please specify the -fileage variable, this parameter is required. use get-help .\deleteold.ps1 to display help.';exit}
if (-not $filepath)
if (-not $folderpath) {write-warning 'please specify the -folderpath variable, this parameter is required. use get-help .\deleteold.ps1 to display help.';exit}
if ( -not $format ) { $output } else { $output | format-output }
if(-not(get-diskimage -imagepath $imagepath | get-volume))
if (-not (get-item -literalpath $globalbackupdir -erroraction silentlycontinue))
if (-not (get-module -name $name)) {
if(-not(get-module -name storage -listavailable))
if (-not (get-module remoteaccess))
if(-not (get-pssnapin vmware.vimautomation.core -erroraction silentlycontinue))
if (-not $includeadditionalproperty) {
if (-not $installedlanguage)
if (-not $isadded) {
if not issectionheader(strsrc) then exit function
if($notkbarticleid -match $update.kbarticleids -and "" -ne $update.kbarticleids)
if($notkbarticleid -ne $null -and $updateaccess -eq $true)
if (-not $keepsearchfolder) {
if ((-not $keepsearchfolder) -and ($searchfolder -ne $null)) {
if (-not $legacydns.contains($ccrecipient.address)) {
if (-not $legacydns.containskey($emailmsg.from.address)) {
if (-not $legacydns.containskey($torecipient.address)) {
if (-not $listonly) {
if (-not $listonly) {remove-item -literalpath $tempfile -force -erroraction silentlycontinue}
if(-not(!$lists))
if (-not $logfile) {write-warning 'please specify the -logfile variable, this parameter is required. use get-help .\deleteold.ps1 to display help.';exit}
if (-not $node) { return }
if (-not -$nov6)
if (-not $nov6)
if (-not $nov6){
if (-not $objfound)
if (-not($ok)) {
if (-not $originalsubject.contains("[")) {
if (-not $owauseroptions.dictionary.containskey("signaturehtml")) {
if (-not $owauseroptions.dictionary.containskey("signaturetext")) {
if (-not $packagepath)
if (-not ($pgfunctionexplorer = $pgse.toolwindows['functionexplorer']))
if (-not ($possiblecertificate.hasprivatekey)) {
if (-not ($possiblecertificate.subject.contains("cn=$script:adfssubjectname"))) {
if (-not ($possiblecertificate.verify())) {
if (-not ('powershelltypeextensions.win32window' -as [system.type]))
if( (-not $preparedquorumdiskenabled ) -and (-not $reservequorumenabled) -and $spacesquorumdiskenabled )
if (-not $property) { return }
if (-not $psboundparameters.backgroundcolor) {
if (-not $psboundparameters.foregroundcolor) {
if (-not (read-qshostadfsservicecredentials)) {
if (-not (read-qshostyesno -title 'confirm self-signed' `
if (-not $requirement) {
if (-not (require-qsadfssubjectname)) {
if (-not (require-qslocalfile $script:certificatefilename)) {
if (-not (require-qsmodule -name msonline -politecheck)) {
if(-not($retval)) {
if(-not $row.haserrors){
if (-not ([security.principal.windowsprincipal] [security.principal.windowsidentity]::getcurrent()).isinrole([security.principal.windowsbuiltinrole] "administrator"))
if(-not $servicename)
if (-not $set) {
if( -not $setting ){ throw 'settings not found' }
if (-not $silent) {
if (-not $sitecollection) { return }
if (-not $sitelanguage) { $sitelanguage = [microsoft.sharepoint.spregionalsettings]::globalserverlanguage.lcid }
if (-not $site) { return }
if (-not $skipcopy)
if (-not $skipverification) {
if (-not $solutionlanguage) { $solutionlanguage = 0 }
if (-not $solution) { return }
if (-not $sourceaccount) { $sourceaccount = [microsoft.visualbasic.interaction]::inputbox("enter the name of the account to read the groups from...", "source account", "") }
if (-not $sourceacc) { $sourceacc = read-host "please input source user name, the user the rights will be read from" }
if (-not $splist.enableattachments) {
if (-not [system.string]::isnullorempty($bcc)) {
if (-not [system.string]::isnullorempty($cc)) {
if (-not [system.string]::isnullorempty($contact.$contactpropertyname)) {
if (-not [system.string]::isnullorempty($currentusermailaddress)) {
if (-not [system.string]::isnullorempty($displaycc)) {
if (-not [system.string]::isnullorempty($displayname)) {
if (-not [system.string]::isnullorempty($displayto)) {
if (-not [system.string]::isnullorempty($from)) {
if (-not [system.string]::isnullorempty($htmlsignature)) {
if (-not [system.string]::isnullorempty($newsubject)) {
if (-not [system.string]::isnullorempty($subject)) {
if (-not [system.string]::isnullorempty($textsignature)) {
if (-not [system.string]::isnullorempty($timezonestandardname)) {
if (-not [system.string]::isnullorempty($to)) {
if(-not $target)
if (-not $targetfeature)
if (-not $targetpublishingweb)
if (-not $targetsite)
if (-not $targetsolution)
if (-not $targetsolution -and -not $whatif)
if (-not $targetsolution.deployed)
if(-not($targetversion))
if (-not $targetweb)
if (-not $targetwebapp)
if (-not $tempfolder) {
if (-not $testlogpath) {
if (-not (test-path "c:\config\logs")) {mkdir "c:\config\logs" | out-null}
if (-not (test-path $configwizardfilename)) {
if( -not(test-path $copyto) ) {
if (-not (test-path $exefilename)) {
if( -not(test-path "hklm:\\security\policy\secrets\mysecret")) {
if (-not (test-path $imgpath -pathtype leaf)) {
if (-not (test-path $keyname)) {
if (-not (test-path $outdir)) {
if (-not (test-path -path $attchmentpath)) {
if (-not (test-path -path $contact.$contactpropertyname -pathtype leaf)) {
if (-not (test-path -path $csvfile -pathtype leaf -include "*.csv")) {
if (-not (test-path -path $inlineattachmentpath)) {
if (-not (test-path -path $parentfolder)) {
if(-not (test-path($zipfilename)))
if (-not $timematch)
if($nottitle -and $updateaccess -eq $true)
if (-not($total)) { $total = 0 }
if (-not $value -or -not $value.trim())
if (-not $webapplication) { return }
if (-not $whatif) {
if -not whatif then commit sddl change
if ($now.hour -eq $nexthour) {
if ($ns.ipaddress[0].startswith("143.158.") -eq $true )
if($null -eq $cred)
if ($null -eq $object1 -and $null -eq $object2)
if($null -eq $pscredman)
if ($null -eq $scope)
if ((($null -ne $object1.$key) -and ($null -ne $object2.$key)) -and
if ($numberofdays -le 0)
if ($numberofslashes -eq 1)
if ($numberofunique -gt 25)
if (($o365session -eq $null) -or ($o365session.state -eq "closed")) {
if ($o365session -ne $null) {
if ($oabapplication)
if ($oabapplication -eq $null)
if ($oabvdir)
if ($obj1.$primarykey -eq $obj2.$primarykey)
if($objcollection2.count)
if($objcollection.count)
if objcontainer.style.display = "none" then
if ($object1.gettype().name -ne $object2.gettype().name)
if ($object1.$key -ne $object2.$key)
if($objectarray -eq $null)
if ($objectclass) {$filter += ' -and objectclass -eq "' + $objectclass + '"'}
if ($objitem.size -ne $null) {
if ($objitem.state -ne "running") {
if ($objitem.summarycopystatus -eq "healthy" -or $objitem.summarycopystatus -eq "initializing") {
if ($objmatch -and $timematch)
if ($($objmember.recipienttype) -like "*distributiongroup*")
if ('"'+$objnewgroup.distinguishedname+'"' -ne ($groups[$k] -replace $source,$destination).tostring())
if ('"'+$objnewuser.distinguishedname+'"' -ne ($users[$k] -replace $source,$destination).tostring())
if ($objpermission.deny -eq $true)
if (($objpermission.user.tolower().contains("\domain admin")) -or ($objpermission.user.tolower().contains("\enterprise admin")) -or ($objpermission.user.tolower().contains("\organization management")) -or ($objpermission.user.tolower().contains("\administrator")) -or ($objpermission.user.tolower().contains("\exchange servers")) -or ($objpermission.user.tolower().contains("\public folder management")) -or ($objpermission.user.tolower().contains("nt authority")) -or ($objpermission.user.tolower().contains("\exchange trusted subsystem")) -or ($objpermission.user.tolower().contains("\discovery management")) -or ($objpermission.user.tolower().contains("s-1-5-21")))
if ($objrecipient)
if ($obj.recipienttype -ne 'usermailbox' -and $obj.recipienttype -ne 'mailcontact')
if($objservice.isdefaultauservice -eq $true)
if($objservice.name -eq "microsoft update")
if($objservice.serviceid -eq $serviceid)
if($objsysteminfo.rebootrequired)
if ($objusermailbox.lastlogontime -eq $null)
if ($octet[$j] -band [math]::pow(2, $k)) {$lh[$m] = "1"}
if ($offlinevms -match "poweroff") {
if ($oldest){
if ($oldestdays -ge $mailolderthandays)
if ($oldpermission -ne $null) {
if ($oldvalue -ne "")
if($oldversion -ne $null -and $oldversion.trim() -ne '')
if ($o -ne $null) {
if ($online)
if ( $only ) { return }
if ($openopenfiledialog.showdialog() -eq [system.windows.forms.dialogresult]::ok)
if ($operation.restartneeded -eq "yes") {
if ($optimaldb.excludefromprovisiong -like "true") {
if($organization.ispresent)
if ($originalsubject.contains("[")) {
if ($osbuildnumber -lt 7600)
if ($o.schema -ne $null -and $o.schema -ne "") {
if ($ossku -gt 7)
if ($osversion -ge 6.0)
if ($os.version -ge 6.2 )
if ($os.version -lt 6.2 )
if(!($ou)) {
if ($ou) { $newdgcmd = "$newdgcmd -organizationalunit ""$ou""" }
if ($ou) { $newusercmd = "$newusercmd -path ""$ou""" }
if ($outfile -eq "") {
if ($output -eq "") { $output += $_ } else { $output += ",$_" }
if ($outputfile -eq "c:\loginevents.csv") {
if ($overwritegroupmember -ne "true") {
if($owebstype -eq "error")
if ($owst -like "success")
if ($packageid -eq "" -or $packageid -eq $null)
if ($packageid -ne "" -and $packageid -ne $null)
if ($parameter)
if ( $paramsetname -eq "path" ) {
if ($parentfolder.folderclass -ne "ipf.contact") {
if($parts.length -eq 2)
if($parts.length -eq 2) {
if ($passedip)
if ($passthru)
if ($passurl)
if ($passwordd.length -eq 0)
if ($passwordo.length -eq 0)
if ($passwordreset)
if (!$path)
if($path -match "common startup")
if($path -match "hklm")
if($path -match "hku")
if ($path -notmatch $vm.vmname){
if( $path.startswith( $pwd ) )
if ($pcs.count){$progress2.step = (80/$pcs.count-1)}
if ($pcsearcherror){$item2.subitems.add("unavailable")}
if ($pcuser.username -ne $null){$item2.subitems.add($pcuser.username)}
if($percentfree -lt $percentcritcal)
if($percentfree -lt $percentwarning)
if ($percentperuser -ne 100)
if ($percfreespace -lt "20")
if ($permissiontype -eq 0)
if ($pfdbs -ne $null)
if ($pfdbs -ne $null) {$dbcount += 1}
if ($pgfunctionexplorer = $pgse.toolwindows['functionexplorer']) {
if ($pgse.documentwindows.count -ne $global:functionexplorer_documents.documentcount)
if ($phone -like $null)
if ($physicaladdresskey -ne "other") {
if ($picturenameformat -eq "displayname") {
if ($pingable -eq "true")
if($pingminrtt -eq 0)
if($ping.statuscode -eq 0)
if($pingstatus.statuscode -eq 0)
if($pingstatus.status -eq "success") {
if($pingsuccess -eq 0)
if($pingsuccess -gt 0)
if ( $pipelineinput ) {
if ($pipelineinput) {
if ($policyfeatures[$userspecifiedpolicy] -notcontains ($userspecifiedfeaturename)) {
if ($policytype -ne "dialplan") {
if ($politecheck) {
if( $port -eq $null -or ($portnumber -eq $port))
if ($pos -ge $menuitems.length) {$pos = 0}
if ($posheditor -ne $null)
if (($poshfile.name.indexofany("-")) -gt -1)
if ($pos -lt 0) {$pos = $menuitems.length -1}
if ($possiblecertificate.notafter -lt (get-date)) {
if ($possiblecertificate.notbefore -gt (get-date)) {
if ($possiblecertificates.getlength(0) -eq 0) {
if ($possiblecertificates.getlength(0) -gt 1) {
if ($p.proj_name -eq "mytestproject")
if prefix = "2001:db8:ba:" then
if prefix = "2001:db8:dc:" then
if ($prefixlength)
if ($prefixlength -gt 32)
if($prefoundupdatestodownload -eq 0)
if ($prevvalue -is [bool])
if (!$principal.isinrole("administrators"))
if ($principal.isinrole("administrators") -eq $false)
if ($product -eq $null) {
if ($profilemanager -eq $null)
if ($programid -eq "" -or $programid -eq $null)
if($_.properties[$name]){
if($property.name -eq "ms_description")
if ($propertyname -ne "address") {
if ($propertypair.count -eq 2)
if ($propname -eq "welcomepageurl")
if (props == null) continue;
if ($provisionjobs)
if ($psboundparameters.containskey("description"))
if ($psboundparameters.containskey("fullname"))
if($psboundparameters['debuger'])
if ($psboundparameters['eventlog'])
if ($psboundparameters.foregroundcolor -or $psboundparameters.backgroundcolor) {
if ($pscmdlet.parametersetname -eq "byfile") {
if ($pscmdlet.parametersetname -ne "norecurrence") {
if ($pscmdlet.shouldprocess($appointmentanniversarysubject)) {
if ($pscmdlet.shouldprocess($appointmentbirthdaysubject)) {
if ($pscmdlet.shouldprocess($computername,"enable rdp"))
if ($pscmdlet.shouldprocess($container, "create ad container")) {
if ($pscmdlet.shouldprocess($container, "set permissions")) {
if($pscmdlet.shouldprocess("disabling search feature"))
if($pscmdlet.shouldprocess("drive $usbdriveletter. all data will be lost","formating volume"))
if($pscmdlet.shouldprocess("enabling search feature"))
if ($pscmdlet.shouldprocess($env:computername,"check and install updates"))
if($pscmdlet.shouldprocess($env:computername,"$statusname $($update.title)?"))
if($pscmdlet.shouldprocess($env:computername,"$($update.title)[$size]?"))
if ($pscmdlet.shouldprocess($folder.displayname)) {
if ($pscmdlet.shouldprocess($identity.subject)) {
if ($pscmdlet.shouldprocess("putting $agent in maintenande mode for $($endtime) minutes") )
if ($pscmdlet.shouldprocess($spuser.userlogin)) {
if ($pscmdlet.shouldprocess($userdisplayname)) {
if ($psfile.issaved -eq $false)
if(!($pssnapin.name -like "*sharepoint*"))
if ($psversion -eq "2.0") {
if($pv -ne $null -and $pv.version -ne $null -and $pv.version.major -ne 2)
if($pwcyr -like "success")
if ($pwdlastset -gt 0)
if ($pwsres -like "success")
if ($qfefile.extension -eq '.xml')
if ($qfefilename -and $qfefilename.count -eq $null)
if ($qfeserver)
if ($qfeserver -eq $null)
if ($qspart -like "devicetype=*")
if ($qspart -like "user=*")
if ($quarterrepeat -ne -1) {
if (!$quest) {
if ($queue.identity -eq $null)
if ($queueinfomessagecount.sum -gt $queuemessagecountthreshold)
if ($queue.messagecount -ge 250)
if ($quote)
if ($quote -eq $true) {$line = "$line,""$multi"""}
if (!$raconfig -or $raconfig.dastatus -ine "installed")
if ($_randomsamplerequested){
if ($rbaggroups -eq $null)
if($rc -ne -1)
if($rdllanguage -eq $null)
if (($rdpuser -match "[a-z]") -and ($rdpuser -ne $null)) {
if ($reachable -eq "false")
if (read-qshostyesno -title 'existing credentials' `
if($readyupdatestoinstall -eq 0)
if ($realuserlastlogon -le [datetime]::fromfiletime($userlastlogon.lastlogon))
if ($reboot)
if ($reboot -eq $true)
if($reboot -eq "y")
if($rebootneeded)
if (!$recipient)
if ($recipients) {
if ($_.recipients -match "letsexchange.com")
if ($_.recipients -notmatch "letsexchange.com")
if ($record){$colofrecords += $record}
if ($record -ne $null -and (($record.field[7]).get_innertext()) -eq "0")
if (!($recoverypoint -eq $null))
if (($recurrencerangeendafter -eq 0) -and ($recurrencerangeendby -eq $null)) {
if ($recurrencerangeendafter -ne 0) {
if (($recurrencerangeendafter -ne 0) -and ($recurrencerangeendby -ne $null)) {
if ($recurrencerangeendby -ne $null) {
if ($recurrencerangestart -eq $null) {
if ($recurse) {
if($recursive.ispresent) {
if($recursivesubwebs) {
if (recv.data == intptr.zero)
if ($regex.ismatch($regexsubject)) {
if ($regexists)
if (!$regexpath) {
if ($regexpath) {$switches+="`r`n`t`t-regexpath"}
if ($registry){
if(!$regkey)
if ($regkey.getvalue("accountdomainsid")){$regkey.deletevalue("accountdomainsid")}
if ($regkey.getvalue("pingid")){$regkey.deletevalue("pingid")}
if ($regkey.getvalue("susclientid")){$regkey.deletevalue("susclientid")}
if ($regkey.getvalue("susclientidvalidation")){$regkey.deletevalue("susclientidvalidation")}
if ($regkey.subkeycount -eq 0)
if ($regpathexists)
if ($regserv.state -eq "stopped") {
if ($regvaluepfro2k3) {
if ($regvaluepfro2k8 ){
if ($regvaluesetupex){
if ( $regvaluesetupex -eq $true -or $regvaluepfro2k8 -eq $true){
if($remainder -eq 0) {
if($remoteflag)
if ($removepstbeforeexport -eq $true -and (get-item "$($exportshare)\$($mailbox.alias).pst" -erroraction silentlycontinue))
if ($remtime -lt "0,03")
if($rename)
if($replace.length -lt 4)
if($replayqueuelength -lt 1)
if (($replicaoverheadfactor/100) -gt 1)
if($replystatus -eq "success") {$reachable ="true"}
if ($report.count -eq 0){
if(!$reportname)
if(!$reportonly) {
if($reportonly) {
if ($reportshare)
if (require-qsdownloadablefile -url $url -filename $msifilename) {
if (require-qsregistryvalue -key 'hklm:\software\microsoft\active setup\installed components\{a509b1a7-37ef-4b3f-8cfc-4f3a74704073}' -name 'isinstalled' -value 0) {
if (require-qsregistryvalue -key 'hklm:\software\microsoft\active setup\installed components\{a509b1a8-37ef-4b3f-8cfc-4f3a74704073}' -name 'isinstalled' -value 0) {
if(!$res)
if ($resid.resourceid -eq $null) {
if($resolvehost) {
if ($restartreg -eq $true) {
if(!$result)
if($result)
if($result.address -ne $null)
if ($result -eq $true)
if ($result -like "passed")
if ($result -ne $null)
if($result -ne $null)
if ($result.protocoladdress){
if($result.roundtriptime -eq 0)
if (($results -like $tempfind) -and ($results -notlike ""))
if ($resultsset.statuscode -eq 0)
if(($resultstatus -eq "mounted") -or ($resultstatus -eq "healthy"))
if($result.status -eq "success")
if($result.status -ne "success")
if ($result.waitforexit(60000*$combinetimeout) -eq $false)
if ($ret -eq $true)
if($reterror -eq $true)
if( $ret.length -gt 0 ) {
if( $return -eq $false )
if ($return.returnvalue -ne 0)
if ($returnvalue -ne 0)
if($retval -eq $true)
if($revisionnumber)
if (($rightsmask -band $manageprofilesmask) -eq $manageprofilesmask) {
if ($rightsmask -eq "fullcontrol") {
if ($rip.count)
if (!($_rnddone -contains $_rnd)) {break;}
$ifromyear=(get-date -uformat "%y")
if ($rootweb.locale.name -ne $locales[0])
if($rowfields) {
if ($row.itemarray.count -gt 0)
if($rrstatusgs -notlike $null)
if($rrstatusgwmi -notlike $null)
if($rrstatusic -match "stopped")
if ($rules.count -eq 0) {
if ($runnew.returnvalue -eq 0) {
if ($runningdhcp -eq "true")
if($runscript -eq 0)
if($runtests)
if ($runweekends -eq $true -and $day -ge "6") {
if(!$rval)
if ($rv -ne 0) {
if ($samaccountname) {$filter += ' -and samaccountname -eq "' + $samaccountname + '"'}
if($saveas) {
if ($savesavefiledialog.showdialog() -eq [system.windows.forms.dialogresult]::ok)
if ($savestatefile)
if($scanport) {
if ($scheck -eq "nok")
if($schema.ispresent)
if( !$schema.ispresent -and !$organization.ispresent -and !$domain.ispresent )
if ($scompname -eq "")
if ($scope -eq $null)
if ($scope.tolower() -eq "site")
if ($scope.tolower() -eq "webapp")
if ($scope.tolower() -ne "webapp" -and $scope.tolower() -ne "site")
if ($script:adfscredentials -ne $null) {
if (($script:adfsdomainname.tolower() -ne $env:userdomain.tolower()) -and `
if ($script:adfssite -eq $null) {
if ($script:adfssubjectdomainname.tolower -ne $env:userdnsdomain) {
if ($script:adfssubjectname -eq $null) {
if($script:documentlibrarytitlestotarget -ne $null) {
if ($script:groupmembers.containskey($member))
if ($script:msolconnected) {
if ($scriptname -eq 'build')
if($scriptname -eq 'deploy')
if ($scriptname.substring(($scriptname.length)-4,4) -ne ".ps1")
if ($script.startswith("untitled") -or $script.contains("profile.") {
if ($sddlchanged) {
if ($searchfiltercollection.count -ne 0) {
if ($searchfilter -like "*foreignsecurityprincipal*")
if ($searchresults.contacts.count -ne 0) {
if ($searchresults.groups.count -eq 0) {
if ($searchresults.groups.count -ne 0) {
if ($secondarydomain)
if ($secondarydomainfqdn)
if($secondlastline.contains('errors:') -and $secondlastline.split(':')[0].trim() -eq 'errors' -and $secondlastline.split(':')[1].trim() -ne 0)
if($secondlastline -ne $null)
if ( $section ) {
if ($section.skip -eq "false")
if ($sec.trustee.name -eq $groupname)
if ($securepasswordprompt)
if($selectedstatus -eq ($choices.length -1))
if(($selectedstatus -ne $null) -and ($selectedstatus -ne ($choices.length -1)))
if ($selectedsuffix -eq $null) {
if (select-string -path $logonaspx -pattern "pop-up") {
if ($sendas -eq 0)
if (!$sendbehalfs)
if ($sender.deny -like "true"){$font="red"}else{$font="'
if ($sender.isinherited -like "false"){$font="red"}else{$font="'
if ($_.sender -match "letsexchange.com")
if ($_.sender -notmatch "letsexchange.com")
if (!$senders)
if (!$senders -and !$fullsenders -and !$sendbehalfs)
if ($sender.text.length -eq 0)
if (($s -eq 0) -and ($f -eq 0) -and ($b -eq 0))
if ($server)
if ($serveraddress -eq $null) {
if ($serverbindir -eq $null) {
if ($serverbindir -ne $null) {
if($server.count -gt 1)
if ($servername)
if($servers){
if(!$servers) { "error: must pass in computername. get-help icmd -full"; return; }
if($service -eq "sql") {
if($serviceid)
if ($service.name -eq $srv)
if ($service.status -eq "stoppending")
if ($set)
if ($setarchivestatus)
if ($setarchivestatus -and $archiveguid -eq $null)
if ($setspn -ne $null)
if ($settings -ne $null)
if($shocred)
if ($showerrors -and $hideerrors) {throw "invalid switch parameter combination"}
if ($showmembers -like "true")
if ($showmembers -like "true"){$stat=13}else{$stat=25}
if ($showmembers -like "true"){$stat=1}else{$stat=1}
if ($showmembers -like "true"){$stat=20}else{$stat=45}
if ($showmembers -like "true"){$stat=30}else{$stat=59}
if ($showmembers -like "true"){$stat=50}else{$stat=79}
if ($showmembers -like "true"){$stat=8}else{$stat=10}
if ( $showmenu ) {
if($showsearchcriteria)
if (($showself -like "false") -and ($showinherited -like "false"))
if (($showself -like "true") -and ($showinherited -like "true"))
if ($sidmaphash.contains($ace.sid)) {
if ($sidmaphash.contains($aclentrysid)) {
if($signkey -ne $null)
if ($simple)
if ($singlevalued -eq $true)
if ($sisdisk.contains(":") -eq $false)
if ($sisresult.count)
if ($site -eq $null)
if ($sites.count -eq 0) {
if ($site.value.contains($script:adfssite)) {
if ($sitevariations)
if ($sizemb -ge $sizemax) {
if ($skipcrl)
if ($skip -eq $false)
if ($socres -like "success")
if ($solutiondeployonce)
if ($solutiondeployonce -or $samepackage)
if ($_sourcehash -match $_targethash)
if ($sourcemember -eq $null) {[microsoft.visualbasic.interaction]::msgbox("source user not found",0,"exit message");return}
if ($sourcemember -eq $null) {"source user not found";return}
if( $spacessettingsenabled )
if ($spattachmentnames -ne $null) {
if ($spattachments[$i] -match $attachmentname) {
if ($specicalcase -ne $null) {
if ($splist -eq $null) {
if ($splistitem.attachments.count -gt 0) {
if ($splistitem -ne $null) {
if ($splist -ne $null)
if ($sppicitem.count -eq 1) {
if ($sppiclib.basetemplate -ne "picturelibrary") {
if ($spsnapin -eq $null)
if ($spuser.displayname -ne $newdisnames[$speclogin]) {
if ($spuser -ne $null) {
if ($spusers -ne $null) {
if ($spuser.userlogin.startswith("i:0
if ($spwebapplication.allowedinlinedownloadedmimetypes -notcontains $mimetypeitem) {
if (!$spweb.isrootweb)
if ($spweb -ne $null) {
if ($sqldatabase -eq $null) {$axbuilderror += "sql database name is missing."+[char]10}
if($sqlobject.isntgroup -eq 1) {
if($sqlobject.isntname -eq 1) {
if ($sqlserver -eq $null) {$axbuilderror += "sql server name is missing."+[char]10}
if($sql_server.instancename -eq "")
if($sql_server.version -eq $null)
if ($srknvrgl)
if ($srvsettings.viewentireforest -eq "false")
if ($sslbindings.count -ne 0) {
if ($start.command -ne $null){
if ($startdate -eq $null) {
if ($startsvc.returnvalue -eq 0){"$service started on $computername"}
if ("$_".startswith("cannot load com type excel.application"))
if (("$_".startswith("exception has been thrown")) -and ($step -eq "4"))
if ("$_".startswith("the directory property cannot be found"))
if ("$_".startswith("the directory service is unavailable"))
if ("$_".startswith("the server is not operational"))
if ("$_".startswith("the specified domain"))
if ($state -like $null)
if($status)
if ($statusdetail -eq "failedother")
if ($status -eq "completioninprogress") {
if ($stopsvc.returnvalue -eq 0){"$service stopped on $computername"}
if ($strcomputer.substring(0,1) -ne "*")
if ($stream -ne $null)
if ([string]::compare(($_).split(".")[0], $localmachinename, $true) -eq 0) {
if ([string]::compare(($_).split(".")[0],$localmachinename, $true) -ne 0) {
if ([string]$idx.indexkeytype -eq "driprimarykey")
if([string]::isnullorempty($comment))
if (string.isnullorempty(filter) ||
if (![string]::isnullorempty($nettypetextbox.text))
if (![string]::isnullorempty($nliformattextbox.text))
if ([string]::isnullorempty($nlilabeltextbox.text))
if (![string]::isnullorempty($nlipropertytextbox.text))
if (![string]::isnullorempty($nlipropertytextbox.text) -or ((![string]::isnullorempty($nlilabeltextbox.text) -or !$nlilabeltextbox.enabled) -and ![string]::isnullorempty($nliscripttextbox.text)))
if (![string]::isnullorempty($nliscripttextbox.text))
if([string]::isnullorempty($registrykey)) {
if([string]::isnullorempty($target))
if ([string]::isnullorempty($templabel) -or $templabel -eq $tempproperty)
if (![string]::isnullorempty($tempproperty))
if([string]::isnullorempty($user) -or
if([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.partitionfunction")
if([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.schema")
if([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.user")
if([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.userdefineddatatype")
if([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.userdefinedfunction")
if([string]$rrstatusic -eq "")
if([string]$rrstatusic -ne "")
if ($stritem -like "*$search*")
if strstate = "show" then
if strstate = "toggle" then
if ($subfolder.childfoldercount -gt 0) {
if ($subfolders) {$folders += $subfolders}
if ($subgroup)
if(!$subkey)
if ($subkeys | where {$_ -eq "rebootpending"}) {
if ($subnetmask)
if ($suborg -ne $null) {
if ($subversionclient -eq $null)
if ($subx -eq "displayname") {
if ($subx -eq "installed") {
if`(`$success`)`{
if ($successcount.count -eq 1)
if($success -eq $true) {
if($success -ne $false) {
if ($supportingfunctions)
if ($svc.state -eq "running") {
if ($syncres -like "success")
if ($syntax -eq "constructed")
if ($syntax -eq "notfound")
if ($syntax -eq "notsupported")
if ($syntax -eq "string")
if (($sysflags -band 4) -ne 0)
if ([system.environment]::getenvironmentvariable($variablename) -ne $null)
if ($systeminfoerror){$stbar1.text = "error retrieving info from " + $computername.toupper()}
if([system.intptr]::size -eq 8) {
if ([system.io.file]::exists($csvfilepath)){ clear-content $csvfilepath -force }
if ( [system.io.file]::exists($file) )
if ([system.io.file]::exists($htmlfilepath)){ clear-content $htmlfilepath -force }
if( [system.io.file]::exists( $outputfilepath ) )
if ([system.io.file]::exists($($savesavefiledialog.filename)))
if (!([system.io.file]::exists($settingsfilepath))) {
if( ![system.io.path]::hasextension( $f ) )
if( ![system.io.path]::hasextension( $filepath ) )
if ([system.string]::isnullorempty($calendarfolderpaths[$i])) {
if ([system.string]::isnullorempty($contactsfolderpaths[$i])) {
if ([system.string]::isnullorempty($currentphysicaladdresstype)) {
if ([system.string]::isnullorempty($groupcontacts)) {
if ([system.string]::isnullorempty($pfpaths[$i])) {
if ([system.string]::isnullorempty($targetcontact.anniversary)) {$cancreateanniversaryappointment = $false}
if ([system.string]::isnullorempty($targetcontact.birthday)) {$cancreatebirthdayappointment = $false}
if ([system.string]::isnullorempty($to) -and `
if([system.web.httpcontext]::current -eq $null){
if ($tableheaders.count -eq $tableitems.count)
if($table -ne $null)
if (($targetcontacts | ?{$_.groupname -eq $contactgroupname}) -ne $null) {
if ($targetcontainernodeid -ne "" -and $targetcontainernodeid -ne $null)
if ($targetfeature.scope -eq "farm" -and $feature.parentnode.get_name() -ne "farm")
if ($targetfeature.scope -eq "site" -and $feature.parentnode.get_name() -ne "sitecollection")
if ($targetfeature.scope -eq "web" -and -not $feature.parentnode.get_name() -like "site*")
if ($targetfeature.scope -eq "webapplication")
if ($targetfeature.scope -eq "webapplication" -and $feature.parentnode.get_name() -ne "webapplication")
if ($targetfile.length -gt 255){
if ($targetname -eq $name)
if ($targetsite)
if ($targetsolution)
if ($targetsolution -and -not $targetsolution.containswebapplicationresource -and -not $webapplication)
if ($targetsolution -and -not $targetsolution.deployed)
if ($targetsolution -and $targetsolution.containswebapplicationresource -and $webapplication)
if ($targetsolution -and $targetsolution.jobexists)
if ($targetsolution.containswebapplicationresource)
if ($targetsolution.deployed)
if ($targetweb)
if($taskenabled -eq $false)
if($taskenabled -eq $true)
if ($temp)
if ($temp.contains(";") -eq $true) {
if ($_temp.count -gt 0) {$filesstored += $_temp}
if ($tempdate = $key.getvalue("installdate"))
if ($tempheaderproperties -contains "alignment")
if ($tempheaderproperties -contains "label")
if ($tempheaderproperties -contains "width")
if($tempitem -gt $pingmaxrtt)
if($tempitem -le $pingminrtt)
if ($tempitemproperties -contains "formatstring")
if ($tempitemproperties -contains "label")
if ($tempitemproperties -contains "propertyname")
if ($tempitemproperties -contains "scriptblock")
if ($template -eq $null) { throw "cannot obtain the specified template" }
if ($tempmbsize.endswith("kb")) {
if ($tempnode.tag -eq $myformattreeview.selectednode.tag)
if($tempresult.status -ne "generalfailure")
if ($temp.startswith($exclude) -eq $true) {
if($test1 -eq $test2)
if (test-adauthentication $_.login $_.password)
if (test-adauthentication $login $password)
if(test-connection -cn $server -buffersize 16 -count 1 -ea 0) {
if (test-connection -computername $computer -count 1 -erroraction silentlycontinue)
if (test-connection -computername $computer -count 1 -quiet)
if (test-connection -computername $computer -count 1 -quiet) {
if (test-connection -computername $computer -count 1 -quiet -ea 0)
if (test-connection -computername $computername -count 1 -timetolive 10 -quiet) {
if(test-connection -computername $computer -quiet)
if (test-connection $computername -quiet -count 1)
if (test-connection $computername -quiet -count 1){
if (test-connection $computername -quiet -count 2) {
if (test-connection -computername $serverlist[$j] -count 1 -quiet) {
if ((test-connection -computername ([string]$workstation.name) -count 1 -erroraction silentlycontinue))
if (test-connection $findpcusername.name -quiet -count 1){
if (test-connection $pingpcname -quiet -count 1){
if ($test -eq $false)
if (test-oscuserprivilege) {
if (test-oscwinrmversion) {
if (test-oscwinrmversion -and test-oscwinrmservice) {
if( test-path $absolutepath )
if ((test-path ($apppath)) -eq $false -or (test-path (join-path $apppath 'appl')) -eq $false)
if((test-path $args[0]) -eq $false )
if ((test-path $backuppath) -ne $true)
if (!(test-path $backuppath -pathtype container)){new-item $backuppath -type directory}
if ((test-path $biztalk2006sp1uninstallregistrypath) -eq $false)
if ((test-path $biztalkregistrypath) -eq $true)
if (test-path c:\config\cert) {} else
if (test-path c:\files\en-us) {} else
if (test-path c:\files\setres.exe) {} else
if (test-path $checkfile) {
if (!(test-path "c:\office365-scripts"))
if (!(test-path "c:\office365-scripts")) { new-item "c:\office365-scripts" -type directory | out-null }
if(test-path $commonxp){remove-item $commonxp}}
if ((test-path $compsfile) -eq $false) {
if (!(test-path $container)) {
if (test-path $copyflag)
if(test-path c:\temp)
if (test-path "c:\tools\dbg_amd64.msi")
if (test-path c:\tools\nm34_x64.exe)
if (test-path c:\windows\system32\setres.exe)
if (!(test-path $dest))
if (!(test-path "$destfolder\$destfilename"))
if (!(test-path "$destinationfolder\$destinationfilename"))
if (!(test-path "$destinationfolder" -pathtype container))
if (test-path "$destpath" -verbose)
if ((test-path ($dest + "\" + $stritem)) -eq $false)
if (test-path $diskreport)
if (test-path $domainfile) {
if (!(test-path $drive)) {
if (!(test-path env:\jobcount)) {
if((test-path $errlogfile) -eq $true)
if ((test-path $excludefile) -eq $true) {
if((test-path $exportfolder) -eq $false)
if((test-path $file) -eq $true)
if (test-path $fileexit)
if (test-path $filename)
if ((test-path "$filename") -ne $true) {
if ((test-path $filename) -ne $true) {
if( test-path $filename -pathtype leaf ) {
if (!(test-path $filename)) {write-output "file not found $filename, exiting script";return}
if (test-path $filetest)
if (!(test-path $folder -pathtype container )) {
if (test-path $getramdata -pathtype leaf) {. $getramdata} else {
if(!(test-path hklm:\software\microsoft\windows\currentversion\authentication\logonui\background ))
if (!(test-path $inputfile)) {write-warning "inputfile not found, exiting";return}
if((test-path (join-path $axbuilddir "axinputerrors.txt")) -eq $true)
if((test-path (join-path $axbuilddir 'axinputvalidationerrors.txt')) -eq $true)
if((test-path (join-path $axbuilddir "axinputvalidationerrors.txt")) -eq $true)
if ((test-path(join-path $axbuilddir 'combinexpos.exe')) -ne $true)
if ((test-path (join-path $clientlogdir "axcompileall.html")) -eq $true)
if((test-path (join-path $currentlogfolder 'deployerrors.err')) -ne $true)
if ((test-path (join-path $currentlogfolder "detailedlogs")) -eq $false) {$n = new-item (join-path $currentlogfolder "detailedlogs") -itemtype directory}
if ((test-path (join-path $droplocation "application\appl")) -eq $false) {$n = new-item (join-path $droplocation "application\appl") -itemtype directory}
if ((test-path (join-path $droplocation "application\bin")) -eq $false) {$n = new-item (join-path $droplocation "application\bin") -itemtype directory}
if ((test-path (join-path $droplocation "application")) -eq $false) {$n = new-item (join-path $droplocation "application") -itemtype directory}
if((test-path (join-path $droplocation 'builderrors.err')) -ne $true)
if ((test-path (join-path $droplocation $currentversion)) -eq $false) {$n = new-item (join-path $droplocation $currentversion) -itemtype directory}
if ((test-path (join-path $droplocation "logs")) -eq $false) {$n = new-item (join-path $droplocation "logs") -itemtype directory}
if (!(test-path (join-path $env:windir "system32\psexec.exe"))) {copy-item $psexec (join-path $env:windir "system32")}
if (!(test-path (join-path $env:windir "system32\trace32.exe"))) {copy-item $trace32 (join-path $env:windir "system32")}
if( test-path (join-path (get-location) $versiondefinition) )
if((test-path (join-path $serverbindir xppil)) -eq $true)
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "applications" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "end process," + $process.name | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "file structure" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "local admins" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "processes" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + ",qfix-gpupdate" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + ",qfix-lockpc" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + ",qfix-readerieplugin" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + ",qfix-renamepc" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + ",qfix-resetwsusclientid" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + ",qfix-updatemcafeedat" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + ",qfix-wsusdetect" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + ",qfix-wsusreport" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "remote assistance" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "remote desktop" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "remove admin," + $domain + "\" + $username | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "restart computer" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "startup items" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "system info" | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "uninstall application," + $uninapp.name | out-file -filepath $lfile -append}
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $logpc + "," + "search for pc," + $txt1.text | out-file -filepath $lfile -append}
if(test-path -literalpath $exclusionfile)
if ( test-path -literalpath $item -pathtype container ) {
if ((test-path $localpath) -eq $false)
if (test-path $logfile) {
if((test-path $logfile) -eq $true)
if (!(test-path $logfilepath))
if (!(test-path $logfilepath)) {write-warning "logfile path not found, exiting";return}
if (test-path $loggingdirectory)
if(test-path $loggingdirectory)
if ((test-path $logpath) -ne $true)
if ((test-path "$($logpath)\$($servername)") -ne $true)
if (!(test-path md5sum.exe))
if((test-path $model) -eq $true)
if ((test-path $modellist) -ne $false)
if (test-path $netlogonpath)
if (!(test-path $newfolder)) {
if (!(test-path $outpath\logquery)){
if ((test-path $outputcsvfile))
if (test-path $outputcsvfile)
if ((test-path $outputfile) -eq $true) {
if (!(test-path $outputpowershellfile))
if ((test-path $outputpowershellfile))
if (test-path $path) {
if(!(test-path $path )) {
if (test-path $path2) {
if (test-path $path64){$cmd = "cmd.exe /c psexec.exe \\$computername -d `"c:\program files (x86)\mcafee\virusscan enterprise\mcupdate.exe`" /update /quiet"}
if ((test-path -path $clientbindir) -eq $false) {$axbuilderror += "the client bin dir {0} is not a valid path." -f $clientbindir +[char]10}}
if ((test-path -path $clientbindir) -eq $false) {$axbuilderror += "the client bin dir is missing."+[char]10}}
if (test-path -path "\\$computername\c$")
if (test-path -path $csvfilepath -pathtype leaf -filter "*.csv") {
if (!(test-path -path c:\temp\))
if( (test-path $path) -eq $true)
if((test-path $path) -eq $true)
if (test-path -path $_ -erroraction silentlycontinue) {
if ((test-path -path $filename) -ne $true)
if ((test-path -path $filepath -pathtype leaf)) {
if ((test-path -path $fullpath) -ne $true)
if(!(test-path -path $includefile))
if ( test-path -path $item -pathtype container ) {
if ((test-path -path $logfolder) -ne $true)
if (!(test-path -path $logpath\old)) {new-item $logpath\old -type directory | out-null}
if (!(test-path -path $path))
if (test-path -path $path -pathtype container) {
if ((test-path -path "p:\printlogs\$($filename)") -eq $true)
if (test-path -path $profilepath) {
if (!(test-path -path $reportpath)) {
if ((test-path -path $serverbindir) -eq $false) {$axbuilderror += "the server bin dir {0} is not a valid path." -f $serverbindir +[char]10}}
if ((test-path $qfeserver))
if(test-path $regpath) {
if (test-path $removecomobject -pathtype leaf) {. $removecomobject} else {
if ((test-path $runbuildparmfile) -eq $false)
if ((test-path $runbuildparmfile) -ne $false)
if ((test-path $rundeployparmfile) -eq $false)
if ((test-path $rundeployparmfile) -ne $false)
if ((test-path $savestatefile))
if (!(test-path $scriptpath))
if (!(test-path $scriptpath)) { new-item $scriptpath -type file | out-null }
if((test-path ($serverbindir)) -eq $true)
if (test-path $sharepoint2013path)
if (test-path $supportingfunctionspath)
if (test-path "$targetvhdpath")
if (test-path $targetvhdpath)
if(test-path $tempregpath) {
if (test-path $testfile)
if (test-path $txt){
if (!(test-path "$vmhostdiffvhdpath"))
if (!(test-path "$vmhostparentvhdpath"))
if (!(test-path $vmhostparentvhdpath))
if (test-path $webconfigpath)
if (test-path $webcopypath )
if (((test-path ($xpplpath)) -eq $true) -and ((test-path (join-path $xpplpath dynamics.ax.application.dll.log)) -eq $true))
if (test-path ("$ziplocation\$computer netstat archive.zip")) {} else {new-zip "$ziplocation\$computer netstat archive.zip"}
if ($testping) {
if($tfsintegration -eq "true")
if($tfsintegration -eq $true)
if($tfslabel -ne $null)
if ($thislog)
if ($thismessage.contains($username)) {
if ($thisworkstation.username -eq $null)
if( $throughputsetting )
if( $throughputsetting['dcbenabled'] )
if ($time.count -eq 3) {$timespan = new-timespan -hours $time[0] -minutes $time[1] -seconds $time[2]}
if ($time.count -eq 4) {$timespan = new-timespan -days $time[0] -hours $time[1] -minutes $time[2] `
if ($timeleft -lt 1) {$timeleft=0}
if ($timeleft -lt $cutoff) {
if ($timeofobject.days -eq 0 -and $timeofobject.hours -eq 0){$timecomparison = $timecomparison.replace('0 hours ','')}
if ($timeofobject.days -eq 0){$timecomparison = $timecomparison.replace('0 days ','')}
if ($timeofobject.days -ne 1){$days = $days.replace('day ','days ')}
if ($timeofobject.hours -ne 1){$hours = $hours.replace('hour ','hours ')}
if ($timeofobject.minutes -ne 1){$minutes = $minutes.replace('minute ','minutes ')}
if ($timer)
if($timerows -ne $null) {
if($timers[$child.location] -ge $timeoutseconds) {
if (!$timess)
if($title -and $updateaccess -eq $true)
if ($tmfr -like "success")
if($tmp -ne $null) {
if ($tocres -like "success")
if($today)
if (($token -notlike "rem --*") -and ($token -notlike ""))
if ($topmailboxsize -gt $mbxsizethreshold)
if ($torecipient.routingtype -eq "ex") {
if ( $total ) {
if ($totalnumbermb -gt 0) {
if($totdays -gt 180)
if (($totsize -gt $bytetrans))
if ($transactionlogs.gettype().name -ne "fileinfo" -and $transactionlogs.length-1 -gt 11){
if ($transactionlogs -ne $null){
if ($transactionlogs -ne $null) {$transactionlogs | %{$messagebody += "oldest log file: " + $_.name + " last written to on " + ($_.lastwritetime).tostring().substring(0,10) + " at " + ($_.lastwritetime).tostring().substring(11,8) + "<br>"}}}
if ($transcript_enabled -eq $true)
if($transcript_enabled -eq $true)
if ($transcript_enabled -eq $true) { stop-transcript }
if($transcriptstarted -eq $true)
if ($trialrun)
&$iftrue
if ($true -eq $exclusionlist.contains($key)) { continue }
if ($true -eq $result)
if ($trvfunctions.selectednode.tag.startswith('d'))
if ($trvfunctions.selectednode.tag.startswith("f"))
if ($tsenv:osdcomputername.remove(0,$charstoremove).startswith("k"))
if ($tsenv:osdcomputername.startswith("0-"))
if ($txt1.text -eq "." -or $txt1.text -eq "localhost"){$txt1.text = hostname}
if (($txtpath) -and ($txtname)) {
if($type -ne "")
if ($types -notmatch '^ps1|psd1|psm1|ps\*$') {
if ($tzinfo -ne $null) {
if (($uac -bor 0x0002) -eq $uac) {$disabled="true"}
if (($uac -bor 0x10000) -eq $uac) {$passwordneverexpires="true"}
if ($ua_dbcounters[$ua_dbpointer].total -ge $balancedcount -and $ua_dbpointer -lt $ua_dbcounters.count-1)
if ucase(document.documentelement.getattribute("es_auditinitialized")) <> "true" then
if($udpclient)
if($udpclient.client.localendpoint.addressfamily -eq "internetwork")
if($udpclient.client.localendpoint.addressfamily -eq "internetworkv6")
if( $unbind ) {
if( $unbind) {
if( $unbindcomponentid )
if ($uninstallkeyswow6432node) {
if($uniquefilename.ispresent -eq $true)
if ($unusedlist.count -eq 0) {
if ($unverifieddomains.count -eq 0) {
if (!$up) {
if ($up)
if($updateaccess -eq $true)
if($update.autoselectonwebsites)
if($update.categories.item(0).name -match $search)
if(!($updatecategories -match $cat))
if($updatecategories -match $cat)
if($update.eulaaccepted -eq 0)
if ( $update.eulaaccepted -eq 0 ) { $update.accepteula() }
if($updateid)
if($update.installationbehavior.canrequestuserinput -eq $true)
if($update.installationbehavior.rebootbehavior -ne 0)
if($update.isbeta) {$status += "b"} else {$status += "-"}
if($update.isdownloaded) {$status += "d"} else {$status += "-"}
if($update.ishidden -ne $hidestatus)
if($update.ishidden) {$status += "h"} else {$status += "-"}
if($update.isinstalled) {$status += "i"} else {$status += "-"}
if($update.ismandatory) {$status += "m"} else {$status += "-"}
if($update.isuninstallable) {$status += "u"} else {$status += "-"}
if($update.kbarticleids -ne "")
if($update.kbarticleids -ne "") {$kb = "kb"+$update.kbarticleids} else {$kb = ""}
if ($update.supporturl -eq $null)
if ($update.supporturl -like "*support.microsoft.com*")
if ($update.supporturl.substring($update.supporturl.length-1,1) -eq "/")
if ($update.supporturl.substring($update.supporturl.length-9,9) -eq "?ln=en-us")
if($update.title -match $nottitle)
if($update.title -notmatch $title)
if($updatexml.ispresent)
if ($upndomain -eq $null) {
if ($upnsuffixes.count -eq 1) {
if ($upnsuffixes -eq $null) {
if(!$url)
if ($url -eq "")
if ($url -eq $null)
if(!$urlexists.exists) {
if(!$usbdisknumber)
if($usbdriveletter.length -eq 2)
if ($usedefaultpicture) {
if ($useimpersonation) {
if (!$user)
if ($userconfirmed) {
if ($usercreationupper -eq $successmessage)
if ($userd.length -gt 0)
if ($userdomain -eq $null)
if ($useremail) {
if ($userentry.pin -ne "") {
if ($user -eq $username)
if($userid)
if ($useridfile -ne "")
if (!($userinfo.sipaddress))
if($user.isvalid -eq $false){$output+="<th>not valid</th></tr>"}else{$output+="<th>yes</th></tr>"}
if($user.lastlogon -gt $time)
if (!$userlist){$vbmsg1 = $vbmsg.popup("noone is logged into " + $findpcusername.name.toupper(),0,"error",0)}
if (!$userlist){$vbmsg1 = $vbmsg.popup("no users were found matching your query.",0,"error",0)}
if ($userlogonduration){$uld = compare-datetime $userlogonduration "creationdate"}
if (!$usermailbox)
if ($username)
if($username) {
if ($username -and $password)
if ($username -and $password) {
if ($username -eq $null) {
if ($username.length -eq 0){$altcreds = "null"}
if ($username -like "*@*")
if ($user.name -ne $null)
if ($username -ne $null)
if (!($username)) {write-output "no username specified";return}
if ($userobjectenabled) {
if ($userobjectlastlogon = "12/31/1600 19:00:00") {
if (!($userobjectname.contains("$"))) {
if ($userobject.objectcategory.value.contains("group"))
if ($useros.caption -match "2008"){$mcafeepath = "notepad.exe \\$computername\c$\programdata\mcafee\desktopprotection"}
if ($useros.caption -match "windows 7"){$mcafeepath = "notepad.exe \\$computername\c$\programdata\mcafee\desktopprotection"}
if ($useros.caption -match "windows xp"){$mcafeepath = "notepad.exe \\$computername\c$\documents and settings\all users\application data\mcafee\desktopprotection"}
if ($userpicture -ne "")
if ($userp.length -gt 0)
if ($userprofilepictureurl -ne $userpicture)
if ($userpwdage -gt 365)
if ($user.recipienttype -like "*contact*")
if ($user.samaccountname -eq $null) {"user not found: $dn"}
if ($user.sam -eq $userneu.samaccountname)
if (!$users.contains($username))
if (!($usershashtable.contains($userdn))){
if (!$users[$username]["activesyncclients"].contains($asclient))
if (!$users[$username]["ewsclients"].contains($ewsclient))
if (!$users[$username]["webdavclients"].contains($wdclient))
if (!($userswithpolicycurrentlyappliedhashtable.contains($userdn))){
if ($usrarray[$i] -eq $usrarray2[$j]){
if (!v4props.isdhcpenabled) continue;
if (v4props == null) continue;
if($val -and $val.length -eq 4) {
if ($validatechoice) {
if ((validate-inputvariables) -eq $null)
if($_.value)
if (($value[0] -eq 1) -and (`
if($value -eq $null)
if($valueflag -and $valuefieldvalue) {
if ($value -gt 120000000000000000)
if ($value -gt 9000000000000000000)
if (($value.length -eq 16) `
if (($value.length -eq 21) -and ($attr -eq "logonhours"))
if ( ($value -like '$(*)') -or ($value -like '"*"') ) {
if ($value -ne "")
if (($value -ne "") -and ($value -ne $null)) {
if ($value -ne $oldvalue)
if($values) {
if ($values[0] -eq $null)
if ($value.startswith($exclude) -eq $true) {
if ($value.tolower() -eq "cn")
if ($value.tolower() -eq ".delete")
if ($value.tolower() -eq "distinguishedname") {$id = $k}
if (($value.tolower() -eq "samaccountname") -and ($id -eq 0)) {$id = $k}
if ($vardomainjoin -eq $true)
if($vardomainjoin -eq $true)
if($vcsdisabled -eq $true)
if ($vcsenabled -eq 0)
if ($verbose)
if ($verbose) {
if($verbose)
if($verbose -eq $false) { write-progress -id 1 -activity "updating user profiles" -status "percent updated: " -percentcomplete (($i / $count) * 100) }
if ($verbose.ispresent)
if ($verboselog) {
if ($verboselog) {$switches+="`r`n`t`t-verboselog"}
if($verbose) { write-host "[$i/$count]sharepoint user: ",$username," --> ad user: " -nonewline }
if($verbose) { write-host " --> pictureurl already set" -foregroundcolor yellow }
if($verbose) { write-host " --> pictureurl = empty" -foregroundcolor red }
if($verbose) { write-host " --> pictureurl = ",$userpicture -foregroundcolor green }
if ($verfiedfeaturenames -ne $null) {
if ($verifiedusername -ne $null) {
if( ($versiondesc.toupper().contains($target.toupper())) -or $versionmatches -icontains $target)
if ($versionfile -ne $false -and (test-path $versionfile) -ne $false)
if($version -ne $null)
if ($ver.substring(1,1) -lt 9)
if ($ver.version.major -gt 1) {$host.runspace.threadoptions = "reusethread"}
if (($viewmenu = $pgse.menus['menubar.edit']) -and (-not ($clearconsolemenuitem = $viewmenu.items['editcommand.gotodefinition'])))
if (($viewmenu = $pgse.menus['menubar.go']) -and (-not ($clearconsolemenuitem = $viewmenu.items['gocommand.functionexplorer'])))
if ($vkeycode -eq 38) {$pos--}
if ($vkeycode -eq 40) {$pos++}
if($vmbus.status -eq 'running')
if ($vm -eq $null) { throw "the vmname to create has not been specified" }
if ($vmhostobject -eq $null)
if (($vmoldpath.startswith("\\")) -and $vmoldpath -match $vm.vmname) {
if (volumeconstants.mmsyserr_noerror == details)
if ($volumeidentifier.used -gt 0)
if (volumelevel != currvolume)
if (volumelevel > volumecontrol.lmaximum)
if ($warnusers -ne $null){
if ($webapp.allowedinlinedownloadedmimetypes -notcontains ($mimetype = read-host "enter a required mime type"))
if ($webapplication)
if ($webapp.webconfigmodifications[$i].owner -eq $owner)
if ($web.hasuniqueroleassignments)
if (($webpartmanager -ne $null) -and ($webpartmanager.spwebpartconnections -ne $null))
if($webs.count -ge 1 -or $webs.count -eq $null)
if ($websres -like "success")
if ($websvcinstalldirregkey -ne $null) {
if ($weekrepeat -eq -1) {
if ($wellknownpolicytype -ne "dialplan") {
if ($whatif)
if ($whatif) {
if(!($whatif))
if($whatif.ispresent) {
if ($whatifstring -eq "false"){ $whatif = $false }
if ($whenchanged -lt $dateoffset -and $adobject.properties.adspath -notlike "*ou=servers*")
if (!$wifi)
if ($wikifile -eq $false)
if ($windowsauthenticationsectionenabled)
if($windowsserver2012mediapath -ne "") {
if($windowsupdate)
if ($winrmversion -eq "2.0") {
if ($wlistusers -ne $null){
if ($wmi -ne $null)
if ($wmi_os.buildnumber -ge 6001){
if ($wmipcusername.indexof("\") -ne -1){$wmipcusername = $wmipcusername.remove(0,$wmipcusername.lastindexof("\")+1)}
if($w -ne $null)
if($words[$x].length -gt 1) {
if ($wp.gettype().tostring() -eq $varnamespace)
if ($writetoconsole) {
if ($writetoconsolestring -eq "true"){ $writetoconsole = $true }
if($writetofile -eq $true)
if($writetofile -eq $true){add-content -path $outputpath -value "amount of webs updated:$($webcount)"; add-content -path $outputpath -value "amount of lists updated: $($listcount)"}
if($writetofile -eq $true){add-content -path $outputpath -value " - $($list.title) updated"}
if($writetofile -eq $true){add-content -path $outputpath -value "website $($web.url)"}
if ($writetoscreen) {
if ($writetoxml -eq $true) {
if ($wsusdownstreamservers.count -gt 0)
if ($wsusfile -eq "report"){$wsuslog = "$wsuspath\softwaredistribution\reportingevents.log"}
if ($wsusfile -eq "updates"){$wsuslog = "$wsuspath\windowsupdate.log"}
if ( $wsus_targetgroup_validation -ne $null ) {
if ( $wsus_targetgroup_validation -ne $null ){
if ($wuinstallstatus -match "no updates are available, nothing to do!") {write-host "no updates are available, nothing to do!"}
if ($x -eq ($fqdnarray.length - 1)) { $separator = "" }
if($x -eq $null)
if (("x","exit","n","no") -contains $userinput) {
if( ($xmldata.dsversion.exchange | ?{$_.displayname -imatch $targetversion} | measure-object).count -eq 1 )
if( ($xmldata.selectnodes("/dsversion/exchange[@$category='$version']")).count -eq 0 )
if (!$xml.mapsource.customxslt)
if (($xmlstarted -eq $true) -and ($line.contains('</xml>')))
if ($xmlstarted -eq $true) {$xmlcontent += $line}
if ($yesdefault) {
if you have any questions about how to change your password, please contact the helpdesk at <it@company.com>.
if (("y","yes") -contains $userinput) {
if (("y","yes","n","no","x","exit") -notcontains $userinput) {
if ($zip -like $null)
$ignore = @(
"ignore" = 5
"&ignore = ignore the error and continue" }
ignorenetwork = $hvclusterignorenetwork
$i= $i+1
i = i + 1
$iis6filter = 'apppoolidentitytype = 3'
$iis6filter = "wamusername like '$($useraccount.replace('\','\\').replace('*','%'))'"
$iis7filter = 'processmodel.identitytype = 3'
$iis7filter = "processmodel.username like '$($useraccount.replace('\','\\').replace('*','%'))'"
$iis.commitchanges()
$iis = new-object microsoft.web.administration.servermanager
iisreset
$i = $j + 1
$i = $line.lastindexof([char]9)
$ilo=get-wmiobject -class hp_managementprocessor -computername $server -namespace root\hpq
"imaddress" {
"imaddress1","businessphone","businessfax","homephone",`
$imaddresskeys = @()
$imagedate = [system.management.managementdatetimeconverter]::todatetime($ros.installdate)
$imagefile = "$env:temp\aduser.jpg"
$imagelist.images.add("document", [system.drawing.image]::fromfile("$psscriptroot\resources\document.ico"))
$imagelist.images.add("function", [system.drawing.image]::fromfile("$psscriptroot\resources\function.ico"))
$imagelist.images.add("gotodefinition", [system.drawing.image]::fromfile("$psscriptroot\resources\gotodefinition.ico"))
$imagelist.images.add("redx", [system.drawing.image]::fromfile("$psscriptroot\resources\redx.ico"))
$imagelist.images.add("refresh", [system.drawing.image]::fromfile("$psscriptroot\resources\refresh.ico"))
$imagelist.imagesize = new-object system.drawing.size(16, 16)
$imagelist = new-object system.windows.forms.imagelist
$imagesize = (get-childitem $imagepath).length
$image_string = $file.fullname.tostring().trim()
$imedia = $imedia - ($h*10000)
$imedia = $imedia - ($m*100)
$img1.lockaspectratio = $true
$img1.scaleheight($factor, $relativetooriginalsize, $scale)
$img1 = $sh.shapes.addpicture($imgpath, $linktofile, $savewithdocument, $left, $top, $width, $height)
$img2.drawingobject.width *= 3
$img2.flip($msofliphorizontal)
$img2.flip($msoflipvertical)
$img2 = $img1.duplicate()
$img2.incrementrotation(6)
$img2.left = $cellwidth * 4
$img2.lockaspectratio = $true
$img2.rotation = 0
$img2.rotation = 45
$img2.rotation = -45
$img2.top = $cellheight * 4
$img3.autoshapetype = $msoshapedoublewave
$img3.drawingobject.height = $cellheight * 6
$img3.drawingobject.width = $cellwidth * 3
$img3 = $img1.duplicate()
$img3.incrementleft($cellwidth * 6)
$img3.incrementrotation(-6)
$img3.left -= 12
$img3.reflection.size = 50
$img3.reflection.type = 1
$img3.top -= 12
$img4.autoshapetype = $msoshapedoublewave
$img4.glow.color = $rgbwhite
$img4.glow.radius = 5
$img4.glow.transparency = .3
$img4 = $img1.duplicate()
$img4.left += $cellwidth / 12
$img4.top = $cellheight * 4
$imgpath = join-path $scriptpath ensign.jpg
<img src="$image" width="300" />
<img src="$image" width="400" />
-immutableid $base64 `
$impersonationuserid = new-object microsoft.exchange.webservices.data.impersonateduserid(`
"implementation type: "+$item.implementationtype+"<br>"+
$implementer = "peter pan"
$implementerrelationship = get-scsmrelationshipclass -name system.workitemassignedtouser$
'implicit' {
import-axcode $fileinfo
import-buildmodels
import-clixml -path $qfe.fullname |select-object -property qfeid, kb, url, os, arch
import-clixml -path $qfe.fullname |where-object {$_.os -like $localos} |select-object -property qfeid, kb, url, os, arch
import-csv "$csvpath" | foreach {
import-csv $domainfile | foreach-object {$domainsidshash.add($_.domain,$_.sid)}
import-csv $domainfile | foreach-object {$domainsidshash.add($_.sid,$_.domain)}
import-csv .\input.csv -delimiter ';' | foreach-object {
import-csv $inputgroups | foreach-object {
import-csv logonhours.csv | foreach {
import-csv $mapfile | foreach-object {$sidmaphash.add($_.oldsid,$_.newsid)}
import-csv $newpath | foreach-object {
"imported module $script.fullname "
import-localizeddata -bindingvariable messages
import mapfile.
import-module activedirectory
import-module -assembly $assem
import-module bitstransfer
import-module 'c:\program files\modules\hyperv\hyperv.psd1'
import-module "c:\windows\assembly\gac_msil\microsoft.lync.model\4.0.0.0__31bf3856ad364e35\microsoft.lync.model.dll"
import-module dcbqos
import-module dnsclient
import-module failoverclusters
import-module grouppolicy
import-module grouppolicy -erroraction silentlycontinue
import-module .\helper\cloud.psm1 -force -erroraction stop
import-module "$importpsmodule`\importpsmodule"
import-module jh-weather
import-module $modulefilepath
import-module msonline
import-module -name "c:\program files\microsoft\exchange\web services\1.1\microsoft.exchange.webservices.dll"
import-module -name $name -erroraction 'silentlycontinue'
import-module netadapter
import-module netlbfo
import-module netqos
import-module nettcpip
import-module netwnv
import-module operationsmanager -erroraction stop
import-module remoteaccess -erroraction silentlycontinue
import-module $script.fullname -ea stop -disablenamechecking -force
"import module server manager"
import-module servermanager
import-module smlets
import-module smlets -force
$importok
$importoverrideparams.set_item($line[0].trim(),$line[1].trim())
$importpsmodule = (gci $extractdir -recurse -filter "importpsmodule.psm1").directoryname
import-pssession $lyncsession | out-null
import-pssession $session
import-pssession $session -allowclobber | out-null
import-pssession -session $o365session
"inaccessible link files" = ($sisresult[($sisresult.count)-2]).trimstart("inaccessible link files:")
inbound = @('192.168.0.0\16', '*.*', '*:*')
$inboxcount = (get-mailboxfolderstatistics $mailbox.alias -folderscope inbox).itemsinfolderandsubfolders
$incidentclass = get-scsmclass -name system.workitem.incident$
$incidents.count
$incidents = @(get-scsmobject -class $incidentclass | where {($_.status -eq $active -and $_.tierqueue -eq $tierqueue -and ($_.createddate) -lt $beforedate)})
$incidents= @(get-scsmobject -class $incidentclass | where {($_.status -eq $status -and $_.lastmodified -lt $beforedate)})
$incidentstatus = 'active'
. $includefile
$includefile = "c:\data\scriptingguys\conversionfunctions.ps1"
. .\includes\activedirectorymanagement.ps1
. .\includes\computermanagement.ps1
incomingnetworkcostpergb = 10
$incomplete = get-mailboxexportrequest -batchname $batchname | where {$_.status -ne "completed"} | get-mailboxexportrequeststatistics | format-list
$incomplete | out-file -filepath "$($reportshare)\$($batchname)_incomplete_report.txt"
$index = 1
$index = $database.contentindexstate
$indexedcount = $layer.selectnodes("./filters/item[not(flags/item = ""fwpm_filter_flag_boottime"") and flags/item = ""fwpm_filter_flag_indexed""]").count
"index: $(get-adapterindex -networkinterface "wireless network connection")"
$index = (gwmi win32_networkadapter | where {$_.netconnectionid -eq $networkinterface}).interfaceindex
$indresult = new-object psobject -property @{
$info
$info = invoke-expression $svncommand
$infolog = $logfile.axaptaautorun.infolog.split([char]10)
$infomsg = $infomsg -replace "placeholder01",$($spwebapplication.name)
$infomsg = $messages.existedmimetypes
$info = new-object psobject -property `
$information += "password = " + $password
$information = "samaccountname = " + $samaccountname + "`r`n`r`n"
" infrastructure master: " + $domain.infrastructureroleowner
infrastructureowner = $domain.infrastructureroleowner
$inheritancetype = [system.directoryservices.activedirectorysecurityinheritance]::none
"inherited" | out-file -filepath $logfile -append
$inh="<table border=""1"" bordercolor=""
$inh+="</tr></table><br>"
$inh+="</tr><tr><td>$($mailbox.name) ( $($mailbox.primarysmtpaddress) )</td>"
$iniobj = @{}
$iniobj[$key] = $value
$iniobj[$section] = @{}
$iniobj[$section][$key] = $value
initial catalog=$db;integrated security=sspi")
$initialformwindowstate2 = $form2.windowstate
$initialformwindowstate2 = new-object system.windows.forms.formwindowstate
$initialformwindowstate = $form1.windowstate
$initialformwindowstate = new-object system.windows.forms.formwindowstate
-initializationscript {add-pssnapin microsoft.exchange.management.powershell.admin -erroraction "silentlycontinue"} `
"initials" = "initials";
$initialwebscope = start-spassignment
$initialwebscope | stop-spassignment
$initwebadmin = [system.reflection.assembly]::loadwithpartialname("microsoft.web.administration")
$inlineattachment.contentid = $filename
$inlineattachment = $emailmessage.attachments.addfileattachment($filename,$inlineattachmentpath)
$inlineattachment.isinline = $true
inner join
$inparams = $colclass.psbase.getmethodparameters($method)
$inparams.containernodeid = "0"
$inparams.containernodeid = $member.containernodeid
$inparams.instancekeys = $collectionid.collectionid
$inparams.instancekeys = $meteringid.securitykey
$inparams.instancekeys = $packageid.packageid
$inparams = $mtrclass.psbase.getmethodparameters($method)
$inparams.objecttype = $objecttype
$inparams = $pkgclass.psbase.getmethodparameters($method)
$inparams.targetcontainernodeid = $targetcontainernodeid.containernodeid
input {
$input1=get-content -path c:\report\vc_list.txt
$input.current + 1
$inputfile,
$inputfile = "dnsrecords.csv"
$inputgroups = $path + "\input.csv"
$inputisalreadyipaddress = [system.net.ipaddress]::tryparse($destination, [ref]$address)
$input = "$logdir\$logfile"
$input = read-host "are you sure you wish to proceed? (y/n)"
$inputscript,
$input | %{$servers += $_}
inputstream.copyto( gzstream );
$inputtype = new-object -com msutil.logquery.eventloginputformat
$insert = "insert $table values ('$name','$ou','$dn','$pwdls','$os','$sp')"
"inside write-path the `$path variable is equal to $path"
install-adcscertificationauthority -catype enterpriserootca -force
install-addsdomaincontroller -domainname $domaintocreatefqdn -installdns -credential $cred_credential -safemodeadministratorpassword $pwd_safemodeadministratorpassword -sitename $sitename
install-addsdomain -parentdomainname $domaintocreatefqdn -newdomainname $domaintocreate -installdns -domainmode "win2008r2" -safemodeadministratorpassword $pwd_safemodeadministratorpassword -credential $cred_credential -domaintype treedomain -sitename $sitename
install-addsdomain -parentdomainname $parentdomainname -newdomainname $domaintocreate -installdns -domainmode "win2008r2" -safemodeadministratorpassword $pwd_safemodeadministratorpassword -credential $cred_credential -domaintype childdomain -sitename $sitename
install-addsforest -domainname $domaintocreatefqdn -installdns -domainmode "win2008r2" -forestmode "win2008r2" -safemodeadministratorpassword $pwd_safemodeadministratorpassword
install-adfsfarm -certificatethumbprint $certificate.thumbprint `
"install cert for $fqdn"
"install cert for $sslfqdn "
install-dependentbinaries
$installededition = $null
$installedlanguage = [microsoft.sharepoint.spregionalsettings]::globalinstalledlanguages | where-object { $_.lcid -eq $sitelanguage }
$installedlanguage = [microsoft.sharepoint.spregionalsettings]::globalinstalledlanguages | where-object { [system.globalization.cultureinfo]::getcultureinfo($_.lcid).name -eq $locale }
$installedversion = $descriptionbts2006r2
$installedversion = $descriptionbts2006r2sp1
$installedversion = $null
"installing netmon"
"installing windbg"
$installitems = get-childitem $isodrive -recurse -file
$installmenu
$installmenu,
install-model $fileinfo.directory.fullname $fileinfo.name
install-model $folder $file.name
install-model $folder $line.trim()
installnetmon
$installpath = $choices[$selectedstatus]
$installpath = $null
$installpath = read-host "specify installation full path. type `"show`" to select from standard location."
$installresult = install-windowsfeature $featurename
$installresult = $objinstaller.install()
$installresults = install-qssigninassistant
install-spsolution -identity $targetsolution -language $solutionlanguage -gacdeployment:$solutiongacdeployment -caspolicies:$solutioncaspolicies -force:$solutionforce -local:$solutionlocal -whatif:$whatif
install-spsolution -identity $targetsolution -webapplication $webapplication -language $solutionlanguage -gacdeployment:$solutiongacdeployment -caspolicies:$solutioncaspolicies -force:$solutionforce -local:$solutionlocal -whatif:$whatif
installupdates
$instance = get-scomclassinstance -name $agent
$instance.getshareinfo($server,$includeadmin)
$instance = $massembly.createinstance("enumfiles")
$instancename = (get-itemproperty (get-item ($subpath)).pspath).instancename
"instancetype" = 4;
instructions for ntfs sid history clean up:
instructions for sid history documentation:
[int]
{$int1++}
$int1 = 0
{$int2++}
$int2 = 0
{$int3++}
$int3 = 0
"int32"
[int32] $imedia = [system.convert]::toint32($media);
[int32]$shutdownmethod = 0
{$int4++}
$int4 = 0
{$int5++}
$int5 = 0
"int64"
[int64] $inttotalrecextsize = $inttotalrecext = 0
[int64] $inttotalrecintsize = $inttotalrecint = 0
[int64] $inttotalrecsize = $inttotalrec = 0
[int64] $inttotalsentextsize = $inttotalsentext = 0
[int64] $inttotalsentintsize = $inttotalsentint = 0
[int64] $inttotalsentsize = $inttotalsent = 0
[int]$action = 0;
[int]$alertthreshold=3
[int]$archivestatus = &{
$intatlocation = [int]$sharedmailboxusername.indexof("@")
[int]$balancedcount=0;
int bomsize;
int control = marshal.sizeof(typeof(volumestructs.mixer));
int controltype = volumeconstants.mixercontrol_controltype_volume;
[int] $count = 0
int count = 0;
[int] $curfileidx = 0
[int]$currentlogginglevel = (get-itemproperty -path $regpath).$diagnosticsubkey
int currvolume;
[int]$daterangerepeat=1,
[int]$dayoffset
[int]$dayofmonth,
[int]$dayofyearrepeat=1,
[int]$deci = $i
[int]$defaultoption = 0
int details;
"integer" {$type = "2"}
intended to be used in a production environment. this sample code and any
[int]$endtime,
[int][environment]::setenvironmentvariable($envvargroupcount, 0, "user")
[int][environment]::setenvironmentvariable($envvargroupcount, $incfailvar, "user")
[int][environment]::setenvironmentvariable($envvargroupfail, 0, "user")
[int][environment]::setenvironmentvariable($envvargroupfail, 1, "user")
$interfaceindex,
$interfacemetric
$interfacemetric | % {
-interfacemetric $interfacemetric `
$interfacemetric = $metrics | % { interfacemetric @_ }
$interface = $netroute | get-netipinterface
$interfacmetricvalue
$internalipv6prefix = $raconfig.internalipv6prefix
internal static nativecredential getnativecredential`(credential cred`)
internal static partial class nativemethods
int err = nativemethods.dhcpcapiinitialize(out version);
int err = nativemethods.dhcprequestparams(
$interval= 15
[int]$filesfailed = 0
[int]$filesnumber = 0
int flags = 0x0;
[int]$foldersfailed = 0
[int]$foldersnumber = 0
[int]$free = $_.freespace / 1mb
[int]$global:totalgroupschecked = 0
[int]$global:totalgroupsupdated = 0
[int]$global:totalsiteswithwebpartfound = 0
[int]$global:totalusersnoupdateneeded = 0
[int]$global:totalusersprocessed = 0
[int]$global:totalusersupdated = 0
[int]$global:totaluserswithoutpicture = 0
[int]$incfailvar = $alertthreshold + 1
[int]$incfailvar = [environment]::getenvironmentvariable($envvargroupcount, "user")
[int]$incfailvar = $incfailvar + 1
[int]$interval,
[int]$itemid,
[int] $language,
[int]$largeemailsize
[int]$limityear = 2010
[int]$logginglevel = 0,
[int]$mailboxsize = $tempmbsize.substring(0,($tempmbsize.length - 2))
[int]$mask = (($subnet.split(",")[0]).split("=")[1]).split("/")[1]
int mcdetailssize = marshal.sizeof(typeof(volumestructs.mixerdetails));
int mcdetailsunsigned = marshal.sizeof(typeof(volumestructs.unsignedmixerdetails));
int mcsize = 152;
[int]$messagelength = $message.length;
int mixercontrol;
[int]$monthrepeat=1,
`(int`)ncred.credentialblobsize `/ 2)`;
[int] $numberofdays = 30,
[int]$oct3 = $scope.split(".")[2]
into '$output'
int outputidx = 0;
[int]$pagesize=100
[int]$pagesize=100,
[int[]]$ports = @(21,22,23,53,69,71,80,98,110,139,111,389,443,445,1080,1433,2001,2049,3001,3128,5222,6667,6868,7777,7878,8080,1521,3306,3389,5801,5900,5555,5901),
intptr buffer
intptr buffer,
intptr buffer = marshal.allochglobal((int)buffersize);
intptr classid,
[intptr]$dulicatetokenhandle = [intptr]::zero
[intptr]$handle=$(get-process -id $pid).mainwindowhandle
[intptr]$hlsasstoken = [intptr]::zero
intptr hserver,
[intptr]$htoken = [intptr]::zero
intptr pcredential = intptr.zero;
intptr pcredentials = intptr.zero;
intptr phthread,
intptr policyhandle
intptr policyhandle,
intptr ptemp = intptr.zero;
intptr recdparamsptr = marshal.allochglobal(marshal.sizeof(recv));
intptr reserved,
intptr token
intptr.zero,
[int]$quarterrepeat=1,
[int]$realertthreshold=26
[int]$recurrencerangeendafter,
[int]$response = 0;
[int] $results = 0
[int]$revisionnumber,
[int] $rootprogressid = 1
$introw = 2
$introw = $introw + 1
int rtn = 0;
[int]$ruleprotocol,
[int]$script:files = 0
$ints = get-wmiobject -erroraction silentlycontinue -computername $name `
[int]$signintimeout=10
[int]$throttlelimit = 64,
[int]$timeout = 100
[int]$timeoutseconds = 180,
[int]$titlelength = $title.length;
[int]$totalbytes = ($oabitems | measure-object -property length -sum).sum;
[int] $totalfiles = $filepaths.count
[int]$totalkbytes = $totalbytes/1024;
[int]$totalmailboxes=0;
$inttotalrec++
$inttotalrecextsize = $inttotalrecext = 0
$inttotalrecextsize = [math]::round($inttotalrecextsize/1mb, 0)
$inttotalrecextsize += $_.totalbytes; $inttotalrecext++
$inttotalrecintsize = $inttotalrecint = 0
$inttotalrecintsize = [math]::round($inttotalrecintsize/1mb, 0)
$inttotalrecintsize += $_.totalbytes; $inttotalrecint++
$inttotalrecsize = $inttotalrec = 0
$inttotalrecsize = [math]::round($inttotalrecsize/1mb, 0)
$inttotalrecsize += $_.totalbytes
$inttotalsent++
$inttotalsentextsize = $inttotalsentext = 0
$inttotalsentextsize = [math]::round($inttotalsentextsize/1mb, 0)
$inttotalsentextsize += $_.totalbytes; $inttotalsentext++
$inttotalsentintsize = $inttotalsentint = 0
$inttotalsentintsize = [math]::round($inttotalsentintsize/1mb, 0)
$inttotalsentintsize += $_.totalbytes; $inttotalsentint++
$inttotalsentsize = $inttotalsent = 0
$inttotalsentsize = [math]::round($inttotalsentsize/1mb, 0)
$inttotalsentsize += $_.totalbytes
int type = volumeconstants.mixercontrol_controltype_volume;
[int]$weekrepeat=1,
$inusememory = $physicalmemory - $availablememory
$invalidchars = @("\",",",":","*","?","""","<",">","|")
$invalidgroups=($alldistgroups | ?{$_.isvalid -like "false"} | measure-object).count
$invalidgroups=($groups | ?{$_.isvalid -like "false"} | measure-object).count
$invocation = (get-variable myinvocation -scope 0).value
invoke-command -computername $computername -scriptblock {net start remoteregistry} -erroraction silentlycontinue | out-null
invoke-command -computername $computername -scriptblock {net start termservice} -erroraction silentlycontinue | out-null
invoke-command -computername $computername -scriptblock {net start umrdpservice} -erroraction silentlycontinue | out-null
invoke-command -computername $computername -scriptblock {net stop termservice} -erroraction silentlycontinue | out-null
invoke-command -computername $computername -scriptblock {net stop umrdpservice} -erroraction silentlycontinue | out-null
invoke-command -computername exhcscom2 -filepath \\exhcscom2\c$\scripts\disablescomffrts.ps1
invoke-command -computername exhcscom2 -filepath \\exhcscom2\c$\scripts\enablescomffrts.ps1
invoke-command -computername $hosts[0] -credential $cred {
invoke-command -computername $hosts[1] -credential $cred {
invoke-command -computername $hosts[2] -credential $cred {
invoke-command -computername $mailboxserver -scriptblock {
invoke-command -computername $_.name -credential $credential -scriptblock {
invoke-command -computername $_.name -scriptblock {
invoke-command -computername $servername -scriptblock $command
invoke-command -computername $vm.computername -scriptblock {remove-item -path $using:vmoldpath -recurse -force}
invoke-command -computer $strcomputer { get-process -name ccmrepair* | stop-process -force }
invoke-command @invokecommandsplat -scriptblock {
invoke-command @param
invoke-command -session $hvsessiontable[$_.name] -filepath .\helper\configurehypervsettings.ps1 -argumentlist @(
invoke-command -session $sessiontable[$_.name] -filepath .\helper\configurehypervsettings.ps1 -argumentlist @(
$invokecommandsplat = @{'computername'=$vmhost}
$invokecommandsplat = @{'computername'=$vmhost;'authentication'='credssp';'credential'=$credential}
invoke-command $sscript
invoke-command {wuauclt.exe /detectnow}
invoke-expression($bootconfig.bootcode)
invoke-expression $cmd
invoke-expression $cmddelete
invoke-expression -command $cmd
invoke-expression -command $firewallportclosing
invoke-expression -command $firewallportopening
invoke-expression -command "$pwd\$script $parms"
invoke-expression -command $sharedhostcmd
invoke-expression -command $shutdownscript
invoke-expression -command $standalonecmd
invoke-expression $exp
invoke-expression $newdgcmd | out-null
invoke-expression $newusercmd
invoke-expression "$posheditor $file"
invoke-expression $querystring
invoke-expression "schtasks /query /s $computer $screds /fo csv /v" -erroraction stop | convertfrom-csv | where-object $taskfilter | foreach-object {
invoke-expression $svncommand
invoke-expression $tsvncommand
invoke-item $destfolder
invoke-qscommand -program "$env:systemroot\system32\inetsrv\appcmd.exe" -argumentstring "set config '$script:adfssite/adfs/ls' -section:system.webserver/security/authentication/windowsauthentication /enabled:true /commit:apphost"
invoke-qscommand -program "$env:systemroot\system32\inetsrv\appcmd.exe" -argumentstring "set config '$script:adfssite/adfs/ls' -section:system.webserver/security/authentication/windowsauthentication /~providers /commit:apphost"
invoke-qscommand -program "$env:systemroot\system32\inetsrv\appcmd.exe" -argumentstring "set config '$script:adfssite/adfs/ls' -section:system.webserver/security/authentication/windowsauthentication /+`"providers.[value='negotiate']`" /commit:apphost"
invoke-qscommand -program "$env:systemroot\system32\inetsrv\appcmd.exe" -argumentstring "set config '$script:adfssite/adfs/ls' -section:system.webserver/security/authentication/windowsauthentication /+`"providers.[value='ntlm']`" /commit:apphost"
invoke-sqlcmd -query "$query" -serverinstance "$sqlserver" -verbose
invoke-standby
invoke-wmimethod -computername $comp -class win32_process -name create -argumentlist "$($dvdriveletter):\support\x86\setup.exe /quiet /norestart" -credential $cred
i = objheader.sourceindex
$ip2=$nic.ipaddress[1]
$ip = $addr
$ipaddress,
ipaddress = ''
ip_address = 8
ipaddress = "$a.$b.$c.$d";
$ipaddresses = (get-wmiobject -class win32_networkadapterconfiguration -filter "ipenabled=true").ipaddress | select-string -pattern '^.*\..*\..*\..*$'
ipaddress = (get-wmiobject -class win32_networkadapterconfiguration -computername ([string]$workstation.name) |where-object {$_.ipaddress -like '10.133.*'}).ipaddress
-ipaddress $hvnode.node1.address `
-ipaddress $hvnode.node1.clusternet.address `
-ipaddress $hvnode.node1.livemigrationnet.address `
-ipaddress $hvnode.node1.managementnet.address `
-ipaddress $hvnode.node2.address `
-ipaddress $hvnode.node2.clusternet.address `
-ipaddress $hvnode.node2.livemigrationnet.address `
-ipaddress $hvnode.node2.managementnet.address `
-ipaddress $hvnode.node3.address `
-ipaddress $hvnode.node4.address `
ipaddress = $ipaddress
"ip address: " + $ip.ipaddress[0]
"ipaddress : "+ $netinterface.ipaddress
ipaddress = [net.ipaddress]$event.properties[19].value
$ipaddress = read-host 'enter the ip address of the internal adfs server'
$ipaddress = read-qslistchoice -choices $ipaddresses -prompt 'main adfs service ip address' -title 'local ip addresses'
-ipaddress $storagenode.node1.address `
-ipaddress $storagenode.node2.address `
$ipaddress = "$($subnet).$($octet)"
$ipaddress = [system.net.ipaddress]$mapitem.ip
ipconfig /flushdns | out-null
-ipdstprefixmatchcondition $clustersubnetmatch `
$ipenabled = $false
$ip = get-ipobject
$ip = get-ipobject -ipenabled $false
$ip = get-ipobject -ipenabled $ipenabled
$ip = get-wmiobject -class win32_networkadapterconfiguration -filter "ipenabled = $true"
ipinterfaceproperties props = nic.getipproperties();
ip = $ip
ip = $ip.address
ip = $mapitem.ip
ipmo activedirectory
ipmo microsoft.powershell.security
ipmo servermanager
$ip=$nic.ipaddress[0]
$ip = $null
$ip = $obj2.ipaddress
$ipobj = get-netipaddress -interfacealias "private internet" -addressfamily ipv4 -policystore activestore
ipport = $event.properties[20].value
ip = request.servervariables("remote_addr")
$ip = $rip[0].ipaddress
$ip = $rip.ipaddress
$ipsetting = @{
$ip = $splitline[-1]
$ip = [string]$obj1.ipaddress
$ip = [system.net.dns]::gethostaddresses("$computername")
$ip = test-connection -computername $ipaddress -count 1 -erroraction stop
$ipv4add = $ipobj.ipv4address
$ipv4address2 = $nic.ipv4address2
$ipv4address2 = $null
$ipv4address = $nic.ipv4address
$ipv4address = $null
ipv4address = $pingstatus.ipv4address
$ipv4dns2 = $nic.ipv4dns2
$ipv4dns2 = $null
$ipv4dns = $nic.ipv4dns
$ipv4dns = $null
$ipv4gateway = $nic.ipv4gateway
$ipv4gateway = $null
ipv4interfaceproperties v4props = props.getipv4properties();
$ipv4prefixlength = $nic.ipv4prefixlength
$ipv4prefixlength = $null
$ipv4subnetmask2 = $nic.ipv4subnetmask2
$ipv4subnetmask2 = $null
$ipv4subnetmask = $nic.ipv4subnetmask
$ipv4subnetmask = $null
$ipv6address = $nic.ipv6address
$ipv6address = $null
$ipv6dns2 = $nic.ipv6dns2
$ipv6dns2 = $null
$ipv6dns = $nic.ipv6dns
$ipv6dns = $null
$ipv6gateway = $nic.ipv6gateway
$ipv6gateway = $null
$ipv6prefixlength = $nic.ipv6prefixlength
$ipv6prefixlength = $null
ipversion = $entry.ipversion
ipversion = $item.ipversion
$ip="wmi error collecting data"
$irt = $flow.isremotetest
$isadded = select-string -path $profilepath -pattern "[connect|disconnect]-oscexchangeonline" -quiet
$isadfs = get-service adfssrv
$isadmin = $prp.isinrole($adm)
$isalive = test-connection -computername $computername -count 1 -erroraction silentlycontinue
"is a new bes user, and is being set with the pin of" $userentry.pin "`b."
$iscredspecified = ($credential -and ($credential -ne ([system.management.automation.pscredential]::empty)))
$iscsi_initiator = "root\iscsiprt\0000_0"
$iscsi_mpio = "0x00000002"
$iscsi_port = "3260"
iscsiportal = $iscsi_portal
$iscsi_portal = $mapitem.iscsi_portal
$iscsiportid = ($portallist.portalinformation | where-object {$_.ipaddr.ipv4address -match $ipaddress.address} | select-object -property port)
iscsiport = $iscsiportid.port
iscsitarget = $iscsi_target
$iscsi_target = $mapitem.iscsi_target
$isdelayexceeded = $delaycount -lt $now
$isdelayexceeded = $false
"isdn" = "phone:isdn";
isdownloaded = $update.isdownloaded
$iselevated = $windowsprincipal.isinrole($administrator)
$isexist = test-path -path $attachmentpath -pathtype leaf
"is function deterministic : "+$item.isdeterministic+"<br>"+
"is function schema bound :"+$item.isschemabound+"<br>";
$isin = 0
$isnat = $machine.isnat
isnull(si.[name],'heap') as index_name,
$isodrive = ((get-diskimage -imagepath $imagepath | get-volume).driveletter) + ":"
issectionexpandedbydefault = (right(objheader.classname, len("_expanded")) = "_expanded")
"issuing: disable-netadapter private corpnet"
"issuing: disable-netadapter private homenet"
"issuing: remove-netipaddress -addressfamily ipv6 -ipv6address $passedip "
$isvalidationapproved = $false
$isvalidationapproved = $true
$isvalidinput=[system.net.ipaddress]::tryparse($subnetmask, [ref]$address)
"is view schema bound :"+$item.isschemabound+"<br>"+
{$itanium | %{$_.decline()}}
$item = $_
$item2 = new-object system.windows.forms.listviewitem($pc.name)
$item2.tag = $pc
$itemclassfilter = new-object microsoft.exchange.webservices.data.searchfilter+isequalto(`
$item = createresultobject
$itemelement = $entryelement.appendchild($myxml.createelement("wideitem"))
$itemelement = $itemselement.appendchild($myxml.createelement("listitem"))
$itemelement = $itemselement.appendchild($myxml.createelement("tablecolumnitem"))
$item = get-item -literalpath $item -force
$item = get-item -path $item -force
$item = get-itemproperty $copyfrom
$item = $item -replace "\\device\\", ""
$item = $list.items | ? {$_.name -eq $page }
$item = $literalpath
$item.message += " : $($codes.item($matches.code))"
$item.message -match $code |out-null
$itemname = $item.name
$item = new-object system.windows.forms.listviewitem($admin.domain)
$item = new-object system.windows.forms.listviewitem($app.name)
$item = new-object system.windows.forms.listviewitem($d.name)
$item = new-object system.windows.forms.listviewitem($start.caption)
$item = new-object -typename psobject -property @{
$itemnewtoolstripmenuitem.add_click({click-itemnewtoolstripmenuitem -sender $itemnewtoolstripmenuitem -eventarg $_})
$itemnewtoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
$itemnewtoolstripmenuitem.name = "itemnewtoolstripmenuitem"
$itemnewtoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
$itemnewtoolstripmenuitem.text = "new item"
$itemnewtoolstripmenuitem.visible = $true
$itemno = $choices.count
$item = $path
$itempropertyset = new-object microsoft.exchange.webservices.data.propertyset(`
$item.resetroleinheritance()
$items = @() $duplicates = @() $duplicateitems = @() $duplicateshelper = @()
$itemselement = $entryelement.appendchild($myxml.createelement("listitems"))
$itemselement = $entryelement.appendchild($myxml.createelement("tablecolumnitems"))
$itemsizebytes = ([microsoft.exchange.data.bytequantifiedsize]$mbxstats.totalitemsize).tobytes()
$itemsizestring = $objmailbox.issuewarningquota.tostring()
$itemsizestring = $objmailbox.prohibitsendquota.tostring()
$itemsizestring = $objmailbox.prohibitsendreceivequota.tostring()
$itemsizestring = $objmailboxstats.totalitemsize.tostring()
$itemspec = new-object microsoft.teamfoundation.versioncontrol.client.itemspec ($tfsworkspace, 2)
$items += $record
$item.subitems.add($admin.name)
$item.subitems.add($app.installdate)
$item.subitems.add($d.executablepath)
$item.subitems.add($start.command)
$items = $zipitem.items()
$item.tag = $admin
$item.tag = $app
$item.tag = $d
$item.tag = $start
$item.update()
$itemvalue
$itemview = new-object microsoft.exchange.webservices.data.itemview(100)
$itemview = new-object microsoft.exchange.webservices.data.itemview($pagesize)
$itemview.offset += $pagesize
$itemview.propertyset = $itempropertyset
$itemview.propertyset = $propertyset
$itemview.traversal = [microsoft.exchange.webservices.data.itemtraversal]::shallow
$item.visible = $false
it has a good performance for blob data less then ~ 1 gb. existing files will be overwritten.
$itomonth=1
$itomonth=$ifrommonth+1
$itoyear=$ifromyear
$itoyear=$ifromyear+1
"it was done against " + $lastuseddc + ""
"it worked"
$iv = $flow.isvalid
$j++
$j=0
$j = 0
$j = 2
$j = $j + 1
$jobcount++
$jobcount = 1
$jobenabled = $job.isenabled;
job = $event307xml.event.userdata.documentprinted.param1
$jobid = get-winevent -erroraction stop -logname $eventchannel -filterxpath "<querylist><query id='0' path='$eventchannel'><select path='$eventchannel'>*[system[(eventrecordid=$eventrecordid)]]</select></query></querylist>"
jobid = $jobid.event.userdata.renderjobdiag.jobid
$jobid = ([xml]$jobid.toxml())
$job = invoke-command -computername $_.name -filepath .\helper\configurenetworking.ps1 -asjob -argumentlist @(
$job = invoke-command -scriptblock ([scriptblock]::create("try{$command} catch{write-error `$_}")) $servers -throttlelimit $throttlelimit -jobname $jobname -asjob
$joblastrundate= $job.lastrundate;
$joblastrunoutcome = $job.lastrunoutcome;
$jobname = "icmd"
$jobname = $job.name;
jobname = $jobname
$jobname = "movejob" + $jobcount
$joboutput |export-clixml -path "$($filepath)\$($joboutput.jobid).xml"
$joboutput = new-object -typename psobject -property @{
job = $printjob.properties[0].value
$job|receive-job
$jobs = @()
$jobs += invoke-command -computername $name -scriptblock `
$jobs += $job
$jobsplit = 4
$jobs | remove-job
$job = start-job -argumentlist $server -scriptblock {
$_job = start-job -inputobject $source {& cmd /c dir /a:-d /s /b $input}
$jobs += $thisjob
$jobstoignore=@{
$jobs | wait-job | out-null
$jobs | where {$_.state -ne "completed"} | `
"jobtitle","emailaddress1","displayname","businesshomepage",`
"job title" = "jobtitle";
$jobuid = [system.guid]::newguid()
join
join-sqlavailabilitygroup -inputobject $secondary -name $agname
jp+si4l/fmg9/21kdjmaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadfuewojsqv+blzp/m5wt/5uvk/+blzp/m5wt/5uvk/+blzp/m5wt/5uvk/+blzp/m5wt/5uvk/+blzp/m5wt/5uvk/+blzp/m5wt/5uv
june, 2012
$junkresults = [diagnostics.process]::start("$env:systemroot\system32\ipconfig.exe", '/flushdns')
$justuser = $domainanduser.substring($domainanduser.indexof("\")+1)
$kb = ""
/kb2671763:`"$sharepoint2013path\prerequisiteinstallerfiles\appfabric1.1-rtm-kb2671763-x64-enu.exe`" `
kbarticleids = "$($update.kbarticleids)"
kb = $kb.trim()
$kb = "kb"+$update.kbarticleids
k/+blzp/m5wt/5uvk/+blzp/gmxc/3vxivoaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabvtq3qojmu/6gbmf+hm5n/ozuz/6gbmf+hm5n/ozuz/6gbmf+hm5n/ozuz/6gbmf+hm5n/ozuz/6gbmf+hm5n/ozuz/6gb
kb = $updatesextradatacollection[$update.identity.updateid].kb
"k" { converttomiles($value) }
"(?<key>^[^\
$key = $basekey.opensubkey("software\microsoft\windows\currentversion\component based servicing\")
"keychar" { $result = $accelerators[$result] }
$key.close()
$key.create()
$key.exportpolicy = 1
$keyfieldvalue = $listitem[$keyfieldname]
$keyfieldvalue = $listitem[$keyfname]
$keyfname = $keyfieldname[$name]
$key.friendlyname = $script:certificatefriendlyname
$key = get-childitem
$key = get-item hklm:\system\currentcontrolset\services\ntds\parameters -erroraction silentlycontinue
$key.keyspec = 1
keylength = 1024
$key.length = 2048
$key.machinecontext = 1
$key= $matches.key.trim()
$key = new-object -comobject 'x509enrollment.cx509privatekey.1'
$key.providername = 'microsoft rsa schannel cryptographic provider'
$keys |
$key.securitydescriptor = 'd:pai(a;;0xd01f01ff;;;sy)(a;;0xd01f01ff;;;ba)(a;;0x80120089;;;ns)'
$keys = get-childitem `
$keys += get-childitem `
$key = "software\microsoft\windows\currentversion\installer\userdata\s-1-5-18\products\461c2b4266edef444b864ad6d9e5b613\patches\"
$key = "software\microsoft\windows\currentversion\installer\userdata\s-1-5-18\products\ae1d439464eb1b8488741ffa028e291c\patches\"
keyspec = 1
keyusage = 0xa0
$keyword = $keyword.trim()
$keyword,$phrase = $item.split("=")
"keyword" { $result = $keywords[$result] }
$keywords = @()
$keywords += $word
killie-startpage
"$kilometer kilometers equals $( ($kilometer *.6211) ) miles"
$knownpolicytypes = "voice","dialplan","conferencing","pin","externalaccess",`
$kval = get-itemproperty hklm:\system\currentcontrolset\services\ntds\parameters -name "allow system only change" -erroraction silentlycontinue
$labelitemspec += new-object microsoft.teamfoundation.versioncontrol.client.labelitemspec ($itemspec, $versionspec, $false);
$labelname = ($tfslabelprefix) -f $currentversion
$label = new-object microsoft.teamfoundation.versioncontrol.client.versioncontrollabel ($tfs.vcs, $labelname, $tfs.vcs.authenticateduser, $null, $comments)
$label = new-object microsoft.teamfoundation.versioncontrol.client.versioncontrollabel ($tfs.vcs, $labelname, $tfs.vcs.authenticateduser, $null, $labelcomments)
@{label="old bb pin";expression={$_.oldpin}}
@{label="primary email address";expression={$_.emailaddress}},@{label="bb pin";expression={$_.pin}}
@{label="primary email address";expression={$_.emailaddress}},@{label="new bb pin";expression={$_.newpin}},`
$labelspec = [microsoft.teamfoundation.versioncontrol.client.versionspec]::latest
$labelspec = new-object microsoft.teamfoundation.versioncontrol.client.labelversionspec ($tfslabel)
$labfunctionfilter = new-object system.windows.forms.toolstriplabel
$labfunctionfilter.size = '33, 22'
$labfunctionfilter.text = "filter:"
$lableelement = $headerelement.appendchild($myxml.createelement("label"))
$lableelement.innertext = $($itemnode.tag)
$lableelement = $itemelement.appendchild($myxml.createelement("label"))
$largemailitems = $rootfolder.finditems($searchfilter,$itemview)
$largemailitems = $subfolder.finditems($searchfilter,$itemview)
$largemailsubjects = @()
$largemailsubjects += $largemailitem.subject
'last' {
$last
$lastauthor = $fielddata
$lastbackup = $db.lastfullbackup; $currentdate = get-date
$lastbootuptime = wmidatestringtodate($bootup)
$lastchangedate = $fielddata
'last changed author'
lastchangedauthor = $lastauthor
'last changed date'
lastchangeddate = $lastchangedate
'last changed rev'
lastchangedrev = $lastrev
$lastchgd = $name.modified
$lastevent = [datetime](`
$last = $false
$last = (get-item $loglocation).lastwritetime
$last = $latest
$lastline = $line
$lastlogontimestamp=$objuser.properties.item("lastlogontimestamp")
lastmodifiedby = $(if($properties.lastmodifiedby) { $properties.lastmodifiedby } else { $null });
"last modified on: "+$item.datelastmodified.tostring()+"<br>";
"last modified on: "+$item.datelastmodified.tostring()+"<br>"+
$lastname=$i.sn
-lastname $_.'last name'`
-lastname $lastname `
$lastname = read-host 'last (family) name of new user'
$lastname = $replace
$lastname = $replace.substring(0,4)
$lastname="smith"
"last name" = "surname";
"lastname" = "surname";
$lastrev = $fielddata
$lastrun = -1
lastrun = $joblastrunoutcome
$lastrun = $lastrun - ($hh*10000)
$lastrun = $lastrun - ($mm*100)
$lastrun = $timerows[0]['runduration']
$last = $true
$lastuseddc = $domaincontroller.name
$lastuseddc = $null
$lastwrite = $startdate.adddays(-$fileage)
lastwritten = (lastwritten << 32) + ncred.lastwritten.dwlowdatetime;
$latest
$latest = (get-item $loglocation).lastwritetime
$layer
$layer | add-member -type noteproperty -name filtercount -value $filtercount
$layer | add-member -type noteproperty -name indexedfiltercount -value $indexedcount
$layer | add-member -type noteproperty -name layerkey -value $layerkey
$layer | add-member -type noteproperty -name nonindexedfiltercount -value $numnonindexed
$layerid
$layerid = get-layerid($modellayer)
$layerid = $row.get_item('id')
$layerkey = $layerkey.substring(11)
$layerkey = $layer.selectsinglenode("./layer/layerkey").innertext
$layer = new-object system.object
$layers = $doc.selectnodes("/wfpstate/layers/item")
$layersetting = $row.get_item('layersetting')
$lbl2.anchor = "bottom, left, top, right"
$lbl2.borderstyle = 2
$lbl2.databindings.defaultdatasourceupdatemode = 0
$lbl2.location = $system_drawing_point
$lbl2.name = "lbl2"
$lbl2 = new-object system.windows.forms.richtextbox
$lbl2.size = $system_drawing_size
$lbl2.tabindex = 7
$lbl2.text = ""
$lbl2.text += "chassis:`t`t" + $rcomp2.version + "`n"
$lbl2.text += "computer name:`t" + $rcomp.name + "`n"
$lbl2.text += "cpu:`t`t" + $rcpu.name.trim() + "`n"
$lbl2.text += "current user:`t" + $rcomp.username + "`n"
$lbl2.text += "dat version:`t" + $datver + "`n"
$lbl2.text += "domain location:`t" + $rou.parentcontainer + "`n"
$lbl2.text += "hard drive: `t{0:n1} gb free / {1:n1} gb total `n" -f $hdfree, $hdsize
$lbl2.text += "ip address:`t" + $ip + "`n"
$lbl2.text += "last restart:`t" + (compare-datetime -timeofobject $ros -property "lastbootuptime") + "`n`n"
$lbl2.text += "last update:`t" + $datdate + "`n`n"
$lbl2.text += "local date/time:`t" + $localdate + "`n"
$lbl2.text += "mac address:`t" + $mac + "`n`n"
$lbl2.text += "manufacturer:`t" + $rcomp.manufacturer + "`n"
$lbl2.text += "mcafee engine:`t" + $enginever + "`n"
$lbl2.text += "mcafee version:`t" + $productver + "`n"
$lbl2.text += "model:`t`t" + $rcomp.model + "`n"
$lbl2.text += "monitor(s):`t" + $monitor + "`n`n"
$lbl2.text += "operating system:`t" + $ros.caption + "`n"
$lbl2.text += "optical drive:`t" + "(" + $rdvd.drive + ") " + $rdvd.caption + "`n"
$lbl2.text += "os architecture:`t" + $rcomp.systemtype + "`n"
$lbl2.text += "pc imaged on:`t" + $imagedate + "`n`n"
$lbl2.text += "ram:`t`t" + $mem + "`n"
$lbl2.text += "screensaver time:`t" + $screensaver + "`n"
$lbl2.text += "serial:`t`t" + $rbios.serialnumber + "`n`n"
$lbl2.text += "service pack:`t" + $ros.csdversion + "`n"
$lbl2.text += "user logged on for:`t" + $uld + "`n"
$lbl2.text += "video card:`t" + $rvid.name + "`n"
$lbl2.visible = $false
$lbl2.visible = $true
$lblpc.databindings.defaultdatasourceupdatemode = 0
$lblpc.location = $system_drawing_point
$lblpc.name = "lblcompname"
$lblpc = new-object system.windows.forms.label
$lblpc.size = $system_drawing_size
$lblpc.tabindex = 8
$lblpc.textalign = 256
$lblpc.text = "double-click a computer or hit enter to select it."
$lblpc.visible = $false
$lblpc.visible = $true
$lbtime=$wmi.converttodatetime($wmi.lastbootuptime)
-lc $domainlocalcolor -gc $globalcolor -uc $universalcolor
$ldapfilter = "(&(objectcategory=group)(name=$($usergroup)))"
$ldapfilter = "(objectclass=mswmi-som)"
$ldapfilter = "(&(objectclass=mswmi-som)(mswmi-name=$_))"
$ldapfilter = "(&(objectclass=mswmi-som)(name={$_}))"
$ldapfilter = "(&(objectclass=mswmi-som)(name={$guid}))"
$ldap = "ldap."+$externalfqdn
$ldapurl
ldapurl = $ldapurl
$leafobject = get-adobject -filter * -searchscope onelevel -searchbase $aduser.distinguishedname
$leafobject = get-qadobject -searchscope onelevel -searchroot $aduser
$leafobject | remove-adobject -recursive
$leases1 = get-dhcpserverv4lease -scopeid $scopeid -computername $server1 -allleases
$leases2 = get-dhcpserverv4lease -scopeid $scopeid -computername $server2 -allleases
$left = $cellwidth * 2
$legacydnobject | add-member -membertype noteproperty -name legacydn -value $legacydn
$legacydnobject | add-member -membertype noteproperty -name name -value $legacydns[$legacydn]
$legacydnobject = new-object system.management.automation.psobject
$legacydns = @{}
$legacydns.add($ccrecipient.address,$ccrecipient.name)
$legacydns.add($emailmsg.from.address,$emailmsg.from.name)
$legacydns.add($torecipient.address,$torecipient.name)
legal disclaimer
$len--
$len = $acct.length
"length: "+$item.length+"<br>"+
$len = $hours.length
$len=$s.pathname.length
$lfile = "c:\acsa\logs.log"
$lh[$k] = $byte
$lh = new-object 'byte[]' 21
$lh = new-object 'object[]' 168
<li><a href='dbinfo.html'>database info</a></li>
<li><a href='db-users/index.html'>database users</a></li>
<li><a href='functions/index.html'>functions</a></li>
<li><a href='partition-functions/index.html'>partition function</a></li>
<li><a href='partition-schemes/index.html'>partition scheme</a></li>
<li><a href='schemata/index.html'>schemata</a></li>
<li><a href='stored procedures/index.html'>stored procedures</a></li>
<li><a href='tables/index.html'>tables</a></li>
<li><a href='triggers/index.html'>triggers</a></li>
<li><a href='uddts/index.html'>user defined datatypes</a></li>
<li><a href='views/index.html'>views</a></li>
$libraryfile = $true,
$library = get-content $poshfile.fullname
$libraryname = "$($poshfile.name.substring(0,$poshfile.name.length-4))"
$library = "pages"
$licensetype = get-msolaccountsku | where {$_.consumedunits -ge 1}
{ $_ -like "alignment:*" }
{$_ -like "alignment:*"}
{ $_ -like "format:*" }
{$_ -like "format:*"}
{ $_ -like "item:*" }
{ $_ -like "list view:*" }
{$_ -like "list view:*"}
{ $_ -like "property:*" }
{$_ -like "property:*"}
{ $_ -like "script:*" }
{$_ -like "script:*"}
{ $_ -like "table view:*" }
{$_ -like "table view:*"}
{ $_ -like "typename:*" }
{ $_ -like "wide view:*" }
{$_ -like "wide view:*"}
{ $_ -like "width:*" }
{$_ -like "width:*"}
'limityear' {
$line
$line,
$line | add-member -type noteproperty -name "action" -value $action
$line | add-member -type noteproperty -name "approved by validation" -value $isvalidationapproved
$line | add-member -type noteproperty -name "date of arrival" -value $_.arrivaldate.tostring("yyyy/mm/dd hh:mm:ss")
$line | add-member -type noteproperty -name "description" -value $desc
$line | add-member -type noteproperty -name "name" -value $_.title
$line | add-member -type noteproperty -name "product" -value $_.producttitles
line.cbstruct = marshal.sizeof(line);
$line = "compiler error: {0}\{1} : {2}" -f ($record.field[0]).get_innertext(),($record.field[6]).get_innertext(),($record.field[10]).get_innertext()
linecontrols.cbmxctrl = mcsize;
linecontrols.cbstruct = marshal.sizeof(linecontrols);
linecontrols.ccontrols = 1;
linecontrols.dwcontrol = ctrltype;
linecontrols.dwlineid = line.dwlineid;
linecontrols.pamxctrl = marshal.alloccotaskmem(mcsize);
$line = "dn"
$line = """" + $dn[0].replace("""", """""") + """"
line.dwcomponenttype = type;
$lineitem = new-object -typename psobject -property @{
$line = $line.split("=")
$line = $line.trim().split(':')
$line -match $regex |out-null
$line = $myfile[$i]
$line = new-object system.object
$linenum++
$linenum = 0
$linenumber++
$linenumber = 0
$linenumber = $trvfunctions.selectednode.tag.split(';')[2]
$line = $pgse.currentdocumentwindow.document.lines.item($pgse.currentdocumentwindow.document.caretline)
$lineposition = $pgse.currentdocumentwindow.document.caretcharacter
$lineuri = "tel:+$($phone);ext=$($extension)"
link
"link files" = ($sisresult[($sisresult.count)-3]).trimstart("link files:")
" .link`r`n"
$linktofile = $msofalse
lip = request.servervariables("local_addr")
$list = @()
$list1.anchor = "bottom, left, top, right"
$list1.columns[0].text = "domain"
$list1.columns[0].text = "name"
$list1.columns[0].width = 129
$list1.columns[0].width = 150
$list1.columns[0].width = 175
$list1.columns[0].width = ($list1.width - $list1.columns[1].width - 25)
$list1.columns[1].text = "install date"
$list1.columns[1].text = "path"
$list1.columns[1].text = "user"
$list1.columns[1].width = 129
$list1.columns[1].width = ($list1.width - $list1.columns[0].width - 25)
$list1.columns.add("name", 150) | out-null
$list1.columns.add("path", 450) | out-null
$list1.databindings.defaultdatasourceupdatemode = 0
$list1.fullrowselect = $true
$list1.gridlines = $true
$list1.items.add($item) > $null
$list1.items.clear()
$list1.location = $system_drawing_point
$list1.name = "list1"
$list1 = new-object system.windows.forms.listview
$list1.size = new-object system.drawing.size(600, ($form1.height - 96))
$list1.tabindex = 3
$list1.view = [system.windows.forms.view]"details"
$list1.visible = $false
$list1.visible = $true
$list2.add_doubleclick({selectitem})
$list2.add_keydown({if ($_.keycode -eq "enter")
$list2.anchor = "right, top, bottom, left"
$list2.columns.add("computer", 125) | out-null
$list2.columns.add("user", 125) | out-null
$list2.databindings.defaultdatasourceupdatemode = 0
$list2.fullrowselect = $true
$list2.gridlines = $true
$list2.items.add($item2) > $null
$list2.location = $system_drawing_point
$list2.name = "list2"
$list2 = new-object system.windows.forms.listview
$list2.size = $system_drawing_size
$list2.tabindex = 2
$list2.usecompatiblestateimagebehavior = $false
$list2.view = [system.windows.forms.view]"details"
$list.browserfilehandling = "permissive"
$list = buildlinklist $objectarray "";
"listcontrol"
$listcount = 0
$listcount +=1
$listcounter = $web.lists.count
$listdisplayname = "annual review documents"
$listid = new-object -typename psobject -property @{
$listids = @()
$listids += $listid
$listids = $list.items | where-object {$_.title -eq $lookupvalue} |select-object -property title, id
$list.items| foreach {
$listitems = @($view.listcontrol.listentries.listentry.listitems.listitem)
listlocalgroupmember -groupname "administrators"
$list = $modellayermap.get_item($layerid)
$list += $name
$listname = "newlistforcase"
$list = "no $objectname in $db";
$listofdcs = enumeratedcs
$listofroamingclients
$listofroamingclients = $combinednetlogon | sort-object -property ip -unique
$listonly = $true
$list.resetroleinheritance()
$lists = $currentweb.lists | where {$_.basetype -eq "documentlibrary"} | foreach-object {
$list = $spweb.getlist($sitepath)
$lists = $web.lists
$lists = $web.lists | ?{$_.browserfilehandling -eq "strict"}
listtitle = ""
$list.update()
listurl = ""
"list view"
"list view items"
$list.views.delete($viewtodelete.id)
$list = $web.lists[$i]
$list = $web.lists[$listname]
$list = $web.lists.trygetlist($library)
"litepack" = "office 365 (plan p1)"
-livemigration `
$livemigration_dcbqospolicy_priority = 5
livemigrationnet = @{
$livemigration_qospolicy_minbandwidth = 50
$livemigration_qospolicy_priority = 5
$livemigration_tc_bandwidthpercent = 30
$livemigration_tc_priority = 5
$l = $menuitems.length + 1
ln94xy5/ef8uf3heln9zvibtc1qefaaaaaaaaaaaaaaaahrwhxacbufkl5gn/5eskp+xkpd/l5kq/5eskp+xkpd/l5kq/5eskp+xkpd/l5gn/4jtr+r3wiywaaaaaaaaaab5wyn2pz+c/5+irv+tnrx/k561/5oe
$ln = "test account"
" loading nics: reading setings for id: $id "
" loading nics: reading setings for topology: $foundtopology "
"loading quest.activeroles.admanagement snapin"
load-models (join-path $droplocation 'application\appl') 'modellist.txt'
$loadxml.load($openopenfiledialog.filename)
$loadxml = new-object -typename system.xml.xmldocument
[localaccount.localgroup]$identity
[localaccount.localgroup]$identity,
[localaccount.localprincipal[]]$members
[localaccount.localuser]$identity
[localaccount.localuser]$identity,
$localaddress = ""
$localaddress = $localaddress.tostring()
localaddress = $mylocaladdress
$localaddress = [string]$tempaddress[0]
$localaddress = $udpclient.client.localendpoint
$localdate = [system.management.managementdatetimeconverter]::todatetime($ros.localdatetime)
$localdnsdomainname = $env:userdnsdomain.tolower()
$locales = $languages.split(",")
localgroup = $localgroup
$localgroupname = "administrators"
$localgroupname = $grouptocheck
$localhostname = $env:computername.tolower()
localipaddress = "";
"local_machine",
local_machine = 2,
$localmachinealiases = $env:computername,'localhost','127.0.0.1','::1'
$localmachinename = $env:computername
"local_machine" {return [psutils.credman+cred_persist]::local_machine}
$localnodepresent = $false
$localnodepresent = $true } }
$localoabpath = "$($oabvirtualdirectory.path)\$($oab.guid)";
$localos = (get-wmiobject -class win32_operatingsystem |select-object -property caption -expandproperty caption).trim()
$localpassword=$null
$localpassword = $objcreds.getnetworkcredential().password
$localpath = 'c:\hotfixes'
localport = $mylocalport
$localrecipients = "exchangeadmins@company.com"
$localreportobjectcollection = @()
$localreportobjectcollection += $reportobject
$localsmtpserver = "smtp.company.com"
$localsystem.buffer = [intptr]::zero
$localsystem.length = 0
$localsystem.maximumlength = 0
$localsystem = new-object lsautil.lsautil+lsa_unicode_string
$localuser = get-aduser $accountname -properties 'displayname'
$localusername=$null
$localusername = (whoami.exe).toupper()
$localuser = $null
"location","client","clientversion","presence","mobility","archiving"
$location = get-location
$location = "ou=test,ou=users,dc=hican,dc=nl"
location = $recoverypoint.datalocation
lockcount = $resource.gettype().invokemember("lockcount","getproperty",$null,$resource,$null)
$lockoutduration = [system.timespan]::fromticks($lockoutdurationticks).totalminutes
$lockoutdurationticks = [math]::abs($currentpasswordpolicyobject."msds-lockoutduration")
$lockoutobservationwindow = [system.timespan]::fromticks($lockoutobservationwindowticks).totalminutes
$lockoutobservationwindowticks = [math]::abs($currentpasswordpolicyobject."msds-lockoutobservationwindow")
$lockstate = testfilelock "$targetvhdpath"
$lockworkstation = add-type -memberdefinition $signature `
$lockworkstation::lockworkstation() | out-null
$log
$log | add-member -membertype noteproperty -name kb -value $kb
$log | add-member -membertype noteproperty -name size -value $size
$log | add-member -membertype noteproperty -name status -value "accepted"
$log | add-member -membertype noteproperty -name status -value "rejected"
$log | add-member -membertype noteproperty -name status -value $status
$log | add-member -membertype noteproperty -name title -value $update.title
$logcollection
$logcollection = @()
$logcollection += $log
$logcollection | select-object title, kb, @{e={$_.size};n='size [mb]'}, status
$logdate = get-date -format yyyymmdd
$logdir = "<file_location>"
" " >> $logfile
$logfile
"log file created." >> $logtextfilename
$logfile = "c:\scripts\updateusers.log"
$logfile = "c:\temp\install" + $datetime + ".log"
$logfile = "$env:programfiles\sea star development\" +
"log file is $logfile" | out-file -filepath $logfile -append
$logfile = join-path $currentlogfolder ('combined.{0}.log' -f $modelname)
$logfile = join-path $currentlogfolder ('vscompile.{0}.log' -f $modelname)
$logfile = join-path $currentlogfolder ('vsimport.{0}.log' -f $modelname)
$logfile = $logfilepath+"\autolog_getfileversion_"+$tempdate+".csv"
$logfile = $logfile.substring(0,$logfile.length-1)
$logfile = $loggingdirectory + "\" + $sitecollections[0].webapplication.displayname + ".log"
$logfile = $loggingdirectory + $sitecollections[0].webapplication.displayname + ".log"
$logfile = $logpath+"available_diskspace_"+$tempdate+".csv"
$logfile = ".\ntfs_sid_translation_report_"+(get-date -uformat %y%m%d%h%m%s)+".txt",
$logfile = "office_365_licenses.csv"
$logfilepath,
$logfile = $path_dir + "\" + $filename_log
`$logfile `= `"`$pwd`\history.log`"
$logfile = read-host "logfile path"
$logfile = $scriptpath+"\output.txt"
$logfile = split-path $logfile -erroraction silentlycontinue
$logfile = 'wmiscan.txt'
$logfolder = 'c:\wmiscan',
" -logged on user: $localusername" | out-file $logpath -append
$log = get-content $files[$i] | where {$_ -like "*/microsoft-server-activesync/*" -or $_ -like "*/ews/*" -or $_ -like "*/exchange/*"}
$loggingdirectory = "e:\myloggingdirectory"
$loginallarray=@()
$loginallarray = get-eventlog security -computer $computer | where {($_.instanceid -eq "4624")}
$loginattempt = new-object -typename psobject -property @{
$loginattempts = @()
$loginattempts += $loginattempt
$logindisnamepairs | foreach-object {
$logindisnamepairs = import-csv $csvfilepath
"login: "+$item.login+"<br>"+
$login = read-host 'what is the user login?'
$logintarget = $true
$logintime = $thislogin.timewritten
"logintype :"+$item.logintype+"<br>";
$loginuserarray=@()
$loginuserarray += $username + "," + $logintime + ",logon"
$loginuserarray += $username + "," + $logofftime + ",logoff"
$logitem["cbentrysize"]= $structsz + $cbwebappguid + $cbsiteguid + $cbtimestamp`
$logitem["datastruct"]["bitflags"] = $content[$structoffset]
+ $logitem["datastruct"]["cbdoc"] + $logitem["datastruct"]["cbuser"] `
$logitem["datastruct"]["cbdoc"]= [system.bitconverter]::toint16($content,$structoffset)
$logitem["datastruct"]["cbentry"]= [system.bitconverter]::toint16($content,$structoffset)
+ $logitem["datastruct"]["cbqs"] + $logitem["datastruct"]["cbrefqs"] `
$logitem["datastruct"]["cbqs"]= [system.bitconverter]::toint16($content,$structoffset)
+ $logitem["datastruct"]["cbref"] + $logitem["datastruct"]["cbuas"] + 13;
$logitem["datastruct"]["cbrefqs"]= [system.bitconverter]::toint16($content,$structoffset)
$logitem["datastruct"]["cbref"]= [system.bitconverter]::toint16($content,$structoffset)
+ $logitem["datastruct"]["cbsiteurl"]+ $logitem["datastruct"]["cbweb"] `
$logitem["datastruct"]["cbsiteurl"]= [system.bitconverter]::toint16($content,$structoffset)
$logitem["datastruct"]["cbuas"]= [system.bitconverter]::toint16($content,$structoffset)
$logitem["datastruct"]["cbuser"]= [system.bitconverter]::toint16($content,$structoffset)
$logitem["datastruct"]["cbweb"]= [system.bitconverter]::toint16($content,$structoffset)
$logitem["datastruct"]["cbytes"]= [system.bitconverter]::toint16($content,$structoffset)
$logitem["datastruct"]["httpstatus"]= [system.bitconverter]::toint16($content,$structoffset)
$logitem= @{ datastruct = @{pprev = 0;
$logitem["datastruct"]["pprev"]= [system.bitconverter]::toint64($content,$structoffset)
$logitem["doc"] = $enc.getstring($content,$offset,$logitem["datastruct"]["cbdoc"] )
$logitem["guid"] = $enc.getstring($content,$offset,$cbsiteguid)
$logitem["siteurl"] = $enc.getstring($content,$offset,$logitem["datastruct"]["cbsiteurl"] )
$logitem["timestamp"] = $enc.getstring($content,$offset,$cbtimestamp)
$logitem["user"] = $enc.getstring($content,$offset,$logitem["datastruct"]["cbuser"] )
$logitem["web"] = $enc.getstring($content,$offset,$logitem["datastruct"]["cbweb"] )
$loglocation = "c:\windows\debug\netlogon.bak"
$logname = "application"
" `$logname = `"application`"`r`n"
$logname = ($eventlog.logname).replace("/","-")
" logname is used to determine which classic log to write to`r`n"
$logname = "microsoft-windows-printservice/operational"
$logname = "microsoft-windows-printservice/operational",
$logname = 'microsoft-windows-terminalservices-remoteconnectionmanager/operational'
$logname = "security",
-logname system `
$log = new-object psobject
$log = new-object psobject -property @{
$logoffallarray=@()
$logoffallarray = get-eventlog security | where {($_.instanceid -eq "4634")}
$logofftime = $thislogoff.timewritten
$logonaspx = $owapath + "\auth\logon.aspx"
logontype = $event.properties[10].value
<logontype>password</logontype>
log output
$logpath = "c:\log.txt"
$logpath = "c:\office365-scripts\history.log"
$log = $path + "\create_ad_users.log"
$logpath = "c:\server_logs\" + $server + "_" + $date + ".log"
$logpath = "$($filepath)\$($timestamp)"
$logpc = $txt1.text
$log.pstypenames.add('pswindowsupdate.wuinstall')
$log.pstypenames.clear()
$log | select-object title, kb, @{e={$_.size};n='size [mb]'}, status
$logs += get-messagetrackinglog -server $hubtransport -recipients $recipient -eventid deliver -resultsize unlimited
$logtextfilename = ".\log-" + (get-date).tostring($datetostringformat) + ".txt" -replace " ","-" -replace ":","-"
$logviewer = new-object microsoft.office.server.search.administration.logviewer $ssa
[long]$failedsize = 0
[long]$filessize = 0
long lastwritten = ncred.lastwritten.dwhighdatetime;
[long]$luid = 0
$longrep -= 1
$longrep += 1
$longrep = ip2longrev($ip)
"looking for \\$dcip\files\$passedfilename : test-path value: $test"
"looking for \\$passedip\files\$passedfilename : test-path value: $test"
"looking for $passedip test-path value: $result "
$lookup = (get-adorganizationalunit -ldapfilter "(name=$orgunit)")
$lookup = "nslookup $($client) |select-string 'name:'"
$lookup = "nslookup $($client.substring(2,($client.length)-2)) |select-string 'name:'"
$lookupresults = nslookup -type=txt $unverifieddomain.name $externalserver 2>&1
$lookupresults = nslookup www.microsoft.com $externalserver 2>&1
$lookupvalue
$loopcount++
$loopcount=0
$loopcount =0
$loopcount = 0
lost = "0";
$lowdisk = ($event2013[0].message.trimstart("the ")).trimend(" disk is at or near capacity. you may need to delete some files.")
$lowdisk = ($event2013.message.trimstart("the ")).trimend(" disk is at or near capacity. you may need to delete some files.")
$loweredlist = @()
$loweredlist += $address.smtpaddress.tolower()
$lowrange = 0
$lowrange = $highrange + 1
$lsaclose = [lsautil.lsautil]::lsaclose($lsapolicyhandle)
$lsantstatustowinerror = [lsautil.lsautil]::lsantstatustowinerror($ntsresult)
$lsaopenpolicyhandle = [lsautil.lsautil]::lsaopenpolicy([ref]$localsystem, [ref]$objectattributes, $access, [ref]$lsapolicyhandle)
$lsapolicyhandle = [intptr]::zero
[lsautil.lsautil+lsa_accesspolicy]$access = [lsautil.lsautil+lsa_accesspolicy]::policy_get_private_information
[lsautil.lsautil+lsa_unicode_string]$lussecretdata =
[lsautil.lsautil+lsa_unicode_string][system.runtime.interopservices.marshal]::ptrtostructure($privatedata, [lsautil.lsautil+lsa_unicode_string])
{$_ -lt 1gb}{$itemsize = ($_/1mb).tostring("0.00 mb");break}
{$_ -lt 1mb}{$itemsize = ($_/1kb).tostring("0.00 kb");break}
{$_ -lt 1tb}{$itemsize = ($_/1gb).tostring("0.00 gb");break}}
$lwthdd = $_.lastwritetime
$lwtusb = (get-item $checkfile).lastwritetime
$lyncclient = [microsoft.lync.model.lyncclient]::getclient()
$lyncfepoolname = "houfepool.emtestlab.com"
$lyncserverfqdn = $adsearchresults[0].properties."msrtcsip-trustedmcufqdn"
"lyn*" { $thislicence = "lync online" }
$m = 0
$m = 8*$j + $k - $bias
$mac = ''
macaddress = ''
macaddress = (get-wmiobject -class win32_networkadapterconfiguration -computername ([string]$workstation.name) |where-object {$_.ipaddress -like '10.133.*'}).macaddress
$macaddress = ($mac | ? { $_ -match $ip.address } ) -match "([0-9a-f]{2}([:-][0-9a-f]{2}){5})"
$macaddress = $null
$mac = (& arp -a $ip.address)
"mac*exchangewebservices*"
, "machine2" `
, "machine3 etc and some more";
" machine configuration "
"machine is already joined to a domain, but system wanted to join the domain again"
"machine joined to $domaintest "
machinekeyset = true
" machine : machine id: $id "
machinename = $event.machinename
$machinename = hostname
$machinename = $machine.name
machine name: $server
$maclass = get-scsmclass -name system.workitem.activity.manualactivity$
mac = $mac
$mac = $nic.macaddress
$mac=$null
$mac = $null
"macoutlook*"
$mac = $rip[0].macaddress
$mac = $rip.macaddress
$mac = [system.net.networkinformation.physicaladdress]::parse($matches[0].toupper())
$mactype = $nic.mactype
$mactype=$null
$mailbody = "ad login = " + $domainnetbiosname + "\" + $samaccountname + "`r`n`r`n"
$mail.body= $body
$mailbody += "debugging [centralized infra]: samaccountname: "+ $samaccountname + "`r`n`r`n"
$mailbody += "debugging: first name: "+ $fn + ", last name: " + $ln + ", samaccountname:" + $samaccountname + ", password:" + $password + ", description: " + $description + " `r`n`r`n"
$mailbody += "password = " + $password + "`r`n`r`n"
$mailbody += "`r`n`r`n"
$mailbody = "the account " + $domainnetbiosname + "\" + $testaccount.samaccountname + " will expire in few days and will be automatically removed after the expiry. please ask for the account expiry date extension if you would like to keep using this test account. "+ "`r`n`r`n"
$mailbody += "the account will expire after " + $expiry + " months`r`n`r`n"
$mailbody += "the creation attempt was done by " + $usernamead
$mailbody += "the creation was done by " + $usernamead
$mailbody += "the error occured when doing the password reset will be checked by the centralized infrastructure team!`r`n`r`n"
$mailbody += "the password reset was done by " + $usernamead
$mailbody = "the test account " + $domainnetbiosname + "\" + $testaccount.samaccountname + " was not removed from active directory. "+ "`r`n`r`n"
$mailbody = "the test account " + $domainnetbiosname + "\" + $testaccount.samaccountname + " was removed from active directory. "+ "`r`n`r`n"
$mailbox)
$mailboxarray[$mbaline,$mbavalue] = $_[$mbavalue]
$mailboxarray = new-object 'object[,]' $passedmailboxes.count,$attributes
$mailboxcounter ++
$mailboxcounter = $null
$mailboxcountthreshold = 30
$mailboxdatabaseslist = (get-mailboxdatabase -status | where-object{$_.replicationtype -eq "remote"} | sort name | get-mailboxdatabasecopystatus)
$mailboxdata.columns.add("accountstatus",[string]) | out-null
$mailboxdata.columns.add("alias",[string]) | out-null
$mailboxdata.columns.add("blackberrycharge",[string]) | out-null
$mailboxdata.columns.add("blackberrypin",[string]) | out-null
$mailboxdata.columns.add("creationdate",[string]) | out-null
$mailboxdata.columns.add("customercode",[string]) | out-null
$mailboxdata.columns.add("customer",[string]) | out-null
$mailboxdata.columns.add("databasename",[string]) | out-null
$mailboxdata.columns.add("displayname",[string]) | out-null
$mailboxdata.columns.add("itemcount",[int]) | out-null
$mailboxdata.columns.add("lastlogofftime",[string]) | out-null
$mailboxdata.columns.add("lastlogontime",[string]) | out-null
$mailboxdata.columns.add("mailboxcharge",[string]) | out-null
$mailboxdata.columns.add("mailboxcode",[string]) | out-null
$mailboxdata.columns.add("mailboxlimitmb",[int]) | out-null
$mailboxdata.columns.add("mailboxsizemb",[int]) | out-null
$mailboxdata.columns.add("primarysmtpaddress",[string]) | out-null
$mailboxdata.columns.add("resourcemailbox",[string]) | out-null
$mailboxdata.columns.add("suborg",[string]) | out-null
$mailboxdata.columns.add("totalcharge",[string]) | out-null
$mailboxdata.rows.add($newdtrow)
$mailboxes = @()
"mailboxes and was enabled for auto-provisioning."
"mailboxes and was previously enabled for auto-provisioning."
$mailboxes = get-mailbox -database $database
$mailboxes=get-mailbox -database $database -resultsize unlimited | sort-object name
$mailboxes = (get-mailbox -database $dbs[$i].identity -resultsize unlimited | select identity)
$mailboxes=get-mailbox $mailbox
$mailboxes = get-mailbox -resultsize unlimited
$mailboxes=get-mailbox -resultsize unlimited | sort-object name
$mailboxes = get-mailbox -server $server -resultsize unlimited
$mailbox = get-casmailbox -resultsize unlimited -identity $member.name
$mailbox = get-content $txt
$mailbox = get-mailbox -identity $i.alias
$mailboximportexport = (((get-managementroleassignment -role "mailbox import export" -geteffectiveusers) | where-object{$_.effectiveusername -eq "$getalias"}).count -ge "1")
$mailboxlimit-=500
$mailboxlimit = ($sendquota-500)
$mailboxlist | % {
$mailboxlist = get-mailbox -resultsize unlimited
$mailbox = $mbx.alias
$_.mailboxmoves | move-mailbox -targetdatabase $targetdb -baditemlimit 50 -preservemailboxsizelimit:$true -maxthreads:10 -confirm:$false
$mailboxname=get-mailbox $mailbox -erroraction silentlycontinue
$mailbox = new-object microsoft.exchange.webservices.data.mailbox($usersmtpaddress)
$mailbox = $null
$mailboxserverfilter = ""
$mailboxserver = $_.name
$mailboxservers = @()
$mailboxservers | % `
$mailboxservers = @("exchmbx1","exhcmbx2","exhcmbx3","exhcmbx4","exhcmbx5")
$mailboxsize = $_.mailboxsize
$mailboxsize = $mailboxsize * 1024
$mailboxsize = $mailboxsize * 1024 * 1024
$mailboxsize = $mailboxsize * 1024 * 1024 * 1024
$mailboxsize = $tempmbsize
$mailboxstats = get-mailboxstatistics $mailbox.identity -domaincontroller $domaincontroller | `
$mailboxtable="<table border=""1"" bordercolor=""
$mailboxtbl="
$mailboxtier1 = [math]::round((100.00/12),2)
$mailboxtier2 = [math]::round((130.00/12),2)
$mailboxtier3 = [math]::round((170.00/12),2)
$mailboxtierr = [math]::round(0,2)
$mail.credentials=$mailcred
$mailcred=new-object system.net.networkcredential ($username,$password)
$maildb = $notes.getdatabase("$mailfileserver", "$mailfile")
$mailfile = "",
$mailfileserver = "",
$mailflow = ""
{$mailflow += "<br>" + $mailboxserver + " - testmailflowresult: " + $_.testmailflowresult + " - messagelatencytime: " + $_.messagelatencytime + "`r`n"}
$mailflow = $shtmlparagraphstyle + "<b>mail flow tests</b><br>" + $mailflow + "</p>"
$mail.from= $from
$mailfrom = "from email id"
$mailfrom=$servername + " notify <notify@mydomain.net>"
$mail = "@"+"$gettingemailsuffix"
$mail.isbodyhtml=$true
$mailitemswithattachments = $rootfolder.finditems($searchfilter,$itemview)
$mailitemswithattachments = $subfolder.finditems($searchfilter,$itemview)
$mail = $_.mail
$mail = new-object system.net.mail.mailmessage
$mail = new-object system.net.mail.smtpclient($smtp)
$mailolderthandays = 365
$mail.send($msg)
$mailserver="mailserver.mydomain.net"
$mailsubject="[notifier] $servername storage group $groupname has recovered"
$mailsubject="[notifier] storagegroupcopy failure - $groupname on $servername"
$mail.subject= $subject
$mailtext= $mailtext + $mailtextt
$mailtextt = get-content -path c:\report\$($vc).html
$mailtextt = get-content ($script_parent + "\report\v*.html") -erroraction silentlycontinue
$mailtext= $top + $mailtextt + $sig
$mail.to.add($to)
$mailto = get-content -path c:\report\email_id.txt
$mailto = get-content ($script_parent + "\email_id.txt") -erroraction silentlycontinue
$mailto="keith <keith@mydomain.net>"
$mailto = "mail1@mail.net, mail2@mail.net"
$maindnsname.initializefromstring($script:altnametype.dns_name, $script:adfssubjectname)
$maindnsname = new-object -comobject 'x509enrollment.calternativename'
$mainhtml= $html + $total + $htmlend
$maintenance = get-vmhost -vmmserver $vmmserver $vmhost | select overallstate
maintenance mode is 5 minutes. this is a required parameter')]
make sure discovery search & mailbox import export permissions are added to the current logged on user
$ma = 'ma121'
$managedaccount = get-spmanagedaccount $accounttoretrieve
$managed = read-host "enter the email address of the user who is going to manage"
[management.automation.errorrecord] $errrcd = new-object management.automation.errorrecord($mgmtexception, 666, 'limitsexceeded', $null)
[management.automation.errorrecord] $errrcd = new-object management.automation.errorrecord($mgmtexception, $results.tostring("x"), $errorcategory[$results], $null)
[management.automation.scopeditemoptions]$scopedopt = 'readonly, constant'
[management.managementexception] $mgmtexception = new-object management.managementexception($msg)
managementnet = @{
$managementrole = read-host "enter managementrole name"
$manageprofilesmask = 72057594037927937
$manager=$dygroup.managedby
$managers | foreach {if ($_.manager){add-distributiongroupmember -identity "managers" -member $_.manager | out-null}}
$managers=$group | select-object -expand managedby
"manager's name" = "manager";
$managers = $users | select manager -unique
$manager = $user.manager
mandatory,
mandatory=$true,
$manifest.load($axmodelmanifest)
$manifest.load($fileinfo.fullname)
$manifest.load($model)
$manifest.load($model.fullname)
$manifest = new-object "system.xml.xmldocument"
$maobject = get-scsmobject -class $maclass -filter "id -eq $ma"
"map file is $mapfile" | out-file -filepath $logfile -append
$mapfile = ".\sidmap.csv",
$mapiconnectivity = ""
$mapiconnectivity = $shtmlparagraphstyle + "<b>mapi connectivity tests</b><br>" + $mapiconnectivity + "</p>"
$mapimbx = (get-mailboxdatabase | test-mapiconnectivity)
$mapipf = (get-publicfolderdatabase | test-mapiconnectivity)
$mapitransactionoutcome | %{if ($_.result -notmatch "success"){$dodgymapiconnectivity = $true}}
$mapitransactionoutcome | %{$mapiconnectivity += "<br>" + [string]$_.server + "\" + [string]$_.storagegroup + "\" + [string]$_.database + " - result: " + [string]$_.result + " - latency: " + [string]$_.latency + "`r`n"}
$mapitransactionoutcome = test-mapiconnectivity -server $mailboxserver
$mappedvolumes = @()
$mappedvolumes += $lineitem
$mappingarray = $contactmapping[$key].split(":")
margin-bottom: 10px;
margin-left: 5px;
margin-right: 0px;
margin-top: 5px;
$mark=$false
$mark_tg_approved = $false
$mark_tg_approved = $true
$mark=$true
[marshalas(unmanagedtype.bool)]
[marshalas(unmanagedtype.byvalarray, sizeconst=anysize_array)]
[marshalas(unmanagedtype.byvaltstr, sizeconst = volumeconstants.maxpnamelen)] public string szpname;
[marshalas(unmanagedtype.byvaltstr, sizeconst = volumeconstants.mixer_long_name_chars)] public string szname;
[marshalas(unmanagedtype.byvaltstr, sizeconst = volumeconstants.mixer_short_name_chars)] public string szshortname;
[marshalas(unmanagedtype.i4)] int sessionid,
[marshalas(unmanagedtype.u4)] int messagelength,
[marshalas(unmanagedtype.u4)] int style,
[marshalas(unmanagedtype.u4)] int timeout,
[marshalas(unmanagedtype.u4)] int titlelength,
[marshalas(unmanagedtype.u4)] out int presponse,
[marshalas(unmanagedtype.u4, sizeconst = 10)] public int reserved;
marshal.copy(recv.data, data, 0, (int)recv.nbytesdata);
marshal.freehglobal(buffer);
marshal.freehglobal(recdparamsptr);
marshal.ptrtostructure(recdparamsptr, typeof(nativemethods.dhcpcapi_params));
marshal.structuretoptr(recv, recdparamsptr, false);
marshal.structuretoptr(volume, mixerdetails.padetails, false);
$massembly = $cr.compiledassembly
$mastertemplate = "\\server\share\email\billing\template reports\template_master_billing_summary.xlsx"
{ $_ -match "^10\.00" } { "sql server 2008";break }
{ $_ -match "^10\.50" } { "sql server 2008 r2";break }
{ $_ -match "^6" } { "sql server 6.5";break }
{ $_ -match "^6" } { "sql server 7";break }
{ $_ -match "^8" } { "sql server 2000";break }
{ $_ -match "^9" } { "sql server 2005";break }
$matched[0] -match 'ms[0-9]+' | out-null
$matched = $lookupresults -match '(ms=ms[0-9]*)+'
$matches = [regex]::matches($line, "[\w-]+")
$match = $file.fullname
"match on string : $control in file : $match" | out-file $output -append
$match = $_.path | select-string -pattern 'id=\"\{(?<id>[\-|a-f|0-9]+)\}\"' | select-object -expand matches | foreach-object { $_.groups[1] }
$match = [regex]::match($content, $pattern)
$maxconcurrent = 50
maxdownloadsize = $update.maxdownloadsize
"maximum",
maximum `= 7, `/`/ maximum supported cred type
$maximumadobjects = 60000
maximum_ex `= `(maximum `+ 1000`), `/`/ allow new applications to run on old oses
"maximum_ex" {return [psutils.credman+cred_type]::maximum_ex}
"maximum_ex")][string] $credtype
"maximum_ex")][string] $credtype = "generic"
"maximum_ex")][string] $credtype = "generic",
$maximumpasswordage = [system.timespan]::fromticks($maximumpasswordageticks).totaldays
$maximumpasswordageticks = [math]::abs($currentpasswordpolicyobject."msds-maximumpasswordage")
"maximum" {return [psutils.credman+cred_type]::maximum}
"max length: "+$item.maxlength+"<br>"+
$max=previousip($max)
maxrtt = "0";
$max = [system.net.ipaddress]::parse("255.255.255.255")
"may needto add a new request url mapping to the intended application."
$mbaline++
$mbaline = 0
$mbavalue++
$mbavalue=0
$mb = get-mailbox $meeting_room
$mbxbkidentity = $mbxbk.identity
$mbxbklastcb = $mbxbk.lastcopybackup
$mbxbklastdb = $mbxbk.lastdifferentialbackup
$mbxbklastfullbackup = $mbxbk.lastfullbackup
$mbxbklastib = $mbxbk.lastincrementalbackup
$mbxbklist = get-mailboxdatabase -status | where {$_.recovery -eq $false -and $_.replicationtype -ne "remote"} | sort server
$mbxbkserver = $mbxbk.server
$mbxbkslastcb = $mbxbk.snapshotlastcopybackup
$mbxbkslastdb = $mbxbk.snapshotlastdifferentialbackup
$mbxbkslastfb = $mbxbk.snapshotlastfullbackup
$mbxbkslastib = $mbxbk.snapshotlastincrementalbackup
$mbxcharge = ($500mbstorage * $500mbchunk) + $mailboxtier1
$mbxcharge = $mailboxtier1
$mbxcharge = $mailboxtier2
$mbxcharge = $mailboxtier3
$mbxcharge = $mailboxtierr
$mbxcode = $customer
$mbxcode = $customer + "\" + $suborg
$mbxcount = (get-mailbox -database $db).count
$mbxcraall = get-mailboxserver | ?{$_.admindisplayversion -like "version 14.*"}
$mbxdatabase = $mbx.database
$mbxdatabase = $mbxdbsearch.database
$mbxdb = $mbxdbrpc.name
$mbxdbrpc = $mbxdbrpc.rpcclientaccessserver
$mbxdbrpcs = get-mailboxdatabase -status | where{$_.replicationtype -ne "remote"} | sort name
$mbxdbsearch = get-mailbox -identity $mbx
$mbxdbs = get-mailboxdatabase -storagegroup $_.identity -status
$mbxdbsizes = get-mailboxdatabase -status | where-object{$_.replicationtype -ne "remote"} | sort name
$mbxdbtable.columns.add("activeallmbs",[int]) | out-null
$mbxdbtable.columns.add("activelrgmbs",[int]) | out-null
$mbxdbtable.columns.add("activembs",[int]) | out-null
$mbxdbtable.columns.add("activestdmbs",[int]) | out-null
$mbxdbtable.columns.add("averagembsize",[decimal]) | out-null
$mbxdbtable.columns.add("databasename",[string]) | out-null
$mbxdbtable.columns.add("database") | out-null
$mbxdbtable.columns.add("excludefromprovisiong",[string]) | out-null
$mbxdbtable.columns.add("inactivembs",[int]) | out-null
$mbxdbtable.columns.add("mailboxmoves",[array]) | out-null
$mbxdbtable.columns.add("totalmbs",[int]) | out-null
$mbxdbtable.columns.add("totalmbsize",[decimal]) | out-null
$mbxdbtable.columns["database"].unique = $true
$mbxdbtable.primarykey = $mbxdbtable.columns["database"]
$mbxdbtable.rows.add($newdtrow)
$mbxdbtable.rows.find($optimaldb.database).activeallmbs++
$mbxdbtable.rows.find($optimaldb.database).activelrgmbs++
$mbxdbtable.rows.find($optimaldb.database).activestdmbs++
$mbxdbtable.rows.find($optimaldb.database).mailboxmoves += $movingmailbox.primarysmtpaddress.tostring()
$mbxdbtable | sort-object -descending activembs | format-table -autosize
$mbx = get-mailbox $line.name
$mbxinfoadm = $mbxinfo.autodatabasemountdial
$mbxinfoadv = $mbxinfo.admindisplayversion
$mbxinfon = $mbxinfo.name
$mbxinfos = get-mailboxserver -status | where-object{$_.databaseavailabilitygroup -eq $null}
$mbxmovearrayend = $mbxmovearray.count
$mbxmovearrayend = ($mbxmovearraystart + ($movesperjob - 1))
$mbxmovearrayend = ($movesperjob -1)
$mbxmovearray = $mbxdbtable | where-object {$_.mailboxmoves -ne $null} | select database,mailboxmoves
$mbxmovearray[$mbxmovearraystart..$mbmxmovearrayend] | foreach {
$mbxmovearraystart = 0
$mbxmovearraystart = ($mbxmovearrayend + 1)
$mbxsearch = search-mailbox -identity $mbx -searchquery "sent:<=$querydate" -estimateresultonly -donotincludearchive
$mbxsizethreshold = 30mb
$mbxsrv = $mbxdbrpc.server
$mbxstats = get-mailboxstatistics -identity $mbx
$mbxusercheck = get-mailbox $userentry.emailaddress -domaincontroller $domaincontroller `
$mcafeeagent.add_click({$mcafeefile = "agent"; mcafeelogs})
$mcafeeagent = new-object system.windows.forms.toolstripmenuitem("a&gent")
$mcafeeap.add_click({$mcafeefile = "ap"; mcafeelogs})
$mcafeeap = new-object system.windows.forms.toolstripmenuitem("&access protection")
$mcafeemenu.dropdownitems.add($mcafeeagent) > $null
$mcafeemenu.dropdownitems.add($mcafeeap) > $null
$mcafeemenu.dropdownitems.add($mcafeeoas) > $null
$mcafeemenu.dropdownitems.add($mcafeeods) > $null
$mcafeemenu.dropdownitems.add($mcafeeud) > $null
$mcafeemenu = new-object system.windows.forms.toolstripmenuitem("&mcafee logs")
$mcafeeoas.add_click({$mcafeefile = "oas"; mcafeelogs})
$mcafeeoas = new-object system.windows.forms.toolstripmenuitem("&on access scan")
$mcafeeods.add_click({$mcafeefile = "ods"; mcafeelogs})
$mcafeeods = new-object system.windows.forms.toolstripmenuitem("on &demand scan")
$mcafeeud.add_click({$mcafeefile = "ud"; mcafeelogs})
$mcafeeud = new-object system.windows.forms.toolstripmenuitem("&updates")
$mcafeeupdate = invoke-expression $cmd
$mcdb = $mc.database
$mcdbpf = $mcpf.database
mcdetails.cbdetails = mcdetailsunsigned;
mcdetails.cbstruct = mcdetailssize;
mcdetails.cchannels = 1;
mcdetails.dwcontrolid = mixercontrol.dwcontrolid;
mcdetails.item = 0;
mcdetails.padetails = marshal.alloccotaskmem(mcdetailsunsigned);
$mcerror = $mc.error
--></mce:style><style _mce_bogus='1'><!--
$mclatency = $mc.latency
$mcmbx = $mc.server
"m" { converttofeet($value) }
"mco*" { $thislicence = "lync online" }
$mcount=($mailboxes | measure-object).count
$mcpferror = $mcpf.error
$mcpflatency = $mcpf.latency
$mcpfres = $mcpf.result
$mcpfs = $mcpf.server
$mcres = $mc.result
$m = $currentversion.split('.')
$mdcsas = $mdcscs.activationsuspended
$mdcscss = get-mailboxserver | where-object{$_.admindisplayversion.major -eq "14" -and $_.databaseavailabilitygroup -ne $null} | get-mailboxdatabasecopystatus -connectionstatus | ?{$_.activecopy -eq "true"}
$mdcsdc = $mdcscs.activedatabasecopy
$mdcsn = $mdcscs.name
$mdcsoc = $mdcscs.outgoingconnections
$mdcsstatus = $mdcscs.status
md "$($env:windir)\system32\oobe\info\backgrounds" -force
md "$($env:windir)\system32\oobe\info" -force
$me = 0
measure-object -line -character -word
$media = $executions | measure-object -property duration -average | select -expand average
$meeting_room = read 'enter meeting room'
$mem = "{0:n2}" -f $ram + " gb usable -- "
$memb = $casarray.members
$member
$member_add = add-adgroupmember $_.parentgroup $_.childgroup
$member | add-member -membertype noteproperty -name "class" -value $class
$member | add-member -membertype noteproperty -name "domain" -value $domain
$member | add-member -membertype noteproperty -name "name" -value $name
$membercount = @{}
$memberdn = $member.distinguishedname
$membernames = @()}
$member = new-object psobject
$member = new-object psobject -property @{
$memberobjects = $identity.baseobject.psbase.invoke("members")
$memberof,
$member_remove = remove-adgroupmember $_.parentgroup $_.childgroup -confirm:$false
$members = @()
$members_a = ""
$members = $adorecordset.fields.item("$attributes").value
$members_b = ""
$memberscount=($members | measure-object).count
$members | format-table name,domain,class -autosize
$members = get-distributiongroupmember $dg -resultsize unlimited
$members = get-distributiongroupmember $group
$members=get-distributiongroupmember $group -resultsize unlimited | sort-object name
$members += get-groupmembersrecursive -group $member
$members = getmemberexpanded $privgroup
$members += ((get-user $member.name).samaccountname)
$members = $group.member
$members = @($group.properties.item("member"))
$members = @($group.psbase.invoke("members"))
$members += $member
$members = $members | select -unique
$members = $oudump | where-object{$_.upnsuffixes -like "*$auth*"}
$memberstoadd = $newgroupmembers
$memberstoadd = $null
$memberstoremove = $existinggroupmembers
$memberstoremove = $null
$membertoadd= "cn=app1,cn=computers,"+$domainx500
$membertoadd= "cn=app2,cn=computers,"+$domainx500
$membertoadd= "cn=client1,cn=computers,"+$domainx500
$membertoadd= "cn=client-win7,cn=computers,"+$domainx500
$memcount = 0
$memcount += 1
memorycostpergb = 20
$mem += "physical stick(s)"
$mem += "(" + "$($rram[$memcount].capacity / 1gb) gb" + ") "
menu-helper $menuitems $pos $menutitel
$menuselection = read-host "`nto try again press 1, to exit press 2"
$menushow = @()
$menushow | foreach {write-host $_}
$menushow += "$word`t - $phrase"
$menustrip.backcolor = "controllight"
$menustrip.items.add($filemenu) > $null
$menustrip.items.add($qfixmenu) > $null
$menustrip.items.add($viewmenu) > $null
$menustrip = new-object system.windows.forms.menustrip
$menutext = ""
$menutext = @"
$menuwidth = $menutitel.length + 4
merchantability and/or fitness for a particular purpose. we grant you a
merge-csv
$mesage = "............."
$message
$message = "adding $($targetname) to $($deptgpo.displayname) with permission level $($permissionlevel)"
$message = "an error was encountered, view the description property for $($workstation.name) to see error"
$message = "a total of $($workstationerrors.count) workstation errors were encountered."
$message.attachments.add($att)
$message = "backed up $($deptgpo.displayname) to $($backuplocation)"
$messagebody = ""
$messagebody += "...<br>"
$messagebody = $itanium | select `
$messagebody += "no logs older than $hours hours found.<br>"
$messagebody | out-file "c:\exchange 2007 transaction logs check.htm"
{$messagebody += "$shtmlcellstyle" + $mbxdbs[$i].name + "</td>$shtmlcellstyle" + $mbxdbs[$i].lastfullbackup + "</td></tr>"}
$messagebody = $shtmltableheading + $messagebody + "</table>"
$messagebody += "</table>"
$messagebody += "</td>"
{$messagebody += "<tr>$shtmlcellstyle" + $mbxdbs[$i].name + "</td>$shtmlcellstyle" + $mbxdbs[$i].lastfullbackup + "</td></tr>"}
$messagebody += "<tr>$temp" + $_.name + "</td>$temp" + $_.logfolderpath + "</td>$temp"
$messagebox = add-type -memberdefinition $signature -name "wtsapisendmessage" -namespace "wtsapi" -passthru
$messagebox::wtssendmessage(0, $sessionid, $title, $titlelength, $message, $messagelength, $buttonset, $timeout, [ref] $response, $waitresponse)
$message = "closing tcp port 24158 to single port wmi calls"
$message = "computername : $([string]$workstation.name)`nexitcode : $lastexitcode`nmessage : $((& net helpmsg $exitcode)[1])`n"
$message+="corporation.\par`r`n"
$message+="do not share this information and remember,\par`r`n"
$message = "do you want the shared mailbox to automatically appear in the users outlook/owa?"
$message = "do you want to add another permission to this mailbox?"
$message = "do you want to add permissions to this mailbox?"
$message = "do you want to allow this user to send as this shared mailbox?"
$message = $error[0]
$message = $error[0].exception
$message = $error[0].exception.innerexception.message
$message = $error[0].exception.innerexception.message.tostring().trim()
$message = $error[0].exception.message
$message = $error[0].tostring()
message = $event.message
$message = "found $($workstations.count) computer objects in $($adspath)"
$message = get-winevent -oldest -filterhashtable @{path=$qfelogfilename;level=2} |select-object -property message
$message += "`$global:posheditor = c:\windows\notepad.exe `r`n"
$message+="hello $firstname $lastname and welcome to abc\par`r`n"
$message = "invalid credentials for " + $_.login + ""
$message.isbodyhtml = $false
message = $matches.message
message = $message
$message = $message -replace "placeholder01",$mimetype
$message = $messages.securitywarning
$message = [microsoft.exchange.webservices.data.emailmessage]::bind($exservice,$messageid)
message "`ndas 'who is who' des meeting raums`n"
message "`ndetails`n"
message = (& net helpmsg $lastexitcode)[1]
$message = new-object net.mail.mailmessage
message "`nfantastic!`n"
message "`n$($mb.displayname)`n"
$message += "`n`nplease see the application log on $(& hostname) for eventid 101 and create a filter for source that matches $($scriptname)"
message "`ntry not. do, or do not. there is no try.`n"
$message = "opening tcp port 24158 for single port wmi calls"
$message | out-file -append (join-path $currentlogfolder 'deployerrors.err')
$message | out-file -append (join-path $droplocation 'builderrors.err')
$message+="\par`r`n"
$message = "password doesn't match"
$message = "password match"
$message += "path of your favorite text editor. such as "
$message += "please set `$global:posheditor equalto the "
$message = "recieved a response from $([string]$workstation.name)"
$message = "restarting the windows management instrumentation service"
$message = $result.bannermessage + $result.welcomemessage
$message+="`r`n"
$message = "script: " + $scriptpath + "`nscript user: " + $username + "`nfinished: " + (get-date).tostring()
" `$message = `"script: `" + `$scriptpath + `"``nscript user: `" + `$username + `"``nfinished: `" + (get-date).tostring()`n"
$message = "script: " + $scriptpath + "`nscript user: " + $username + "`nstarted: " + (get-date).tostring()
" `$message = `"script: `" + `$scriptpath + `"``nscript user: `" + `$username + `"``nstarted: `" + (get-date).tostring()`n"
$message = "$($service.name) started."
$message = "$($service.name) stopped."
$message = "setting the windows management instrumentation service to shared host."
$message = "setting the windows management instrumentation service to single mode."
-message "sharepoint warmup failed for url ""$($url)""." -eventid 1001
$message = "starting dependent service $($service.name)"
$message = "stopping dependent service $($service.name)"
$messagesubject = "exchange 2007 transaction logs check."
$messagesubject = "exchange checks."
{$messagesubject += " trial run"}
$messagesubject = "wsus :: declining itanium updates"
$messagesubject = "wsus server cleanup."
$message = switch($connection.serverversion) {
$message = [system.string]::join("`n",($jobs))
$message = "the exising level for $($regpath)\$($diagnosticsubkey) is $($currentlogginglevel)"
$message = "the path specified is invalid. $($filename)"
$message = "the system has access to ac so no battery is being discharged. however, the battery is not necessarily charging."
$message = 'this script must be run as an administrator from an elevated prompt.'
$message.to.add($reportemail)
$message = "unable to contact domain"
$message = "unable to disable wireless, the adapter returned: $($return.returnvalue)"
$message = "unable to enable wireless, the adapter returned: $($return.returnvalue)"
$message = "unable to find a wireless adapter named $($connectionid)"
$message = "unknown"
$message = "updated $($regpath)\$($diagnosticsubkey) to $($logginglevel)"
$message = "valid credentials for " + $_.login + ""
$message+="we are watching....\par`r`n"
$message = $webclient.downloadstring($source)
$message = "what kind of permissions do you want to give this user?"
$message = "would you like to restart your server now? it is required to complete the windows role/feature installation."
$message = "you appear to be running in the console. "
$message += "you can access your profile by typing 'notepad `$profile'"
$message = 'you need to run this from an elevated prompt'
$message+="your temporary password is $password\par`r`n"
$message+="your user id is $accountname\par`r`n"
<meta http-equiv='content-type' content='text/html; charset=iso-8859-1'>
<meta http-equiv=content-type content='text/html; charset=windows-1252'>
meter = @{
$meteringid = gwmi -namespace "root\sms\site_$sitecode" -query `
"$meters meters equals $($meters * 3.28) feet"
"method"
$method = "movemembers"
$metrics = ,($hvnode.node1.clusternet.name, 4)
$miami = "mydomain.com/miami/users"
"mi" { converttokilometers($value) }
[microsoft.activedirectory.management.adgroup] $adsgroup,
[microsoft.activedirectory.management.adgroupscope] $groupscope
[microsoft.exchange.webservices.data.appointmentschema]::subject)
[microsoft.exchange.webservices.data.appointmentschema]::subject,$subject)
[microsoft.exchange.webservices.data.basepropertyset]::$basepropertyset,`
[microsoft.exchange.webservices.data.basepropertyset]$basepropertyset="idonly",
[microsoft.exchange.webservices.data.basepropertyset]::firstclassproperties,
[microsoft.exchange.webservices.data.basepropertyset]::firstclassproperties)
[microsoft.exchange.webservices.data.basepropertyset]::idonly,`
[microsoft.exchange.webservices.data.basepropertyset]::idonly)
[microsoft.exchange.webservices.data.connectingidtype]::smtpaddress,`
[microsoft.exchange.webservices.data.contact]$contact,
[microsoft.exchange.webservices.data.contactschema]::birthday,`
[microsoft.exchange.webservices.data.contactschema]::birthday)
[microsoft.exchange.webservices.data.contactschema]::displayname,`
[microsoft.exchange.webservices.data.contactschema]::displayname,$displayname)
[microsoft.exchange.webservices.data.contactschema] | get-member -static -membertype property | %{$contactschemas.add($_.name,"")}
[microsoft.exchange.webservices.data.contactschema]::weddinganniversary)
[microsoft.exchange.webservices.data.dayoftheweek]$dayoftheweek,
[microsoft.exchange.webservices.data.dayoftheweekindex]$dayoftheweekindex
[microsoft.exchange.webservices.data.emailaddresskey]::$contactpropertyname`
[microsoft.exchange.webservices.data.emailaddresskey] | get-member -static -membertype property | %{$emailaddresskeys += $_.name}
[microsoft.exchange.webservices.data.emailmessageschema]::ccrecipients)
[microsoft.exchange.webservices.data.emailmessageschema]::datetimecreated,$enddate)
[microsoft.exchange.webservices.data.emailmessageschema]::datetimecreated,$startdate)
[microsoft.exchange.webservices.data.emailmessageschema]::datetimereceived,`
[microsoft.exchange.webservices.data.emailmessageschema]::displaycc)
[microsoft.exchange.webservices.data.emailmessageschema]::displaycc,$displaycc)
[microsoft.exchange.webservices.data.emailmessageschema]::displayto,`
[microsoft.exchange.webservices.data.emailmessageschema]::displayto,$displayto)
[microsoft.exchange.webservices.data.emailmessageschema]::from,`
[microsoft.exchange.webservices.data.emailmessageschema]::from,$from)
[microsoft.exchange.webservices.data.emailmessageschema]::hasattachments)
[microsoft.exchange.webservices.data.emailmessageschema]::hasattachments,$true)
[microsoft.exchange.webservices.data.emailmessageschema]::itemclass,`
[microsoft.exchange.webservices.data.emailmessageschema]::itemclass,"ipm.note")
[microsoft.exchange.webservices.data.emailmessageschema]::mimecontent)
[microsoft.exchange.webservices.data.emailmessageschema]::size,`
[microsoft.exchange.webservices.data.emailmessageschema]::size,$largeemailsize)
[microsoft.exchange.webservices.data.emailmessageschema]::subject,`
[microsoft.exchange.webservices.data.emailmessageschema]::subject,$subject)
[microsoft.exchange.webservices.data.emailmessageschema]::torecipients,`
[microsoft.exchange.webservices.data.exchangeversion]::$exchangeversion)
[microsoft.exchange.webservices.data.exchangeversion]$exchangeversion="exchange2010_sp2",
[microsoft.exchange.webservices.data.exchangeversion]::$exchangeversion,$tzinfo)
[microsoft.exchange.webservices.data.fileasmapping]$fileasmapping="givennamespacesurname"
[microsoft.exchange.webservices.data.folder]$folder,
[microsoft.exchange.webservices.data.folderid]$folderid,
[microsoft.exchange.webservices.data.folder]$parentfolder,
[microsoft.exchange.webservices.data.folderpermissionlevel]$permissionlevel
[microsoft.exchange.webservices.data.folderschema]::childfoldercount,`
[microsoft.exchange.webservices.data.folderschema]::childfoldercount)
[microsoft.exchange.webservices.data.folderschema]::displayname,`
[microsoft.exchange.webservices.data.folderschema]::displayname)
[microsoft.exchange.webservices.data.folderschema]::displayname,$currentfoldername)
[microsoft.exchange.webservices.data.folderschema]::displayname,$displayname)
[microsoft.exchange.webservices.data.folderschema]::displayname, $foldername)
[microsoft.exchange.webservices.data.folderschema]::displayname,$foldername)
[microsoft.exchange.webservices.data.folderschema]::folderclass, "ipf.task")
[microsoft.exchange.webservices.data.folderschema]::totalcount,`
[microsoft.exchange.webservices.data.foldertraversal]$foldertraversal="deep"
[microsoft.exchange.webservices.data.imaddresskey]::$contactpropertyname`
[microsoft.exchange.webservices.data.imaddresskey] | get-member -static -membertype property | %{$imaddresskeys += $_.name}
[microsoft.exchange.webservices.data.itemid]$destinationfolderdisplayname
[microsoft.exchange.webservices.data.itemid]$messageid,
[microsoft.exchange.webservices.data.logicaloperator]::and)
[microsoft.exchange.webservices.data.month]$month,
[microsoft.exchange.webservices.data.phonenumberkey]::$contactpropertyname`
[microsoft.exchange.webservices.data.phonenumberkey] | get-member -static -membertype property | %{$phonenumberkeys += $_.name}
[microsoft.exchange.webservices.data.physicaladdresskey]::$currentphysicaladdresstype`
[microsoft.exchange.webservices.data.physicaladdresskey] | get-member -static -membertype property | %{$physicaladdresskeys += $_.name}
[microsoft.exchange.webservices.data.resolvenamesearchlocation]::directoryonly,$false)
[microsoft.exchange.webservices.data.searchfolder]$searchfolder,
[microsoft.exchange.webservices.data.searchfoldertraversal]$traversal="shallow",
[microsoft.exchange.webservices.data.sendinvitationsmode]::sendtonone)
[microsoft.exchange.webservices.data.task]$identity,
[microsoft.exchange.webservices.data.userconfigurationproperties]::all)
[microsoft.exchange.webservices.data.wellknownfoldername]::calendar,`
[microsoft.exchange.webservices.data.wellknownfoldername]::contacts,`
[microsoft.exchange.webservices.data.wellknownfoldername]::contacts)
[microsoft.exchange.webservices.data.wellknownfoldername]::msgfolderroot,`
[microsoft.exchange.webservices.data.wellknownfoldername]::publicfoldersroot)
[microsoft.exchange.webservices.data.wellknownfoldername]::root,`
[microsoft.exchange.webservices.data.wellknownfoldername]::$wellknownfoldername)
'microsoft .net framework ngen v4.0.30319_x64',
'microsoft .net framework ngen v4.0.30319_x86',
"microsoft office*"
microsoft powershell source file -- created with sapien technologies primalscript 2009
"/microsoft-server-activesync/*"
[microsoft.sharepoint.spfeaturescope] $scope,
[microsoft.visualbasic.interaction]::inputbox("no difference between $sourceaccount & $destinationaccount groupmembership found. $destinationaccount will not be added to any additional groups.",0,"exit message");return
[microsoft.windowsazure.internal.dhcpclient]::getdhcpinterfaces() | % {
"middle name" = "middlename";
migrateofflinevms
$migrationlogs = "c:\program files\microsoft\exchange server\logging\migrationlogs"
"mileage" = "mileage";
"$miles miles equals $( ($miles * 1.61) ) kilometers"
-minbandwidthweightaction $cluster_qospolicy_minbandwidth
-minbandwidthweightaction $default_qospolicy_minbandwidth
-minbandwidthweightaction $livemigration_qospolicy_minbandwidth
-minbandwidthweightaction $smb_qospolicy_minbandwidth
$minimumpasswordage = [system.timespan]::fromticks($minimumpasswordageticks).totalminutes
$minimumpasswordageticks = [math]::abs($currentpasswordpolicyobject."msds-minimumpasswordage")
$minimumpasswordlength = $currentpasswordpolicyobject."msds-minimumpasswordlength"
$minimumpowerguiversion = [system.version]'2.4.0.1659'
$min=nextip($ip)
minrtt = "0";
$min = [system.net.ipaddress]::parse("0.0.0.0")
$minusdays = -$dayspast
$minute = $latest.minute
$minute = $now.minute
minutesdown, `
$minutesinperiod = $uptime.totalminutes
$minutes = " minute "
minutesup, `
minutes = $uptime.minutes
" missing exit : $fileexit missing, something may have went wrong, re-trying $bid"
mixercontrol.cbstruct = mcsize;
mixercontrol = new volumestructs.mixer();
mixercontrol = (volumestructs.mixer)marshal.ptrtostructure(linecontrols.pamxctrl, typeof(volumestructs.mixer));
mixerdetails.cbdetails = marshal.sizeof(volume);
mixerdetails.cbstruct = marshal.sizeof(mixerdetails);
mixerdetails.cchannels = 1;
mixerdetails.dwcontrolid = mixercontrol.dwcontrolid;
mixerdetails.item = 0;
mixerdetails.padetails = marshal.alloccotaskmem(marshal.sizeof(typeof(volumestructs.unsignedmixerdetails)));
mkdir c:\config\cert -force
mkdir "c:\files" -ea 0
mkdir c:\files\en-us
mkdir $copyto | out-null
mkdir "hklm:\\security\policy\secrets\mysecret" | out-null
$mlt = $flow.messagelatencytime
$mm = 0
$mm = [int][math]::truncate($lastrun/100);
"mobilephone","businessaddresspostalcode","businessaddressstate",`
"mobile phone" = "phone:mobilephone";
"mobilephone" = "phone:mobilephone";
$modeldata = get-axmodel -model $modelname -server $sqlserver -database $sqldatabase
$modelfile = (join-path $folder $models.get($idx))
$modelfile = join-path (join-path $droplocation "application\appl\") ('{0}.axmodel' -f $modelname)
$model = get-item -path (join-path (join-path $applicationdir $modeltobuild.folder) 'model.xml' )
$modelhash = @{}
$modelhash.add($modelname, $axlayer)
$modellayermap = @{}
$modellayermap.add($layerid, $list)
$modellayermap = $modellayermap.getenumerator() | sort-object name
$modellayermap = $modellayermap.getenumerator() | sort-object name -descending
$modellayermap = @{ $modellayermap.name = $modellayermap.value}
$modellayermap.set_item($layerid, $list)
$modellist = @()
$modellist += ('{0}.axmodel' -f $modelname) +[char]10
$modellist += ($fileinfo.name) +[char]10
$modellist = (join-path $folder $list)
$modellist = (join-path $folder 'modellist.txt')
$modellist = (join-path $folder modellist.txt)
$modellist | out-file (join-path (join-path $droplocation "application\appl\") "modellist.txt") -encoding default
$modelmanifest = get-axmodelmanifest -file (join-path $folder $model) -server $sqlserver -database $sqldatabase -outvariable out -verbose
$modelmanifest = get-axmodelmanifest -file $model -server $sqlserver -database $sqldatabase -outvariable out -verbose
$models = @()
$models += $file.name
$models += $line.trim()
$models += $model
$models = read-modellist ($folder)
$moderatedgroups=($alldistgroups | ?{$_.moderationenabled -like "true"} | measure-object).count
$moderatedgroups=($groups | ?{$_.moderationenabled -like "true"} | measure-object).count
$modificationowner = "someuniqueidentifier"
$modifiedbefore = 3
modified = [datetime]$properties.modified.'
"modify aia extensionurls"
$modulefilepath = $websvcinstalldirregkey.'install directory' + 'microsoft.exchange.webservices.dll'
</modules>
<modules>
$m = $oldversion.split('.')
'mon' {
$mondaytimethresholdmins = 300
$monitor = ""
$monitor += "(" + $mon.screenwidth + " x " + $mon.screenheight + ") "
$mon = $_.mon
'month' {
$month = $latest.month
"monthlyrecurrence" {
$month = $now.month
$monthrepeat++
mount-diskimage -imagepath $imagepath -erroraction stop
move-adobject -identity $computerdn -targetpath $destinationdn
move-adobject -identity $curpath -targetpath $tgtpath
move-adobject -identity $dn -targetpath $location
move-adobject -identity $objnewgroup.distinguishedname.tostring() -targetpath $newoudest
move-adobject -identity $objnewuser.distinguishedname.tostring() -targetpath $newoudest
move-cslegacyuser -identity $userinfo.sipaddress -target "lync-fe.mydomain.com"
$movedby = $_."move-mailbox".taskheader.runningas
$movedmailboxes = @()
$movedmailboxes += ,@($mailboxcounter, $runningas,$starttime,$endtime,$totalsize,$errorcount,$completedcount,$warningcount,$identity,$sourcedatabase,$targetdatabase,$mailboxsize,$duration,$resultcode)
move-item $folder1[$j].fullname $destinationfolder -force
move-item $folder2[$k].fullname $destinationfolder -force
$_."move-mailbox".taskdetails.item | %{
$moveobject = $colclass.psbase.invokemethod($method,$inparams,$null)
$moveobject = $mtrclass.psbase.invokemethod($method,$inparams,$null)
$moveobject = $pkgclass.psbase.invokemethod($method,$inparams,$null)
move-qadobject -identity $computerdn -newparentcontainer $destinationdn
$moverequestidentity = $movereqs | select @{name="identity";expression={$_.alias}}
$moveresults.columns.add("durationinsec",[string]) | out-null
$moveresults.columns.add("duration",[string]) | out-null
$moveresults.columns.add("endtime",[string]) | out-null
$moveresults.columns.add("errorcode",[string]) | out-null
$moveresults.columns.add("iswarning",[string]) | out-null
$moveresults.columns.add("itemcount",[string]) | out-null
$moveresults.columns.add("mailboxsizemb",[string]) | out-null
$moveresults.columns.add("mailbox",[string]) | out-null
$moveresults.columns.add("movedby",[string]) | out-null
$moveresults.columns.add("primarysmtpaddress",[string]) | out-null
$moveresults.columns.add("speedinkbps",[int]) | out-null
$moveresults.columns.add("starttime",[string]) | out-null
$moveresults.columns.add("targetdatabase",[string]) | out-null
$moveresults | export-csv -notypeinformation $csvreport
$moveresults | foreach {
$moveresults.rows.add($newdtrow)
$movesperjob = [math]::round($mbxmovearray.count / $jobsplit)
movestatuscheck
move-vmstorage -vm $vm -destinationstoragepath $path
$movingmailboxes | foreach {
$movingmailboxes = get-distributiongroupmember groupofusersbeingmo
$movingmailboxes | get-mailbox | where {($_.usedatabasequotadefaults -eq $true) -and ($_.issuewarningquota -like 0)} | `
$movingmailbox = get-mailbox $_.identity
$m = $reporttime.minutes
$msbuild = "'{0}\msbuild.exe'" -f $msbuildpath
$ms.close()
$m.setvalue([string]([int]($m.getvalue($m.count - 1)) + 1), $m.count - 1)
$msg.attachments.add($attach)
$msg.body = get-content $diskreport
$msg.body = "<html><body><b>review items for $listdisplayname<br /><br /></b>the following document ($documentname) has a review date of $reviewdate.<br /><br />click <a href = '"+ $doclibraryviewurl + $viewfilter +"'>here</a> to review all documents which have a review date on $reviewdate.</body></html>"
$msg.body = $htmlmessage
$msg.body = $mailbody
$msg.body = $mailtext
$msg.body = $output
$msgboxvalue = "no sccm record for that computer"
$msg.cc.add($globaladadminmail)
$msg = emailstructure $owneremail $doclibraryviewurl
$msg+=$_.exception.message
$msg.from = $emailfromaddress
$msg.from = $fromemail
$msg.from = $mailaddress
$msg.from = $mailfrom
$msg.from = "myself@company.com"
$msg.from = $noreplymail
$msg.from = "patil amol - munich-mr - external<apatil@munichre.com>"
$msg.isbodyhtml = "true"
$msg.isbodyhtml = $true
$msg = new-object net.mail.mailmessage
$msg = new-object system.net.mail.mailmessage ($from,$sendto,$subject,$body)
$msg = new-object system.net.mail.mailmessage $from, $to, $subject, $body
$msg.priority = [system.net.mail.mailpriority]::high
$msgpropertyset = new-object microsoft.exchange.webservices.data.propertyset(`
$msg.subject = "datastores usage report - $vcs"
$msg.subject = $emailsubjectline
$msg.subject = "environment diskspace report for $titledate"
$msg.subject = "[error] the account " + $domainnetbiosname + "\" + $testaccount.samaccountname + " was notremoved from active directory."
$msg.subject = "[error] the password reset for " + $domainnetbiosname + "\" + $samaccountname + " was not done successfully"
$msg.subject = "[error] the user " + $displayname + " was not created"
$msg.subject = "[important] the account " + $domainnetbiosname + "\" + $testaccount.samaccountname + " was removed from active directory."
$msg.subject = "[important] the account "+ $domainnetbiosname + "\" + $testaccount.samaccountname + " will expire in few days and will be automatically removed after the expiry."
$msg.subject = "resource pool & datastores usage report."
$msg.subject = "sql job report "
$msg.subject = "[success] the password reset for " + $domainnetbiosname + "\" + $samaccountname + " was done successfully"
$msg.subject = "[success] the test account for " + $displayname + " was created."
$msg="there was an error connecting to $url"
$msg.to.add($accountcreator)
$msg.to.add($mailaddress)
$msg.to.add($mailto)
$msg.to.add($receiver)
$msg.to.add($to)
$msg.to.add($user)
$msg.to.add($users)
$msifilename = $script:currentexecutingpath + "\$filename"
/msipcclient:`"$sharepoint2013path\prerequisiteinstallerfiles\setup_msipc_x64.msi`" `
$ms = new-object io.memorystream
$ms = new-object io.memorystream @(,$encrypted)
$msoldomains = get-msoldomain -erroraction 'silentlycontinue'
" -msol username: $username" | out-file $logpath -append
$ms= $reporttime.milliseconds
$mss = get-scommanagementserver
$mswmiauthor = (get-aduser $env:username).userprincipalname
"mswmi-author" = $mswmiauthor;
$mswmichangedate = (get-date).touniversaltime().tostring("yyyymmddhhmmss.ffffff-000")
"mswmi-changedate" = $mswmichangedate;
"mswmi-changedate" = $mswmicreationdate;
$mswmicreationdate = (get-date).touniversaltime().tostring("yyyymmddhhmmss.ffffff-000")
"mswmi-creationdate" = $mswmicreationdate
"mswmi-id"= $wmiguid;
"mswmi-name" = $name;
"mswmi-name" = $targetname;
$mswmiparm1 = "$description "
$mswmiparm1 = $description + " "
"mswmi-parm1" = $mswmiparm1;
$mswmiparm2 += "3;10;" + $_.length + ";wql;root\cimv2;" + $_ + ";"
$mswmiparm2 = $expression.count.tostring() + ";"
"mswmi-parm2" = $mswmiparm2;
$msxservers = get-exchangeserver | where {$_.serverrole -ne "edge" -and $_.admindisplayversion.major -eq "14"} | sort name
$msxservers = get-exchangeserver | where {$_.serverrole -ne "edge" -and $_.admindisplayversion.major -eq "8"} | sort name
$msxversion = $msxserver.exchangeversion
$m = [system.double][math]::truncate($media/100);
$mtrclass = [wmiclass] "root\sms\site_$($sitecode):sms_objectcontaineritem"
$multi = ""
$multi = $date.addyears(1600).tolocaltime()
$multi = $false
$multi = "$multi;" `
<multipleinstancespolicy>ignorenew</multipleinstancespolicy>
$multi = $true
$mv = move-scvirtualharddisk -bus 0 -lun 0 -ide -path $targetvhdpath -jobgroup $guid
$mxsorgdn = $search.findone().properties["distinguishedname"]
$mycommand = 'add-windowsfeature ' + [string]::join(",",$windowsfeatures) + $source
$mydomaincnx = $domain
$mydomain = get-addomain
$mydomainname = $mydomain.netbiosname
$mydomainsid = gwmi -namespace root\microsoftactivedirectory -class microsoft_localdomaininfo | select-object dnsname, sid
$myfile = $mylist.files | ? {$_.title -eq $filename}
$myfile.undocheckout()
$myforest = [system.directoryservices.activedirectory.forest]::getcurrentforest()
$myformatcontextmenustrip.hide()
$myformatcontextmenustrip.location = new-object -typename system.drawing.point($formspacer, $formspacer)
$myformatcontextmenustrip.name = "myformatcontextmenustrip"
$myformatcontextmenustrip = new-object -typename system.windows.forms.contextmenustrip($formcomponents)
$myformatcontextmenustrip.show($sender, $eventarg.x, $eventarg.y)
$myformatform.clientsize = new-object -typename system.drawing.size(($($myformatform.controls[$myformatform.controls.count - 1]).right + $formspacer), ($($myformatform.controls[$myformatform.controls.count - 1]).bottom + $formspacer))
$myformatform.close()
$myformatform.controls.add($cancelbutton)
$myformatform.controls.add($myformatlabel)
$myformatform.controls.add($myformattreeview)
$myformatform.controls.add($savebutton)
$myformatform.font = new-object -typename system.drawing.font("tahoma", 10, [system.drawing.fontstyle]::regular, [system.drawing.graphicsunit]::point)
$myformatform.formborderstyle = [system.windows.forms.formborderstyle]::fixed3d
$myformatform.icon = ([system.drawing.icon](new-object -typename system.drawing.icon((new-object -typename system.io.memorystream(($$ = [system.convert]::frombase64string($formatedit_ico)), 0, $$.length)))))
$myformatform.maximizebox = $false
$myformatform.minimizebox = $false
$myformatform.name = "myformatform"
$myformatform = new-object -typename system.windows.forms.form
$myformatform.startposition = [system.windows.forms.formstartposition]::centerscreen
$myformatform.text = "$scriptname - $scriptversion"
$myformatlabel.autosize = $false
$myformatlabel.autosize = $true
$myformatlabel.borderstyle = [system.windows.forms.borderstyle]::fixed3d
$myformatlabel.font = new-object -typename system.drawing.font($myformatlabel.font.fontfamily, ($myformatlabel.font.size + 1), [system.drawing.fontstyle]::bold, $myformatlabel.font.unit)
$myformatlabel.height = $tempvalue
$myformatlabel.location = new-object -typename system.drawing.point($formspacer, $formspacer)
$myformatlabel.name = "myformatlabel"
$myformatlabel = new-object -typename system.windows.forms.label
$myformatlabel.textalign = [system.drawing.contentalignment]::middlecenter
$myformatlabel.text = "myformat - powershell type formater"
$myformatlabel.width = 500
$myformattooltip = new-object -typename system.windows.forms.tooltip($formcomponents)
$myformattooltip.settooltip($cancelbutton, "help for control $($cancelbutton.name)")
$myformattooltip.settooltip($myformatform, "help for control $($myformatform.name)")
$myformattooltip.settooltip($myformatlabel, "help for control $($myformatlabel.name)")
$myformattooltip.settooltip($myformattreeview, "help for control $($myformattreeview.name)")
$myformattooltip.settooltip($savebutton, "help for control $($savebutton.name)")
$myformattooltip.tooltiptitle = "$scriptname - $scriptversion"
$myformattreeview.add_nodemouseclick({nodemouseclick-myformattreeview -sender $myformattreeview -eventarg $_})
$myformattreeview.add_nodemousedoubleclick({nodemousedoubleclick-myformattreeview -sender $myformattreeview -eventarg $_})
$myformattreeview.expandall()
$myformattreeview.height = 400
$myformattreeview.location = new-object -typename system.drawing.point($formspacer, ($myformatlabel.bottom + $formspacer))
$myformattreeview.name = "myformattreeview"
$myformattreeview = new-object -typename system.windows.forms.treeview
$myformattreeview.selectednode.checked = $false
$myformattreeview.selectednode.checked = $true
$($myformattreeview.selectednode).expand()
$myformattreeview.selectednode.expand()
$myformattreeview.selectednode.nodes.clear()
$myformattreeview.selectednode.nodes.item("types").nodes.item(0).tag = $nevtypetextbox.text
$myformattreeview.selectednode.nodes.item("types").nodes.item(0).text = "typename: $($nevtypetextbox.text)"
$myformattreeview.selectednode.remove()
$myformattreeview.selectednode.tag = $($nettypetextbox.text)
$myformattreeview.selectednode.tag = $nevnametextbox.text
$myformattreeview.selectednode.tag = $($nlilabeltextbox.text)
$myformattreeview.selectednode.tag = $($nlipropertytextbox.text)
$myformattreeview.selectednode.tag = "wide item"
$myformattreeview.selectednode.text = "item: $($nlilabeltextbox.text)"
$myformattreeview.selectednode.text = "item: $($nlipropertytextbox.text)"
$myformattreeview.selectednode.text = "item: wide item"
$myformattreeview.selectednode.text = "$($temptype): $($nevnametextbox.text)"
$myformattreeview.selectednode.text = "typename: $($nettypetextbox.text)"
$myformattreeview.width = $myformatlabel.width
$mykey = "mysecret"
$mylist = $myweb.getfolder($targetlibrary)
$mylocaladdress = $matches.laddress
$mylocalport = $matches.lport
$mypid = $matches.pid
$myprocessname = (get-process -id $matches.pid -erroraction silentlycontinue).processname
$myprocesspath = (get-process -id $matches.pid -erroraction silentlycontinue).path
$myprotocol = $matches.protocol
$myremoteaddress = $matches.raddress
$myremoteport = $matches.rport
$mysession = new-pssession -computername $computername -erroraction stop
$mysrvconn.loginsecure = $false;
$mysrvconn.login = $uname;
$mysrvconn = new-object microsoft.sqlserver.management.common.serverconnection;
$mysrvconn.password = $pwd;
$mysrvconn.serverinstance= $srv;
$mystate = $matches.state
$mysubweb = $sites.rootweb
my-test -myinput "string"
$myuser = (get-wmiobject -class win32_process -filter ("processid = "+$matches.pid)).getowner().user
$myweb = get-spweb $targetweb
$myxml = new-object -typename system.xml.xmldocument
$myxml.save($($savesavefiledialog.filename))
$n++
$n=0
$n = 8*$j
$nalpaths = gwmi -namespace "root\sms\site_$sitecode" -query `
name
$name
$name,
name, `
name:
$name = $a[-1]
name = $accountname
$name = $adobject."mswmi-name"
@{name="autogrowth";expression={if($_.growthtype-eq "percent"){$_.growth.tostring()+" %"}else{([math]::round($_.growth/1kb,3)).tostring()+" mib"}}},
@{name="availablespace_mib";expression={([math]::round(($_.size-$_.usedspace)/1kb,3))}},
$name = $casarray.name
@{name="classification";expression={[string]$_.updateclassificationtitle}},`
name = 'clusternet'
$name = $db.name
-name $_.'display name' `
name = $_.displayname
$name = $_.dnshostname;
$nameelement.innertext = $($viewnode.tag)
$nameelement = $viewelement.appendchild($myxml.createelement("name"))
$name.encode("cn=$script:adfssubjectname", 0)
$name = "$enterprefix"+"$i"
name = $entry.name
@{name="filegroupname";expression={$fg.name}},
@{name="filegroupname";expression={$null}},
@{name="fileid";expression={($_.id)}},
@{name="filename";expression={($_.filename.substring($_.filename.lastindexof("\")+1))}},
@{name="files"; expression={0}},
@{name="files"; expression={"{0:n0}" -f $_.files}},
@{name="files"; expression={$_.count; $script:totalcount += $_.count}},
@{name="files"; expression={$script:totalcount}},
@{name="filetype";expression={"log"}},
@{name="filetype";expression={"rows"}},
$name | foreach-object {
@{name="freespace(gb)";expression={"{0:n1}" -f($_.freespace/1gb)}},`
@{name="% freespace(gb)";expression={"{0:n2}%" -f(($_.freespace/$_.size)*100)}}
$name = $gpo.displayname
name = $gporeport.gpo.name
name = "hc2n1"
name = "hc2n2"
name = "hc2n3"
name = "hc2n4"
name = "hc2n5"
name = "hc2n6"
name = "hc4n10"
name = "hc4n9"
name = $hypervclustername
$name = $identityelements.item('name')
@{name="isoffline";expression={($_.isoffline)}},
@{name="isreadonly";expression={($_.isreadonly)}},
name = $item.name
@{name="kb article";expression={[string]::join(' | ',$_.knowledgebasearticles)}},`
name = $key;
name = 'lmnet'
@{name="logicalname";expression={($_.name)}},
name = 'managementnet'
$_.name -match $class -and `
@{name="maxsize";expression={($_.maxsize)}},
$name = $member.samaccountname.tostring()
$name = $modification.name
name = $name
name = ($_.name -replace 'w3svc/apppools/')
$name = new-object -comobject 'x509enrollment.cx500distinguishedname.1'
@{name="newsid";expression={$_.objectsid}} |
@{name="newsid";expression={$_.objectsid}}, samaccountname, displayname, `
$_.name -notlike 'cim*'
$name = $object.name
$nameofipv4resource = $firstipv4resource.name
name,passwordlastset,operatingsystem,operatingsystemservicepack `
@{name="path"; expression={$directory.fullname}},
@{name="path";expression={($_.filename)}}
@{name="path"; expression={"<total>"}},
name = $printqueue.name
@{name="product family";expression={[string]::join(' | ',$_.productfamilytitles)}},`
@{name="product title";expression={[string]::join(' | ',$_.producttitles)}},`
name = request.servervariables("server_name")
$nameresolutioncollection = $exservice.resolvename($identity,`
$name = $result.properties.item("ldapdisplayname")[0]
$names = @()
$names += $comp.properties.item("name")
-name $server `
@{name="size_bytes";expression={($_.size*1024)}},
@{name="size"; expression={0}}
@{name="size"; expression={"{0:n0}" -f $_.size}}
@{name="size"; expression={$script:totalbytes}}
@{name="size"; expression={$_.sum; $script:totalbytes += $_.sum}}
@{name="size_gib";expression={([math]::round($_.size/1mb,3))}},
@{name="size_kib";expression={$_.size}},
@{name="size_mib";expression={([math]::round($_.size/1kb,3))}},
namespace microsoft.windowsazure.internal
namespace pc_volumecontrol
namespace powershelltypeextensions
namespace psutils
$namespace = "root\cimv2"
namespace = 'root\cimv2'
namespace = 'root\microsoftiisv2'
namespace = 'root\webadministration'
@{name="spaceused_mib";expression={([math]::round($_.usedspace/1kb,3))}},
namespace volumecontrol.library.constants
namespace volumecontrol.library.structs
namespace volumecontrol.library.win32
-namespace win32functions `
namespace window
name = $sqlobject.loginname;
name = $storageclustername
name = [string]$adobject.properties.name
$name = [system.net.dns]::gethostentry($ip.address).hostname
name = $_.taskname
name = 'tenantnet'
@{name="title";expression={[string]$_.title}},`
@{name="uninstallation supported";expression={[string]$_.uninstallationbehavior.issupported}} | convertto-html -head $style
$name = $userinfo.displayname
$name=$userinfo.name
name = $userobject.name
name = $volumeidentifier.name
-name "win32lockworkstation" `
" nat : $isnat"
nativecredential ncred `= `(nativecredential`)marshal.ptrtostructure`(handle,
nativecredential ncred = (nativecredential)marshal.ptrtostructure(pcred, typeof(nativecredential));
nativecredential ncred `= new nativecredential`(`)`;
nativemethods.dhcpcapicleanup();
nativemethods.dhcpcapi_params_array recdparams = new nativemethods.dhcpcapi_params_array();
nativemethods.dhcpcapi_params_array sendparams = new nativemethods.dhcpcapi_params_array();
nativemethods.dhcpcapi_params recv = new nativemethods.dhcpcapi_params();
nativemethods.dhcprequestflags flags = nativemethods.dhcprequestflags.dhcpcapi_request_synchronous;
@{n="available reservation mb";e={$_.extensiondata.runtime.memory.unreservedforpool/1mb}}|convertto-html -head $a|out-file c:\pscripts\gautham -test\respool\$($vc).html -append
$nb_approved++
$nb_approved=0
$nb_rejected++
$nb_rejected=0
@{n='capacity (gb)' ;e={"{0:n2}" -f ($_.size/1gb)}},
@{n="capacitygb"; e={[math]::round($_.summary.capacity/1gb,0)}},
"`nclasses in $ns namespace ...."
ncred.attributecount `= 0`;
ncred.attributes `= intptr.zero`;
ncred.comment `= intptr.zero`;
ncred.credentialblob `= marshal.stringtocotaskmemuni`(cred.credentialblob`)`;
ncred.credentialblobsize `= `(uint32`)cred.credentialblobsize`;
ncred.persist `= (uint32)1`;
`$ncredptr`= new-object intptr
ncred.targetalias `= intptr.zero`;
ncred.targetname `= marshal.stringtocotaskmemuni`(cred.targetname`)`;
ncred.type `= cred_type.generic`;
ncred.username `= marshal.stringtocotaskmemuni`(system.environment.username`)`;
"`ndomain name: " + $domain.name
@{n='driver' ;e={"{0:n0}" -f ($_.name)}},
$needsreboot = $false
$needsreboot = $installresult.rebootrequired
$needtoadd = $true
$nestedgroup = @{}
$nestedgroup.add($name,$member.displayname.tostring())
$nestedgroups = @{}
$nestedgroups.add($distgroup.name,"parent group")
$nestedgroups.add($name,$distgroup.name.tostring())
$nest=get-distributiongroupmember $nestedgroup -resultsize unlimited
$netbiosdomain = $objnt.invokemember("get", "invokemethod", $null, $objtrans, 3)
" netbios name: $netbiosname"
$netbiosname = ($searcher.findone()).properties.item("netbiosname")
$netcancelbutton.add_click({click-netcancelbutton -sender $netcancelbutton -eventarg $_})
$netcancelbutton.autosize = $true
$netcancelbutton.location = new-object -typename system.drawing.point(($netsavebutton.right + $formspacer), $netsavebutton.top)
$netcancelbutton.name = "netcancelbutton"
$netcancelbutton = new-object -typename system.windows.forms.button
$netcancelbutton.text = "cancel"
$netcancelbutton.width = ($newedittypelabel.width - $formspacer) / 2
$netconfig = $_
"net-framework-features",
$netinterface.enablestatic($ip, $mask)
$netinterface = get-wmiobject win32_networkadapterconfiguration | where {$_.interfaceindex -eq $index}
$netinterface.setdnsserversearchorder($dns)
$netinterface.setdynamicdnsregistration($registerdns)
$netinterface.setgateways($gateway)
$netlogonpath = "\\$dc\c$\windows\debug\netlogon.log"
$netqosflowcontrolpriority,
-netqosflowcontrolpriority $dcbflowcontrol `
-netqospolicy @(
$netqospolicy
$netqospolicy | % {
netqospolicy -name cluster `
netqospolicy -name default `
netqospolicy -name livemigration `
netqospolicy -name smb `
-netqostrafficclass @(
$netqostrafficclass | % {
$netqostrafficclass,
netqostrafficclass -name cluster `
netqostrafficclass -name livemigration `
netqostrafficclass -name smb `
$netroute | add-member -membertype noteproperty -name "totalmetric" -value $totalmetric
$netrouteobjects | format-table @{expression={$_.interfaceindex};label="ifindex";width=8}, `
$netrouteobjects = @(get-netroute)
$netsavebutton.add_click({click-netsavebutton -sender $netsavebutton -eventarg $_})
$netsavebutton.autosize = $true
$netsavebutton.location = new-object -typename system.drawing.point($formspacer, ($nettypelabel.bottom + $formspacer))
$netsavebutton.name = "netsavebutton"
$netsavebutton = new-object -typename system.windows.forms.button
$netsavebutton.text = "save"
$netsavebutton.width = ($newedittypelabel.width - $formspacer) / 2
"netsh int ipv4 add address name=$switch address=$ipv4address2 mask=$ipv4subnetmask2"
netsh int ipv4 add address name=$switch address=$ipv4address2 mask=$ipv4subnetmask2
"netsh int ipv4 add address name=$switch address=$ipv4address mask=$ipv4subnetmask"
netsh int ipv4 add address name=$switch address=$ipv4address mask=$ipv4subnetmask
" netsh int ipv4 add dnsservers name=$switch address=$ipv4dns "
" netsh int ipv4 add dnsservers name=$switch address=$ipv4dns2 "
netsh int ipv4 add dnsservers name=$switch address=$ipv4dns2 validate=no
netsh int ipv4 add dnsservers name=$switch address=$ipv4dns validate=no
"netsh int ipv4 add route prefix=0.0.0.0/0 interface=""$switch"" nexthop=$ipv4gateway"
"netsh int ipv6 add address interface=$switch address=$ipv6address/$ipv6prefixlength"
netsh int ipv6 add address interface=$switch address=$ipv6address/$ipv6prefixlength
"netsh int ipv6 add dnsservers name=$switch address=$ipv6dns"
"netsh int ipv6 add dnsservers name=$switch address=$ipv6dns2"
netsh int ipv6 add dnsservers name=$switch address=$ipv6dns2 validate=no
netsh int ipv6 add dnsservers name=$switch address=$ipv6dns validate=no
"netsh int ipv6 add route ::/0 $switch $ipv6gateway "
netstat -ano > "$ziplocation\netstat $computer $year-$month-$day $hour$minute.txt"
$netstat = netstat -a -n -o | where-object { $_ -match "(udp|tcp)" }
$nettypelabel.autosize = $false
$nettypelabel.autosize = $true
$nettypelabel.height = $tempvalue
$nettypelabel.location = new-object -typename system.drawing.point($formspacer, ($newedittypelabel.bottom + $formspacer))
$nettypelabel.name = "nettypelabel"
$nettypelabel = new-object -typename system.windows.forms.label
$nettypelabel.textalign = [system.drawing.contentalignment]::middleright
$nettypelabel.text = ".net type:"
$nettypelabel.width = 80
$nettypetextbox.focus()
$nettypetextbox.location = new-object -typename system.drawing.point(($nettypelabel.right + $formspacer), $nettypelabel.top)
$nettypetextbox.maxlength = 100
$nettypetextbox.name = "nettypetextbox"
$nettypetextbox = new-object -typename system.windows.forms.textbox
$nettypetextbox.text = $($myformattreeview.selectednode.tag)
$nettypetextbox.width = $newedittypelabel.right - $nettypetextbox.left
networkrolesetting = @(
-networksetting (
$_.networksetting['adaptersetting'],
$_.networksetting['interfacemetric']
$_.networksetting['nicteam'],
$_.networksetting['throughputsetting'],
$nevcancelbutton.add_click({click-nevcancelbutton -sender $nevcancelbutton -eventarg $_})
$nevcancelbutton.autosize = $true
$nevcancelbutton.location = new-object -typename system.drawing.point(($nevsavebutton.right + $formspacer), $nevsavebutton.top)
$nevcancelbutton.name = "nevcancelbutton"
$nevcancelbutton = new-object -typename system.windows.forms.button
$nevcancelbutton.text = "cancel"
$nevcancelbutton.width = ($neweditviewlabel.width - $formspacer) / 2
$nevnamelabel.location = new-object -typename system.drawing.point($formspacer, ($nevviewlabel.bottom + $formspacer))
$nevnamelabel.name = "nevnamelabel"
$nevnamelabel = new-object -typename system.windows.forms.label
$nevnamelabel.size = $nevviewlabel.size
$nevnamelabel.textalign = [system.drawing.contentalignment]::middleright
$nevnamelabel.text = "view name:"
$nevnametextbox.location = new-object -typename system.drawing.point(($nevnamelabel.right + $formspacer), $nevnamelabel.top)
$nevnametextbox.maxlength = 100
$nevnametextbox.name = "nevnametextbox"
$nevnametextbox = new-object -typename system.windows.forms.textbox
$nevnametextbox.text = $($myformattreeview.selectednode.tag)
$nevnametextbox.text = $null
$nevnametextbox.width = $neweditviewlabel.right - $nevnametextbox.left
$nevsavebutton.add_click({click-nevsavebutton -sender $nevsavebutton -eventarg $_})
$nevsavebutton.autosize = $true
$nevsavebutton.location = new-object -typename system.drawing.point($formspacer, ($nevtypelabel.bottom + $formspacer))
$nevsavebutton.name = "nevsavebutton"
$nevsavebutton = new-object -typename system.windows.forms.button
$nevsavebutton.text = "save"
$nevsavebutton.width = ($neweditviewlabel.width - $formspacer) / 2
$nevtypelabel.location = new-object -typename system.drawing.point($formspacer, ($nevnamelabel.bottom + $formspacer))
$nevtypelabel.name = "nevtypelabel"
$nevtypelabel = new-object -typename system.windows.forms.label
$nevtypelabel.size = $nevnamelabel.size
$nevtypelabel.textalign = [system.drawing.contentalignment]::middleright
$nevtypelabel.text = ".net type:"
$nevtypetextbox.location = new-object -typename system.drawing.point(($nevtypelabel.right + $formspacer), $nevtypelabel.top)
$nevtypetextbox.maxlength = 100
$nevtypetextbox.name = "nevtypetextbox"
$nevtypetextbox = new-object -typename system.windows.forms.textbox
$nevtypetextbox.text = $($myformattreeview.selectednode.nodes[0].tag)
$nevtypetextbox.text = $null
$nevtypetextbox.width = $neweditviewlabel.right - $nevtypetextbox.left
$nevviewcombobox.dropdownstyle = [system.windows.forms.comboboxstyle]::dropdownlist
$nevviewcombobox.enabled = $false
$nevviewcombobox.enabled = $true
$nevviewcombobox.focus()
$nevviewcombobox.items.addrange(@(" - select view - ", "table view", "list view", "wide view"))
$nevviewcombobox.location = new-object -typename system.drawing.point(($nevviewlabel.right + $formspacer), $nevviewlabel.top)
$nevviewcombobox.name = "nevviewcombobox"
$nevviewcombobox = new-object -typename system.windows.forms.combobox
$nevviewcombobox.selectedindex = 0
$nevviewcombobox.selecteditem = $nevviewcombobox.items | where-object -filterscript { $_ -eq $temptype }
$nevviewcombobox.width = $neweditviewlabel.right - $nevviewcombobox.left
$nevviewlabel.autosize = $false
$nevviewlabel.height = $tempvalue
$nevviewlabel.location = new-object -typename system.drawing.point($formspacer, ($neweditviewlabel.bottom + $formspacer))
$nevviewlabel.name = "nevviewlabel"
$nevviewlabel = new-object -typename system.windows.forms.label
$nevviewlabel.textalign = [system.drawing.contentalignment]::middleright
$nevviewlabel.text = "view type:"
$nevviewlabel.width = 80
new-adcomputer -name "app1" -enabled $true
new-adcomputer -name "app2" -enabled $true
new-adcomputer -name "client1" -enabled $true
new-adcomputer -name "client-win7" -enabled $true
new-adgroup directaccessappserver global
new-adgroup directaccessclients global
new-adgroup directaccessclientswin7 global
new-adobject -name "system management" -type container -path ("cn=system," +$distinguishedname)
new-adreplicationsubnet -name "10.0.0.0/24" -site "default-first-site-name" -location $domain -description $domain
new-adreplicationsubnet -name "2001:db8:dc::/48" -site "default-first-site-name" -location $domain -description $domain
new-aduser -name $accountname `
new-aduser -name $script:adfsaccountname `
new-aduser -name $user.displayname -samaccountname $user.sam -userprincipalname $upn -displayname $displayname -givenname $user.firstname -surname $user.lastname -description $user.description -office $user.office -officephone $user.telephonenumber -mobilephone $user.mobilenumber -fax $user.fax -streetaddress $user.street -city $user.city -state $user.state -postalcode $user.zip -changepasswordatlogon $true -accountpassword (convertto-securestring $password -asplaintext -force) -department $user.department -company $user.company -enabled $true -path $ou
new-aduser $sam -givenname $_.givenname -initials $_.initials `
new-alias receive-ftpitem get-ftpitem
new-alias send-ftpitem add-ftpitem
$newappointment.body = $body
$newappointment.end = $enddate
$newappointment.isalldayevent = $true
$newappointment.legacyfreebusystatus = "busy"
$newappointment.legacyfreebusystatus = "free"
$newappointment.location = $location
$newappointment = new-object microsoft.exchange.webservices.data.appointment($exservice)
$newappointment.recurrence.enddate = $recurrencerangeendby
$newappointment.recurrence.neverends()
$newappointment.recurrence = new-object microsoft.exchange.webservices.data.recurrence+dailypattern(`
$newappointment.recurrence = new-object microsoft.exchange.webservices.data.recurrence+monthlypattern(`
$newappointment.recurrence = new-object microsoft.exchange.webservices.data.recurrence+relativemonthlypattern(`
$newappointment.recurrence = new-object microsoft.exchange.webservices.data.recurrence+relativeyearlypattern(`
$newappointment.recurrence = new-object microsoft.exchange.webservices.data.recurrence+weeklypattern(`
$newappointment.recurrence = new-object microsoft.exchange.webservices.data.recurrence+yearlypattern(`
$newappointment.recurrence.numberofoccurrences = $recurrencerangeendafter
$newappointment.reminderdueby = $startdate
$newappointment.reminderdueby = $startdate.addminutes(15)
$newappointment.reminderminutesbeforestart = 1080
$newappointment.reminderminutesbeforestart = 15
$newappointment.save($folderid, [microsoft.exchange.webservices.data.sendinvitationsmode]::sendtonone)
$newappointment.save([microsoft.exchange.webservices.data.wellknownfoldername]::calendar,`
$newappointment.start = $startdate
$newappointment.subject = $subject
new-cluster -name $clustername -nostorage -node $localmachinename
$newcol = $colclass.createinstance()
$newcol.collectiontype = $collectiontype
$newcol.limittocollectionid = $collectionlimitid.collectionid
$newcol.limittocollectionid = "sms00001"
$newcol.name = $item.collectionname
$newcontact.$contactpropertyname = $contact.$contactpropertyname
$newcontact.$contactpropertyname = $stringlist
$newcontact.$contactpropertyname = [system.datetime]::parse($contact.$contactpropertyname)
$newcontact.emailaddresses.item(`
$newcontact.fileasmapping = $fileasmapping
$newcontact.gettype().getproperties() | ?{($_.canread) -and ($_.canwrite -eq $false)} | %{$contactreadonlyproperties.add($_.name,"")}
$newcontact.imaddresses.item(`
$newcontact = new-object microsoft.exchange.webservices.data.contact($exservice)
$newcontact.phonenumbers.item(`
$newcontact.physicaladdresses.item(`
$newcontact.save($parentfolder.id)
$newcontact.setcontactpicture($contact.$contactpropertyname)
$newdgcmd = "new-distributiongroup -name ""$($department.department)"" -samaccountname ""$($department.department.replace(" ",""""))"" -type distribution -alias ""$($department.department.replace(" ",""""))"""
$newdgcmd = "new-distributiongroup -name ""managers"" -samaccountname ""managers"" -type distribution -alias ""managers"""
$newdgcmd = "new-distributiongroup -name ""$($office.office)"" -samaccountname ""$($office.office.replace(" ",""""))"" -type distribution -alias ""$($office.office.replace(" ",""""))"""
$newdir = $dir.name + "_"
$newdiskpath[$newdiskpath.count -1] = "$($newvmname).vhd"
$newdiskpath = [string]::join("\",$newdiskpath)
$newdiskpath = $vmdiskpath.diskimage.split("\")
$newdisnames = @{}
$newdisnames.add($_.userlogin,$_.newdisplayname)
$newdisnames = $newdisplayname
$newdn = (get-aduser $sam).distinguishedname
newdomainsid=$sidmaphash.($ace.sid).substring(0,$sidmaphash.($ace.sid).lastindexof("-"));
newdomainsid=$sidmaphash.($aclentrysid).substring(0,$sidmaphash.($aclentrysid).lastindexof("-"));
$newdtrow.accountstatus = $acctstatus
$newdtrow.activeallmbs = ($totalactivestdmbs + $totalactivelrgmbs)
$newdtrow.activelrgmbs = $totalactivelrgmbs
$newdtrow.activembs = $totalactivemb
$newdtrow.activestdmbs = $totalactivestdmbs
$newdtrow.alias = $mailbox.alias
$newdtrow.averagembsize = $avgmbsize
$newdtrow.blackberrycharge = $bbcharge.tostring("c")
$newdtrow.blackberrypin = $mailbox.customattribute7
$newdtrow.creationdate = $mailbox.whencreated
$newdtrow.customercode = $customercode
$newdtrow.customer = $customer
$newdtrow.databasename = $database.name
$newdtrow.databasename = $mailbox.database
$newdtrow.database = $tardatabase
$newdtrow.displayname = $mailbox.displayname
$newdtrow.duration = $_.duration
$newdtrow.durationinsec = $timespan.totalseconds
$newdtrow.endtime = $endtime
$newdtrow.errorcode = $_.result.errorcode
$newdtrow.excludefromprovisiong = $database.isexcludedfromprovisioning
$newdtrow.inactivembs = $totalinactivemb
$newdtrow.iswarning = $_.result.iswarning
$newdtrow.itemcount = (get-mailboxstatistics $_.source.primarysmtpaddress).itemcount
$newdtrow.itemcount= $mailboxstats.itemcount
$newdtrow.lastlogofftime = $mailboxstats.lastlogofftime
$newdtrow.lastlogontime = $mailboxstats.lastlogontime
$newdtrow.mailboxcharge = $mbxcharge.tostring("c")
$newdtrow.mailboxcode = $mbxcode
$newdtrow = $mailboxdata.newrow()
$newdtrow.mailboxlimitmb = $sendquota
$newdtrow.mailbox = $_.mailboxname
$newdtrow.mailboxmoves = @()
$newdtrow.mailboxsizemb = [math]::round($mailboxsize / 1024 / 1024)
$newdtrow.mailboxsizemb = $size
$newdtrow = $mbxdbtable.newrow()
$newdtrow.movedby = $movedby
$newdtrow = $moveresults.newrow()
$newdtrow.primarysmtpaddress = $mailbox.primarysmtpaddress
$newdtrow.primarysmtpaddress = $_.source.primarysmtpaddress
$newdtrow.resourcemailbox = $mailbox.isresource
$newdtrow.speedinkbps = ($speed/1024)
$newdtrow.starttime = $starttime
$newdtrow.suborg = $suborg
$newdtrow.targetdatabase = $targetdb
$newdtrow.totalcharge = $totalcharge.tostring("c")
$newdtrow.totalmbsize = $totaldbsize
$newdtrow.totalmbs = $totalnumbermb
$newedittypeform.add_shown({shown-newedittypeform -sender $newedittypeform -eventarg $_})
$newedittypeform.clientsize = new-object -typename system.drawing.size(($($newedittypeform.controls[$newedittypeform.controls.count - 1]).right + $formspacer), ($($newedittypeform.controls[$newedittypeform.controls.count - 1]).bottom + $formspacer))
$newedittypeform.close()
$newedittypeform.controls.add($netcancelbutton)
$newedittypeform.controls.add($netsavebutton)
$newedittypeform.controls.add($nettypelabel)
$newedittypeform.controls.add($nettypetextbox)
$newedittypeform.controls.add($newedittypelabel)
$newedittypeform.dialogresult = [system.windows.forms.dialogresult]::cancel
$newedittypeform.dialogresult = [system.windows.forms.dialogresult]::ok
$newedittypeform.font = new-object -typename system.drawing.font("tahoma", 10, [system.drawing.fontstyle]::regular, [system.drawing.graphicsunit]::point)
$newedittypeform.formborderstyle = [system.windows.forms.formborderstyle]::fixedtoolwindow
$newedittypeform.name = "newedittypeform"
$newedittypeform = new-object -typename system.windows.forms.form
$newedittypeform.showintaskbar = $false
$newedittypeform.startposition = [system.windows.forms.formstartposition]::centerparent
$newedittypeform.text = "$scriptname - $scriptversion"
$newedittypelabel.autosize = $false
$newedittypelabel.autosize = $true
$newedittypelabel.borderstyle = [system.windows.forms.borderstyle]::fixed3d
$newedittypelabel.font = new-object -typename system.drawing.font($newedittypelabel.font.fontfamily, ($newedittypelabel.font.size + 1), [system.drawing.fontstyle]::bold, $newedittypelabel.font.unit)
$newedittypelabel.height = $tempvalue
$newedittypelabel.location = new-object -typename system.drawing.point($formspacer, $formspacer)
$newedittypelabel.name = "newedittypelabel"
$newedittypelabel = new-object -typename system.windows.forms.label
$newedittypelabel.textalign = [system.drawing.contentalignment]::middlecenter
$newedittypelabel.text = "edit - $($myformattreeview.selectednode.tag)"
$newedittypelabel.text = "new .net type name"
$newedittypelabel.width = 400
$newedittypetooltip = new-object -typename system.windows.forms.tooltip($formcomponents)
$newedittypetooltip.settooltip($netcancelbutton, "help for control $($netcancelbutton.name)")
$newedittypetooltip.settooltip($netsavebutton, "help for control $($netsavebutton.name)")
$newedittypetooltip.settooltip($nettypelabel, "help for control $($nettypelabel.name)")
$newedittypetooltip.settooltip($nettypetextbox, "help for control $($nettypetextbox.name)")
$newedittypetooltip.settooltip($newedittypeform, "help for control $($newedittypeform.name)")
$newedittypetooltip.settooltip($newedittypelabel, "help for control $($newedittypelabel.name)")
$newedittypetooltip.tooltiptitle = "$scriptname - $scriptversion"
$neweditviewform.add_shown({shown-neweditviewform -sender $neweditviewform -eventarg $_})
$neweditviewform.clientsize = new-object -typename system.drawing.size(($($neweditviewform.controls[$neweditviewform.controls.count - 1]).right + $formspacer), ($($neweditviewform.controls[$neweditviewform.controls.count - 1]).bottom + $formspacer))
$neweditviewform.close()
$neweditviewform.controls.add($nevcancelbutton)
$neweditviewform.controls.add($nevnamelabel)
$neweditviewform.controls.add($nevnametextbox)
$neweditviewform.controls.add($nevsavebutton)
$neweditviewform.controls.add($nevtypelabel)
$neweditviewform.controls.add($nevtypetextbox)
$neweditviewform.controls.add($nevviewcombobox)
$neweditviewform.controls.add($nevviewlabel)
$neweditviewform.controls.add($neweditviewlabel)
$neweditviewform.dialogresult = [system.windows.forms.dialogresult]::cancel
$neweditviewform.dialogresult = [system.windows.forms.dialogresult]::ok
$neweditviewform.font = new-object -typename system.drawing.font("tahoma", 10, [system.drawing.fontstyle]::regular, [system.drawing.graphicsunit]::point)
$neweditviewform.formborderstyle = [system.windows.forms.formborderstyle]::fixedtoolwindow
$neweditviewform.name = "neweditviewform"
$neweditviewform = new-object -typename system.windows.forms.form
$neweditviewform.showintaskbar = $false
$neweditviewform.startposition = [system.windows.forms.formstartposition]::centerparent
$neweditviewform.text = "$scriptname - $scriptversion"
$neweditviewlabel.autosize = $false
$neweditviewlabel.autosize = $true
$neweditviewlabel.borderstyle = [system.windows.forms.borderstyle]::fixed3d
$neweditviewlabel.font = new-object -typename system.drawing.font($neweditviewlabel.font.fontfamily, ($neweditviewlabel.font.size + 1), [system.drawing.fontstyle]::bold, $neweditviewlabel.font.unit)
$neweditviewlabel.height = $tempvalue
$neweditviewlabel.location = new-object -typename system.drawing.point($formspacer, $formspacer)
$neweditviewlabel.name = "neweditviewlabel"
$neweditviewlabel = new-object -typename system.windows.forms.label
$neweditviewlabel.text = "add new view format"
$neweditviewlabel.textalign = [system.drawing.contentalignment]::middlecenter
$neweditviewlabel.text = "edit - $($myformattreeview.selectednode.tag)"
$neweditviewlabel.text = "new view"
$neweditviewlabel.width = 400
$neweditviewtooltip = new-object -typename system.windows.forms.tooltip($formcomponents)
$neweditviewtooltip.settooltip($nevcancelbutton, "help for control $($nevcancelbutton.name)")
$neweditviewtooltip.settooltip($nevnamelabel, "help for control $($nevnamelabel.name)")
$neweditviewtooltip.settooltip($nevnametextbox, "help for control $($nevnametextbox.name)")
$neweditviewtooltip.settooltip($nevsavebutton, "help for control $($nevsavebutton.name)")
$neweditviewtooltip.settooltip($nevtypelabel, "help for control $($nevtypelabel.name)")
$neweditviewtooltip.settooltip($nevtypetextbox, "help for control $($nevtypetextbox.name)")
$neweditviewtooltip.settooltip($nevviewcombobox, "help for control $($nevviewcombobox.name)")
$neweditviewtooltip.settooltip($nevviewlabel, "help for control $($nevviewlabel.name)")
$neweditviewtooltip.settooltip($neweditviewform, "help for control $($neweditviewform.name)")
$neweditviewtooltip.settooltip($neweditviewlabel, "help for control $($neweditviewlabel.name)")
$neweditviewtooltip.tooltiptitle = "$scriptname - $scriptversion"
$newelement.setattribute('extobjxmlpath', $args[1])
$newelement.setattribute('xsltpath', '')
$newelement = $xml.createelement('customxslt')
-newest 1 `
new-eventlog -logname "application" -source "sharepoint warmup script" -erroraction silentlycontinue | out-null
new-eventlog -source $scriptname -logname $logname -erroraction silentlycontinue
" new-eventlog -source `$scriptname -logname `$logname -erroraction silentlycontinue`r`n"
new-eventlog -source $scriptname -logname 'windows powershell' -erroraction silentlycontinue
new-fastmanagedproperty "area" "ows_area" "text" $true "1"
new-fastmanagedproperty "beingrevisednotes" "ows_comments" "text" $false "0"
new-fastmanagedproperty "beingrevised" "ows_beingrevised" "binary" $false "0"
new-fastsearchmetadatacrawledproperty -name $crawledpropertyname -propset "00130329-0000-0130-c000-000000131346" -varianttype $variant
new-fastsearchmetadatamanagedproperty -name $name -type $type -ea 0
$newfile = @()
$newfile += '</axaptaautorun>'
$newfile += '<axaptaautorun version="4.0" logfile="{0}">' -f $cillogfile
$newfilelist=$newfolderlist = $null
$newfilelist=$null
$newfile | out-file $cilxmlfile -encoding default
$newfile += '<run type="class" name="syscompileil" method="generateil" parameters="true" />'
$newfile += '<?xml version="1.0" encoding="utf-8"?>'
$newfolder = $drive + "psarchive"
$newfolder = $folderclass.createinstance()
$newfolder.name = $item.foldername
$newfolder.objecttype = $objecttype
$newfolder.parentcontainernodeid = $parentid
$newgroupmemberscount = 0
$newgroupmembers = get-adobject -ldapfilter $filter | sort-object distinguishedname
$newhost = read-host "enter the ip address for the external dns server to query`nor hit enter for the default of $externalserver"
$newhtml = [system.io.file]::readalltext($(get-item('k:\exchange\2010\owa\newhtml.txt')).fullname)
new-ipsetting -interfaceindex $teamadapter.interfaceindex @ipsetting
new-item $backuppath -type directory |out-null
new-item c:\temp\ -type directory
new-item $currentlogfolder -type directory
new-item c:\z_gpres -itemtype directory
new-item $destinationfolder -itemtype directory
new-item $dest -itemtype directory -force | out-null
new-item $exportfolder -type directory | out-null
new-item $fullpath -itemtype file -force |out-null
new-item "hklm:\software\microsoft\windows\currentversion\authentication\logonui\" -name "background" -force
new-item hklm:\system\currentcontrolset\services\ntds\parameters -itemtype registrykey | out-null
new-item -itemtype directory $destfolder -erroraction silentlycontinue
new-item -itemtype directory -path ($usbdestination + ($dir.fullname.substring(2))) | out-null
new-item -itemtype file -name dbreport.htm
new-item -itemtype file $outputfile -force
new-item $logfolder -itemtype directory -force |out-null
new-item $loggingdirectory -type directory
new-item -path ($drive) -name psarchive -type directory | out-null
new-item -path $($filepath + $db.name) -itemtype directory -force | out-null;
new-item -path $($filepath + $db.name + "\$objectname") -itemtype directory -force | out-null;
new-item -path $($filepath) -itemtype directory -force | out-null;
new-item -path $filepath -itemtype directory -force | out-null;
new-item -path $folder -name $s.name -type "directory" -erroraction silentlycontinue
new-item -path $localpath -itemtype directory -force |out-null
new-item -path $logpath -itemtype directory -force |out-null
new-item -path "$($logpath)\$($servername)" -itemtype directory -force |out-null
new-item -path "$outpath\logquery" -itemtype directory -force
new-item -path $parentfolder -itemtype directory | out-null
new-item -path \\server\c$\backup\grouppolicies\$date -itemtype directory
new-itemproperty "hklm:\software\microsoft\windows\currentversion\authentication\logonui\background" -name "oembackground" -value 1 -propertytype "dword" -force
new-itemproperty hklm:\system\currentcontrolset\services\ntds\parameters -name "allow system only change" -value $valuedata -propertytype dword | out-null
new-item $reportpath -type directory | out-null}
new-item "$vmhostdiffvhdpath" -type directory | out-null
new-item "$vmhostparentvhdpath" -type directory | out-null
$newlevel=[pc_volumecontrol.volumecontrol]::getvolume()
$newlistitemform.add_shown({shown-newlistitemform -sender $newlistitemform -eventarg $_})
$newlistitemform.clientsize = new-object -typename system.drawing.size(($($newlistitemform.controls[$newlistitemform.controls.count - 1]).right + $formspacer), ($($newlistitemform.controls[$newlistitemform.controls.count - 1]).bottom + $formspacer))
$newlistitemform.close()
$newlistitemform.controls.add($newlistitemlabel)
$newlistitemform.controls.add($nlialigncombobox)
$newlistitemform.controls.add($nlialignlabel)
$newlistitemform.controls.add($nlicancelbutton)
$newlistitemform.controls.add($nliformatlabel)
$newlistitemform.controls.add($nliformattextbox)
$newlistitemform.controls.add($nlilabellabel)
$newlistitemform.controls.add($nlilabeltextbox)
$newlistitemform.controls.add($nlipropertylabel)
$newlistitemform.controls.add($nlipropertytextbox)
$newlistitemform.controls.add($nlisavebutton)
$newlistitemform.controls.add($nliscriptlabel)
$newlistitemform.controls.add($nliscripttextbox)
$newlistitemform.controls.add($nliwidthlabel)
$newlistitemform.controls.add($nliwidthnumericupdown)
$newlistitemform.dialogresult = [system.windows.forms.dialogresult]::cancel
$newlistitemform.dialogresult = [system.windows.forms.dialogresult]::ok
$newlistitemform.font = new-object -typename system.drawing.font("tahoma", 10, [system.drawing.fontstyle]::regular, [system.drawing.graphicsunit]::point)
$newlistitemform.formborderstyle = [system.windows.forms.formborderstyle]::fixedtoolwindow
$newlistitemform.name = "newlistitemform"
$newlistitemform = new-object -typename system.windows.forms.form
$newlistitemform.showintaskbar = $false
$newlistitemform.startposition = [system.windows.forms.formstartposition]::centerscreen
$newlistitemform.text = "$scriptname - $scriptversion"
$newlistitemlabel.autosize = $false
$newlistitemlabel.borderstyle = [system.windows.forms.borderstyle]::fixed3d
$newlistitemlabel.font = new-object -typename system.drawing.font($newlistitemlabel.font.fontfamily, ($newlistitemlabel.font.size + 1), [system.drawing.fontstyle]::bold, $newlistitemlabel.font.unit)
$newlistitemlabel.height = $tempvalue
$newlistitemlabel.location = new-object -typename system.drawing.point($formspacer, $formspacer)
$newlistitemlabel.name = "newlistitemlabel"
$newlistitemlabel = new-object -typename system.windows.forms.label
$newlistitemlabel.textalign = [system.drawing.contentalignment]::middlecenter
$newlistitemlabel.text = "edit - $($myformattreeview.selectednode.tag)"
$newlistitemlabel.text = "new item"
$newlistitemlabel.text = "new view item"
$newlistitemlabel.width = 400
$newlistitemtooltip = new-object -typename system.windows.forms.tooltip($formcomponents)
$newlistitemtooltip.settooltip($newlistitemform, "help for control $($newlistitemform.name)")
$newlistitemtooltip.settooltip($newlistitemlabel, "help for control $($newlistitemlabel.name)")
$newlistitemtooltip.settooltip($nlialigncombobox, "help for control $($nlialigncombobox.name)")
$newlistitemtooltip.settooltip($nlialignlabel, "help for control $($nlialignlabel.name)")
$newlistitemtooltip.settooltip($nlicancelbutton, "help for control $($nlicancelbutton.name)")
$newlistitemtooltip.settooltip($nliformatlabel, "help for control $($nliformatlabel.name)")
$newlistitemtooltip.settooltip($nliformattextbox, "help for control $($nliformattextbox.name)")
$newlistitemtooltip.settooltip($nlilabellabel, "help for control $($nlilabellabel.name)")
$newlistitemtooltip.settooltip($nlilabeltextbox, "help for control $($nlilabeltextbox.name)")
$newlistitemtooltip.settooltip($nlipropertylabel, "help for control $($nlipropertylabel.name)")
$newlistitemtooltip.settooltip($nlipropertytextbox, "help for control $($nlipropertytextbox.name)")
$newlistitemtooltip.settooltip($nlisavebutton, "help for control $($nlisavebutton.name)")
$newlistitemtooltip.settooltip($nliscriptlabel, "help for control $($nliscriptlabel.name)")
$newlistitemtooltip.settooltip($nliscripttextbox, "help for control $($nliscripttextbox.name)")
$newlistitemtooltip.settooltip($nliwidthlabel, "help for control $($nliwidthlabel.name)")
$newlistitemtooltip.settooltip($nliwidthnumericupdown, "help for control $($nliwidthnumericupdown.name)")
$newlistitemtooltip.tooltiptitle = "$scriptname - $scriptversion"
$newlist = $web.lists.item($list.id);
$newlogonaspx = $readfile -split $defaulthtml,0,'simplematch' -join $newhtml
$newmail.appenditemvalue("body", "$body") | out-null
$newmail.appenditemvalue("form", "memo") | out-null
$newmail.appenditemvalue("from", "$from") | out-null
$newmail.appenditemvalue("sendto", "$sendto") | out-null
$newmail.appenditemvalue("subject", "$subject") | out-null
new-mailbox `
new-mailboxexportrequest -batchname $batchname -mailbox $mailbox.alias -filepath "$($exportshare)\$($mailbox.alias).pst"
new-mailbox -name "customer support" -alias support -shared
new-mailbox -name $sharedmailboxdisplayname -alias $sharedmailboxalias -shared -primarysmtpaddress $sharedmailboxusername
$($newmail.createrichtextitem("attachment")).embedobject(1454, "", "$attachment", "attachment") | out-null
$newmail = $maildb.createdocument()
$newmail.save($true, $false) | out-null
new-managementgroupconnection -connectionstring:$scomserver | out-null
new-managementroleassignment -role "mailbox import export" -user "$getalias"
new-managementrole -parent "mail recipients" -name "$managementrole" -organization "$orgname"
$newmsg = $message.move($destfolderid)
new-msoldomain -name $selectedsuffix -authentication federated
new-msolfederateddomain -domainname $domain
new-msolfederateddomain -domainname $domain -errorvariable a -ea silentlycontinue -wa silentlycontinue;
new-msolfederateddomain -domainname $domain -errorvariable e;
new-msoluser -displayname $localuser.displayname `
$newname,
newname = $newname
new-netfirewallrule -displayname 'adfs ssl incoming [tcp 443]' -direction inbound -action allow -edgetraversalpolicy allow -protocol tcp -localport 443
new-netfirewallrule -displayname "allow dns for nat" -protocol udp -localport 53
"new-netipaddress -interfacealias $switch -ipaddress $ipaddress/$ipv6prefixlength -addressfamily ipv6 -prefixlength 48"
"new-netipaddress -interfacealias $switch -ipaddress $ipv4address2 -addressfamily ipv4 -prefixlength 24"
new-netipaddress -interfacealias "$switch" -ipaddress $ipv4address2 -addressfamily ipv4 -prefixlength $ipv4prefixlength
"new-netipaddress -interfacealias $switch -ipaddress $ipv4address -addressfamily ipv4 -prefixlength 24"
new-netipaddress -interfacealias "$switch" -ipaddress $ipv4address -addressfamily ipv4 -prefixlength $ipv4prefixlength
new-netipaddress -interfacealias "$switch" -ipaddress $ipv6address -addressfamily ipv6 -prefixlength 48
new-netlbfoteam -name $name -teamnicname $name -teammembers $teammembers -confirm:$false | out-null
new-netqostrafficclass @_
"new-netroute -interfacealias $switch -destinationprefix ""0.0.0.0/0"" -addressfamily ipv4 -nexthop $ipv4gateway -routemetric 256 "
new-netroute -interfacealias "$switch" -destinationprefix "0.0.0.0/0" -addressfamily ipv4 -nexthop $ipv4gateway -routemetric 256
"new-netroute -interfacealias $switch -destinationprefix ""::/0"" -addressfamily ipv6 -nexthop $ipv6gateway -routemetric 256"
new-netroute -interfacealias "$switch" -destinationprefix "::/0" -addressfamily ipv6 -nexthop $ipv6gateway -routemetric 256
new-netvirtualizationcustomerroute -routingdomainid "{11111111-2222-3333-4444-000000000000}" -virtualsubnetid "5000" -destinationprefix "0.0.0.0/0" -nexthop "10.0.1.2" -metric 255 -cimsession $hosts[$i]
new-netvirtualizationcustomerroute -routingdomainid "{11111111-2222-3333-4444-000000000000}" -virtualsubnetid "5000" -destinationprefix "10.0.1.0/24" -nexthop "0.0.0.0" -metric 255 -cimsession $hosts[$i]
new-netvirtualizationcustomerroute -routingdomainid "{11111111-2222-3333-4444-000000000000}" -virtualsubnetid "6000" -destinationprefix "10.0.0.0/24" -nexthop "0.0.0.0" -metric 255 -cimsession $hosts[$i]
new-netvirtualizationcustomerroute -routingdomainid "{11111111-2222-3333-4444-000000005001}" -virtualsubnetid "5001" -destinationprefix "10.0.0.0/24" -nexthop "0.0.0.0" -metric 255 -cimsession $hosts[$i]
new-netvirtualizationcustomerroute -routingdomainid "{11111111-2222-3333-4444-000000006001}" -virtualsubnetid "6001" -destinationprefix "10.0.0.0/24" -nexthop "0.0.0.0" -metric 255 -cimsession $hosts[$i]
new-netvirtualizationlookuprecord -customeraddress "0.0.0.0" -provideraddress "192.168.1.103" -virtualsubnetid "5000" -macaddress "101010101002" -rule "translationmethodencap" -vmname "bluewildcard" -cimsession $hosts[$i]
new-netvirtualizationlookuprecord -customeraddress "10.0.0.1" -provideraddress "169.254.254.254" -virtualsubnetid "6000" -macaddress "101010101101" -rule "translationmethodencap" -vmname "blues1-dg" -cimsession $hosts[$i]
new-netvirtualizationlookuprecord -customeraddress "10.0.0.5" -provideraddress "192.168.1.101" -virtualsubnetid "6000" -macaddress "101010101105" -rule "translationmethodencap" -vmname "blues1-vm1" -cimsession $hosts[$i]
new-netvirtualizationlookuprecord -customeraddress "10.0.0.7" -provideraddress "192.168.1.102" -virtualsubnetid "6000" -macaddress "101010101107" -rule "translationmethodencap" -vmname "blues1-vm2" -cimsession $hosts[$i]
new-netvirtualizationlookuprecord -customeraddress "10.0.1.1" -provideraddress "169.254.254.254" -virtualsubnetid "5000" -macaddress "101010101001" -rule "translationmethodencap" -vmname "blue-gwdg" -cimsession $hosts[$i]
new-netvirtualizationlookuprecord -customeraddress "10.0.1.2" -provideraddress "192.168.1.103" -virtualsubnetid "5000" -macaddress "101010101002" -rule "translationmethodencap" -vmname "blue-gw" -cimsession $hosts[$i]
new-netvirtualizationlookuprecord -virtualsubnetid "5001" -customeraddress "10.0.0.5" -provideraddress "192.168.4.11" -macaddress "060600000005" -rule "translationmethodencap" -cimsession $hosts[$i]
new-netvirtualizationlookuprecord -virtualsubnetid "5001" -customeraddress "10.0.0.7" -provideraddress "192.168.4.22" -macaddress "060600000007" -rule "translationmethodencap" -cimsession $hosts[$i]
new-netvirtualizationlookuprecord -virtualsubnetid "6001" -customeraddress "10.0.0.5" -provideraddress "192.168.4.11" -macaddress "080800000005" -rule "translationmethodencap" -cimsession $hosts[$i]
new-netvirtualizationlookuprecord -virtualsubnetid "6001" -customeraddress "10.0.0.7" -provideraddress "192.168.4.22" -macaddress "080800000007" -rule "translationmethodencap" -cimsession $hosts[$i]
new-netvirtualizationprovideraddress -interfaceindex $iface.interfaceindex -provideraddress "192.168.1.101" -prefixlength 24 -cimsession $hosts[0]
new-netvirtualizationprovideraddress -interfaceindex $iface.interfaceindex -provideraddress "192.168.1.102" -prefixlength 24 -cimsession $hosts[1]
new-netvirtualizationprovideraddress -interfaceindex $iface.interfaceindex -provideraddress "192.168.1.103" -prefixlength 24 -cimsession $hosts[2]
new-netvirtualizationprovideraddress -interfaceindex $iface.interfaceindex -provideraddress "192.168.4.11" -prefixlength 24 -cimsession $hosts[0]
new-netvirtualizationprovideraddress -interfaceindex $iface.interfaceindex -provideraddress "192.168.4.22" -prefixlength 24 -cimsession $hosts[1]
new-netvirtualizationproviderroute -interfaceindex $iface.interfaceindex -destinationprefix "0.0.0.0/0" -nexthop "192.168.1.1" -cimsession $hosts[0]
new-netvirtualizationproviderroute -interfaceindex $iface.interfaceindex -destinationprefix "0.0.0.0/0" -nexthop "192.168.1.1" -cimsession $hosts[1]
new-netvirtualizationproviderroute -interfaceindex $iface.interfaceindex -destinationprefix "0.0.0.0/0" -nexthop "192.168.1.1" -cimsession $hosts[2]
new-nicteam @_
$newobj | add-member -membertype noteproperty -name "autoservices" -value $services
$newobj | add-member -membertype noteproperty -name "pendingreboot" -value $pd
$newobj | add-member -membertype noteproperty -name "server" -value $comp
$newobj | add-member -membertype noteproperty -name "uptime" -value $reporttimestatus
$newobj | convertto-csv -notypeinformation | out-file "d:\monthly reboot report\result.csv" -append
(new-object directoryservices.directoryentry "",$userlogin,$userpassword).psbase.name -ne $null
new-object localaccount.localgroup($adspath.substring(8))
(new-object localaccount.localgroup($group))
new-object localaccount.localuser($adspath.substring(8))
(new-object localaccount.localuser($user))
new-object object | `
new-object psobject -property @{
new-object psobject -property @{duration = $row.runduratio}
new-object psobject -property $hash |
new-object system.net.ipaddress($rev)
new-object -typename psobject -property @{
$newobj = new-object psobject
$newobj = $null
$newoudest = (($groups[$k] -replace $groupcn,"") -replace $source,$destination).tostring()
$newoudest = ($newoudest -replace '"',"")
$newoudest = (($users[$k] -replace $usercn,"") -replace $source,$destination).tostring()
$newparser::parsefile(
$newparser::parseinput(
$newparser = [system.management.automation.language.parser]
new-partition -disknumber $usbdisknumber -usemaximumsize -isactive
$newpath = $path + "\import_create_ad_users.csv"
$newpcname = read-host "warning! this will reboot $computername. enter a new name to continue."
$newpermission = new-object microsoft.exchange.webservices.data.folderpermission($userid,$permissionlevel)
$newpkg.description = $item.packagecomment
$newpkg.language = $item.packagelanguage
$newpkg.manufacturer = $item.packagemanufacturer
$newpkg.name = $item.packagename
$newpkg.packagetype = 0
$newpkg = $pkgclass.createinstance()
$newpkg.pkgsourceflag = 2
$newpkg.pkgsourcepath = $item.packagesourcepath
$newpkg.priority = 2
$newpkg.version = $item.packageversion
$newprg.commandline = $item.commandline
$newprg.comment = $item.programcomment
$newprg.packageid = $packageid.packageid
$newprg = $prgclass.createinstance()
$newprg.programflags = $item.programflags
$newprg.programname = $item.programname
new-psdrive -name:monitoring -psprovider:operationsmanagermonitoring -root:\ | out-null
$newregistrykey=$registry.opensubkey($newsubkey)
$newreport = ".\sidreportupdated.csv",
[newrequest]
$newresult
$newresult = sendping($tempaddress)
$newrule.applytochildsites = $item.applytochildsites
$newrule.enabled = $item.enabled
$newrule.filename = $item.filename
$newrule.fileversion = $item.fileversion
$newrule.languageid = $item.languageid
$newrule.originalfilename = $item.originalfilename
$newrule.productname = $item.productname
$newrule = $ruleclass.psbase.createinstance()
$newrule.sitecode = $item.sitecode
$newscript.editor.inserttext(($newscript.editor.select(22,1,22,2) -replace " ",""))
$newscript.editor.inserttext(($newscript.editor.select(26,1,26,2) -replace " ",""))
$newscript.editor.inserttext(($newscript.editor.select(40,1,40,2) -replace " ",""))
$newscript.editor.inserttext(($newscript.editor.select(43,1,43,2) -replace " ",""))
$newscript.editor.inserttext($templatescript)
$newscript.editor.select(1,1,1,1)
$newscript = $psise.currentpowershelltab.files.add()
$newscript.saveas("$((get-location).path)\$($scriptname)")
new-scsmrelationshipobject -relationship $implementerrelationship -source $maobject -target $user -bulk
$newsddl = parse-sddl $acl.sddl
"new sddl string: $newsddlstring" | out-file -filepath $logfile -append
$newsddlstring = $sddlsplit -join "("
$newsearchorder = $dnsserversearchorder
$newsearchorder = $dnsserversearchorder | foreach {$_ -replace $dnsserverfind,$dnsserverreplace}
newsid=$sidmaphash.($ace.sid);
newsid=$sidmaphash.($aclentrysid);
new-spcontentdatabase -name $dbname -databaseserver $server -webapplication $webapp | out-null
new-spsite -url $site -owneralias $owner1 -secondaryowneralias $owner2 -contentdatabase $dbname -template $template | out-null
new-sqlavailabilitygroup -name $agname -inputobject $primary -availabilityreplica $replicas -database $databaselist | out-null
$newsubject = "[" + $identity.categories[0] + "] " + $identity.subject
$newsubject = $identity.subject.substring($prefixendindex, $identity.subject.length - $prefixendindex)
$newsubkeys=$newregistrykey.getsubkeynames()
$newsubkey=$subbranch+"\\"+$exactkey
$newsubkey=$subbranch+"\\"+$key
new-task -computername $computername -credential:$credential |
new-throughputsetting @dcb
new-throughputsetting @qos
$newusercmd = "new-aduser ""$($newuser.displayname)"" -samaccountname ""$($newuser.samaccountname)"" -givenname ""$($newuser.givenname)"" -surname ""$($newuser.surname)"" -displayname ""$($newuser.displayname)"" -office ""$($newuser.office)"" -streetaddress ""$($newuser.streetaddress)"" -city ""$($newuser.city)"" -state ""$($newuser.state)"" -postalcode ""$($newuser.postalcode)"" -country ""$($newuser.country)"" -userprincipalname ""$upn"" -department ""$($newuser.department)"" -employeeid ""$($newuser.employeeid)"" -title ""$($newuser.title)"" -description ""$($newuser.title)"" -officephone ""$($newuser.officephone);ext=$($newuser.ipphone)"" -accountpassword `$securepassword -enabled `$true"
$newuserphoto = [byte[]](get-content ".\photos\$($newuser.adphoto)" -encoding byte)
$newusertable = $besusertable.clone()
$newusertabledump = $newusertable | convertto-html -fragment @{label="display name";expression={$_.displayname}},`
$newusertable.importrow($userentry)
$newusertable.rows.count + "</td></tr>`r`n"
$newuser = $users |where-object {$_.properties.name -like "*$($newuser)"}
$newuser = $users |where-object {$_.samaccountname -like "*$($newuser)"}
new-variable -name $errorslist -value $null -scope global -force
new-variable -name $tokenslist -value $null -scope global -force
new-variable -name versiondefinition -value "get-exschemaversions.xml" -scope script
$newvew = $viewtodelete.clone($viewtodelete.title, $viewtodelete.rowlimit, $viewtodelete.paged, $viewtodelete.defaultview)
new-vmsnapshot -vm $newvmname -note "creating initial snapshot after import" -force
new-webbinding -name $script:adfssite -ip '*' -port 443 -protocol 'https'
new-zip $ziplocation"$computer netlogon $year-$month-$day h$hour m$minute s$second.zip"
"`n excludeddates: $($excludeddates[$j].tostring('yyyy-mm-dd'))"
next
"=== next folder ===" | out-file -filepath $logfile -append
$nexthour = $now.addminutes(30).hour
"`nfind csv report of share sid history here:`n$reportfile`n"
$nfounds = ([array]($output | where {$_ -match "not found"})).count | %{ if ($_) {$_} else {'0'} }
@{n="freespace";e={[math]::round(((100* ($_.summary.freespace/1gb))/ ($_.summary.capacity/1gb)),0)}} | sort -property "freespace"
@{n='free space (gb)';e={"{0:n2}" -f ($_.freespace/1gb)}},
@{n="freespacegb";e={[math]::round($_.summary.freespace/1gb,0)}}|`
@{n="freespacegb";e={[math]::round($_.summary.freespace/1gb,0)}},
$nicidx=(gwmi win32_networkadapter | where {$_.netconnectionid -eq $networkinterface}).interfaceindex
"`n$($i) computers online." | out-host}
$nic.setdnsserversearchorder($newsearchorder) > $junk
-nicteam @(
$nicteam | % {
$nicteam,
nicteam -name $hosternetnicteamname `
nicteam -name $tenantnetnicteamname `
" nic values ------------------------------------------------ "
$nj++}
$nj=0
$nj=-1
$nlialigncombobox.dropdownstyle = [system.windows.forms.comboboxstyle]::dropdownlist
$nlialigncombobox.enabled = $false
$nlialigncombobox.enabled = $true
$nlialigncombobox.items.addrange(@("none", "left", "center", "right"))
$nlialigncombobox.location = new-object -typename system.drawing.point(($nlialignlabel.right + $formspacer), $nlialignlabel.top)
$nlialigncombobox.name = "nlialigncombobox"
$nlialigncombobox = new-object -typename system.windows.forms.combobox
$nlialigncombobox.selectedindex = 0
$nlialigncombobox.text = $tempnode.tag
$nlialigncombobox.width = $nliwidthnumericupdown.right - $nlialigncombobox.left
$nlialignlabel.location = new-object -typename system.drawing.point($formspacer, ($nliwidthlabel.bottom + $formspacer))
$nlialignlabel.name = "nlialignlabel"
$nlialignlabel = new-object -typename system.windows.forms.label
$nlialignlabel.size = $nliwidthlabel.size
$nlialignlabel.text = "alignment:"
$nlialignlabel.textalign = [system.drawing.contentalignment]::middleright
$nlicancelbutton.add_click({click-nlicancelbutton -sender $nlicancelbutton -eventarg $_})
$nlicancelbutton.autosize = $true
$nlicancelbutton.location = new-object -typename system.drawing.point(($nlisavebutton.right + $formspacer), $nlisavebutton.top)
$nlicancelbutton.name = "nlicancelbutton"
$nlicancelbutton = new-object -typename system.windows.forms.button
$nlicancelbutton.text = "cancel"
$nlicancelbutton.width = ($newlistitemlabel.width - $formspacer) / 2
$nliformatlabel.location = new-object -typename system.drawing.point($formspacer, ($nliscriptlabel.bottom + $formspacer))
$nliformatlabel.name = "nliformatlabel"
$nliformatlabel = new-object -typename system.windows.forms.label
$nliformatlabel.size = $nliscriptlabel.size
$nliformatlabel.textalign = [system.drawing.contentalignment]::middleright
$nliformatlabel.text = "format:"
$nliformattextbox.location = new-object -typename system.drawing.point(($nliformatlabel.right + $formspacer), $nliformatlabel.top)
$nliformattextbox.maxlength = 100
$nliformattextbox.name = "nliformattextbox"
$nliformattextbox = new-object -typename system.windows.forms.textbox
$nliformattextbox.text = $null
$nliformattextbox.text = $tempnode.tag
$nliformattextbox.width = $nliscripttextbox.right - $nliformattextbox.left
$nlilabellabel.autosize = $false
$nlilabellabel.height = $tempvalue
$nlilabellabel.location = new-object -typename system.drawing.point($formspacer, ($newlistitemlabel.bottom + $formspacer))
$nlilabellabel.name = "nlilabellabel"
$nlilabellabel = new-object -typename system.windows.forms.label
$nlilabellabel.textalign = [system.drawing.contentalignment]::middleright
$nlilabellabel.text = "label:"
$nlilabellabel.width = 80
$nlilabeltextbox.enabled = $false
$nlilabeltextbox.enabled = $true
$nlilabeltextbox.focus()
$nlilabeltextbox.location = new-object -typename system.drawing.point(($nlilabellabel.right + $formspacer), $nlilabellabel.top)
$nlilabeltextbox.maxlength = 25
$nlilabeltextbox.name = "nlilabeltextbox"
$nlilabeltextbox = new-object -typename system.windows.forms.textbox
$nlilabeltextbox.text = $myformattreeview.selectednode.tag
$nlilabeltextbox.text = $null
$nlilabeltextbox.width = $newlistitemlabel.right - $nlilabeltextbox.left
$nlipropertylabel.location = new-object -typename system.drawing.point($formspacer, ($nlialignlabel.bottom + $formspacer))
$nlipropertylabel.name = "nlipropertylabel"
$nlipropertylabel = new-object -typename system.windows.forms.label
$nlipropertylabel.size = $nlialignlabel.size
$nlipropertylabel.textalign = [system.drawing.contentalignment]::middleright
$nlipropertylabel.text = "property:"
$nlipropertytextbox.add_textchanged({textchanged-nlipropertytextbox -sender $nlipropertytextbox -eventarg $_})
$nlipropertytextbox.enabled = $false
$nlipropertytextbox.enabled = $true
$nlipropertytextbox.location = new-object -typename system.drawing.point(($nlipropertylabel.right + $formspacer), $nlipropertylabel.top)
$nlipropertytextbox.maxlength = 50
$nlipropertytextbox.name = "nlipropertytextbox"
$nlipropertytextbox = new-object -typename system.windows.forms.textbox
$nlipropertytextbox.text = $null
$nlipropertytextbox.text = $tempnode.tag
$nlipropertytextbox.width = $nlialigncombobox.right - $nlipropertytextbox.left
$nlisavebutton.add_click({click-nlisavebutton -sender $nlisavebutton -eventarg $_})
$nlisavebutton.autosize = $true
$nlisavebutton.location = new-object -typename system.drawing.point($formspacer, ($nliformatlabel.bottom + $formspacer))
$nlisavebutton.name = "nlisavebutton"
$nlisavebutton = new-object -typename system.windows.forms.button
$nlisavebutton.text = "save"
$nlisavebutton.width = ($newlistitemlabel.width - $formspacer) / 2
$nliscriptlabel.location = new-object -typename system.drawing.point($formspacer, ($nlipropertylabel.bottom + $formspacer))
$nliscriptlabel.name = "nliscriptlabel"
$nliscriptlabel = new-object -typename system.windows.forms.label
$nliscriptlabel.size = $nlipropertylabel.size
$nliscriptlabel.textalign = [system.drawing.contentalignment]::middleright
$nliscriptlabel.text = "script:"
$nliscripttextbox.add_textchanged({textchanged-nliscripttextbox -sender $nliscripttextbox -eventarg $_})
$nliscripttextbox.enabled = $false
$nliscripttextbox.enabled = $true
$nliscripttextbox.location = new-object -typename system.drawing.point(($nliscriptlabel.right + $formspacer), $nliscriptlabel.top)
$nliscripttextbox.name = "nliscripttextbox"
$nliscripttextbox = new-object -typename system.windows.forms.textbox
$nliscripttextbox.text = $null
$nliscripttextbox.text = $tempnode.tag
$nliscripttextbox.width = $nlipropertytextbox.right - $nliscripttextbox.left
$nliwidthlabel.location = new-object -typename system.drawing.point($formspacer, ($nlilabellabel.bottom + $formspacer))
$nliwidthlabel.name = "nliwidthlabel"
$nliwidthlabel = new-object -typename system.windows.forms.label
$nliwidthlabel.size = $nlilabellabel.size
$nliwidthlabel.textalign = [system.drawing.contentalignment]::middleright
$nliwidthlabel.text = "width:"
$nliwidthnumericupdown.enabled = $false
$nliwidthnumericupdown.enabled = $true
$nliwidthnumericupdown.location = new-object -typename system.drawing.point(($nliwidthlabel.right + $formspacer), $nliwidthlabel.top)
$nliwidthnumericupdown.maximum = 100
$nliwidthnumericupdown.minimum = 0
$nliwidthnumericupdown.name = "nliwidthnumericupdown"
$nliwidthnumericupdown = new-object -typename system.windows.forms.numericupdown
$nliwidthnumericupdown.value = 0
$nliwidthnumericupdown.value = $tempnode.tag
$nliwidthnumericupdown.width = $nlilabeltextbox.right - $nliwidthnumericupdown.left
$nmatches = ([array]($output | where {$_ -match "false"})).count | %{ if ($_) {$_} else {'0'} }
"no" = 7
$node
$node = @(
node1 = @{
node2 = @{
node3 = @{
node4 = @{
$node.collapse()
$node = $fielddata
'node kind'
nodekind = $node
node -name $hvnode.node1.name -type hyperv -cluster $cluster.hyperv -hypervsetting $hypervsetting `
node -name $hvnode.node1.name -type hyperv -cluster $cluster.hyperv -hypervsetting $hypervsetting -fileservername $fileservername `
node -name $hvnode.node2.name -type hyperv -cluster $cluster.hyperv -hypervsetting $hypervsetting `
node -name $hvnode.node2.name -type hyperv -cluster $cluster.hyperv -hypervsetting $hypervsetting -fileservername $fileservername `
node -name $hvnode.node3.name -type hyperv -cluster $cluster.hyperv -hypervsetting $hypervsetting -fileservername $fileservername `
node -name $hvnode.node4.name -type hyperv -cluster $cluster.hyperv -hypervsetting $hypervsetting -fileservername $fileservername `
node -name $storagenode.node1.name -type storage -cluster $cluster.storage -fileservername $fileservername `
node -name $storagenode.node2.name -type storage -cluster $cluster.storage -fileservername $fileservername `
nodenetworksetting `
nodenetworksetting -configurationipaddress $storagenode.node2.address `
node = $node
-nodescription 'do not create certificate')) {
-nodescription 'no, supply new credentials' `
-nodescription 'skip validation'
"&no = do not perform the suggested action" }
"&no = do not perform the suggested action $delimiter "+`
no exchange 2007 servers found in this organization
'no'{ "main screen turn on." }
none = 0x0,
$none = $true
$no = new-object system.management.automation.host.choicedescription $($messages.choiceno),$($messages.choicenomsg01)
$no = new-object system.management.automation.host.choicedescription "&no", `
$no = new-object system.management.automation.host.choicedescription "&no", ""
$no = new-object system.management.automation.host.choicedescription "&no", "i'm done for now."
$no = new-object system.management.automation.host.choicedescription "&no", $nodescription
$no = new-object system.management.automation.host.choicedescription "o&ffline", `
nonexclusive, royalty-free right to use and modify the sample code and to
$nonexistingaliases
$nonexistingaliases = @()
$nonexistingaliases += $i.alias
$nonfeatures = "anchor","description","identity","name","priority","ruleid","scopeclass","policyentry"
$nonoptimaldbs = ($mbxdbtable | sort-object activembs | select -skip 3)
$nonpfps = $false;
$nonpfps = $true;
$noofdays=[datetime]::now - [datetime]::fromfiletime($_.lastlogontimestamp)
$noreplymail = "no-reply@contoso.msft"
"no sid history entry" | out-file -filepath $logfile -append
"&no = skip this operation and proceed with the next operation. $delimiter"+`
$notconnected = @()
$notconnected += $name
note :
$note="<center></font><b>mailbox for $($mailbox.name) ( $($mailbox.primarysmtpaddress) ), does not have any explicit permissions set for send as, full access or send on behalf</b></center>"
notes
.notes
"notes" = "body";
$notes.initialize("$password")
$notesinstalldir = "c:\program files\ibm\lotus\notes",
$notes = new-object -comobject lotus.notessession
" .notes`r`n"
* note: the main() function is primarily for debugging and testing in a visual
$notfound = "extension not found"
"not inherited - no sid to translate" | out-file -filepath $logfile -append
"no to a&ll = skip this operation and all subsequent operations. $delimiter"+`
"not set to wait" = 32001
"----------------------------------------" + "`n" | out-file $log -append
"`noutput here:`n$combinedcsvfile`n"
november, 2011
@{n="overprovisionedds";e={([math]::round($_.summary.capacity/1gb,0)) - ([math]::round(($_.summary.capacity - $_.summary.freespace + $_.summary.uncommitted)/1gb,0))}}| `
$now= get-date
$now = get-date
$now = get-date -format g
$now = $now.addseconds($interval)
@{n='percentage free';e={"{0:n2}%" -f ($_.freespace/$_.size*100)}}
@{n="provisionedspacegb";e={[math]::round(($_.summary.capacity - $_.summary.freespace + $_.summary.uncommitted)/1gb,0)}},
$nrecs | out-null
$nrecs = $sqladapter.fill($dataset)
+ "`nsee log file: $logfile"
$ns = gwmi -class win32_networkadapterconfiguration -computername $strcomputer `
$ns="root\cimv2",
$ntdsdn = "cn=ntds settings,$serverdn"
"nt group"
ntsecuritydescriptor = $userobject.ntsecuritydescriptor
$ntsresult = [lsautil.lsautil]::lsaretrieveprivatedata($lsapolicyhandle, [ref]$secretname, [ref]$privatedata)
"nt user"
ntuser = [bool]$sqlobject.isntuser;
$null
$null,
null);
"nullable data type: "+$item.nullable+"<br>"+
$null = $host.ui.rawui.readkey("noecho,includekeydown")
$null = test-connection -computername $computername -count 1 -quiet
$num = 0
$num-1
$num+1
$num*2
$num+2
$numaddresses--
$numaddresses = $destipaddresses.length-1
$number = $env:jobcount.padleft(4,'0')
$numberofdays = 1095
$numberofdays = 30
$numberofdays = 365
$numberofdcs = $alldcsinforest.length
"number of errors: $script:errors"
$numberofips = @($allclustergroupips).count
$numberofmailboxes = read-host "enter the number of mailboxes you want"
"number of processed libraries: " + $localreportobjectcollection.count
$numberofslashes = ($identitystring.tochararray() -eq '/').count
$numberofstage = 2
$numberofstage = 3
$numberofstage = 4
$numberofunique = $uniquemembers.count
$numberofupdate++
$numberofupdate = 1
$number = read-host "choose the task"
"numeric precision: "+$item.numericprecision+"<br>"+
"numeric scale: "+$item.numericscale+"<br>"+
$numnonindexed = $filtercount - $indexedcount
numofcrashes, `
numofdays, `
numofreboots, `
$numones=$bitvariable.length
$numzeroes=8-$bitvariable.length
@{n='volume name' ;e={"{0:n0}" -f ($_.volumename)}},
$oabapplication.applicationpoolname = "msexchangeoabapppool"
$oabapplication.delete()
$oabapplication = $iis.sites["default web site"].applications["/oab"]
$oabitems = get-childitem -path $uncoabpath
$oabpath = "default web site/oab"
$oabs = get-offlineaddressbook
$oabvdir.delete()
$oabvdir=$iis.sites["default web site"].applications["/"].virtualdirectories["/oab"]
$oabvds = get-clientaccessserver | get-oabvirtualdirectory
$oabvirtualdirectory = get-oabvirtualdirectory -identity $oabvirtualdirectory;
$oa_dbcounters[$i].total--;
$oa_dbcounters=$oa_dbcounters+1;
$oa_dbcounters[$oa_dbcounters.count-1] = $dbcounters[$i];
$oa_dbcounters|select database,total
$oapp = $thesite.webapplication
$obal = $oab.addresslists
$obeam = $oabvd.externalauthenticationmethods
$obeurl = $oabvd.externalurl
$obiam = $oabvd.internalauthenticationmethods
$obid = $oab.isdefault
$obiurl = $oabvd.internalurl
$obj
$obj | add-member -membertype noteproperty -name "ad phone" -value ($getuser.phone)
$obj | add-member -membertype noteproperty -name "ad phone" -value ($notfound)
$obj | add-member -membertype noteproperty -name "cs display name" -value ($csuser.displayname)
$obj | add-member -membertype noteproperty -name "cs display name" -value ($notfound)
$obj | add-member -membertype noteproperty -name "exchange extension" -value ($getum.extensions)
$obj | add-member -membertype noteproperty -name "exchange extension" -value ($notfound)
$obj | add-member -membertype noteproperty -name "exchange sip" -value ($getum.sipresourceidentifier)
$obj | add-member -membertype noteproperty -name "exchange sip" -value ($notfound)
$obj | add-member -membertype noteproperty -name "line uri" -value ($csuser.lineuri)
$obj | add-member -membertype noteproperty -name "line uri" -value ($notfound)
$obj | add-member -membertype noteproperty -name "other fax" -value ($getother.displayname)
$obj | add-member -membertype noteproperty -name "other fax" -value ($notfound)
$obj | add-member noteproperty filepath -value $filepath
$obj | add-member noteproperty islocked -value $filelocked
$objaduser = $objaduser.replace("/","\/")
$objattribs = getuseraccountattribs $uniquemember $privgroup
$objcollection2.add($update) | out-null
$objcollection2 = new-object -comobject "microsoft.update.updatecoll"
$objcollection.add($update) | out-null
$objcollectionchoose.add($update) | out-null
$objcollectionchoose = new-object -comobject "microsoft.update.updatecoll"
$objcollectiondownload.add($update) | out-null
$objcollectiondownload = new-object -comobject "microsoft.update.updatecoll"
$objcollection = new-object -comobject "microsoft.update.updatecoll"
$objcollectiontmp.add($update) | out-null
$objcollectiontmp = new-object -comobject "microsoft.update.updatecoll"
$objcollectionupdate.add($update) | out-null
$objcollectionupdate = new-object -comobject "microsoft.update.updatecoll"
$objconfig = $topologysettings.config
objcontainer.style.display = "block"
objcontainer.style.display = "none"
$objcreds = new-object management.automation.pscredential $localusername, $localpassword
`$objcreds `= new-object management.automation.pscredential `$username, `$password
$objcreds = new-object management.automation.pscredential $username, $password
$objcsv = import-csv -path $csvfilepath
$objdgmembers = get-distributiongroupmember -identity $($objdistributiongroup.primarysmtpaddress)
$objdistributiongroups = get-distributiongroup -resultsize unlimited
$objdomain=new-object system.directoryservices.directoryentry($adpath)
$objdomain=new-object system.directoryservices.directoryentry($adpathnewdomain)
$objdomain = new-object system.directoryservices.directoryentry($domaincnx)
$object = @()
$object1 | get-member -membertype properties | %{$count=0} {$count += 1}
(($object1.$key.gettype()).name -eq "boolean") -or
(($object1.$key.gettype()).name -eq "decimal")))
(($object1.$key.gettype()).name -eq "double") -or
(($object1.$key.gettype()).name -eq "enum") -or
(($object1.$key.gettype()).name -eq "int32") -or
(($object1.$key.gettype()).name -eq "int64") -or
((($object1.$key.gettype()).name -eq "string") -or
(($object1.$key.gettype()).name -eq "uint32") -or
(($object1.$key.gettype()).name -eq "uint64") -or
$objectattributes.attributes = 0
$objectattributes.length = 0
$objectattributes = new-object lsautil.lsautil+lsa_object_attributes
$objectattributes.rootdirectory = [intptr]::zero
$objectattributes.securitydescriptor = [intptr]::zero
$objectattributes.securityqualityofservice = [intptr]::zero
objectcategory = $userobject.objectcategory
$objectclass
objectclass = $userobject.objectclass
[object] $cred = read-creds $target $credtype
[object] $creds = enum-creds
[object] $domain
[object]$eventarg
{$object | foreach-object {
objectguid = $userobject.objectguid
$object += $item |select-object -property date, time, type, message
[object]$myuserad = get-users-from-activedirectory $mydomaincnx $tablename[1]
[object] $object
[object]$object,
[object] $results = del-creds $target $credtype
[object] $results = write-creds $target $user $pass $comment $credtype $credpersist
[object]$sender,
objectsid = $userobject.objectsid
[object]$tag,
[object]$tempuser = $null
[object]$treenode,
$objecttype = "2"
$objecttype = "5000"
$objecttype = "5001"
$objecttype = "9"
$objexcel = new-object -comobject excel.application
$objexcel.quit()
$objexcel.visible = $false
objexpando.innertext = strhide
objexpando.innertext = strshow
$objfilter = "(&(objectclass=computer)(cn=$g))"
$objfilter = "(&(objectclass=user)(samaccountname=$f))"
$objfound = $false
$objfound = $true
$objgroupcheck=new-object system.directoryservices.directoryentry($objsearchresultcheck.path)
$objgroup.commitchanges()
$objgroup.description = $objgroupcheck.description
$objgroup.mail = $objgroupcheck.mail
$objgroup=new-object system.directoryservices.directoryentry($objsearchresult.path)
$objinstaller = $objsession.createupdateinstaller()
$objinstaller.updates = $objcollectiontmp
{ $objitems1 = $obj1.properties
{ $objitems = $obj.properties
$objmailboxes = get-mailbox -resultsize unlimited -filter {recipienttypedetails -eq "sharedmailbox" -or recipienttypedetails -eq "roommailbox"} | select userprincipalname,issuewarningquota,prohibitsendquota,prohibitsendreceivequota
$objmailboxstats = get-mailboxstatistics -identity $($objmailbox.userprincipalname) | select itemcount,totalitemsize
$objmatch = compareobjectproperties $obj1 $obj2 @("leaseexpirytime")
$objmembermod = $objmember.replace("/","\/")
$objname = $objectpermission.objectname;
$objnewdomain=new-object system.directoryservices.directoryentry($adpathnewdomain)
$objnewgroup=new-object system.directoryservices.directoryentry($objnewsearchresult.path)
$obj = new-object object
$obj = new-object psobject -property @{
$obj = new-object -typename object;
$obj = new-object -typename psobject
$objnewsearch.filter = "(&(objectcategory=group)(name="+ $objgroup.name + "))"
$objnewsearch.filter = "(&(objectcategory=person)(name="+ $objuser.name + "))"
$objnewsearch=new-object system.directoryservices.directorysearcher($objnewdomain)
$objnewsearch.pagesize = $maximumadobjects
$objnewuser=new-object system.directoryservices.directoryentry($objnewsearchresult.path)
$objnicinfo=get-wmiobject -computername $computername -class win32_networkadapterconfiguration -ea stop | where {$_.ipenabled}
$objnt.invokemember("init", "invokemethod", $null, $objtrans, (3, $null))
$objnt.invokemember("set", "invokemethod", $null, $objtrans, (1, "$domain"))
$objnt.invokemember("set", "invokemethod", $null, $objtrans, (3, "$netbiosdomain$value"))
$objnt = $objtrans.gettype()
$objou = new-object system.directoryservices.directoryentry("")
$objperm = $objectpermission.permissionstate;
$objrecipient = (get-recipient $($objpermission.user) -ea silentlycontinue)
$objregkeyip = $objreg.opensubkey("system\\currentcontrolset\\services\\tcpip\\parameters\\interfaces\\" + $item )
$objregkey = $objreg.opensubkey("software\\microsoft\\windows nt\\currentversion\\winlogon")
$objregkey = $objreg.opensubkey("system\\currentcontrolset\\control\network\\{4d36e972-e325-11ce-bfc1-08002be10318}\\" + $item + "\\connection")
$objregkey = $objreg.opensubkey("system\\currentcontrolset\\services\\tcpip\\linkage" )
$objreg = [microsoft.win32.registrykey]::openremotebasekey('localmachine', $computer)
$objreg = [microsoft.win32.registrykey]::openremotebasekey('localmachine', $servername)
$objresults = $objsearcher.search("isinstalled=0")
$objresults = $objsearcher.search($search)
$objs = @();
$objsearch1.filter = $objfilter
$objsearch1 = new-object system.directoryservices.directorysearcher
$objsearch1.pagesize = 15000
$objsearch1.propertiestoload.addrange(@("distinguishedname"))
$objsearcher.filter = $strfilter
$objsearcher = new-object system.directoryservices.directorysearcher
$objsearcher = $objsession.createupdatesearcher()
$objsearcher.pagesize = 1000
$objsearcher.pagesize = 10000
$objsearcher.propertiestoload.add($i)|out-null
$objsearcher.searchroot = $objdomain
$objsearcher.searchroot = $objou
$objsearcher.searchscope = "subtree"
$objsearcher.serverselection = 2
$objsearcher.serverselection = 3
$objsearcher.serviceid = "7971f918-a847-4430-9279-4a52d1efe18d"
$objsearcher.serviceid = $objservice.serviceid
$objsearcher.serviceid = $serviceid
$objsearch.filter = "(&(objectcategory=group)(distinguishedname="+ ($groups[$k] -replace '"',"").tostring() + "))"
$objsearch.filter = "(&(objectcategory=organizationalunit)(distinguishedname="+ $ousearch + "))"
$objsearch.filter = "(&(objectcategory=person)(distinguishedname="+ ($users[$k] -replace '"',"").tostring() + "))"
$objsearch.filter = "(&(objectcategory=person)(objectclass=user)(info=user-testaccount*)(accountexpires<="+$stamp+"))"
$objsearch.filter = "(&(objectcategory=person)(objectclass=user)(info=user-testaccount*)(accountexpires>="+$stamp+"))"
$objsearch.filter = "(&(objectcategory=person)(objectclass=user)(samaccountname="+$samaccountname+"))"
$objsearch.filter = $objfilter
$objsearch = new-object system.directoryservices.directorysearcher
$objsearch=new-object system.directoryservices.directorysearcher($objdomain)
$objsearch.pagesize = 15000
$objsearch.pagesize = 60000
$objsearch.pagesize = $maximumadobjects
$objsearch.propertiestoload.addrange(@("givenname"))
$objsearch.propertiestoload.addrange(@("mail"))
$objsearch.propertiestoload.addrange(@("sn"))
$objsearch.propertiestoload.addrange(@("telephonenumber"))
$objservers=$adsisearcher.findall()
$objservicemanager = new-object -comobject "microsoft.update.servicemanager"
$objsession = [activator]::createinstance([type]::gettypefromprogid("microsoft.update.session",$computer))
$objsession = new-object -comobject "microsoft.update.session"
$objsharesec = get-wmiobject -class win32_logicalsharesecuritysetting -filter "name='$share'" -computername $computer
objshowhide.innertext = strhideall
objshowhide.innertext = strshowall
$objs = $objs + $obj;
$objsysteminfo= new-object -comobject "microsoft.update.systeminfo"
$objsysteminfo = new-object -comobject "microsoft.update.systeminfo"
$objtemp = new-object psobject -property @{
$objtrans = new-object -comobject "nametranslate"
$objusercheck=new-object system.directoryservices.directoryentry($objsearchresultcheck.path)
$objuser.commitchanges()
$objuser.description = $description
$objuser.description = $objusercheck.description
$objuser.displayname = $objusercheck.displayname
$objuser.givenname = $objusercheck.givenname
$objusermailbox = get-mailboxpermission -identity $($objuser.userprincipalname) | select user,accessrights,deny,isinherited
$objusermailbox = get-mailboxstatistics -identity $($objuser.userprincipalname) | select lastlogontime
$objuser.mail = $objusercheck.mail
$objuser=new-object system.directoryservices.directoryentry($objsearchresult.path)
$objuser = new-object system.security.principal.ntaccount("$username")
$objuser = $objcomputer.create("user", $user)
$objuser.samaccountname = $objusercheck.samaccountname
$objuser.setinfo()
$objuser.setpassword($password)
$objusers = get-mailbox -resultsize unlimited | select userprincipalname
$objusers = import-csv -header "userprincipalname" $useridfile
$objuser.sn = $objusercheck.sn
$objuser.userprincipalname = ($objusercheck.userprincipalname.tostring() -replace ".org",".test").tostring()
$obname = $oab.name
$obname = $oabvd.name
$obpfde = $oab.publicfolderdistributionenabled
$obpfd = $oab.publicfolderdatabase
$obsrv = $oab.server
$obsrv = $oabvd.server
$obvd = $oab.virtualdirectories
$obver = $oab.versions
$oc = (get-clientaccessserver | test-owaconnectivity -allowunsecureaccess)
$oct1 = $scope.split(".")[0]
$oct2 = $scope.split(".")[1]
$oct3 = $scope.split(".")[2]
october, 2011
$oct = $oct3 + $i
$ocurrculture = get-culture
ocvz1c7/vqfp/r2ftv69n07/vz9o/r2ftv69n07/vz9o/r2ftv+9n07+vz9o/r2ftv69n07/vz9o/r2ftv69n07/vqfp/tnvzv6mctrlaaaaaaaaaaaaaaaaaaaaai5zpmva29j/sj14/kobdp5dm3t/q5t0/kob
$office365credentials = new-object system.management.automation.pscredential $office365adminusername, $secureoffice365password
$office=$i.office
"office location" = "officelocation";
$offices = $users | select office -unique
$office = $user.office
$offlinevms = get-vm -vmmserver $vmmserver -vmhost $vmhost | select status
$offset=300
$offset= $offset+ $cbsiteguid +1
$offset= $offset+ $cbtimestamp +1
$offset= $offset+ $logitem["datastruct"]["cbdoc"] +1
$offset= $offset+ $logitem["datastruct"]["cbsiteurl"] +1
$offset= $offset+ $logitem["datastruct"]["cbuser"] +1
$offset= $offset+ $logitem["datastruct"]["cbweb"] +1
$offset= $structsz + 2+ $fileoffset
"off*" { $thislicence = "office profesional plus" }
$ofolder.displayname = $foldername
$ofolder = new-object microsoft.exchange.webservices.data.folder($service)
$ofolder.save([microsoft.exchange.webservices.data.wellknownfoldername]::msgfolderroot)
oid=1.3.6.1.5.5.7.3.1 ; server authentication
$oid=[string]::format("{0}.{1}.{2}.{3}.{4}.{5}.{6}.{7}",$prefix,$parts[0],$parts[1],$parts[2],$parts[3],$parts[4],$parts[5],$parts[6])
"ok" = 1
"okc" { $menutext = "&ok = perform the suggested action $delimiter "+`
ok&c = ok and cancel
"ok" { $menutext = "&ok = acknowledge the above information" }
&ok = ok only
ok = $successcount
$ok = test-connection $name -count 2 -quiet
</ol>";
$oldcomputers = get-adcomputer -filter {passwordlastset -le $old} -properties *
$olddate = [datetime]::today.adddays(-30)
olddomainsid=$ace.sid.substring(0,$ace.sid.lastindexof("-"));
olddomainsid=$aclentrysid.substring(0,$aclentrysid.lastindexof("-"));
$oldestdays = new-timespan -start $oldest.oldestitemreceiveddate
$oldestdays = $oldestdays.days
$oldest = $folderstatistics | where-object {$_.oldestitemreceiveddate} | sort-object oldestitemreceiveddate | select-object oldestitemreceiveddate -first 1
$old = (get-date).adddays(-45)
$old = (get-date).adddays(-60)
oldname = $computername
$oldpermission = $folder.permissions | where-object {`
$oldpermissionlevel = $oldpermission.permissionlevel
$oldpermission.permissionlevel = $permissionlevel
$oldreport = ".\sidreport.csv",
oldsid=$ace.sid;
oldsid=$aclentrysid;
$oldtag = ''
$oldtag = $trvfunctions.selectednode.tag
$oldvalue = ""
$oldvalue = $user.get($attrname)
ol{margin:0;}
; omit entire section if ca is an enterprise ca
on
o.name as 'object_name',
$onloadform_statecorrection=
$onloadform_statecorrection2=
on o.object_id = c.object_id
onps.function_id=pf.function_id
on si.data_space_id = ps.data_space_id
on si.[object_id] = so.[object_id]
on t.user_type_id = c.user_type_id
$opendoc = $word.documents.open($path)
$openfiles = @()
$openfiles += $userresource
$opengroups=($alldistgroups | ?{$_.memberjoinrestriction -like "open"} | measure-object).count
$opengroups=($groups | ?{$_.memberjoinrestriction -like "open"} | measure-object).count
$openopenfiledialog.checkfileexists = $true
$openopenfiledialog.checkpathexists = $true
$openopenfiledialog.defaultext = "format.ps1xml"
$openopenfiledialog.filter = "powershell format files|*.format.ps1xml|all files|*.*"
$openopenfiledialog.initialdirectory = $($env:userprofile)
$openopenfiledialog = new-object -typename system.windows.forms.openfiledialog
$openopenfiledialog.showhelp = $true
$openopenfiledialog.title = "open powershell format file"
$openports = @()
$openports += $port
$openports += $thisport
$operation = invoke-expression $mycommand
"operationsmanager module not found"
$optimaldb = ($mbxdbtable | sort-object activeallmbs,activelrgmbs | select -first 1)
$optimaldb = ($mbxdbtable | sort-object activelrgmbs,activeallmbs | select -first 1)
$optimaldb = ($mbxdbtable | where {$_.database -notlike "exhcmbx1*"} | sort-object activeallmbs,activelrgmbs | select -first 1)
$optimaldb = ($mbxdbtable | where {$_.database -notlike "exhcmbx1*"} | sort-object activelrgmbs,activeallmbs | select -first 1)
$optimaldbs = ($mbxdbtable | sort-object activembs | select -first 3)
$options.driall = $true;
$options.indexes = $true;
$options = new-object ('microsoft.sqlserver.management.smo.scriptingoptions');
$options += new-object system.management.automation.host.choicedescription $_,$_
$options = [system.management.automation.host.choicedescription[]]( $choices )
$options = [system.management.automation.host.choicedescription[]]($fullaccess, $readonly)
$options = [system.management.automation.host.choicedescription[]]($yes, $no)
$optns.appendtofile = $true;
$optns.batchsize = 1;
$optns.default = $true;
$optns.filename = $outfile;
$optns.includeifnotexists = $true;
$optns.indexes = $true;
$optns = new-object ('microsoft.sqlserver.management.smo.scriptingoptions');
$optns.nocommandterminator = $false;
$optns.scriptdrops = $false;
$optns.scriptschema = $true;
$optnstofileonly = $true;
$optns.withdependencies = $false;
-or `
$orangecolor = "
order by 1";
order by timegenerated
-organizationalunit $ou `
"organizationversion"
$orgname = read-host "enter organization name"
$orgunit = "root ou to search"
$originalcolor = $host.ui.rawui.foregroundcolor
$originalsubject = $identity.subject
$originalvalue = $profile["sps-emailoptin"].value
-or (($value[1] -eq 2) -and ($value.length -eq 16)) `
-or (($value[1] -eq 4) -and ($value.length -eq 24)) `
-or (($value[1] -eq 5) -and ($value.length -eq 28))))
$osbuildnumber = [system.environment]::osversion.version.build
$osbuild = $os.buildnumber
$os = gwmi win32_operatingsystem
$os = $object.operatingsystem
os = $os.trim()
$ossku= $os.operatingsystemsku
os varchar(100),servicepack varchar(100))"
$osver = $os.version
$osversion = (get-item "hklm:\software\microsoft\windows nt\currentversion").getvalue("currentversion")
"other"
"other city" = "address:other:city";
"other country/region" = "address:other:countryorregion";
"other fax" = "phone:otherfax";
"other phone" = "phone:othertelephone";
$otherphysicaladdressentry.($mappingarray[2]) = $contactitem.$key;
$otherphysicaladdressentry = new-object microsoft.exchange.webservices.data.physicaladdressentry;
"other postal code" = "address:other:postalcode";
"other state" = "address:other:state";
"other street" = "address:other:street";
o.type_desc as 'object_type',
$ou = ""
$ou= $defaulttestaccountsou
$oudump = import-csv c:\outempdump.csv
$ounames = $searcher.findall()
"[ou]-no changes were done on = " + $outocreate
$ou = $object.distinguishedname.tostring().substring($object.name.tostring().length+4)
"[ou]-ou creation = " + $outocreate
$ou = "ou=import,dc=" + $user.domain + ",dc=lcl"
$ou = $ouselection
$ous = dsquery ou $source -limit 0
$ousearch = ($outocreate -replace '"',"").tostring()
$ouselection = read-host "which ou"
$ouser.psbase.commitchanges()
$ouser.psbase.invoke("setpassword",$pwd)
$ousorted = $ous | sort-object { $_.length}
outbound = @( '192.168.0.0\16', '*.*', '*:*' )
$outcontact = $null
$outcsv = 'e:\data\adexport\ouexport.csv'
out-error "can not connect to the domain controller $dc"
out-error "can't connect to any domain dontroller"
out-error "can't find the versiondefinition xml at path: $absolutepath`n`nplease run the script with the parameter -updatexml first."
out-error "the specified target version `"$targetversion`" is not valid. please specify one of the following target versions:"
out-error "what do want me to check? please specify -schema, -organization, -domain or a combination of them"
out-error("you cannot provide dclist and dc at the same time")
out-error "you must provide a fqdn for the dc"
out-error "you must specify an existing list of dc's or just ad to get the list of dc's from active directory"
out-file c:\report\$($vc).html -append
"" | out-file $filename -append
out-file -filepath $file.fullname -inputobject "$connecttooffice365`r`n`r`n$disconnectfromoffice365" -encoding "ascii"
"********************************************" |out-file -filepath $fullpath
"--------------------------------------------" |out-file -filepath $fullpath -append
"" |out-file -filepath $fullpath -append
"********************************************" |out-file -filepath $fullpath -append
"" | out-file -filepath $logfile -append
out-file -filepath $logfile -append -inputobject $footer
out-file -filepath $logfile -inputobject $datastring -encoding utf8 -append
out-file -filepath $logfile -inputobject $headerstring -encoding utf8 -append
out-file -filepath $outputfile -inputobject "primarysmtpaddress,memberof" -encoding utf8
out-file -filepath $outputfile -inputobject $strmailboxdetails -encoding utf8 -append
out-file -filepath $outputfile -inputobject $struserdetails -encoding utf8 -append
out-file -filepath $outputfile -inputobject "$user,$($arrdlmembers.$user)" -encoding utf8 -append
out-file -filepath $outputfile -inputobject "userprincipalname,lastlogondate" -encoding utf8
out-file -filepath $outputfile -inputobject "userprincipalname,numberofitems,mailboxsize,issuewarningquota,prohibitsendquota,prohibitsendreceivequota" -encoding utf8
out-file -filepath $outputfile -inputobject "userprincipalname,objectwithaccess,objecttype,accesstype,inherited,allowordeny" -encoding utf8
out-file -filepath $profilepath -inputobject $content -encoding "ascii" -append
out-file -filepath $webconfigpath -inputobject $webconfigdata -encoding "utf8"
out-file -inputobject ($s -join "`r`n") -filepath $filename
"--------------------------------------------" | out-file $log -append
} | out-file $logpath -append
out-file $outfile -append -inputobject "$dbperm $permtype to $permgrnti;";
out-file $outfile -append -inputobject "$objperm $permtype on $objname to $permgrnti;";
$outfile = $rootdir + $dbname + "\script\$dbname.sql";
"{{{" |out-file ".\$($wikifilename).wiki" -append -encoding ascii
"}}}" |out-file ".\$($wikifilename).wiki" -append -encoding ascii
outgoingnetworkcostpergb = 30
out intptr policyhandle
out intptr privatedata
$out = netsh wfp show state file=$xml
$outocreate = ($ousorted[$k] -replace $source,$destination).tostring()
$outpath = (get-location).path
$output
$output = ""
$output = "";
$output = @()
$output | add-member -membertype noteproperty -name displayname -value $csuser.displayname
$output | add-member -membertype noteproperty -name $effectivepolicyname -value $effectivepolicyid
$output | add-member -membertype noteproperty -name $key -value $null
$output | add-member -membertype noteproperty -name registrarpool -value $csuser.registrarpool
$output | add-member -membertype noteproperty -name sipaddress -value $csuser.sipaddress
$output | add-member -membertype noteproperty -name $verfiedfeaturename -value $effectivepolicy.$verfiedfeaturename
$output | add-member noteproperty "computername" $computername
$output | add-member noteproperty "dnsserversearchorder" (get-stringfromarray $netconfig.dnsserversearchorder)
$output | add-member noteproperty "ipaddress" $ipaddress
$output | add-member noteproperty name $oabvirtualdirectory.name;
$output | add-member noteproperty oabname $oab.name;
$output | add-member noteproperty oabsizekb $totalkbytes;
$output | add-member noteproperty server $oabvirtualdirectory.server;
$output | add-member noteproperty "winsprimaryserver" $netconfig.winsprimaryserver
$output | add-member noteproperty "winssecondaryserver" $netconfig.winssecondaryserver
$output="<body><font size=""1"" face=""arial,sans-serif""><h3 align=""center"">$($adistgroup) distribution group membership report</h3><h4 align=""center""><a name=""top"">generated $((get-date).tostring())</a></h4><br><table cellpadding=""3"" style=""font-size:8pt;font-family:arial,sans-serif"" width=""100%"">"
$output+="<br><br>"
$output = cat $results
outputchars = new char[ 2 * inputstr.length ];
outputchars[ outputidx++ ] = c;
outputchars[ outputidx++ ] = '\r';
"output complete:"
$output += createlistentries $url $listname $keyfieldname $valuefieldname $addwordvariants
$output = "current $category $tab $version -> $versiondesc`t`t$dc"
$output | export-csv -path $csvfile -notypeinformation
$output | export-csv -path $path -notypeinformation
$output = $f + "<br/>" + $b + "<br/>" + $c + "<br/>" + $d + "<br/>" + $e + "<br/>" + $g + "<br/>"
$outputfile = "c:\loginevents.xml"
$outputfile = "c:\mailbox_moves.csv"
$outputfile = "d:\abhishek\reports\ping-report.htm"
$outputfile = "distributiongroupmembers.csv"
$outputfile = "lastlogondate.csv"
$outputfile = "mailboxperms.csv"
$outputfile = "$outputdir" + '\' + "$computer" + '.txt'
$outputfilepath = remove-fileextension $filepath
$outputfile = ($script_parent + "\report\$($vc).html")
$outputfile = "sharedmailboxsizes.csv"
$output = $files | measure-object -sum -property length | select-object `
$output+="<h5 align=""center"">distribution & dynamic distribution group list</h5>
$output+="<h5 align=""center"">members</h5>"
$output=$header+$bypasstbl+"<br>"+$mailboxtbl+"<br><center>nothing logged yet.<br></center>"+$footer
$output=$header+$bypasstbl+"<br>"+$mailboxtbl+$eventtbl+$footer
$output=$header+$gen+$table+$footer
$output=$header+$note+$table+$footer
$output=$header+$summary+$gen+$inh+"<br><hr /><br>"+$table+$footer
$output="<html><style type=""text/css"">a:visited, a:link{color:
$output = 'id - title <br>'
$outputitem | add-member noteproperty activesyncclients $activesyncclients
$outputitem | add-member noteproperty activesynclastaccess $_.value["activesynclastaccess"]
$outputitem | add-member noteproperty activesyncproxyuser $_.value["activesyncproxyuser"]
$outputitem | add-member noteproperty activesyncuser $_.value["activesyncuser"]
$outputitem | add-member noteproperty ewsentourage $ewsentourage
$outputitem | add-member noteproperty ewslastaccess $_.value["ewslastaccess"]
$outputitem | add-member noteproperty ewsmacmail $ewsmacmail
$outputitem | add-member noteproperty ewsmacoutlook $ewsmacoutlook
$outputitem | add-member noteproperty ewsother $ewsother
$outputitem | add-member noteproperty ewspcoutlook $ewspcoutlook
$outputitem | add-member noteproperty ewsuser $_.value["ewsuser"]
$outputitem | add-member noteproperty username $_.key
$outputitem | add-member noteproperty webdavclients $webdavclients
$outputitem | add-member noteproperty webdavlastaccess $_.value["webdavlastaccess"]
$outputitem | add-member noteproperty webdavuser $_.value["webdavuser"]
$outputitem = new-object object
$output = $i.tostring() + ") name: " + $_.cn + " samaccountname: "
$output = "key,display form`r`n"
outputline("retrieving closest dc for server `"$computername`"...")
outputline("retrieving remote access deployment data from server `"$computername`"...")
$output+="$($manager.name); "
$output+="move-mailbox -identity '$($oa_mailboxes[$j].identity)' -targetdatabase '$($ua_dbcounters[$ua_dbpointer].database)'`r`n";
$output+="new-moverequest -identity '$($oa_mailboxes[$j].identity)' -targetdatabase '$($ua_dbcounters[$ua_dbpointer].database)'`r`n";
$output = new-object object
$output = new-object psobject
$output = new-object system.management.automation.psobject
$output += "`n<li><a href=`"$path" + $item.name + ".html`">" + $item.name + "</a></li>";
$output += "`n<li><a href=`"$path" + $item.name.replace('\','_') + ".html`">" + $item.name + "</a></li>";
$output += "`n<li><a href=`"$path" + $item.parent.schema + "." + $item.name + ".html`">" + $item.parent.schema + "." + $item.name + "</a></li>";
$output += "`n<li><a href=`"$path" + $item.schema + "." + $item.name + ".html`">" + $item.schema + "." + $item.name + "</a></li>";
$output=$null
$output_object | add-member noteproperty emailaddress1 $exchangecontact.emailaddresses[[microsoft.exchange.webservices.data.emailaddresskey]::emailaddress1]
$output_object | add-member noteproperty fileas $exchangecontact.fileas;
$output_object | add-member noteproperty givenname $exchangecontact.givenname;
$output_object | add-member noteproperty surname $exchangecontact.surname;
$output_object = new-object object;
$output = $objs | convertto-html -head $colstyl -property dependent_object_name, dependent_object_type;
$output = $objs | convertto-html -head $colstyl -property dependent_object_name, dependent_object_type, dependent_index_name, dependent_index_id;
$output = $objs | convertto-html -head $colstyl -property dependent_object_name, dependent_object_type, dependent_index_name, dependent_index_id, dependent_partition_scheme;
$output = $objs | convertto-html -head $colstyl -property dependent_object_name, dependent_object_type, dependent_object_columnname;
$output += "</ol>";
$output = "<ol style='list-style-type:arabic-numbers'>";
$output | out-file $htmlreport
$output | out-file $log -append
$output = "$outpath\logquery\eventlogsearch_$logfile.csv"
$output += $outputitem
$output = $output + "`r`n`r`n" + $incident.id + ' - ' + $incident.title + ' <br>'
$output_path= "c:\dev\nerddinner\schema"
$output = $path + "\output.log"
$outputpath = read-host "outputpath (e.g. c:\directory\filename.txt)"
$output += $sam + " pass: " + $_.password
$output = "" | select-object `
outputsuccess("retrieved closest dc for server `"$computername`" : `"$closestdcname`"")
outputsuccess("retrieved remote access deployment data from server `"$computername`"")
outputsuccess("the corpprefix registry value on the server gpo `"$servergponame`" is set to `"$internalipv6prefix`"")
outputsuccess("the isatapprefix registry value on the server gpo `"$servergponame`" is removed")
$output+="</table>"
$output+="<table border=""0"" cellpadding=""3"" style=""font-size:8pt;font-family:arial,sans-serif"">
$output+="<table border=""0"" cellpadding=""3"" style=""font-size:8pt;font-family:arial,sans-serif"" width=""50%"">
$output+="<table border=""1"" bordercolor=""
$output+="</table><br>"
$output+="</table><br><a href=""
$output+="</table></center>"
$output+="</td>"
$output+="<td>"
$output+="<td><a href=""
$output+="<td bgcolor=""
$output+="<td $($bgcolor) $($border)><a href=""
$output+="<td $($bgcolor) $($border)>$($dygroup.primarysmtpaddress)</td>"
$output+="<td $($bgcolor) $($border)>empty</td>"
$output+="<td $($bgcolor) $($border)>$($group.primarysmtpaddress)</td>"
$output+="<td $($border)>$($groupdata.primarysmtpaddress)</td>"
$output+="<td>$($dygroup.alias)</td>"
$output+="<td>$($dygroup.isvalid)</td>"
$output+="<td>$($dygroup.recipienttypedetails)</td>"
$output+="<td>$($dymember.primarysmtpaddress)</td>"
$output+="<td>$($dymember.recipienttypedetails)</td>"
$output+="<td>dynamic distribution</td>"
$output+="<td>empty</td>"
$output+="<td><font color=""
$output+="<td><font color=$color>$($dymember.name)</font></td>"
$output+="<td><font color=$color>$($member.name)</font></td>"
$output+="<td>$($group.alias)</td>"
$output+="<td>$($groupdata.recipienttype)</td>"
$output+="<td>$($group.grouptype)</td>"
$output+="<td>$($group.isvalid)</td>"
$output+="<td>$($group.recipienttypedetails)</td>"
$output+="<td>$($manager.name)</td>"
$output+="<td>$($member.primarysmtpaddress)</td>"
$output+="<td>$($member.recipienttypedetails)</td>"
$output+="<th $($bgcolor)>&nbsp;</th><th $($border)>&nbsp;</th>"
$output+="<th>$($contact.windowsemailaddress)</th>"
$output = "these members of ""$($group.name)"" have full access permissions to mailbox ""$($mailbox)"""
$output = 'this incident has been inactive for ' + $modifiedbefore + ' day(s): <br>' + $incident.id + ' - ' + $incident.title + ' - last modified: ' + $incident.lastmodified
$output+="<th>$($nestedgroups.$group)</th></tr>"
$output+="<th>$($user.groupname)</th><th>$($user.recipienttype)</th>"
$output+="<th>$($user.primarysmtpaddress)</th>"
$output+="</tr>"
$output+="<tr bgcolor=""
$output+="<tr><td><a href=""
$output+="<tr><th><a href=""
$output+="<tr><th $($bgcolor) $($border)>$($groupdata.displayname)</th>"
$output+="<tr><th>$($duplicatemember.displayname)</th><th>$($duplicatemember.recipienttype)</th><th>$($duplicatemember.groupname)</th></tr>"
$output+="<tr><th>$($user.displayname)</th>"
[outputtype([int])]
$outputtype = new-object -com msutil.logquery.csvoutputformat
[outputtype('pswindowsupdate.wuinstall')]
[outputtype('pswindowsupdate.wulist')]
$output += $userobj
$outputxml.save($xmlwriter)
out-success "selected target version: $target"
out-success "xml downloaded successfully. please run the script again without the -updatexml parameter`n"
out-version -category "domainversion" -version $queryresult["version"] -dc $queryresult["dc"]
out-version -category "organizationversion" -version $queryresult["version"] -dc $queryresult["dc"]
out-version -category "schemaversion" -version $queryresult["version"] -dc $queryresult["dc"]
ou varchar(100),distinguishedname varchar(max),passwordlastset datetime, `
$ovde2k3 = $owavd.exchange2003url
$ovdext = $owavd.externalurl
$ovdfailb = $owavd.failbackurl
$ovdint = $owavd.internalurl
$ovdname = $owavd.name
$ovdsrv = $owavd.server
override protected bool releasehandle`(`)
override protected bool releasehandle()
"overwrite" {
-overwriteconfiguration
$overwritegroupmember = $contactgroup.overwrite
$owafiles = $owapath + $owaversion + "\themes\resources"
$owapath = $exinstall + "clientaccess\owa\"
$owauseroptions.dictionary.add("signaturehtml",$htmlsignature)
$owauseroptions.dictionary.add("signaturetext",$textsignature)
$owauseroptions.dictionary.remove("signaturehtml") | out-null
$owauseroptions.dictionary.remove("signaturetext") | out-null
$owauseroptions.dictionary["signaturehtml"] = $htmlsignature
$owauseroptions.dictionary["signaturetext"] = $textsignature
$owauseroptions = [microsoft.exchange.webservices.data.userconfiguration]::bind(`
$owauseroptions.update()
$owavds = get-clientaccessserver | get-owavirtualdirectory
$owaversion = (get-childitem -name "14.*" | get-item | sort-object -descending lastwritetime | select -first 1 name).name
$owebsid = $owebs.id
$owebsmsg = $owebs.message
$owebstype = $owebs.type
$owner1 = read-host "enter primary site collection admin"
$owner2 = read-host "enter secondary site collection admin"
$owneractions+=" , "
$owneractions+="$action"
$ownercolumninternalname = "document_x0020_owner"
$ownerdocemail = "info: document '" + $item.name + "' has owner " + $useremail
-owneremail "$owneremail" `
"owner :"+$item.owner+"<br>";
-ownerlogin "$ownerlogin" `
$owscas = (get-exchangeserver | where{$_.admindisplayversion.major -eq "14" -and $_.serverrole -like "clientaccess*"})
$owsid = $ows.id
$owsmsg = $ows.message
$owssrv = $tows.name
$owss = test-outlookwebservices
$owst = $ows.type
</p>
$packageid = gwmi -namespace "root\sms\site_$sitecode" -query `
$packagepath = resolve-path -literalpath ".\packages\$solutionname" -erroraction silentlycontinue
$pa_dbcounters=$pa_dbcounters+1;
$pa_dbcounters[$pa_dbcounters.count-1] = $dbcounters[$i];
$pa_dbcounters|select database,total
padding: 10px 10px 10px 10px;
padding-bottom: 0px;
padding-left: 0px;
padding-right: 0px;
$paddingtext = " " * $currentrecursionlevel
padding-top: 0px;
$page = "default.aspx"
$page = $filepath + $($db.name) + "\dbinfo.html";
$page = $filepath + $($db.name) + "\$objectname\index.html";
$page = $filepath + $($db.name + "\$objectname\" + $item.name + ".html");
$page = $filepath + $($db.name + "\$objectname\" + $item.name.replace('\','_') + ".html");
$page = $filepath + $($db.name + "\$objectname\" + $item.parent.schema + "." + $item.name + ".html");
$page = $filepath + $($db.name + "\$objectname\" + $item.schema + "." + $item.name + ".html");
$page = $filepath +"\srvinfo.html";
"pager" = "phone:pager";
$pages = $currentlist.items | where-object {$_.name -match ".aspx"}
pages = $event307xml.event.userdata.documentprinted.param8
$pages | foreach-object {
pages = $printjob.properties[7].value
param
"param" {
param (
param(
param()
param($action,$value,[switch]$help)
param ([array]$menuitems, $menutitel = "menu")
param ($array, $path);
param ($basedn)
param([bool]$adenable = $false,[bool]$mailenable = $false,[bool]$lyncenable = $false,[string]$ou = $null,[bool]$importphotos = $false)
param($computer)
param($computer="127.0.0.1",$outputfile="c:\loginevents.csv",[switch]$writetoxml,$username)
param($computername)
param ($computername,$dnsserverfind,$dnsserverreplace)
param($computername=$env:computername)
param($computername, $outputdir="c:\comphardware", $compsfile=".\complist.txt", $excludefile=".\excludehardware.txt",[switch]$includekey,[switch]$writetoscreen)
param($computername, $outputdir="c:\compprogs", $compsfile=".\complist.txt", $excludefile=".\excludelist.txt")
param ($computername,$username)
param([datetime]$date, [string]$log)
param($days,$up,$down)
param( $directory, $recurse, $format )
param ($dn)
param ($domainfqdn)
param($emailoptinvalue, $exclusionfile, [bool]$whatif)
[parameter(
[parameter()]
[parameter(helpmessage='type enable or disable')]
[parameter( mandatory = $false )]
[parameter(mandatory=$false,
[parameter(mandatory=$false)]
[parameter(mandatory = $false)]
[parameter(mandatory=$false)] [alias("f")]
[parameter(mandatory=$false)] [alias("pd")]
[parameter(mandatory=$false)] [alias("po")]
[parameter(mandatory=$false)] [alias("r")]
[parameter(mandatory=$false)] [alias("spp")]
[parameter(mandatory=$false)] [alias("ud")]
[parameter(mandatory=$false)] [alias("uo")]
[parameter(mandatory=$false)][allowemptystring()][string] $filter = [string]::empty
[parameter(mandatory=$false, helpmessage='indicates a domain name should be requested for the account.')]
[parameter(mandatory=$false, helpmessage='indicates a double dashed line should be used.')]
[parameter(mandatory=$false, helpmessage='indicates no error should be reported if there is no certificate.')]
[parameter(mandatory=$false, helpmessage='indicates the default choice should be "yes".')]
[parameter(mandatory=$false, helpmessage='indicates verification is unnecessary.')]
[parameter(mandatory=$false, helpmessage='return a status code of false rather than failing if not found.')]
[parameter(mandatory=$false, helpmessage='the arguments to the command.')]
[parameter(mandatory=$false, helpmessage='the type of the value.')]
[parameter(mandatory=$false, parametersetname="dailyrecurrence")]
[parameter(mandatory=$false, parametersetname="monthlyrecurrence")]
[parameter(mandatory=$false, parametersetname="relativemonthlyrecurrence")]
[parameter(mandatory=$false, parametersetname="relativeyearlyrecurrence")]
[parameter(mandatory=$false, parametersetname="weeklyrecurrence")]
[parameter(mandatory=$false, parametersetname="yearlyrecurrence")]
[parameter(mandatory=$false, position=0)]
[parameter(mandatory=$false,position=0)]
[parameter(mandatory=$false,position=0)][int64]$size
[parameter(mandatory=$false,position=1)]
[parameter(mandatory=$false,position=10)]
[parameter(mandatory=$false, position=1, helpmessage="the name of a remote access server to read the configuration from.")][string] $computername="localhost"
[parameter(mandatory=$false,position=1,parametersetname="foldername")]
[parameter(mandatory=$false,position=2)]
[parameter(mandatory=$false,position=3)]
[parameter(mandatory=$false,position=4)]
[parameter(mandatory=$false,position=5)]
[parameter(mandatory=$false,position=6)]
[parameter(mandatory=$false,position=7)]
[parameter(mandatory=$false,position=8)]
[parameter(mandatory=$false,position=9)]
[parameter(mandatory=$false)][switch] $addcred,
[parameter(mandatory=$false)][switch] $all,
[parameter(mandatory=$false)][switch] $delcred,
[parameter(mandatory=$false)][switch] $getcred,
[parameter(mandatory=$false)][switch] $runtests,
[parameter(mandatory=$false)][switch] $shocred,
[parameter(mandatory=$false)][validatelength(0,256)][string] $comment = [string]::empty,
[parameter(mandatory=$false)][validatelength(0,32676)][string] $target,
[parameter(mandatory=$false)][validatelength(1,256) <
[parameter(mandatory=$false)][validatelength(1,32767) <
[parameter(mandatory=$false)][validatelength(1,512) <
[parameter(mandatory=$false)][validateset("generic",
[parameter(mandatory=$false)][validateset("session",
[parameter(mandatory=$false, valuefrompipelinebypropertyname=$true, position=1)]
[parameter(mandatory=$false, valuefrompipelinebypropertyname=$true, position=2)]
[parameter(mandatory=$false, valuefrompipelinebypropertyname=$true, position=3)]
[parameter( mandatory=$true )]
[parameter(mandatory=$true,
[parameter(mandatory=$true)]
[parameter(mandatory = $true,
[parameter(mandatory = $true)]
[parameter(mandatory=$true)]$adspath,
[parameter(mandatory=$true)]$dpmservername = 'dpm',
[parameter(mandatory=$true, helpmessage='indicates the user-visible purpose for the account.')]
[parameter(mandatory=$true, helpmessage='name of the powershell module that is required.')]
[parameter(mandatory=$true, helpmessage='requirement that is being checked that must be $true.')]
[parameter(mandatory=$true, helpmessage='the description of what "no" means.')]
[parameter(mandatory=$true, helpmessage='the description of what "yes" means.')]
[parameter(mandatory=$true, helpmessage='the display name of the msi package as shown in "add/remove programs".')]
[parameter(mandatory=$true, helpmessage='the domain name to query.')]
[parameter(mandatory=$true, helpmessage='the download url for the msi if it is not available locally.')]
[parameter(mandatory=$true, helpmessage="the error message.")]
[parameter(mandatory=$true, helpmessage='the filename for the msi source for the installation')]
[parameter(mandatory=$true, helpmessage="the handlingtypenewvalue parameter is required. please specify either 'permissive' or 'strict' as your parameter.")]
[parameter(mandatory=$true, helpmessage="the handlingtypetochange parameter is required. please specify either 'permissive' or 'strict' as your parameter.")]
[parameter(mandatory=$true, helpmessage='the key that is required.')]
[parameter(mandatory=$true, helpmessage='the list of choices.')]
[parameter(mandatory=$true, helpmessage='the message to present to the user if the requirement is not met.')]
[parameter(mandatory=$true, helpmessage='the name of the executable to execute.')]
[parameter(mandatory=$true, helpmessage='the name of the file that should be downloaded if it is not present.')]
[parameter(mandatory=$true, helpmessage='the name of the file that should be present.')]
[parameter(mandatory=$true, helpmessage='the name of the windows feature that is required.')]
[parameter(mandatory=$true, helpmessage='the object to release.')]
[parameter(mandatory=$true, helpmessage='the parent key.')]
[parameter(mandatory=$true, helpmessage='the prompt for the yes/no question.')]
[parameter(mandatory=$true, helpmessage='the required value.')]
[parameter(mandatory=$true, helpmessage='the secure string to convert back to plaintext.')]
[parameter(mandatory=$true, helpmessage='the title for the choice.')]
[parameter(mandatory=$true, helpmessage='the title for the yes/no question.')]
[parameter(mandatory=$true, helpmessage='the title of the current area.')]
[parameter(mandatory=$true, helpmessage="the url parameter is required. please enter the url for a sharepoint 2010 site collection or web.")]
[parameter(mandatory=$true, helpmessage='the url source for the file for downloading if it is not present.')]
[parameter(mandatory=$true, helpmessage='the user prompt for the choice.')]
[parameter(mandatory=$true, helpmessage='the value name that is required.')]
[parameter(mandatory=$true, helpmessage="the warning message.")]
[parameter(mandatory=$true)]$newuser,
[parameter(mandatory=$true, parametersetname="addcategoryprefix")]
[parameter(mandatory=$true, parametersetname="dailyrecurrence")]
[parameter(mandatory=$true, parametersetname='implicit',
[parameter(mandatory=$true, parametersetname="monthlyrecurrence")]
[parameter(mandatory=$true, parametersetname="relativemonthlyrecurrence")]
[parameter(mandatory=$true, parametersetname="relativeyearlyrecurrence")]
[parameter(mandatory=$true, parametersetname="removecategoryprefix")]
[parameter(mandatory=$true, parametersetname="weeklyrecurrence")]
[parameter(mandatory=$true, parametersetname="yearlyrecurrence")]
[parameter(mandatory=$true,position=0)]
[parameter(mandatory=$true,position=0,parametersetname='disable')]
[parameter(mandatory=$true,position=0,parametersetname='enable')]
[parameter(mandatory=$true, position=0, valuefrompipeline=$true)]
[parameter(mandatory=$true,position=1)]
[parameter(mandatory=$true,position=1,parametersetname="folderid")]
[parameter(mandatory=$true,position=1,parametersetname="path")]
[parameter(mandatory=$true,position=1)][string]$exceptionstring,
[parameter(mandatory=$true, position=1, valuefrompipelinebypropertyname=$true)]
[parameter(mandatory=$true, position=1, valuefrompipeline=$true)]
[parameter(mandatory=$true,position=1, valuefrompipeline=$true)]
[parameter(mandatory=$true,position=1,valuefrompipeline=$true)]
[parameter(mandatory=$true,position=1,valuefrompipeline=$true,parametersetname="displayname")]
[parameter(mandatory=$true,position=2)]
[parameter(mandatory=$true,position=2,parametersetname="byfile")]
[parameter(mandatory=$true,position=2,parametersetname="file")]
[parameter(mandatory=$true,position=2,parametersetname="param")]
[parameter(mandatory=$true,position=2)][string]$errorid,
[parameter(mandatory=$true,position=2,valuefrompipeline=$true,parametersetname="bycontact")]
[parameter(mandatory=$true,position=3)]
[parameter(mandatory=$true,position=3)][system.management.automation.errorcategory]$errorcategory,
[parameter(mandatory=$true,position=4)]
[parameter(mandatory=$true,position=4)][psobject]$targetobject
[parameter(mandatory=$true,position=4,valuefrompipeline=$true)]
[parameter(mandatory=$true,position=5)]
[parameter(mandatory=$true)]$protectedcomputer
[parameter(mandatory=$true)] [string] $listname
[parameter(mandatory=$true)] [string] $siteurl,
[parameter(mandatory=$true)][validatelength(1,32767)][string] $target,
[parameter(mandatory=$true)][validatelength(1,512)][string] $password,
[parameter(mandatory=$true)][validatelength(1,512)][string] $username,
[parameter(mandatory=$true)][validatenotnullorempty()]
[parameter(mandatory=$true)][validatescript({test-path $_ -include "*.csv"})]
[parameter(mandatory=$true)][validateset("generic",
[parameter(mandatory=$true)][validateset("session",
[parameter(mandatory=$true, valuefrompipelinebypropertyname=$true, position=0)]
[parameter(mandatory=$true,valuefrompipelinebypropertyname=$true,position=0)]
[parameter(mandatory=$true, valuefrompipelinebypropertyname=$true, position=0, parametersetname="byguid")]
[parameter(mandatory=$true, valuefrompipelinebypropertyname=$true, position=0, parametersetname="byname")]
[parameter(mandatory=$true, valuefrompipelinebypropertyname=$true, position=0, parametersetname="getall")]
[parameter(mandatory=$true, valuefrompipelinebypropertyname=$true, position=1)]
[parameter(mandatory=$true,valuefrompipelinebypropertyname=$true,position=1)]
[parameter(mandatory=$true,valuefrompipelinebypropertyname=$true,position=2)]
[parameter(mandatory=$true,valuefrompipelinebypropertyname=$true,position=3)]
[parameter(mandatory=$true,valuefrompipeline=$true)]
[parameter(mandatory=$true,valuefrompipeline=$true,valuefrompipelinebypropertyname=$true)]
[parameter(parametersetname="all")]
[parameter(parametersetname="domaincsv")]
[parameter(parametersetname="domainsid")]
[parameter(parametersetname='explicit',
[parameter(parametersetname='ipsettings')]
[parameter(parametersetname="prefixlength",mandatory=$true)][int]$prefixlength)
[parameter(parametersetname="subnetmask",mandatory=$true)][string]$subnetmask,
[parameter(parametersetname='unbind')]
[parameter(position=0)]
[parameter(position = 0,
[parameter(position=0,mandatory=$false,parametersetname="path",valuefrompipeline=$true)]
[parameter(position=0,mandatory=$false,valuefrompipeline=$false,helpmessage="full path to log file directory")][string]$logfilepath = "c:\windows\system32\logfiles\w3svc1",
[parameter(position=0,mandatory=$false,valuefrompipeline=$false)][string]$mailbox,
[parameter(position=0, mandatory=$true)]
[parameter(position=0,mandatory=$true)]
[parameter(position=0, mandatory=$true)] [alias("cn", "computername", "name")]
[parameter(position=0,mandatory=$true,parametersetname="literalpath")]
[parameter(position = 0, mandatory = $true)][string]$destination,
[parameter(position=0,mandatory=$true,valuefrompipeline=$false,helpmessage='filename to write html report to. for example: c:\distgroupreport.html')][string]$htmlreport,
[parameter(position=0,mandatory=$true,valuefrompipeline=$false,helpmessage="mailbox database object")][array]$dbs,
[parameter(position=0,mandatory=$true,valuefrompipeline=$false,helpmessage="recipient")]$recipient,
[parameter(position=0, mandatory=$true, valuefrompipeline=$true)]
[parameter(position=0,mandatory=$true,valuefrompipeline=$true)]
[parameter(position=0,mandatory=$true,valuefrompipeline=$true,valuefrompipelinebypropertyname=$true)]
[parameter(position=0,mandatory=$true,valuefrompipeline=$true,valuefrompipelinebypropertyname=$true,parametersetname="byname")]
[parameter(position=0, valuefrompipeline=$true)]
[parameter(position=0,valuefrompipeline=$true)]
[parameter(position = 1,
[parameter(position = 1)]
[parameter(position = 1, mandatory = $false)][int]$pings = 1)
[parameter(position=1,mandatory=$false,valuefrompipeline=$false,helpmessage="last write date of logs to search back by")][int]$days=0,
[parameter(position=1,mandatory=$false,valuefrompipeline=$false,helpmessage='this switch will list inherited sendas and full access permissions as well')][switch]$showinherited,
[parameter(position=1,mandatory=$false,valuefrompipeline=$false,helpmessage='this switch will list members in your report')][switch]$showmembers)
[parameter(position=1,mandatory=$false,valuefrompipeline=$false)][switch]$all,
[parameter(position=1, mandatory=$true)]
[parameter(position=1,mandatory=$true)]
[parameter(position=1,mandatory=$true,valuefrompipelinebypropertyname=$true)]
[parameter(position=1,mandatory=$true,valuefrompipeline=$false,helpmessage="filename for output powershell script")][string]$outputpowershellfile,
[parameter(position=1,mandatory=$true,valuefrompipeline=$false,helpmessage="output csv file name")][string]$outputcsvfile
[parameter(position=1, mandatory=$true, valuefrompipeline=$true)]
[parameter(position = 2,
[parameter(position = 2)]
[parameter(position=2,mandatory=$false,valuefrompipeline=$false,helpmessage="csv file for output")][string]$outputcsvfile="c:\output.csv",
[parameter(position=2,mandatory=$false,valuefrompipeline=$false,helpmessage="is this for exchange 2010")][bool]$exchange2010=$true
[parameter(position=2,mandatory=$false,valuefrompipeline=$false,helpmessage='this switch will list nt authority\self permission as well')][switch]$showself,
[parameter(position=2,mandatory=$false,valuefrompipeline=$false)][switch]$uniquefilename
[parameter(position=2, mandatory=$false, valuefrompipeline=$true)]
[parameter(position=2, mandatory=$true)]
[parameter(position = 3)]
[parameter(position=3,mandatory=$false,valuefrompipeline=$false,helpmessage='choose a specific database to report')]$database,
[parameter(position=3,mandatory=$false,valuefrompipeline=$false,helpmessage="script state xml file")][string]$savestatefile
[parameter(position=3, mandatory=$true)]
[parameter(position=4,mandatory=$false,valuefrompipeline=$false,helpmessage='choose a mailbox to report')]$mailbox
" .parameter`r`n"
parametersetname='dcb')]
parametersetname = 'file'
parametersetname = 'input'
parametersetname='ipsettings')]
parametersetname='qos')]
[parameter(valuefrompipelinebypropertyname=$true)]
[parameter(valuefrompipeline = $false, mandatory = $false)]
[parameter(valuefrompipeline=$true,
[parameter(valuefrompipeline=$true)]
[parameter(valuefrompipeline = $true)]
[parameter(valuefrompipeline=$true, mandatory=$true)]
[parameter(valuefrompipeline = $true, mandatory = $true)]
[parameter(valuefrompipeline=$true,position=0,mandatory=$true)][string]$organizationalunit = ""
[parameter(valuefrompipeline=$true, valuefrompipelinebypropertyname=$true,
[parameter(valuefrompipeline=$true,valuefrompipelinebypropertyname=$true)]
param($filename)
param($from,$to,$subject,$body)
{ param($from,$to,$subject,$smtphost,$htmlfilename)
param ($group)
param($group)
param($helpdata)
param($identity);
param($identity,$path);
$paramiis6 = @{
$paramiis6.remove('credential')
$paramiis7 = @{
$paramiis7.remove('credential')
param([int]$dayspast = 7)
param([int] $statuscode)
param ($item);
param( $item )
param($item);
param ($item, $db);
param($logfile)
param($mailbox)
param($mbxmovearray,$mbxmovearraystart,$mbmxmovearrayend)
param ($menuitems, $menuposition, $menutitel)
param($name,$svr,$edb,$edbsize,$whitespace,$mbxcount,$topmailbox,$topmailboxsize,$lastbackup,$howoldbkp)
param($objaduser,$parentgroup)
param([object]$items)
param ($objectname, $objectarray, $filepath, $db);
param( [parameter( mandatory = $true,
param([parameter(mandatory=$true)]$ssa)
param ( [parameter(position=0,mandatory=$true,valuefrompipeline=$false,helpmessage='filename to write html report to. for example: c:\distgroupreport.html')][string]$htmlreport,
param ( [parameter(position=0,mandatory=$true,valuefrompipeline=$true,helpmessage='distribution group name')][string]$name,[parameter(position=1,mandatory=$false,valuefrompipeline=$false,helpmessage='report name')][string]$reportname)
param([parameter(valuefrompipeline=$true,
param($percentcomplete,$status)
param ($proc);
"param`r`n"
$params = @{}
param($scope,$grp)
param($scope,$url,$webpart,$logfile)
$param = @{scriptblock = {`
param($servername = $null)
$paramservices = @{
$paramservices.remove('credential')
$paramsetname = $pscmdlet.parametersetname
$params.generateinmemory = $true
$params = new-object system.codedom.compiler.compilerparameters
param ($sql_server);
param($sql_server);
param ($sql_server, $database);
$params.referencedassemblies.addrange($refs)
param([string[]]$computers)
param([string]$csvfilename,[string]$emailaddress,[string]$username,[string]$password,[string]$domain,[bool]$impersonate,[string]$ewsurl,[string]$ewsmanagedapidllfilepath,[bool]$exchange2007);
param([string]$dcname, [string]$netlogonpath, [datetime]$dateinpast)
param ([string]$filepath)
param([string]$mailbox,[string]$foldername="orgcontacts");
param([string]$networkinterface = "local area connection" )
param([string]$networkinterface = "local area connection",
param([string] $scompname ="", [int] $ifromyear = "", [int] $ifrommonth ="", [string] $slog ="", [string] $soutpath ="")
param([string] $scompname ="", [int] $ifromyear = "", [string] $slogpath ="", [string] $soutpath ="")
param([string]$servicetag = $(get-wmiobject -class "win32_bios").serialnumber);
param([string] $sharepoint2013path = $(read-host -prompt "please enter the directory path to where your sharepoint 2013 installation files exist."))
param([string]$siteurl, [string]$listname, [string]$keycolumnname, [string]$valuecolumnname, [bool]$addwordvariants, [string]$output)
param([string]$siteurl, [string]$listname, [string]$keycolumnname, [string]$valuecolumnname, [bool]$valueflag, [string]$output)
param([string]$title = "title", [string]$message = "message", [int]$buttonset = 0, [int]$timeout = 0, [bool]$waitresponse = $false)
param ([string]$types = 'ps1',
param ([string]$url)
param([string]$zip)
param([string]$zipfilename)
param([switch]$all = $false)
param([switch]$dcb, [switch]$spaces )
param([switch]$dcs,
param([system.net.ipaddress] $ip)
param ($table);
param($targetvhdpath)
param ($title, $heading, $body, $filepath);
param ($trigger);
param([uint32] $val)
param($url = "")
param($userlogin,$userpassword)
param ($username,$computername)
param ($username,$computername,$key,$value)
param($vmhostdiffvhdpath, $vmhostparentvhdpath, $vhd)
param($vmhost, $targetvhdpath, $parentvhdpath)
$parentdir = split-path $invocation.mycommand.path
$parentfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,`
$parentfolder = split-path -path $profilepath
$parentid
$parentid = "0"
parentid = 1
parentid = -1
$parentid = $folderparentid.containernodeid
$parentou = [adsi]"$($currentou.parent)"
$parenttopology = $topologysettings.topologies.parenttopology
$parentvhdpath = $vmhostparentvhdpath + [system.io.path]::getfilename($vhd.sharepath)
$parms = $psise.currentpowershelltab.commandpane.text
$parsefile,
$parsefile = (resolve-path -path $filepath).providerpath
$parser.executebatch($query, $inputtype, $outputtype)
$parser = new-object -com msutil.logquery
$partialinfo="description","ipaddress","ipsubnet","defaultipgateway","macaddress","dnsserversearchorder","dhcpenabled","index"
$partitionfunctions = getdatabasepartitions $sql_server $db;
$partitionfunctions = $sql_server.databases[$db_name].partitionfunctions;
$partitionschemes = getdatabasepartitionschemes $sql_server $db;
$partitionschemes = $sql_server.databases[$db_name].partitionschemes;
$parts=@()
$parts = $axaosservername.split(':')
$parts = ($axaos.split(';')[0]).split('@')
$parts+=[uint64]::parse($guid.substring(0,4),"allowhexspecifier")
$parts+=[uint64]::parse($guid.substring(14,4),"allowhexspecifier")
$parts+=[uint64]::parse($guid.substring(19,4),"allowhexspecifier")
$parts+=[uint64]::parse($guid.substring(24,6),"allowhexspecifier")
$parts+=[uint64]::parse($guid.substring(30,6),"allowhexspecifier")
$parts+=[uint64]::parse($guid.substring(4,4),"allowhexspecifier")
$parts+=[uint64]::parse($guid.substring(9,4),"allowhexspecifier")
$pass = convertto-securestring -string $password -asplaintext -force
"passed ip: $passedip"
$passedmailboxes | foreach {
$passtag='password'
$pass = [text.encoding]::utf8.getbytes($passphrase)
-passthru
$password
$password = "",
$passwordage=((get-date) - $pwdlastset).days
$password = cmd.exe /c $env:windir\system32\inetsrv\appcmd.exe list apppool "password retrieval" /text:processmodel.password
$password = convertto-securestring "$gettingpassword" -asplaintext -force
`$password `= convertto-securestring -string `$password -asplaintext -force
`$password `= `$cred.credentialblob`;
password : $($cred.credentialblob)
$password = $credential.getnetworkcredential().password
$passwordd,
$passwordexpirydate = get-date $passwordexpiry
$passwordexpiry = $passwordstatus.replace("expires at: ","")
$password = get-content $filename | convertto-securestring
$password = .\get-randomstring.ps1 -length 8 -lowercase:$false -numbers:$true -uppercase:$true
$passwordhistory = $currentpasswordpolicyobject."msds-passwordhistorylength"
$password="lousypass123"
-passwordneverexpires $true `
$password=$null
$passwordo,
$password = $objcreds.getnetworkcredential().password
-password $password `
password = $password;
$passwordpolicyname = $currentpasswordpolicyobject.cn
$passwordpolicyname = $passwordpolicyobject.cn
$passwordpolicyobject = get-adfinegrainedpasswordpolicy -identity $passwordpolicydn -properties msds-psoappliesto, cn
$passwordpolicyprecedence = $currentpasswordpolicyobject."msds-passwordsettingsprecedence"
$password = read-host "enter default password for all accounts created" -assecurestring
$password = read-host ' password' -assecurestring
$password = read-host 'what is the test account password?'
$password = read-host 'what is the user password?'
$password = read-host '[wrong value] what is the test account password?'
$passwordreset = $false
$passwordreset = $true
$passwordstatus = $_.passwordstatus
$password=$(throw "the 'password' parameter is required!"),
$password = $user.password
'path'
"path" {
$path = ".",
$path = ""
$path2 = "c:\test2"
$path2 + " exists"
$path64 = "\\$computername\c$\program files (x86)"
$path = $clientregistrypath
$path = "c:\program files (x86)\microsoft\powershell psi cmdlets for project server 2010\projectpsicmdlets.dll"
$path = "c:\scripts\drive_info"
$path = "c:\test"
$path = "c:\windows\softwaredistribution"
$path = "d:*"
$path_dir = "d:\delay-wsus-auto-approvals";
$path + " exists"
$path=(get-location).path,
-path hklm:\system\currentcontrolset\control\timezoneinformation).bias/60, `
$path = join-path $dependencypath "appl"
$path = join-path $dependencypath "bin"
$path = join-path $path (get-itemproperty (get-item ($path)).pspath).current
$path = join-path $subpath $currentserverconfig
$path = 'msft_somfilter.domain="' + $gpdomain.domainname + '",id="' + $_.name + '"'
$pathoffile = "\c$\windows\system32\drivers\netbt.sys"
$path = $path + 'customsettings.config'
$path = $path.replace('"','')
$path = $path.replace('hklm\','')
$path = $path + $s.pathname[$counter]
$path = $path.trimend("\")
$path =$path.trimend("\")
$path = $path + "\" + $vm.vmname
$path = $remstitem.location
path = $resource.gettype().invokemember("path","getproperty",$null,$resource,$null)
path = $rpath
$path = $section.path
$path=split-path $myinvocation.invocationname
$path = split-path -parent $myinvocation.mycommand.definition
$path = split-path $saveas
$pathtoconfigxml = '"c:\install sharepoint\config.xml"'
pause
"paused at addaccounts"
$pausetime = 1
<p><b><font face="arial" size="1"color="
<p><b><hr size="4" color="
$pc = ""
$pc = $_
$pc1 = $computername + "$"
$pcip=$ping.protocoladdress;
$pcname = invoke-expression $pcstring
$pcservice = gwmi win32_service -computername $computername -filter "name='$service'"
$pcs = get-qadcomputer $computername | sort-object -property name
$pcstring = '$list2.selecteditems | foreach-object {$_.text}
$pcuser = gwmi win32_computersystem -computername $pc.name -ev pcsearcherror
$pcutheader = "time","user","pages","copies","printer","document name","client","paper size","language","height","width","duplex","grayscale","size"
$pcutloglocation = "c$\program files (x86)\papercut print logger\logs\csv\monthly"
$pcutlogs = get-childitem "\\$($printserver)\c$\program files\papercut print logger\logs\csv\monthly"
$pcutlogs = get-childitem "\\$($printserver)\$($pcutloglocation)"
$pcutreport = @()
$pcutreport += $thisreport |where-object {$_.time -ne "time"}
[pc_volumecontrol.volumecontrol]::setvolume(0)
[pc_volumecontrol.volumecontrol]::setvolume(65535)
[pc_volumecontrol.volumecontrol]::setvolume($volumelevel)
pcwin32.mixerclose(mixercontrol);
pcwin32.mixeropen(out mixercontrol, 0, 0, 0, 0);
" pdc emulator: " + $domain.pdcroleowner
pdcowner = $domain.pdcroleowner
<p>delay before auto approve of target group <b>$wsus_targetgroup_to_approved</b> is <b>$($delay.days) days</b></p>"
$pd = pendingreboot $comp
$pendingchanges = $w.getpendingchanges();
percentage: {3:p2}
$percentcomplete,
percentcomplete = 0
percentcomplete = ( 0 )
$percentcompleted = ($countmoverequest) * 100
$percentcomplete = [decimal](($pingtracker / $totalpings) * 100)
$percentcomplete = [math]::round(($loopcount++ / $databases.count * 100),1)
$percentcomplete = [math]::round(($loopcount++ / $gatheredmailboxes.count * 100),1)
$percentcomplete = [math]::round(($loopcount++ / $tardatabases.count * 100),1)
-percentcomplete (($progresscounter/$installitems.count) * 100)
$percentcomplete = $statcheck.percentcomplete
$percentcomplete = [system.math]::round($percentcomplete, 2)
$percentcritcal = 10;
percentdowntime, `
$percentfree = [math]::round(($freespace / $size) * 100, 2);
$percentmemory = $inusememory / $physicalmemory
$percentperuser = (get-moverequeststatistics -identity $user.identity | select percentcomplete).percentcomplete
percentuptime
$percentwarning = 15;
$percfreespace = "0"
$percfreespace=[math]::round(((($objdisk.freespace / 1073741824)/($objdisk.capacity / 1073741824)) * 100),0)
$perfcounter = new-object system.diagnostics.performancecounter("biztalk:messaging", "id process", $processname)
'performance logs and alerts',
performcleanup $wsusupstreamserver "--"
"performing net join using add-computer: id: $id corp: $corpfqdn"
" performing : new-item"
" performing : remove-itemproperty"
"performing:set-netipinterface -addressfamily ipv4 -interfacealias private internet -forwarding disabled"
"performing:set-netipinterface -addressfamily ipv6 -interfacealias private internet -forwarding disabled"
$permgrnti = $databasepermission.grantee;
$permgrnti = $objectpermission.grantee;
($_.permissionlevel -eq $permissionlevel)}
$permissionlevel = "none",
$permissiontype = $host.ui.promptforchoice($title, $message, $options, 0)
$permtype = $databasepermission.permissiontype;
$permtype = $objectpermission.permissiontype;
$pfag = $pfd.administrativegroup
$pfanms = $pfd.availablenewmailboxspace
$pfap = $pfd.activationpreference
$pfcrsl = $pfd.customreferralserverlist
$pfdall = get-exchangeserver |where-object{$_.serverrole -eq "none" -or $_.serverrole -like "*mailbox*"} | get-publicfolderdatabase -status | where-object{$_.publicfolderhierarchy -eq "public folders"}
$pfdbs = get-publicfolderdatabase -storagegroup $_.identity -status
{$pfdbs | %{$messagebody += "$shtmlcellstyle" + $_.name + "</td>$shtmlcellstyle" + $_.lastfullbackup + "</td></tr>"}}
{$pfdbs | %{$messagebody += "<tr>$shtmlcellstyle" + $_.name + "</td>$shtmlcellstyle" + $_.lastfullbackup + "</td></tr>"}}
$pfdbs = $pfd.databasesize
$pf_details = "partition filegroups: "+$item.filegroups+"<br>partition function: "+$item.partitionfunction;
$pf_details = "partition range type: "+$item.rangetype+"<br>partition range value: "+$item.rangevalues;
$pfdir = $pfd.deleteditemretention
$pflfb = $pfd.lastfullbackup
$pfmis = $pfd.maxitemsize
$pf_name = $item.name;
$pfname = $pfd.name
pf.name='$pf_name'
$pfpath = $identity.trimstart("\").trimend("\")
$pfpaths = $pfpath.split("\")
$pfppq = $pfd.prohibitpostquota
$pfqdn= $regkey.getvalue('physicalhostnamefullyqualified')
$pfrms = $pfd.replicationmessagesize
$pfsrv = $pfd.server
$pfucrsl = $pfd.usecustomreferralserverlist
$pgfunctionexplorer.control.invoke([eventhandler]{$pgfunctionexplorer.control.parent.activate($true)})
$pgfunctionexplorer.control = $pnlfunctionexplorer
$pgfunctionexplorer = $pgse.toolwindows.add('functionexplorer')
$pgfunctionexplorer.title = 'function explorer'
$pgfunctionexplorer.visible = $true
&$pgmpath /change /tn "$taskname" /sd "$startdate" /st "$starttime"
&$pgmpath /create /tn "$taskname" /xml "$templatepath" /ru "nt authority\system" /f
&$pgmpath /delete /tn "$taskname" /f
$pgmpath = "schtasks.exe"
$pg = $_.parentgroup
$pgse.add_currentdocumentwindowchanged($handler_currentdocumentwindowchanged)
$pgse.commands.add($functionexplorercommand)
$pgse.commands.add($gotodefinitioncommand)
$pgse.commands.item("editcommand.collapseoutlining").addshortcut([windows.forms.keys]::control -bor [windows.forms.keys]::subtract)
$pgse.commands.item("editcommand.expandoutlining").addshortcut([windows.forms.keys]::control -bor [windows.forms.keys]::add)
$pgse.commands.item('editcommand.expandoutlining').invoke()
$pgse.currentdocumentwindow.document.caretline = $f.linenumber
$pgse.currentdocumentwindow.document.caretline = $linenumber
$pgse = [quest.powergui.sdk.scripteditorfactory]::currentinstance
($pgse.toolbars | where-object { $_.title -eq 'text editor' }).items.add($gotodefinitioncommand)
"phone"
"phone|fax|callback|isdn|pager|telex" {
$phone = $newuser.officephone -replace "[^0-9]"
$phonenumberkeys = @()
"phone" = "phone:businessphone";
$phone = $userobject.telephonenumber
"photo" {
$phrase = $phrase.trim()
$phrasevariations = @()
$phrasevariations += [system.string]::join(" ", $words)
$physicaladdresskeys = @()
$physicaladdresstype = $contactpropertyname -replace $contactpropertyshortname,""
$physicaladdresstype = $physicaladdresstype -replace "address",""
$physicalmemory = (get-wmiobject win32_physicalmemory | measure-object capacity -sum).sum / 1mb
$pictureurl = $line.pictureurl
pid = $mypid
$pidtagdeferredsendtime = 16367
$pidtagdeferredsendtime,[microsoft.exchange.webservices.data.mapipropertytype]::systemtime)
$pidtagmessagesizeextended = 3592
$pidtagmessagesizeextended, [microsoft.exchange.webservices.data.mapipropertytype]::integer)
$pingable = dotnetping $dc
$pingaverage = 0
$pingaverage = $pingaverage/$pingsuccess
$pingaverage = $pingaverage+$tempitem
"ping failed"
$pingfailure++
$pingfailure = 0
$ping = gwmi win32_pingstatus -filter "address='$env'"
$pingmaxrtt = 0
$pingmaxrtt = $tempitem
$pingminrtt = 0
$pingminrtt = $tempitem
ping -n 1 $computer | out-null
$ping = new-object system.net.networkinformation.ping
$pingpcname = $pc.name
$pingstatus = get-wmiobject -query "select * from win32_pingstatus where address='$servername'"
$pingstatus = $ping.send("$a.$b.$c.$d",$timeout)
$pingsuccess++
$pingsuccess = 0
pingtargetaddresses | format-table @{expression = {$_.localipaddress};label = "local ip address";width = 41},
$pingtracker++
$pingtracker = 0
$pipelineinput = $false
$pipelineinput = (-not $psboundparameters.containskey("computername")) -and (-not $computername)
$pipelineinput = ( -not $psboundparameters.containskey("path") ) -and ( -not $path )
$pivotfield.showdetail = $false
$pivotfields.orientation=$xlcolumnfield
$pivotfields.orientation=$xldatafield
$pivotfields.orientation=$xlrowfield
$pivotfields = $sheet1.pivottables("pivottable1").pivotfields($columnfields)
$pivotfields = $sheet1.pivottables("pivottable1").pivotfields($_.name)
$pivotfields = $sheet1.pivottables("pivottable1").pivotfields($rowfields)
$pivotfields = $sheet1.pivottables("pivottable1").pivotfields($values)
$pivottable.createpivottable("sheet1!r1c1") | out-null
$pivottable = $workbook.pivotcaches().create($xldatabase,"sheet2!r1c1:r$($rowcount)c$($columncount)",$xlpivottableversion12)
$pkgclass = [wmiclass] "root\sms\site_$($sitecode):sms_objectcontaineritem"
$pkgclass = [wmiclass] "root\sms\site_$($sitecode):sms_package"
$pkgpath = $newpkg.put()
"place the computer account within the group"
plannedhardwareinstallation, unplannedhardwareinstallation, plannedoperatingsystemreconfiguration,
$p = new-object system.security.principal.securityidentifier $grp.sid
$pnlfunctionexplorer.autosizemode = 'growandshrink'
$pnlfunctionexplorer.autosize = $true
$pnlfunctionexplorer.controls.add($trvfunctions)
$pnlfunctionexplorer.controls.add($tsttop)
$pnlfunctionexplorer.dock = 'fill'
$pnlfunctionexplorer.location = '0, 0'
$pnlfunctionexplorer.name = "pnlfunctionexplorer"
$pnlfunctionexplorer = new-object system.windows.forms.panel
$pnlfunctionexplorer.size = '709, 477'
$pnlfunctionexplorer.tabindex = 0
$policies = invoke-expression -command $command
policy_audit_log_admin = 0x00000200l,
$policy = $cachedpolicies[$policytype].$policyname
policy_create_account = 0x00000010l,
policy_create_privilege = 0x00000040l,
policy_create_secret = 0x00000020l,
$policyfeaturenames = @()
$policyfeaturenames += $_.name
$policyfeatures = @{}
$policyfeatures.add($wellknownpolicytype,$policyfeaturenames)
policy_get_private_information = 0x00000004l,
$policyid = $policy.identity
$policylastapplied = get-date -format g
policy_lookup_names = 0x00000800l,
$policyname = $csusersite
$policyname = "global"
$policyname = "service:registrar:" + $csuserregistrarpool
$policyname = "tag:" + $csuser.$policytypename.friendlyname
$policy = new-netqospolicy @_
policy_notification = 0x00001000l
"policy reporting process beginning at :" | out-file $filename
policy_server_admin = 0x00000400l,
policy_set_audit_requirements = 0x00000100l,
policy_set_default_quota_limits = 0x00000080l,
$policytemplate | get-member -membertype property | %{
$policytemplate = invoke-expression -command $command
policy_trust_admin = 0x00000008l,
$policytypename = $policytype
$policytypename = "$($policytype)policy"
policy_view_audit_information = 0x00000002l,
policy_view_local_information = 0x00000001l,
port = "-"
$port="1433")
$portallist = get-wmiobject -computername $servername -namespace root\wmi -query "select portalinformation from msiscsi_portalinfoclass"
$port = $endpointobject.protocol.tcp.listenerport
port = $entry.port
port = $event307xml.event.userdata.documentprinted.param5
port = $item.port
$portlist = @()
$portlist += $port
portlist = $portlist
$portnumber = 80
$portnumber = 8530
$portnumber = (get-itemproperty (get-item ($path)).pspath).port
$port = $parts[1] }
$port = $ports[($i-1)]
port = $printjob.properties[5].value
$ports = @(135,139,445,67,68,53,143,993,389,636,110,995,25,119,563,21,20,80,443,531,2053,543,464,88,544)
ports = $openports
$pos = 0
. $poshfile.fullname
"= !$($poshfile.name) =" |out-file ".\$($wikifilename).wiki" -append -encoding ascii
position=0
position=0,
position=0)]
position = 0,
position = 0)]
position=1,
position=1)]
position = 1)]
position=2,
position=2)]
position=3,
$possiblecertificate = $possiblecertificates[0]
$possiblecertificates = @(get-childitem 'cert:\localmachine\my' | where-object { $_.friendlyname -eq $script:certificatefriendlyname} )
-postalcode $_.postalcode -country $_.co -userprincipalname $_.upn `
powercfg -h off
powercfg -h on
$practivity = $messages.progressrecordactivity -f $findresults.totalcount
$prdeferredsendtime = new-object microsoft.exchange.webservices.data.extendedpropertydefinition(`
"precreate the computer account"
prefix = ""
$prefix="1.2.840.113556.1.8000.2554"
$prefix = "acl_sid_history"
$prefixarray=@()
$prefixarray=$prefixarray + ($bitvariable[$bitcount])
$prefixendindex = $identity.subject.indexof("] ") + 2
prefix = left(ip, 12)
$prefixlength,
$prefixlength++
$prefixlength = 0
$prefixlength = 16
$prefixlength = 24
-prefixlength $prefixlength `
prefixlength = $prefixlength
$prefixlength = $prefixlength - 1;
$prefixlengthreturn = $prefixlength
$prefoundupdatestodownload = $objresults.updates.count
$preparedquorumdiskenabled = $false
preparedquorumdiskenabled = $preparedquorumdiskenabled
$prereqinstall = $binarypath + "prerequisiteinstaller.exe /unattended"
$prereqisitereport = get-oscexoprerequisitereport
$prereqisitereport | sort-object prerequisite | format-table -autosize
$prerequisites = @{}
$prerequisites.add("psexecutionpolicy","please change windows powershell execution policy from restricted to remotedsigned.")
$prerequisites.add("psversion","please install windows powershell 2.0.")
$prerequisites.add("userprivilege","please run this script with administrative privileges.")
$prerequisites.add("winrmauthsetting","please configure winrm to support basic authentication.")
$prerequisites.add("winrmservice","please ensure that winrm service is running.")
$prerequisites.add("winrmversion","please install winrm 2.0.")
$press = $host.ui.rawui.readkey("noecho,includekeydown")
<p>results are filtered and sorted by date</p>`
$prevvalue = $propobj.$propname
$pr_folder_pathname = 26293
$pr_folder_pathname, [microsoft.exchange.webservices.data.mapipropertytype]::string)
$prgclass = [wmiclass] "root\sms\site_$($sitecode):sms_program"
$prgpath = $newprg.put()
"primary"
"primary phone" = "phone:primaryphone";
$primary, $secondaries = $serverobjects
$primarysmtpaddress = $_.primarysmtpaddress -replace("'","`'`'")
$primdns = $newsearchorder[0]
$primdns=$nic.dnsserversearchorder[0]
$primdns = $null
$primwins=$nic.winsprimaryserver
</principal>
$principalcontext = new-object system.directoryservices.accountmanagement.principalcontext($contexttype, $identity)
<principal id="author">
$principal = new-object system.security.principal.windowsprincipal($currentuser)
</principals>
<principals>
$print = "backup to usb drive [{0}] (volume = {2}) completed; {1} files copied." -f $drive, $script:files, $vol
printer = $event307xml.event.userdata.documentprinted.param6
printer = $printjob.properties[4].value
$printers = @()
$printers += $thisprinter
$printjobs = get-winevent -computername $computername -logname $logname -credential $credentials |where-object {$_.id -eq 307}
$printjobs = $printqueue.getprintjobinfocollection()
$printlog = convertto-csv -inputobject $printlog -notypeinformation
$printlog = new-object -typename psobject -property @{
$printlog |out-file -filepath "p:\printlogs\$($filename)"
$printlog = $printlog |select-object -property size, time, user, job, client, port, printer, pages, document
$printlogs = @()
$printlog |select-object -skip 1 |out-file -filepath "p:\printlogs\$($filename)" -append
$printlogs += $printlog
print_parameter $details_general
print_parameter $details_specific
$printqueue = $printserver.getprintqueue($name)
$printqueues = $printserver.getprintqueues()
$printserver = new-object system.printing.printserver("\\$($computername)")
$printservers = @("ps1.company.com","ps2.company.com")
<priority>7</priority>
-priority $cluster_tc_priority
-priority $livemigration_tc_priority
$priority = "normal"
-priority $smb_tc_priority
-priorityvalue8021action $cluster_dcbqospolicy_priority
-priorityvalue8021action $cluster_qospolicy_priority `
-priorityvalue8021action $livemigration_dcbqospolicy_priority
-priorityvalue8021action $livemigration_qospolicy_priority `
-priorityvalue8021action $smb_dcbqospolicy_priority
-priorityvalue8021action $smb_qospolicy_priority `
$private:buffer = @()
private class criticalcredentialhandle : microsoft.win32.safehandles.criticalhandlezeroorminusoneisinvalid
private credential xlatenativecred(intptr pcred)
$privatedata = [intptr]::zero
private intptr _hwnd;
private int timeout = 60000;
private static bool checkerror(string testname, cred_errors rtn)
private static bool getmixer(int i, int type, int ctrltype, out volumestructs.mixer mixercontrol, out int currvolume)
private static bool setmixer(int i, volumestructs.mixer mixercontrol, int volumelevel)
private static byte[] _docompression( byte[] input, compressionmode mode )
private static extern bool creddeletew([in] string target, [in] cred_type type, [in] int reservedflag);
private static extern bool credenumeratew([in] string filter, [in] int flags, out int count, out intptr credentialptr);
private static extern bool credreadw([in] string target, [in] cred_type type, [in] int reservedflag, out intptr credentialptr);
private static extern bool credwritew([in] ref credential usercredential, [in] uint32 flags);
private static extern bool showwindowasync(intptr hwnd, int ncmdshow);
private static extern void credfree([in] intptr cred);
private static int addcred()
private struct nativecredential
$private:version = ""
$prjds = $projdataset.project
$prms = $proc_params | convertto-html -head $colstyl -property name, datatype, defaultvalue, isoutputparameter;
$procall = get-wmiobject -computername $allsrv win32_processor -namespace "root/cimv2"
$proc = [diagnostics.process]::start($psi)
"proceed with domain join: $vardomainjoin, $corpfqdn"
process
process {
process { $_ |
process{
process {$_ + 1 }
processadmin = [bool]$sqlobject.processadmin;
process-browserfilehandling($myweb)
$process = (get-process -name lsass)
$process = get-wmiobject -computername $computername -query "select * from win32_process where processid='$endproc'"
$processid = $perfcounter.nextvalue()
processimagefilename = $item.processimagefilename
"processing the checks ..."
"processing the following document libraries:"
"processing web:" + $web.title
$processname = $hostinstanceitem.hostname
processname = $myprocessname
processorcostperghz = 30
processpath = $myprocesspath
"process`r`n"
process-scriptblockwrapper {
process-spweb($web)
process { $targetdata += $_ }
$process.terminate()
$procname = $proc.name
$proc = new-object system.diagnostics.process
$procnoc = $proc.numberofcores
$procnolp = $proc.numberoflogicalprocessors
$proc_params = getprocparametertable $item;
$proc_params = $proc.parameters;
$procs = getdatabasestoredprocedures $sql_server $db;
$procs = gwmi win32_process -computername $computername -ev systeminfoerror | sort-object -property name
$procs = gwmi win32_process -computername $computername | sort-object -property name
$procs = $sql_server.databases[$db_name].storedprocedures | where-object {$_.issystemobject -eq $false};
$proc.startinfo.arguments = "/c start /min control.exe timedate.cpl,,/z $timezone"
$proc.startinfo.arguments = "/s `"$timezone`""
$proc.startinfo.filename = $env:comspec
$proc.startinfo.filename = "tzutil.exe"
$proc.startinfo.windowstyle = "hidden"
$procver = $proc.caption
$proc.waitforexit();
$prodserver = get-productionserver -dpmservername $dpmservername `
product = $_.displayname
$productedition= $key.getvalue("productedition")
$product = get-wmiobject -class win32_product -computername . | where-object -filterscript { $_.name -eq $displayname }
"product: "+$sql_server.information.product+
$productver = [microsoft.win32.registrykey]::openremotebasekey('localmachine',$rcomp.name).opensubkey('software\mcafee\desktopprotection').getvalue('szproductver')
$productversion = $key.getvalue("productversion")
"profession" = "profession";
$profile.commit()
$profilemanager = new-object microsoft.office.server.userprofiles.userprofilemanager($context)
$profilemanager = new-object microsoft.office.server.userprofiles.userprofilemanager($servicecontext)
$profilemgr = new-object microsoft.office.server.userprofiles.userprofilemanager($spsvccontext)
$profilepath = $profile
$profilepath = $profile.allusersallhosts
$profilepath = $profile.alluserscurrenthost
$profilepath = $profile.currentuserallhosts
$profilepath = $profile.currentusercurrenthost
$profiles = $profilemanager.getenumerator()
$profile["sps-emailoptin"].value = $emailoptinvalue
$programarguments = join-path $pwd $scriptname
$programid = gwmi -namespace "root\sms\site_$sitecode" -query `
$progress = @{
_progress (10) "searching accounts with audit bypass enabled"
_progress (20) "collecting distribution group information"
$progress2.databindings.defaultdatasourceupdatemode = 0
$progress2.location = $system_drawing_point
$progress2.name = "p1"
$progress2 = new-object system.windows.forms.progressbar
$progress2.size = $system_drawing_size
$progress2.step = 1
$progress2.tabindex = 0
$progress2.text = "loading..."
$progress2.value = 20
$progress2.value += $progress2.step
$progress2.visible = $false
_progress (40) "collecting member information for distribution group"
_progress (70) "generating report for $mailbox"
_progress (70+((($i+1)*15)/$gcount)) "adding members list for distribution group $($i+1) of $($gcount) to the report"
_progress (80) "compiling report"
_progress (85+((($i+1)*14)/$dygcount)) "adding members list for dynamic distribution group $($i+1) of $($dygcount) to the report"
_progress (98) "completing"
$progresscounter++
$progresscounter = 0
_progress (($i*95)/($allmailboxes).count) "generating report for $allmailbox"
$progressrecord.activity = $messages.cnaprogressrecordactivity
$progressrecord.activity = $messages.cncprogressrecordactivity
$progressrecord.activity = $messages.gpfprogressrecordactivity
$progressrecord.activity = $practivity
$progressrecord = new-object system.management.automation.progressrecord(1,"{0}","{0}")
$progressrecord.percentcomplete = $counter / $contacts.count * 100
$progressrecord.percentcomplete = $counter / $findresults.totalcount * 100
$progressrecord.percentcomplete = $counter / $targetcontacts.count * 100
$progressrecord.statusdescription = $messages.cnaprogressrecordstatusdescription
$progressrecord.statusdescription = $prstatdesc
$progressrecord.statusdescription = $statdesc
_progress $stat "collecting distribution group information"
_progress $stat "getting distribution and dynamic distribution group member counts (please be patient)"
_progress $stat "getting distribution group list"
_progress $stat "getting dynamic distribution group list"
_progress ($stat+((($i+1)*20)/$dygcount)) "writing summary for dynamic distribution group $($i+1) of $($dygcount)"
_progress ($stat+((($i+1)*20)/$gcount)) "writing summary for distribution group $($i+1) of $($gcount)"
_progress $stat "writing summary for $($gcount) distribution groups and $($dygcount) dynamic distribution groups"
_progress (($u*100)/100) "collecting mailbox information"
_progress (($u*95)/$mcount) "processing $mailbox, $($u) of $($mcount) mailboxes."
$_progstatus = [math]::round(($i/$count)*100,2)
$projdataset = new-object microsoft.powershell.commands.newwebserviceproxy.autogeneratedtypes.webserviceproxy1_vti_bin_psi_project_asmx_wsdl.projectdataset
$projdataset = $projsvcproxy.readprojectlist()
$projectserverurl
$projectuid = $p.proj_uid;
$projid = [system.guid]$row[0]
$projpath = (join-path $axbuilddir 'compilevsprojects.proj')
$projpath = (join-path $axbuilddir 'importvsprojects.proj')
$projsvcproxy.checkoutproject($p.proj_uid, [system.guid]::newguid(), "checkout for autopublish via powershell");
$projsvcproxy = new-webserviceproxy -uri $projsvcurl -usedefaultcredential
$projsvcproxy.queuecheckinproject([system.guid]::newguid(),$p.proj_uid,$true,[system.guid]::newguid(),"checkin post autopublish");
$projsvcproxy.queuepublish([system.guid]::newguid(),$p.proj_uid, $true,"");
$projsvcurl = $pwaurl + "/_vti_bin/psi/project.asmx?wsdl"
-prompt 'create self-signed certificate?' `
$prompt = "keywords with the corresponding options listed under 'meaning'"
prompt_now = 0x2,
-prompt 'the certificate already exists. validate the existing certificate?' `
-prompt "you have previously supplied credentials for adfs service use, use the same ones?" `
$properties = $corexml.xmldata.coreproperties
$properties = $groupmember.gettype().getproperties()
$propertiestoadd = (
$property,
property = "application"
$propertyelement.innertext = $($value.tag)
$propertyelement = $itemelement.appendchild($myxml.createelement("propertyname"))
$propertyname = $property.name
$propertyname = $propertypair[0]
$propertypair = $propertypair.split(",")
$propertypairs
property = "port"
property = "service"
$propertyset.add($expropdefpathname)
$propertyset.add($expropfoldersize)
$propertyset = new-object microsoft.exchange.webservices.data.propertyset(`
" : -propertytype $regtype"
$propertyvalue = $propertypair[1]
$propertyvalues = $propertypair[1..(($propertypair.count)-1)]
$propname = $arr[$i]
$propname = "defaultpage"
$propname = $object1 | get-member -membertype properties | %{$_.name}
$propname = $property.name
$propobj.$propname = $propvalue
$propobj = $propobj.$propname
$propobj = $targetpublishingweb
$prop=$person.getdirectoryentry()
$prop.put("cn",$cn)
$prop.setinfo()
$props = @{host = $child.location; success = $success; error = $err; result = $result;}
$propvalue = $property.value
$propvalue = ($propvalue -eq $true)
$propvalue = $targetfile
protected override webrequest getwebrequest(system.uri weburl)
protocol = "-"
protocol = $entry.protocol
protocol = $item.protocol
protocol = $myprotocol
$providerinfo = $null
providername = "microsoft rsa schannel cryptographic provider"
$provider = new-object microsoft.visualbasic.vbcodeprovider
providertype = 12
$providerwebpart = $webpartmanager.webparts | where {$_.id -eq $currentwpconnection.providerid}
$provisionjobs = get-sptimerjob | ? {$_.displayname -like "provisioning web application*"}
$prp = new-object system.security.principal.windowsprincipal($wid)
$prstatdesc = $messages.cncprogressrecordstatusdescription
$prstatdesc = $messages.gpfprogressrecordstatusdescription
$prstatdesc = $prstatdesc -f $($contact.displayname)
$prstatdesc = $prstatdesc -f $currentfoldername,$currentpublicfolder.displayname,$currentpublicfolder.childfoldercount
$psboundparameters.backgroundcolor = 'white'
$psboundparameters.foregroundcolor = 'black'
$psboundparameters.getenumerator() | ? { 'dcb','spaces' -contains $_.key } | % { $params[$_.key]= $_.value}
$psboundparameters.getenumerator() | % { $progress[$_.key]= $_.value }
$psboundparameters.getenumerator() | % { $script:progress[$_.key]= $_.value }
$pscmdlet.myinvocation.boundparameters.add("folderid",$subfolder.id) | out-null
$pscmdlet.myinvocation.boundparameters.remove("folderid") | out-null
$pscmdlet.myinvocation.boundparameters.remove("foldername") | out-null
$pscmdlet.throwterminatingerror($_)
$pscmdlet.throwterminatingerror($customerror)
$pscmdlet.throwterminatingerror($error[0])
$pscmdlet.writeerror($_)
$pscmdlet.writeerror($customerror)
$pscmdlet.writeerror($error[0])
$pscmdlet.writeobject($findresult)
$pscmdlet.writeobject($findresult.id)
$pscmdlet.writeobject($folderobject)
$pscmdlet.writeobject($infomsg)
$pscmdlet.writeobject($legacydnobject)
$pscmdlet.writeobject($output)
$pscmdlet.writeobject($result)
$pscmdlet.writeprogress($progressrecord)
$pscmdlet.writeverbose($verbosemsg)
$pscmdlet.writewarning($warningmsg)
$pscredman = $null
$pscredman = [psutils.credman]
<p>server ip: <%= lip %></p>
$psexec = "c:\acsa\psexec.exe"
psexec \\$vmhost -s -c \\shareserver\share\wuinstall.exe /install /accepteula > "c:\users\username\desktop\scripts\logs\$vmhost.log"
$psfile.save()
ps> get-help about_execution_policies
$psi.arguments = $argumentstring
psi-checkoutproject $url $projectuid $sessionuid "ps check out"
$psi.filename = $program
ps> import-module importpsmodule
ps> import-psmodule remotestsadm
$psi = new-object 'diagnostics.processstartinfo'
psi-queuepublish $url $jobuid $projectuid $true
$psi.redirectstandarderror = $false
$psi.redirectstandardoutput = $false
$psise.currentfile.editor.inserttext($commentblock)
$psise.currentfile.editor.inserttext($selectedtext.replace("`t"," "))
$psise.currentfile.editor.inserttext($templatefunction)
$psise.currentfile.gettype().getfield("encoding","nonpublic,instance").setvalue($psise.currentfile, [text.encoding]::ascii)
$psise.currentfile.save()
$psise.currentpowershelltab.addonsmenu.submenus.add("insert comment block",{new-commentblock},"ctrl+alt+c") | out-null
$psise.currentpowershelltab.addonsmenu.submenus.add("new blank script",{new-script},"ctrl+alt+s") | out-null
$psise.currentpowershelltab.addonsmenu.submenus.add("new function",{new-function},"ctrl+alt+s") | out-null
$psise.currentpowershelltab.addonsmenu.submenus.add("replace tabs with space",{replace-tabswithspace},"ctrl+alt+r") | out-null
$psise.currentpowershelltab.files.add($file.fullname)
ps.name as partition_scheme_name
$ps_name = $item.name;
ps.name='$ps_name'
$psobject | add-member -membertype noteproperty -name 'author' -value ([regex]::split($_.xml,'<author>|</author>'))[1]
$psobject | add-member -membertype noteproperty -name 'description' -value ([regex]::split($_.xml,'<description>|</description>'))[1]
$psobject | add-member -membertype noteproperty -name 'enabled' -value $_.enabled
$psobject | add-member -membertype noteproperty -name 'lastruntime' -value $_.lastruntime
$psobject | add-member -membertype noteproperty -name 'lasttaskresult' -value $_.lasttaskresult
$psobject | add-member -membertype noteproperty -name 'name' -value $_.name
$psobject | add-member -membertype noteproperty -name 'nextruntime' -value $_.nextruntime
$psobject | add-member -membertype noteproperty -name 'numberofmissedruns' -value $_.numberofmissedruns
$psobject | add-member -membertype noteproperty -name 'path' -value $_.path
$psobject | add-member -membertype noteproperty -name 'state' -value $_.state
$psobject | add-member -membertype noteproperty -name 'userid' -value ([regex]::split($_.xml,'<userid>|</userid>'))[1]
$psobject = new-object psobject
[psobject[]]$passedmailboxes,
$_.psobject.properties |
[psobject] $tfs = [microsoft.teamfoundation.client.teamfoundationserverfactory]::getserver($servername)
$psosettingshtml += "<b>account lockout threshold</b>: <font color='red'>$accountlockoutthreshold invalid logon attempts</font>"
$psosettingshtml += "<b>enforce password history</b>: <font color='red'>$passwordhistory passwords remembered</font>"
$psosettingshtml += "<b>lockout duration</b>: <font color='red'>$lockoutduration minutes</font>"
$psosettingshtml += "<b>lockout observation window</b>: <font color='red'>$lockoutobservationwindow minutes</font>"
$psosettingshtml += "<b>maximum password age</b>: <font color='red'>$maximumpasswordage days</font>"
$psosettingshtml += "<b>minimum password age</b>: <font color='red'>$minimumpasswordage days</font>"
$psosettingshtml += "<b>minimum password length</b>: <font color='red'>$minimumpasswordlength characters</font>"
$psosettingshtml += "<b>password policy precedence</b>: <font color='red'>$passwordpolicyprecedence</font>"
$psosettingshtml += "<br>"
$psosettingshtml += "<b>reversable encryption enabled</b>: <font color='red'>$reversableencryptionenabled</font>"
$psosettingshtml += "</font>"
$psosettingshtml += "<font face='verdana'>"
ps> set-executionpolicy remotesigned
$pssnapin = get-pssnapin | where {$_.name -like "*sharepoint*"}
<p style='font: .8em ""lucida grande"", tahoma, arial, helvetica, sans-serif;'>this report was generated because the drive(s) listed below have less than $warningthresholdspace % free space. drives above this threshold will not be listed.</p>
<p style='font: .8em ""lucida grande"", tahoma, arial, helvetica, sans-serif;'>this report was generated because the jobs listed below have problems that need your atention. sql jobs that are functioning properly will not be listed.
[psutils.credman+credential] $cred = new-object psutils.credman+credential
[psutils.credman+credential[]] $creds = [array]::createinstance([psutils.credman+credential], 0)
[psutils.credman]::main()
$psversion = (get-itemproperty hklm:\software\microsoft\powershell\1\powershellengine).powershellversion
ptemp = marshal.readintptr(handle, inx * intptr.size);
$ptrobjdn = "dc=" + $ptr + ",cn=microsoftdns,dc=dnszones,dc=mydomain,dc=net"
$ptr = $oct3 + "." + $oct2 + "." + $oct1 + ".in-addr.arpa"
public bool isvendor;
public byte[] dhcprequestparams(string adaptername, uint optionid)
public class credman
public class criticalcredentialhandle `: microsoft.win32.safehandles.criticalhandlezeroorminusoneisinvalid
public class dhcpclient : idisposable
public class display
public class installedapplication {
public class mywebclient : webclient
public class volumecontrol
public class win32window : system.windows.forms.iwin32window
public const int anysize_array = 1;
public const int maxpnamelen = 32;
public const int mixercontrol_controltype_fader = (mixercontrol_ct_class_fader | mixercontrol_ct_units_unsigned);
public const int mixercontrol_controltype_volume = (mixercontrol_controltype_fader + 1);
public const int mixercontrol_ct_class_fader = 0x50000000;
public const int mixercontrol_ct_units_unsigned = 0x30000;
public const int mixer_getcontroldetailsf_value = 0x0;
public const int mixer_getlinecontrolsf_onebytype = 0x2;
public const int mixer_getlineinfof_componenttype = 0x3;
public const int mixerline_componenttype_dst_first = 0x0;
public const int mixerline_componenttype_dst_speakers = (mixerline_componenttype_dst_first + 4);
public const int mixerline_componenttype_src_first = 0x1000;
public const int mixerline_componenttype_src_line = (mixerline_componenttype_src_first + 2);
public const int mixerline_componenttype_src_microphone = (mixerline_componenttype_src_first + 3);
public const int mixer_long_name_chars = 64;
public const int mixer_setcontroldetailsf_value = 0x0;
public const int mixer_short_name_chars = 16;
public const int mmsyserr_noerror = 0;
public const int se_privilege_enabled = 0x00000002;
public const int token_adjust_privileges = 0x00000020;
public const int token_query = 0x00000008;
public const string se_time_zone_nametext = "setimezoneprivilege";
public const uint32 standard_rights_read = 0x00020000;
public const uint32 standard_rights_required = 0x000f0000;
public const uint32 token_adjust_default = 0x0080;
public const uint32 token_adjust_groups = 0x0040;
public const uint32 token_adjust_sessionid = 0x0100;
public const uint32 token_all_access = (standard_rights_required | token_assign_primary |
public const uint32 token_assign_primary = 0x0001;
public const uint32 token_duplicate = 0x0002;
public const uint32 token_impersonate = 0x0004;
public const uint32 token_query_source = 0x0010;
public const uint32 token_read = (standard_rights_read | token_query);
public const uint error_more_data = 124;
public credential getcredential`(`)
public credential getcredential()
public credential[] getcredentials(int count)
public cred_flags flags;
public cred_persist persist;
public cred_type type`;
public cred_type type;
public criticalcredentialhandle`(intptr preexistinghandle`)
public criticalcredentialhandle(intptr preexistinghandle)
public datetime lastwritten;
public dhcpclient()
public double estimatedsizemb;
public enum cred_errors : uint
public enum cred_flags : uint
public enum cred_persist : uint
public enum cred_type `: uint
public enum cred_type : uint
public enum dhcprequestflags : uint
public enum lsa_accesspolicy : long
public extern static bool duplicatetoken(intptr existingtokenhandle, int
public int attr;
public int cbdetails;
public int cbmxctrl;
public int cbstruct;
public int cchannels;
public int cconnections;
public int ccontrols;
public int cdestinations;
public int cmultipleitems;
public int count;
public int dwcomponenttype;
public int dwcontrol;
public int dwcontrolid;
public int dwcontroltype;
public int dwdestination;
public int dwdeviceid;
public int dwlineid;
public int dwsource;
public int dwtype;
public int dwuser;
public int dwvalue;
public int fdwcontrol;
public int fdwline;
public int fdwsupport;
public int item;
public int length;
public int lmaximum;
public int lminimum;
public intptr attributes`;
public intptr attributes;
public intptr buffer;
public intptr comment`;
public intptr comment;
public intptr credentialblob`;
public intptr credentialblob;
public intptr data;
public intptr handle {
public intptr padetails;
public intptr pamxctrl;
public intptr params;
public intptr rootdirectory;
public intptr securitydescriptor;
public intptr securityqualityofservice;
public intptr targetalias`;
public intptr targetalias;
public intptr targetname`;
public intptr targetname;
public intptr username`;
public intptr username;
public int timeout
public int vdriverversion;
public int versionmajor;
public int versionminor;
public int wmid;
public int wpid;
$publickeyservicescn= "cn=public key services"
public long luid;
public lsa_unicode_string objectname;
public luid_and_attributes [] privileges;
public luid luid;
public mywebclient(int timeout)
public static bool hide(intptr hwnd)
public static byte[] compress( byte[] input )
public static byte[] decompress( byte[] input )
public static byte[] normalizenewlines( byte[] input, bool keeplinefeedonly )
public static class gziputil
public static class pcwin32
public static class volumeconstants
public static class volumestructs
public static encoding getencodingforbytes( byte[] data, out int bomsize )
public static extern bool adjusttokenprivileges(intptr htok, bool disall,
public static extern bool credfree`(`[in`] intptr cred`)`;
public static extern bool credread`(string target, cred_type type, int reservedflag, out intptr credentialptr`)`;
public static extern bool credwrite([in] ref credential usercredential, [in] uint32 flags);
public static extern bool lockworkstation();
public static extern bool lookupprivilegevalue(string host, string name, ref long pluid);
public static extern bool openprocesstoken(intptr processhandle,
public static extern bool setthreadtoken(
public static extern bool wtssendmessage(
public static extern int dhcpcapicleanup();
public static extern int dhcpcapiinitialize(out uint version);
public static extern int dhcprequestparams(
public static extern int dhcpundorequestparams(
public static extern int mixerclose (int hmx);
public static extern int mixergetcontroldetailsa(int hmxobj, ref volumestructs.mixerdetails pmxcd, int fdwdetails);
public static extern int mixergetdevcapsa(int umxid, volumestructs.mixercaps pmxcaps, int cbmxcaps);
public static extern int mixergetid(int hmxobj, int pumxid, int fdwid);
public static extern int mixergetlinecontrolsa(int hmxobj, ref volumestructs.linecontrols pmxlc, int fdwcontrols);
public static extern int mixergetlineinfoa(int hmxobj, ref volumestructs.mixerline pmxl, int fdwinfo);
public static extern int mixergetnumdevs();
public static extern int mixermessage(int hmx, int umsg, int dwparam1, int dwparam2);
public static extern int mixeropen(out int phmx, int umxid, int dwcallback, int dwinstance, int fdwopen);
public static extern int mixersetcontroldetails(int hmxobj, ref volumestructs.mixerdetails pmxcd, int fdwdetails);
public static extern intptr getcurrentprocess();
public static extern uint lsaclose(
public static extern uint lsafreememory(
public static extern uint lsantstatustowinerror(
public static extern uint lsaopenpolicy(
public static extern uint lsaretrieveprivatedata(
public static extern uint lsastoreprivatedata(
public static extern uint wtsgetactiveconsolesessionid();
public static extern void setusertile(string username, int whatever, string picpath);
public static ienumerable<networkinterface> getdhcpinterfaces()
public static int creddelete(string target, cred_type type)
public static int credenum(string filter, out credential[] credentials)
public static int credread(string target, cred_type type, out credential credential)
public static int credwrite(credential usercredential)
public static int getvolume()
public static void changeuserpicture(string username, string picpath) {
public static void main()
public static void setvolume(int volumelevel)
public static win32window currentwindow
public string comment`;
public string comment;
public string credentialblob`;
public string credentialblob;
public string displayname;
public string displayversion;
public string installdate;
public string modifypath;
public string publisher;
public string targetalias`;
public string targetalias;
public string targetname`;
public string targetname;
public string uninstallstring;
public string username`;
public string username;
public struct credential
public struct dhcpcapi_params
public struct dhcpcapi_params_array
public struct linecontrols
public struct lsa_object_attributes
public struct lsa_unicode_string
public struct luid
public struct luid_and_attributes {
public struct mixer
public struct mixercaps
public struct mixerdetails
public struct mixerline
public struct nativecredential
public struct token_privileges {
public struct tokpriv1luid
public struct unsignedmixerdetails
public system.runtime.interopservices.comtypes.filetime lastwritten`;
public system.runtime.interopservices.comtypes.filetime lastwritten;
public uint16 length;
public uint16 maximumlength;
public uint32 attributecount`;
public uint32 attributecount;
public uint32 attributes;
public uint32 credentialblobsize`;
public uint32 credentialblobsize;
public uint32 flags`;
public uint32 flags;
public uint32 highpart;
public uint32 lowpart;
public uint32 nbytesdata;
public uint32 nparams;
public uint32 optionid;
public uint32 persist`;
public uint32 persist;
public uint32 privilegecount;
public uint32 type;
public uint attributes;
public void dispose()
public win32window(intptr handle)
"publishing project guid = " + $projectuid
$pubpage.checkin($comment)
$pubpage.checkout()
$pubpage.listitem.file.approve($comment)
$pubpage.listitem.file.publish($comment)
$pubpage = [microsoft.sharepoint.publishing.publishingpage]::getpublishingpage($item)
$pubweb = [microsoft.sharepoint.publishing.publishingweb]::getpublishingweb($web)
put-buildnumber $model.fullname
$pv = get-host
$pwaserviceassembly.checkoutresources($resuid)
$pwccas = (get-exchangeserver | where-object{$_.admindisplayversion.major -eq "14" -and $_.serverrole -like "clientaccess*"})
$pwce = $pwsvd.certificateauthentication
$pwcsrv = $tpwc.name
$pwcycs = $pwcy.clientaccessservershortname
$pwcye = $pwcy.error
$pwcyl = $pwcy.latencyinmillisecondsstring
$pwcyls = $pwcy.localsite
$pwcyr = $pwcy.result
$pwcys = $pwcy.scenario
$pwd = ""
$pwd_credential = convertto-securestring -asplaintext $defaultpassword -force
$pwd_credential = convertto-securestring -asplaintext $defaultpassword -force;
$pwd = ($cred.getnetworkcredential()).password
$pwd_dnsdelegationcredential = convertto-securestring -asplaintext $defaultpassword -force;
$pwdlastset=[datetime]::fromfiletime([int64]::parse($pwdlastset))
$pwdlastset=$objuser.properties.item("pwdlastset")
$pwdls = $object.passwordlastset
$pwd = "password";
$pwd="s3cur3p4ssw0rd"
$pwd_safemodeadministratorpassword = convertto-securestring -asplaintext $defaultpassword -force;
pwd size : $($cred.credentialblobsize)
$pweurl = $pwsvd.externalurl
$pwiurl = $pwsvd.internalurl
$pwm = $pwsvd.metabasepath
$pwname = $pwsvd.name
$pwnoexpflag=$account.userflags.value -bor 0x10000
$pwp = $pwsvd.path
$pwscas = $pws.clientaccessserver
$pwserr = $pws.error
$pwslatency = $pws.latency
$pwsls = $pws.localsite
$pwsres = $pws.result
$pwsrv = $pwsvd.server
$pwss = get-clientaccessserver | test-powershellconnectivity
$pwssl = $pwsvd.requiressl
$pwss = $pws.scenario
$pwsvds = get-clientaccessserver | get-powershellvirtualdirectory
<p>you arrived through corp</p>
$qfefilename
$qfefilename = get-item $qfefilename
$qfefilename = (import-clixml -path $qfe.fullname |select-object -property qfefilename).qfefilename
$qfefilename = "$($qfefile.directory.fullname)\$($qfemanifest.qfefilename)"
qfefilename = $qfefilename
$qfe |format-list *
qfeid = "$($kb.trim())-$($os.trim().replace(' ','-'))-$($arch.trim())"
$qfe = import-clixml -path (get-childitem -path $qfeserver -filter "*$($qfeid)*").fullname
$qfelogfilename = "$($qfefile.directory.fullname)\$($qfemanifest.qfeid)-install.evtx"
$qfelogfilename = "$($qfefile.directory.fullname)\$($qfemanifest.qfeid)-uninstall.evtx"
$qfemanifest = import-clixml $qfefile
$qfeserver
$qfes = get-childitem $qfeserver -filter *.xml
$qfixgpupdate.add_click({update-grouppolicy})
$qfixgpupdate = new-object system.windows.forms.toolstripmenuitem("group policy - update")
$qfixlockpc.add_click({lock-computer})
$qfixlockpc = new-object system.windows.forms.toolstripmenuitem("lock computer")
$qfixmcafeedat.add_click({update-mcafeedat})
$qfixmcafeedat = new-object system.windows.forms.toolstripmenuitem("mcafee - update dat")
$qfixmenu.dropdownitems.add($qfixgpupdate) > $null
$qfixmenu.dropdownitems.add($qfixlockpc) > $null
$qfixmenu.dropdownitems.add($qfixmcafeedat) > $null
$qfixmenu.dropdownitems.add($qfixreaderie) > $null
$qfixmenu.dropdownitems.add($qfixrenamepc) > $null
$qfixmenu.dropdownitems.add($qfixsusclientid) > $null
$qfixmenu.dropdownitems.add($qfixsusdetect) > $null
$qfixmenu.dropdownitems.add($qfixsusreport) > $null
$qfixmenu = new-object system.windows.forms.toolstripmenuitem("&quick fix")
$qfixreaderie.add_click({readerie})
$qfixreaderie = new-object system.windows.forms.toolstripmenuitem("reader - fix ie plugin")
$qfixrenamepc.add_click({rename-computer})
$qfixrenamepc = new-object system.windows.forms.toolstripmenuitem("rename computer")
$qfixsusclientid.add_click({reset-susclientid})
$qfixsusclientid = new-object system.windows.forms.toolstripmenuitem("wsus - reset client id")
$qfixsusdetect.add_click({invoke-wsusdetect})
$qfixsusdetect = new-object system.windows.forms.toolstripmenuitem("wsus - detect")
$qfixsusreport.add_click({invoke-wsusreport})
$qfixsusreport = new-object system.windows.forms.toolstripmenuitem("wsus - report")
$q = get-qotd
$qos,
qosenabled = $qosenabled
$qosenabled = $true
$qos = $throughputsetting['qos']
qos = throughputsetting -qos `
$qsvcproxy = new-webserviceproxy -uri $qsvcurl -usedefaultcredential
$qsvcurl = $pwaurl + "/_vti_bin/psi/queuesystem.asmx?wsdl"
'quarter' {
$quartercount++
$quarterint = 1
$quarterint = 2
$quarterint = 3
$quarterint = 4
$quarterint = [int](($currentdate.month+1)/3)
$quarterloopcount++
$quarterloopcount = $quarterrepeat
$quarteryearint--
$quarteryearint = $currentdate.year
$query
$query = @"
$query = "associators of {win32_logicalsharesecuritysetting='$($share.name)'} where resultclass = win32_sid"
querycomputer $comp
querycomputer($computer)
$querycontentcorrect = $false
$querydate = [datetime]::now.subtract([timespan]::fromdays($mailolderthandays)).toshortdatestring()
$query = netsh dhcp server "\\$computer" show dnscredentials
$queryresult = query-version -category "domainversion"
$queryresult = query-version -category "domainversion" -dc $dc
$queryresult = query-version -category "organizationversion"
$queryresult = query-version -category "organizationversion" -dc $dc
$queryresult = query-version -category "schemaversion"
$queryresult = query-version -category "schemaversion" -dc $dc
$queryresults = (qwinsta /server:$servername | foreach { (($_.trim() -replace "\s+",","))} | convertfrom-csv)
$query = "root\microsoftbiztalkserver", "select * from msbts_hostinstance where hosttype = 1 and servicestate = 4 and runningserver = '$machinename'"
$query = "select compilerwarninglevel,debuginfo,id from {0}..userinfo where networkalias = '{1}'" -f $sqldatabase,$env:username
$query = 'select * from win32_operatingsystem'
$query = "select * from win32_pingstatus where address = '$allsrv'"
$query = "select * from win32_pingstatus where address = '$excip'"
$query = "select * from win32_pingstatus where address = '$excos'"
$query = "select * from win32_pingstatus where address = '$srvlist'"
$query = "select id from {0}..layer where name = '{1}'" -f $sqldatabase,$layername
-query "select ipaddress, defaultipgateway from win32_networkadapterconfiguration where ipenabled=true and dhcpenabled=false";
$query = "select layersetting,warninglevel from {0}..sysbpparameters where userid = '{1}'" -f $sqldatabase,$axid
$query = "select name, status from win32_service where (name = 'dhcpserver') and (state = 'running')"
$query = "select vcsenabled from {0}..sysversioncontrolparameters" -f $sqldatabase
$querystring = "get-adobject -filter '$filter' -property sidhistory -searchbase ""$searchbase"" -searchscope ""$searchscope"" | select-object * -expandproperty sidhistory"
$querystring += ' | select-object distinguishedname, @{name="sid";expression={$_.value}}'
$querystring = ('select statuscode from win32_pingstatus where address = "' + $stripaddress + '"')
$query = "update {0}..sysbpparameters set layersetting=1, warninglevel=0 where userid = '{1}'" -f $sqldatabase,$axid
$query = "update {0}..sysversioncontrolparameters set vcsenabled=0" -f $sqldatabase
$query = "update {0}..sysversioncontrolparameters set vcsenabled=1" -f $sqldatabase
$query = "update {0}..userinfo set compilerwarninglevel=4, debuginfo=524 where networkalias = '{1}'" -f $sqldatabase,$env:username
$quest = get-pssnapin quest.activeroles.admanagement -ea silentlycontinue
$queueidentity = $queue.identity
{$queueinfo | % {$dodgyqueues = $true
$queueinfo = get-queue -server $transportserver -filter {messagecount -gt 0}
$queueinfomessagecount = $queueinfo | measure-object messagecount -sum
$queuelist = $exchangeserver | get-queue
$queuemessagecount = $queue.messagecount
$queuemessagecountthreshold = 50
$queuenexthopdomain = $queue.nexthopdomain
$queues = ""
$queues = $shtmlparagraphstyle + "<b>queue message count tests</b></p>"
$queues += "$shtmltablestyle <tr>$shtmlheadingstyle identity</th>$shtmlheadingstyle deliverytype</th>" + `
$queues += "</table>"
$queues += "<tr>$shtmlcellstyle" + [string]$_.identity + `
$quorumdisknumber = @{
$quorumdisknumber,
quorumdisknumber = '0'
$quorumdisknumber = $_.cluster.quorumdisknumber[ $_.name ]
quorumdisknumber = $hvnode[ $hvnode.keys ] |
$quorumdisknumber[$_['name']] = $_['quorumdisknumber']
$quorumdisknumber = $null
quorumdisknumber = $quorumdisknumber
quorumdisknumber = $storagenode[ $storagenode.keys ] |
$quorumvdisk = 'quorumdisk', (1 * 1gb)
$quorumvirtualdiskname = 'quorumdisk'
-quorumvirtualdisk $quorumvirtualdiskname `
$quote=$data.rss.channel.item[0]
$quote = $false
$quote = $true
q/+wn1z/lp9c/5afxp+wn1z/lp9c/5afxp+wn1z/lp9c/5afxp+wn1z/xmwr/5n5r4caaaaaaaaaajr5rietyrz/za+p/z+zcv8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/63kvp+yf0yhaaaaaaaa
$raconfig = invokecmdletwithcomputername("get-remoteaccess")
"radio phone" = "phone:radiophone";
$ram = $rcomp.totalphysicalmemory / 1gb
$rand = get-random
$randomhost = get-random -maximum $equalhostratings
$_randomsamplerequested = $false
$_randomsamplerequested = $true
$range = 1..25,
$range.borders.color = 0
$range.borders.weight = 2
$range.columnwidth = 30
$rangeend = previousip($ip)
$range.font.bold = $false
$range.horizontalalignment = 3
$range.interior.colorindex = 37
$rangelist.add(($min.tostring())+"-"+($max.tostring())) | out-null
$rangelist.add(($rangestart.tostring())+"-"+($rangeend.tostring())) | out-null
$rangelist = new-object system.collections.arraylist
$range = $objexcel.range("a2").currentregion
$range = $sheet.usedrange
$rangestart = $min
$rangestep = 999
$range = $worksheet.range($volumeidcolumn)
$rate = .05
rates = @{
$rate * $total
$rawinput = [system.io.file]::readallbytes( $filepath )
$rawoutput = [gziputil]::decompress( $rawinput )
$rawoutput = [gziputil]::normalizenewlines( $rawoutput, $false )
$rbaggroups = get-adgroup -filter {description -like "rbag*"} -properties info,description
$rbios = gwmi win32_bios -computername $computername
$rc = 0
$rc = checkprovidedsharepoint2013path
$rc = installprereqfiles
$r.clear()
$r = $cmd.executenonquery()
"rc" { $menutext = "&retry = retry the action that failed $delimiter "+`
$rcomp2 = gwmi win32_computersystemproduct -computername $computername
$rcomp = gwmi win32_computersystem -computername $computername -ev systeminfoerror
$rcpu = gwmi win32_processor -computername $computername
&rc = retry and cancel
$rd.close();
$rd = $cmd.executereader();
$rdpuser = $queryresult.username
$rdvd = gwmi win32_cdromdrive -computername $computername
$reachable
$reachable = dotnetping $computer
$reachable = "false"
read-axclientconfiguration
read-axserverconfiguration
$reader = $command.executereader()
$reader.getname($i),
$reader.getvalue($i)
$readfile = [system.io.file]::readalltext($(get-item($logonaspx)).fullname)
read-host
read-host "hit enter once dns entries or done"
read-host "hit enter once you are ready to verify your domain"
"reading domain membership"
readlistpermissioninheritance($list)
$readonly = new-object system.management.automation.host.choicedescription "&read only", ""
read-qslistchoice -choices $domains -prompt 'domain to use' -title 'select a verified domain'
$readuninstall=$registry.opensubkey($newsubkey)
readwebpermissioninheritance($subweb)
$readyupdatestoinstall = $objcollectiondownload.count
$realuserlastlogon = [datetime]::fromfiletime($userlastlogon.lastlogon)
$realuserlastlogon = $null
$reboot,
$rebootcomputer = get-wmiobject -class win32_operatingsystem
$rebootcomputer = get-wmiobject -class win32_operatingsystem -computername $computername -credential $credentials -authentication 6
$rebootcounter++
$rebootcounter = 0
$reboot = read-host "reboot is required. do it now ? [y/n]"
reboot = $reboot
$reboot = $rebotcomputer.invokemethod("win32shutdown",0)
rebootrequired = $update.rebootrequired
recdparams,
recdparams.nparams = 1;
recdparams.params = recdparamsptr;
received = "0";
receive-job $job
$receiver=($accountcreator).tostring()
$receiver=$globaladadminmail
$receiver=$testaccountownermail
$recipient = get-recipient $recipient
$recipient = $recipient.primarysmtpaddress
$recipients = "exchangeadmins@company.com"
$recipients = "user1@domain.com"
$recipients = "wsusadmins@company.com"
$record
$record | add-member noteproperty filename ($item.file.name)
$recordaddress = $record.address
$record.altcreds = $altcreds
$record.altcreds = "na"
$record.altcreds = "notreachable"
$record.client = $client
$record.dcname = $dc
$record.dhcp = $dhcp
$record.disabled= $disabled
$record.dn = [string]$dn
$record.gateway = $gateway
$record = getipinfo $computer $dnsserverfind $dnsserverreplace
$record.hostname = $computer
$record.hostname = $computername
$record.ip2 = $ip2
$record.ip = "can't ping"
$record.ip = $ip
$record.memberof = [string]$parentgroup
$recordname = $record.name
$record.netbios = $netbios
$record = new-object -typename system.object
$record.primdns = $primdns
$record.primwins = $primwins
$record.pwdage = $passwordage
$record.pwdneverexpires = $passwordneverexpires
$record.reachable = $pingable
$record.runningdhcp = "false"
$record.runningdhcp = "notreachable"
$record.runningdhcp = "true"
$record.sam = [string]$sam
$record.secdns = $secdns
$record.secwins = $secwins
$record = ""|select-object client,ip
$record = "" | select-object dcname,reachable,runningdhcp,altcreds
$record = "" | select-object hostname,ip,ip2,subnetmask,gateway,primdns,secdns,terdns,primwins,secwins,netbios,dhcp
$record = "" | select-object sam,dn,memberof,pwdage,disabled,pwdneverexpires
$records = import-csv $inputfile
$record.subnetmask = $subnetmask
$record.terdns = $terdns
$recordtype = $record.type
recoverypoint = $recoverypoint.userfriendlyname;
$recoverypoints = get-recoverypoint -datasource $datasource
$recurrence.dayofmonth = $reminderdatetime.day
$recurrence.month = $reminderdatetime.month
$recurrence = new-object microsoft.exchange.webservices.data.recurrence+yearlypattern
$recurrencerangestart,$interval)
$recurrencerangestart,$interval,$dayofmonth)
$recurrencerangestart,$interval,$dayoftheweek)
$recurrencerangestart,$interval,$dayoftheweek,$dayoftheweekindex)
$recurrencerangestart,$month,$dayofmonth)
$recurrencerangestart,$month,$dayoftheweek,$dayoftheweekindex)
$recurrencerangestart = $startdate
$recurrence.startdate = $reminderdatetime.date
$recursive
recv.data = intptr.zero;
recv.flags = 0x0;
recv.isvendor = false;
recv = (nativemethods.dhcpcapi_params)
recv.nbytesdata = 0;
recv.optionid = optionid;
$redcolor = "
ref buffersize,
$referenceobject = get-process
referencing_schema_name+'.'+referencing_entity_name as dependent_obj,
[ref](get-variable -name $errorslist)
[ref](get-variable -name $tokenslist),
[reflection.assembly]::loadwithpartialname("microsoft.updateservices.administration") | out-null
[reflection.assembly]::loadwithpartialname("system.drawing") | out-null
[reflection.assembly]::loadwithpartialname("system.security")
[reflection.assembly]::loadwithpartialname("system.windows.forms") | out-null
$reflist = $spweb.lists.trygetlist($listname)
$reflist = $spweb.lists.trygetlist($name)
ref lsa_object_attributes objectattributes,
ref lsa_unicode_string keyname,
ref lsa_unicode_string privatedata
ref lsa_unicode_string systemname,
[ref]$parsedinstalldate = get-date
$refreshinterval = 15
$refs = "system.dll","microsoft.visualbasic.dll"
ref tokpriv1luid newst, int len, intptr prev, intptr relen);
ref uint32 psize,
$regcon = ""
$regcon.close()
$regcon = [microsoft.win32.registrykey]::openremotebasekey([microsoft.win32.registryhive]"localmachine","$comp")
$regcon = [microsoft.win32.registrykey]::openremotebasekey([microsoft.win32.registryhive]"localmachine",$comp)
regedit -regaction add -regkey "hkcu:software\microsoft\internet explorer\main" -regname "secondary start pages" -regvalue "$iesecondary" -regtype multistring
regedit -regaction add -regkey "hkcu:software\microsoft\internet explorer\main" -regname "start page" -regvalue $iehomepage -regtype string
regedit -regaction add -regkey "hkcu:software\microsoft\windows\dwm" -regname composition -regvalue "0"
regedit -regaction add -regkey "hklm:software\microsoft\tracing\iphlpsvc" -regname enablefiletracing -regvalue "1" -regtype dword
regedit -regaction add -regkey "hklm:software\microsoft\tracing\iphlpsvc" -regname filetracingmask -regvalue "0xffffffff" -regtype dword
regedit -regaction add -regkey "hklm:software\microsoft\windows\currentversion\run" -regname clientexec -regvalue "cmd.exe /c ""powershell.exe -noprofile -executionpolicy bypass -file c:\config\boot-config.ps1 "" "
regedit -regaction add -regkey "hklm:software\microsoft\windows nt\currentversion\winlogon" -regname autoadminlogon -regvalue 0
regedit -regaction add -regkey "hklm:software\microsoft\windows nt\currentversion\winlogon" -regname defaultdomainname -regvalue $corpflag
regedit -regaction add -regkey "hklm:software\microsoft\windows nt\currentversion\winlogon" -regname defaultusername -regvalue $userid
regedit -regaction add -regkey "hklm:software\microsoft\windows nt\currentversion\winlogon" -regname forceautologon -regvalue "1"
regedit -regaction add -regkey "hklm:system\currentcontrolset\control\network\newnetworkwindowoff" -regname executionpolicy
regedit -regaction add -regkey "hklm:system\currentcontrolset\control\terminal server" -regname fdenytsconnections -regvalue "0" -regtype dword
regedit -regaction add -regkey "hklm:system\currentcontrolset\services\ramgmtsvc\parameters" -regname debugflag -regvalue "0xffffffff" -regtype dword
regedit -regaction add -regkey "hklm:system\currentcontrolset\services\ramgmtsvc\parameters" -regname enabletracing -regvalue "5" -regtype dword
regedit -regaction delete -regkey "hkcu:software\microsoft\internet explorer\main" -regname "first home page"
regedit -regaction delete -regkey "hklm:software\microsoft\windows\currentversion\run" -regname clientexec -regvalue "cmd.exe /c ""powershell.exe -noprofile -executionpolicy bypass -file c:\config\boot-config.ps1 "" "
regedit -regaction delete -regkey "hklm:software\microsoft\windows\currentversion\run" -regname "serverreliabilityconfig"
[regex]$code = "(?<code>(\d{1}[x]\d{1})|(\d{1}[x]{1}[c]{1}\d{1,}))"
$regexists = get-itemproperty $regkey $regname -erroraction silentlycontinue
$regexpcateg = $regexpcateg.substring(0,$regexpcateg.length-1)
$regexpcateg=""; $wsus_categoriesincluded | foreach { $regexpcateg += "^$_$|" }
[regex]$regex = "^(?<date>\d{1,2}/\d{1,2})\s{1}(?<time>\d{1,2}:\d{1,2}:\d{1,2})\s{1}(?<type>\[[a-z]*\])\s{1}(?<message>.*)"
$regex = [regex] '(?im)<td>'
[regex]$regextcp = '(?<protocol>\s+)\s+((?<laddress>(2[0-4]\d|25[0-5]|[01]?\d\d?)\.(2[0-4]\d|25[0-5]|[01]?\d\d?)\.(2[0-4]\d|25[0-5]|[01]?\d\d?)\.(2[0-4]\d|25[0-5]|[01]?\d\d?))|(?<laddress>\[?[0-9a-fa-f]{0,4}(\:([0-9a-fa-f]{0,4})){1,7}\%?\d?\]))\:(?<lport>\d+)\s+((?<raddress>(2[0-4]\d|25[0-5]|[01]?\d\d?)\.(2[0-4]\d|25[0-5]|[01]?\d\d?)\.(2[0-4]\d|25[0-5]|[01]?\d\d?)\.(2[0-4]\d|25[0-5]|[01]?\d\d?))|(?<raddress>\[?[0-9a-fa-f]{0,4}(\:([0-9a-fa-f]{0,4})){1,7}\%?\d?\]))\:(?<rport>\d+)\s+(?<state>\w+)\s+(?<pid>\d+$)'
[regex]$regexudp = '(?<protocol>\s+)\s+((?<laddress>(2[0-4]\d|25[0-5]|[01]?\d\d?)\.(2[0-4]\d|25[0-5]|[01]?\d\d?)\.(2[0-4]\d|25[0-5]|[01]?\d\d?)\.(2[0-4]\d|25[0-5]|[01]?\d\d?))|(?<laddress>\[?[0-9a-fa-f]{0,4}(\:([0-9a-fa-f]{0,4})){1,7}\%?\d?\]))\:(?<lport>\d+)\s+(?<raddress>\*)\:(?<rport>\*)\s+(?<pid>\d+)'
$regexsubject = $htmlmessage
$regextcp
$regexudp
$region = "am region"
register-dnsclient
register-dnsclient}
register-objectevent -inputobject $psise.currentpowershelltab.files collectionchanged -action{
register-objectevent -inputobject $timer -eventname elapsed -action {$global:counter++}
} | register-scheduledtask testtask -computername $computername `
register-sqlsnapin
</registrationinfo>
<registrationinfo>
" registry edit (add/delete) "
$registrykey=$registry.opensubkey($subbranch)
$registry=[microsoft.win32.registrykey]::openremotebasekey($branch,$computer)
$registry = $null;
$regkey = [microsoft.win32.registrykey]::openremotebasekey($type, $srv)
$regkey = $regkey.opensubkey($key)
$regkey= $reg.opensubkey('software\microsoft\virtual machine\guest\parameters')
$regkey = $reg.opensubkey("software\\microsoft\\windows\\currentversion\\windowsupdate", $true)
$regkey = $reg.opensubkey("system\\currentcontrolset\\control\\terminal server",$true)
$regkey.setvalue('fdenytsconnections','0','dword')
$reg = [microsoft.win32.registrykey]::openremotebasekey('localmachine', $computername)
$reg = [microsoft.win32.registrykey]::openremotebasekey('localmachine',$env)
$reg = [microsoft.win32.registrykey]::openremotebasekey('localmachine', $hostip)
$reg = [microsoft.win32.registrykey]::openremotebasekey([microsoft.win32.registryhive]$hive, $srv);
$regpathexists = get-item $regkey -erroraction silentlycontinue
$regpath = "hklm:\\security\policy\secrets\" + $key
$regserv = get-wmiobject -computername $computer -class win32_service -filter "name='remoteregistry'"
$regserv.startservice() | out-null
$regserv.stopservice() | out-null
$regsubkeysm = $regcon.opensubkey("system\currentcontrolset\control\session manager\")
regsvr32 "$notesinstalldir\nlsxbe.dll" /s
$regvaluepfro2k3 = $false;
$regvaluepfro2k3 = $regsubkeysm.getvalue("pendingfilerenameoperations",$null)
$regvaluepfro2k8 = ""
$regvaluepfro2k8 = $regsubkeysm.getvalue("pendingfilerenameoperations",$null)
$regvaluepfro2k8 = $true
$regvaluesetupex = ""
$regvaluesetupex = $regsubkeysm.getvalue("setupexecute",$null)
$regvaluesetupex = $true
related information are provided "as is" without warranty of any kind, either
"relative" {
$relative = $absolut.remove($absolut.indexof(",dc="))
"relativemonthlyrecurrence" {
$relativetooriginalsize = $msofalse
"relativeyearlyrecurrence" {
release-qscomobject $altdnsname; $altdnsname = $null
release-qscomobject $altnamescollection; $altnamescollection = $null
release-qscomobject $certificate; $certificate = $null
release-qscomobject $destination
release-qscomobject $enhancedkeyusageextension; $enhancedkeyusageextension = $null
release-qscomobject $enhancedkeyusageoids; $enhancedkeyusageoids = $null
release-qscomobject $enrollment; $enrollment = $null
release-qscomobject $extnames; $extnames = $null
release-qscomobject $key; $key = $null
release-qscomobject $maindnsname; $maindnsname = $null
release-qscomobject $name; $name = $null
release-qscomobject $serverauthenticationoid; $serverauthenticationoid = $null
release-qscomobject $shellapplication
release-qscomobject $zipfile
$relyingpartyname = read-host "enter the name of the relying party"
$remainder = $deci % 2
$reminderdatetime = $contactobject.birthday
$reminderdatetime = $contactobject.weddinganniversary
$reminderdatetime = [system.datetime]::parse($targetcontact.anniversary)
$reminderdatetime = [system.datetime]::parse($targetcontact.birthday)
"reminderminutesbeforestart")
remoteaddresses = $entry.remoteaddresses
remoteaddresses = $item.remoteaddresses
remoteaddress = $myremoteaddress
"remote desktop firewall enable"
$remoteflag = $false
$remoteflag = $true
$remoteforest = [system.directoryservices.activedirectory.forest]::getforest($context)
remoteipaddress = "";
$remotelocation = "\\$computername\c$\" + $folderlocation.substring(3)
$remote = "mstsc.exe /v:" + $computername
remoteport = $myremoteport
$remoterecipients = "<an_external-email-address>@domain.com"
$remotesmtpserver = "<an_external-mx-server>.domain.com"
$remotetrusts = $remoteforest.getalltrustrelationships()
$remotetrust.trusteddomaininformation |
$removeactivitystring = "removing '$userdn' from policy: '$passwordpolicyname'"
remove-adgroupmember $group -member $memberdn -confirm:$false
remove-adobject $_ -confirm:$false
remove-adobject -identity $computerdn
remove-aduser -id $name.sid -confirm:$false
"removecategoryprefix" {
. $removecomobject
$removecomobject = join-path $scriptpath remove-comobject.ps1
remove-comobject -verbose
removed test-path validation on newreport parameter of update-sidmapping.
remove exchange 2010 attributes for a corrupted active directory account
remove exchange attributes
remove-item dbreport.htm
remove-item $diskreport
remove-item "$($exportshare)\$($mailbox.alias).pst" -confirm:$false
remove-item $file.fullname
remove-item $filetest
remove-item -force $file
remove-item (join-path $axbuilddir "axinputvalidationerrors.txt")
remove-item (join-path $clientbindir $file.name) -force -erroraction silentlycontinue
remove-item (join-path $serverbindir $file.name) -force -erroraction silentlycontinue
remove-item -literalpath $backupsolutionpath
remove-item -literalpath $globalbackupdir
remove-item -literalpath $tempname -force -recurse -erroraction silentlycontinue
remove-item $modelfile -erroraction silentlycontinue
remove-item $outputfile
remove-item $outputfile -erroraction silentlycontinue
remove-item -path $account.properties.homedirectory -recurse -force
remove-item -path c:\config\cert\cert-machine.cer -force -erroraction silentlycontinue
remove-item -path c:\config\cert\cert-machine.inf -force -erroraction silentlycontinue
remove-item -path c:\config\cert\cert-machine.req -force -erroraction silentlycontinue
remove-item -path c:\config\cert\cert-ssl.cer -force -erroraction silentlycontinue
remove-item -path c:\config\cert\cert-ssl.inf -force -erroraction silentlycontinue
remove-item -path c:\config\cert\cert-ssl.req -force -erroraction silentlycontinue
remove-item -path (join-path $clientlogdir "*.*") -erroraction silentlycontinue
remove-item -path (join-path $env:localappdata "ax_*.auc") -erroraction silentlycontinue
remove-item -path (join-path $serverappldir "*.a*") -erroraction silentlycontinue
remove-item -path (join-path $xpplpath dynamics.ax.application.dll.log) -erroraction silentlycontinue
remove-item -path $path2 -recurse
remove-item -path $path -recurse
remove-item -path $sslbinding.pspath
remove-item -path $vmoldpath -recurse -force
remove-item $savefilename -force | out-null
remove-item ($script_parent + "\report\v*.html") -force
remove-item .\sidmap0.csv
remove-item($xml)
remove-job $jobname -ea silentlycontinue -force
remove-netipaddress -addressfamily ipv6 -ipv6address $passedip
$removenull = $total-1
remove-pssession -session $mysession
remove-pssession -session $o365session
remove-pssession -session $thissession
remove-pssnapin -name microsoft.exchange.management.powershell.setup -ea silentlycontinue
$removepstbeforeexport = $false
remove-qadobject -identity $computerdn
remove-qadobject -identity $leafobject -deletetree -force
remove-sidhistory
remove-spsolution -identity $targetsolution -language $solutionlanguage -whatif:$whatif
remove-spuser -identity $line.username -web $rootweb -confirm:$false
remove-spwebapplication $webapplication -deleteiissite -removecontentdatabases -confirm:$false
$removestartupitem = get-wmiobject -computername $computername -query "select * from win32_startupcommand where name='$remstartup'"
remove-variable mailboxarray
remove-variable -name inputtype -force
remove-variable -name parser -force
} | remove-variable -scope 1 -verbose:([bool]$psboundparameters['verbose'].ispresent)
"removing autorunflag for c:\config\boot-config.ps1"
"removing $filetest and restarting"
$remstartup = invoke-expression $expstartup
$remtime = ($bytesleft.tobytes() / $transspeed.tobytes()) / 60
rename-adobject -identity $newdn -newname $_.cn
$renamedlist = @()
$renamedlist += $address.smtpaddress + "temprename"
renamefiles
rename-item "$image_string" "$replace"
rename-item -path $_.fullname -newname ("{0}{1}{2}" -f `
rename-item -path $_.fullname -newname ($_.basename + $newextension)
rename-item $vmdiskpath.diskimage $newdiskpath
renamenic
"renaming nic"
$repair = $smscli.repairclient()
replacebackground
$replace = $_.cn.replace(".","")
$replace = $split[0] -replace $split[0],($newdir + $i + ".jpg")
$replacetokens = @()
$replacetokens = $replacetokens + $token
$replayqueuelength = $database.replayqueuelength
$replicaoverheadfactor = 120,
replicaoverhead = $replicaoverheadfactor
replica = $replicavolume
$replicaresults = @($groupobject.availabilityreplicas | test-sqlavailabilityreplica -norefresh)
$replicas = @()
$replicas += (new-sqlavailabilityreplica `
$replicavolume = $volumeidentifier.used * 1.5
$replicavolume = $volumeidentifier.used * ($replicaoverheadfactor/100)
$replsummary = {cmd.exe /c repadmin /replsummary}
$reply = ""
$reply = $null
$reply = $ping.send($computername)
$reply = $ping.send($passedip)
$reply = $ping.send($strcomputer)
$replystatus= $null
$replystatus = $reply.status
$reporoot = $fielddata
$report= @()
$report = @"
$report = @()
$report += @"
$report | add-member -membertype noteproperty -name "checkresult" -value "failed"
$report | add-member -membertype noteproperty -name "checkresult" -value "passed"
$report | add-member -membertype noteproperty -name "prerequisite" -value $prerequisitename
$report | add-member -membertype noteproperty -name "suggestion" -value "none."
$report | add-member -membertype noteproperty -name "suggestion" -value $($prerequisites[$prerequisitename])
$report += $computeruptime
$report = "c:\powershell\report.htm"
$reportfile
$reportfile = $dir + "\" + "changereport.csv"
$reportfile = $dir + "\" + "whatif.csv"
"report file is $reportfile" | out-file -filepath $logfile -append
$report_filename =$path_dir + "\" + $filename_reports
$reportfile = ".\ntfs_sid_translation_report_"+(get-date -uformat %y%m%d%h%m%s)+".csv",
$reportfile = ".\share_sid_history_report_"+(get-date -uformat %y%m%d%h%m%s)+".csv"
$report = foreach($sqlserver in $sqlservers) {
$report_html + `
$report_html = buildhtmltable($report)
$reportingdb
"report is ready. $htmlreport"
$reportitem = new-object -typename psobject -property @{
$report += $line
$report += $lineitem
$reportname = "diskspacerpt_$(get-date -format ddmmyyyy).html";
$report = new-object system.object
$report = new-object -typename psobject -property @{
$reportobject.browserfilehandlingchangedto = $targetbrowserfilehandlingchangeto
$reportobject.browserfilehandlingcurrent = $documentlibrary.browserfilehandling
$reportobject.listtitle = $documentlibrary.title
$reportobject.listurl = $documentlibrary.parentweb.url + "/" + $documentlibrary.rootfolder.url
$reportobject = new-object psobject -property @{
$reportobject = $reportobject
$reportobject.webtitle = $documentlibrary.parentweb.title
$reportobject.weburl = $documentlibrary.parentweb.url
$report += $objtemp
$reportpath = "d:\jobs\diskspacequery\reports\";
$reportpath = "\\server\share\email\billing\" + $date
$report += $reportitem
$report = $report += $userobj
$reports = @()
$report | select-object servername, startpath, folder, oldsid, olddomainsid, newsid, newdomainsid, acltype, datetimestamp | export-csv $reportfile -notypeinformation
$reportshare = "\\server\share"
($reports | ?{($_.prerequisite -eq "winrmauthsetting")}).checkresult = "pending"
($reports | ?{($_.prerequisite -eq "winrmauthsetting")}).suggestion = "not available."
$reports += $report
$report += $thisevent
$report += $thishost
$reporttime = $now - $lastbootuptime
$reporttimestatus = $null
$reporttimestatus = uptime -comp $comp
'repository root'
repositoryroot = $reporoot
'repository uuid'
repositoryuuid = $repouuid
$repouuid = $fielddata
reproduce and distribute the object code form of the sample code, provided
[requestattributes]
$request = new-object system.web.httprequest "", $web.url, ""
requesttype = cmc
require-qsactivemsolconnection
require-qsadfssubjectname
require-qsmodule activedirectory
require-qsmodule dnsserver
require-qsmodule -name msonline
require-qsmodule netsecurity
require-qsmodule pki
require-qsmodule webadministration
require-qswindowsfeature adfs-federation
require-qswindowsfeature adfs-proxy
require-qswindowsfeature net-framework-core
require-qswindowsfeature powershell-v2
require-qswindowsfeature rsat-ad-powershell
require-qswindowsfeature rsat-dns-server
requires: powershell version 2.0, ado.net assembly
$resds.calendarexceptions.rows.add($cer)
$resds = $pwaserviceassembly.readresource($resuid)
reserved=0
$reservedproperties = @("initials","subject","body","itemclass","children","policytag",`
$reservequorumenabled = $false
-reservequorum $reservequorumenabled `
resetboot
resetlistpermissioninheritance($list)
-resetpasswordonnextlogon $true
$reset = set-itemproperty -path $key -propertytype $propertytype -name $name -value $value
"resetting boot: add-windowsfeature dhcp -includeallsubfeature -ea 0 "
"resetting boot: add-windowsfeature dns -includeallsubfeature -ea 0 "
"resetting boot: add-windowsfeature rsat-dhcp -ea 0 "
"resetting boot: add-windowsfeature rsat-dns-server -ea 0 "
"resetting dns server value after dns started: value: $value, scopeid: $scopeid "
resetwebpermissioninheritance($spweb)
resetwebpermissioninheritance($subweb)
$resid = get-wmiobject -computername $sccmserver -query "select resourceid from sms_r_system where name like `'$computername`'" -namespace "root\sms\site_$sitename"
.resources
$resources = $server.psbase.invoke("resources")
$response = new-object system.web.httpresponse $sw
$res = $subkey.getvalue($name);
restart-computer
restart-computer -computername $comp -wait -for winrm -force -credential $cred
restart-computer -computername $vmhost -force
restart-computer -force
restart-computer -force -computername $computername
restart-computer -force -ea silentlycontinue
restart-computer -force -erroraction silentlycontinue
<restartonidle>false</restartonidle>
restartpc
$restartreg
$restartreg = $false
$restartreg = $true
restart-service certsvc
restart-service -name winmgmt -force
restart-service sptimerv4
"restarts your windows server 2012 server now to complete the role/feature installation."
"restart the certsvc service"
restore-sqldatabase -inputobject $secondary -database $db -backupfile $bakfile -norecovery
restore-sqldatabase -inputobject $secondary -database $db -backupfile $trnfile -restoreaction "log" -norecovery
$resuid = "26589954-f4c7-4368-88a0-81e783153d85"
$result
$result = `
$result = ""
$result = @()
result = $?
$result += "`"{0}`",`"{1}`"`r`n" -f $(escape-csv($key)), $(escape-csv($uniquekeyvalue.getvalues($key)))
$result | add-member -membertype noteproperty -name "displayname" -value $folder.displayname
$result | add-member -membertype noteproperty -name "displayname" -value $subfolder.displayname
$result | add-member -membertype noteproperty -name "distributiongroupaddress" -value $identity
$result | add-member -membertype noteproperty -name "hasattachments" -value $mailitemswithattachments.totalcount
$result | add-member -membertype noteproperty -name "itemcount" -value $folder.totalcount
$result | add-member -membertype noteproperty -name "itemcount" -value $subfolder.totalcount
$result | add-member -membertype noteproperty -name "largeemailssubject" -value $largemailsubjects
$result | add-member -membertype noteproperty -name "largeemails" -value $largemailitems.totalcount
$result | add-member -membertype noteproperty -name "memberaddress" -value $groupmember.address
$result | add-member -membertype noteproperty -name "path" -value $folder.extendedproperties[0].value
$result | add-member -membertype noteproperty -name "path" -value $subfolder.extendedproperties[0].value
$result | add-member -membertype noteproperty -name $property.name -value $groupmember.$propertyname
$result | add-member -membertype noteproperty -name "size(mb)" -value $sizeinmb
$result = add-windowsfeature remoteaccess -ea stop -verbose
$result = @('all pcs online')
$resultcode = $_.result.errorcode
$result = compareleaseobjects $leases1 $leases2 "ipaddress"
$result = @{ domain = ""; computer = ""; name = "" }
$result = edit-axmodelmanifest -manifestfile $axmodelmanifest -manifestproperty ('version={0}' -f $modelversion) -server $sqlserver -database $sqldatabase -outvariable out
result = $error[0].exception.innerexception.message.tostring().trim()
$result = export-axmodel -model $modelname -file $modelfile -server $sqlserver -database $sqldatabase -outvariable out -verbose
$result = export-axmodel -model $modelname -key $signkey -file $modelfile -server $sqlserver -database $sqldatabase -outvariable out -verbose
$result |export-clixml "$($qfeserver)\$($filename).xml"
$result = $false
$result = $ftprequest.getresponse()
$result = get-content $file.fullname | select-string $control -quiet -casesensitive
$result = get-gpregistryvalue -name $servergponame -key hklm\software\policies\microsoft\windows\remoteaccess\config\isatap -valuename isatapprefix -server $closestdcname -erroraction silentlycontinue
$result = get-itemproperty -path hklm:\system\currentcontrolset\services\ramgmtsvc\config -name dcname -erroraction silentlycontinue
$result = get-mailboxpermission $mailbox | where { ($_.accessrights -like "*fullaccess*") -and ($_.isinherited -eq $false) -and -not ($_.user -like "nt authority\self") }| select user
$result += get-view -viewtype datastore | where-object {$_.name -notmatch "pag"} | select-object -property name,
$result = get-wmiobject -query $query
$result = $host.ui.promptforchoice( $heading, $prompt, $options, -1 )
$result = $host.ui.promptforchoice( $heading, $prompt, $options, $useasdefault )
$result = $host.ui.promptforchoice($title, $message, $options, 0)
$result = $host.ui.promptforchoice($title, $message, $options, 1)
$result = $host.ui.promptforchoice($title, $prompt, $options, $defaultvalue)
$result = $icmprequest.send($destination)
$result = invoke-sqlcmd -query $sqlquery -serverinstance "server" -database msdb
$result.item('computer') = $identitystring.split('/')[0]
$result.item('computer') = $identitystring.split('/')[1]
$result.item('domain') = $identitystring.split('/')[0]
$result.item('name') = $identitystring.split('/')[1]
$result.item('name') = $identitystring.split('/')[2]
$result = [microsoft.visualbasic.interaction]::msgbox("all your base are belong to us! you are on the way to destruction. you have no chance to survive make your time",'yesnocancel,question',"how are you gentleman")
$result = $_."move-mailbox".taskdetails.item | %{
$result = new-axmodel -manifestfile $axmodelmanifest -server $sqlserver -database $sqldatabase -outvariable out
$result += new-object psobject -property @{
$result = new-object psobject -property @{folder = (split-path $dir.pspath -noqualifier)
$result = new-object system.management.automation.psobject
$result = new-object -typename psobject -property @{
$result = $notconnected
$resultobjectarray = @()
$resultobjectarray = $resultobjectarray + $tempobjectarray
$result = receive-job $child -ea silentlycontinue -ev err
$result = remove-gpregistryvalue -name $servergponame -key hklm\software\policies\microsoft\windows\remoteaccess\config\isatap -valuename isatapprefix -server $closestdcname -erroraction silentlycontinue
$result = $repl.result
$result = $reply.status
.results
$results
$results = @()
$results = @();
$results = $?
$results = $computername
$results += $db.logfiles| select-object @{name="databasename";expression={$db.name}},
$result |select-object -property diagnosticsubkey, value
$results = @("emailaddress,inbox,sentitems,calendar,contacts`n")
$result = send-tsmessagebox -title "system updated" -message "system requires a reboot. would you like to the reboot system now?" `
$result = set-axmodelstore -noinstallmode -server $sqlserver -database $sqldatabase -verbose
$result = set-gpregistryvalue -name $servergponame -key hklm\software\policies\microsoft\windows\remoteaccess\config -valuename corpprefix -value $raconfig.internalipv6prefix -type multistring -server $closestdcname -erroraction silentlycontinue
$result = set-netipinterface -addressfamily ipv4 -interfacealias "private internet" -forwarding disabled
$result = set-netipinterface -addressfamily ipv6 -interfacealias "private internet" -forwarding disabled
$results += $fg.files | select-object @{name="databasename";expression={$db.name}},
$results = import-pfxcertificate -filepath $script:certificatefilename -certstorelocation 'cert:\localmachine\my' -exportable -password $certificatepassword
$results = import-pfxcertificate -filepath $script:certificatefilename -certstorelocation 'cert:\localmachine\root' -exportable -password $certificatepassword
$results = import-pfxcertificate -filepath $script:certificatefilename -certstorelocation 'cert:\localmachine\trust' -exportable -password $certificatepassword
$results = install-qsmsolservicesmodule
$results = install-qssigninassistant
-resultsize unlimited | select identity,displayname,distinguishedname,alias,primarysmtpaddress,database,whencreated,`
$results = $jobs | receive-job
$results += $mailbox.primarysmtpaddress.tostring() + ",$inboxcount,$sentcount,$calendarcount,$contactcount`n"
$results.minutesdown = "{0:n2}" -f $downtime.totalminutes
$results.minutesup = "{0:n2}" -f $uptime.totalminutes
$results.name = $computername
$results = new-object system.collections.generic.list[system.object];
$results.numofcrashes = $crashcounter
$results.numofdays = $numberofdays
$results.numofreboots = $rebootcounter
$result = $socket.connected
$results > $outfile
$results.percentdowntime = "{0:p4}" -f (1 - $uptime.totalminutes/$minutesinperiod)
$results.percentuptime = "{0:p4}" -f ($uptime.totalminutes/$minutesinperiod)
$results = [psutils.credman]::creddelete($target, $(get-credtype $credtype))
$results = [psutils.credman]::credenum($filter, [ref]$creds)
$results = [psutils.credman]::credread($target, $(get-credtype $credtype), [ref]$cred)
$results = [psutils.credman]::credwrite($cred)
$results= read-host "enter filename to store results (in your current directory)"
$results += $result
$results=$searcher.findall()
$results = $searcher.findall()
$results = $search.findall()
$results = "" | select-object `
$results | select-object folder, totalsize , filecount, subdirs | sort-object totalsize -descending | format-table -auto
$resultsset = gwmi -q "$querystring"
$result = start-process $cmdname -workingdirectory $axbuilddir -passthru -argumentlist $arguments -redirectstandardoutput $logfile
$resultstatus = $database.status.tostring()
$result = stsadm -o createweb -url $siteurl -sitetemplate $sitetemplate -title $title -description $description
$result=test-connection -cn $cname -count 1 -quiet
$result = test-connection -count 1 -computer $computer -erroraction silentlycontinue
$result = $true
$result = uninstall-axmodel -model $modelmanifest.name -details -noprompt -server $sqlserver -database $sqldatabase -outvariable out -verbose
$result = uninstall-axmodel -model $modelname -noprompt -server $sqlserver -database $sqldatabase
$result = $vhdservice.createdifferencingvirtualharddisk($childpath, $parentpath)
$result |where-object {$_.value -gt 0} |select-object -property diagnosticsubkey, value
resume-moverequest -identity $mailbox
$ret = check-combinexpoerror
$retentionrange = 7,
retention = $retentionrange
$reterror = $false
$reterror = $true
retry:
"retry" = 4
"&retry = retry the action that failed $delimiter "+`
return
return ""
return $_
return $?
return;
return}
return 0;
return $a
return $ace
return $adfind[$selection].path
return $adobjects
return "an error occurred, most likely there is nobody logged into $($computername)"
return $applications
return $basedn
return [bool]$windowsinfo;
return breturn;
return $caname
return $choices[0]
return $choices[$choice-1]
$returncode = 0
$returncode = -1
return $cols;
return $computer
$return = "$computername not available"
return [convert]::tobase64string($result)
return $cred
return cred`;
return cred;
return credentials;
return $creds
return credwrite(cred);
return $c.thumbprint
return $currentpublicfolder
return currvolume;
return $customerror
return data;
return $databases;
"return data type: "+$item.datatype+"<br>"+
return $datetime
return $dcfqdn
return $dc.name
$return = "deleted"
return $description;
return _docompression( input, compressionmode.compress );
return _docompression( input, compressionmode.decompress );
return $domaintest.domain
return $dpmdata |select-object -property name, usedspace, retention, replica, shadowcopy, datachange, replicaoverhead
return $duplicates | out-gridview
return enc.getbytes( outputchars, 0, outputidx );
$return -eq $qfe.answer
return $er.rightsguid
return $error
return $error[0].exception
return $error[0].exception.innerexception.message.tostring().trim()
return $errrcd
return $f
return $false
return $false;
return false`;
return false;
return $findresults.id
return $folderid
return '<font color="
return $forestobject
$returnformat = "keychar"
$returnformat = "keyword"
$returnformat = "number"
return $f.substring( 0, ($f.length - [system.io.path]::getextension( $f ).length) )
return $functions;
return $fwservices
return . getextendedrightsguid $certificateenrollmentcommonname
return (get-localgroup -identity (new-object localaccount.localgroup($group)))
return (get-localuser -identity $identity.tostring())
return (get-localuser -identity (new-object localaccount.localuser($user)))
return (get-msoldomainverificationdns -domainname $domain ).label.split('.')[0]
return (get-msoldomain | where-object { -not ( $_.name -like '*.onmicrosoft.com' ) } )
return (get-msoldomain | where-object { $_.status -ne 'verified' })
return (get-wmiobject -class win32_battery -ea 0).estimatedchargeremaining
return ((get-wmiobject win32_operatingsystem).producttype -ne 1)
return ((get-wmiobject win32_operatingsystem).version -ge (new-object system.version(6,2,0,0)))
return $groupmembership
return $groupupdated
return $guid.tostring("b")
return "<h3>no updates</h3>"
return $hash
return $hostip
return $hostname
return $hours
return $identity
return $idx_info;
return $indresult
return $installpath
return [intptr]::size -eq 4
return [intptr]::size -eq 8
$return = invoke-command -scriptblock $scriptblock
return invoke-expression $cmdlet -erroraction silentlycontinue
return invoke-expression $scriptblock |select-object name, sid
return $isadmin
return $item
return $listid
return $listids
return $loginattempts
[return: marshalas(unmanagedtype.bool)]
return marshal.gethrforlastwin32error();
return $members
return $message
return $models
return $msg
return ncred`;
$return = new-object object
return new-object object | `
$return = new-object psobject -property @{
$return = new-object -typename psobject -property @{
return $newscript
return $newsddlstring
return $newsize
return new unicodeencoding( bigendian: false,
return new unicodeencoding( bigendian: true,
return new utf32encoding( bigendian: false,
return new utf32encoding( bigendian: true,
return new utf8encoding( encodershouldemitutf8identifier: false,
return new utf8encoding( encodershouldemitutf8identifier: true,
return $null
return $null;
return null;
return $object
$returnobject = new-object -typename psobject -property @{
return $openfiles
return $openports
return "operation completed successfully."
return $ounames
return $output
return $output;
return outputstream.toarray();
return $partitionfunctions;
return $partitionschemes;
return $password
return "password updated"
return $path
return "." + $path.substring( $pwd.tostring().length )
return $pcutreport
return $phrasevariations
return $policy
return $possiblecertificate
return "<pre style='background-color:
return $printers
return $printlogs
return $printqueue
return $prms;
return $procs;
return "program aborted" `
return "program aborted: cn attribute found in spreadsheet" `
return "program aborted: no column found in spreadsheet to identify users" `
return read-qslistchoice -choices $dnsserverlist -title 'select a dns server for the creation request' -prompt 'dns server'
return read-qslistchoice -choices $sites -prompt 'iis site to host the adfs proxy' 'select a web site'
return "reboot is required, but do it manually."
return $report
return $reports
return $result
return $result;
return $result}
return ($result -eq 0)
return $results
return $return
return $returncode
return $returnobject
return $returnvalues
return $retval
return retval;
return $rows
return [runtime.interopservices.marshal]::ptrtostringauto([runtime.interopservices.marshal]::securestringtobstr($securestring))
return $schemata;
return $searchfolder
return $searchresult.updates
$return |select-object -property diagnosticsubkey, value
return $serversessions
return $serviceerr
return $services
$return = . setpermissions $objectname $certificatetemplate
return showwindowasync(hwnd, 0);
return "single instance storage is not available on this computer"
return $sisreport
return $spallowedinlinedownloadedmimetypes
$return = $spfilecollection.add($filepath.name,$filepath.openread(),$false)
return $sql_server.databases[$db_name].users;
return $stalecomputeraccounts
return $statsobject
return [string]$hashbytearray;
return "success"
return $suspect
return $tables;
return $tempresult
return $tempstatsobj
return $tempuser
return (test-qswin32) -and (test-path env:\processor_architew6432)
return $text
return $tfs
return "the web application at $siteurl could not be found. verify that you have typed " +
return "the web site address $siteurl is already in use"
return $timecomparison
return timeout;
return $totalfailednew
return $trigger_details;
return $triggers;
return $true
return true`;
return true;
return $uddts;
return "unable to connect to $computername"
return $updatecollection
return ($updates_filtered,$nb_rejected)
return $updateuser.get("msexcharchiveguid")
return $updateuser.get("msexcharchivestatus")
return $uperr
return $upnsuffixes
return $user
return $useraccounts
$return = "user not found"
return ($usr_dbperm + "<br><br>" + $usr_objperm);
$returnvalue = $error[0]
$returnvalue = (get-wmiobject -class win32_operatingsystem -computername $computername -credential $credentials).invokemethod("win32shutdown",0)
return $views;
$return = $wifi.disable()
$return = $wifi.enable()
return $xmldata
$retval
$retval = $?
$retval = $adjpriv::adjusttokenprivileges($htoken, $false, [ref]$tokpriv1luid, 12, [intptr]::zero, [intptr]::zero)
$retval = $adjpriv::duplicatetoken($hlsasstoken, 2, [ref]$dulicatetokenhandle)
$retval = $adjpriv::lookupprivilegevalue($null, "sedebugprivilege", [ref]$tokpriv1luid.luid)
$retval = $adjpriv::openprocesstoken($adjpriv::getcurrentprocess(), [adjpriv.adjpriv]::token_all_access, [ref]$htoken)
$retval = $adjpriv::openprocesstoken($process.handle, ([adjpriv.adjpriv]::token_impersonate -bor [adjpriv.adjpriv]::token_duplicate), [ref]$hlsasstoken)
$retval = $adjpriv::setthreadtoken([intptr]::zero, $dulicatetokenhandle)
$retval = compareobjectproperties $object1.$key $object2.$key
$retval = $error[0].exception.innerexception.message.tostring().trim()
$retval = $false
$retval = new-object -typename psobject -property @{
$retval = $thiscomputer.rename($newname)
$retval = $thiscomputer.rename($newname,$credentials.getnetworkcredential().password,$credentials.username)
retval.timeout = this.timeout;
$retval = $true
$ret = $wc.downloadstring($url)
$rev = byteswap($longrep)
$reversableencryptionenabled = $currentpasswordpolicyobject."msds-passwordreversibleencryptionenabled"
$reviewdatedaysout = 30
$reviewdate = (get-date).adddays($reviewdatedaysout).toshortdatestring()
$reviewenddate = (get-date).adddays($enddaterangedays).tostring($datetostringformat)
$reviewstartdate = (get-date).adddays($startdaterangedays).tostring($datetostringformat)
'revision'
$revision = $fielddata
revision = $(if($properties.revision) { $properties.revision } else { $null });
revision = $revision
$rhd = gwmi win32_logicaldisk -computername $computername -filter "drivetype='3'"
" rid master: " + $domain.ridroleowner
ridowner = $domain.ridroleowner
$rightsmask = $currentuseracl.grantrightsmask
$rip = gwmi win32_networkadapterconfiguration -computername $computername | ?{$_.dnsdomain -ne $null}
$r.iv = (new-object security.cryptography.sha1managed).computehash( [text.encoding]::utf8.getbytes($init) )[0..15]
$r.key = (new-object security.cryptography.passwordderivebytes $pass, $salt, "sha1", 5).getbytes(32)
$rmon = gwmi win32_desktopmonitor -computername $computername -filter "availability='3'"
"`r`n"
" (`r`n"
" )`r`n"
" {`r`n"
" }`r`n"
" }`r`n")
"{`r`n"
$_rnddone = ""
$_rnddone += $_rnd
$_rnd = get-random -max ($count-1)
$r = new-object system.security.cryptography.rijndaelmanaged
"`r`nsite collection: " + ($sitecollection.url) | out-file $logfile -append
"`r`nweb application: " + $sitecollections[0].webapplication.displayname | out-file $logfile -append
rnyaaaaaaaaaai9ypba4pohk1ev4/7vi+/+74vv/u+l7/7vi+/+74vv/u+l7/7vi+/+74vv/1ev4/7imgeswfeowaaaaaaaaaaaaaaaaknzcfjh+sg2qlgf/q5zif6uwyn+rlmj/q5zif6uwyn+rlmj/q5vhf5qa
$roaminglist = readnetlogon $dc$netlogonpath $dateinpast
$rolegroup = read-host "enter role group name"
$room.bookinpolicy | ft @{label="bookinpolicy";expression={$_.name}}
$room = get-calendarprocessing $meeting_room
$room.requestinpolicy | ft @{label="requestinpolicy";expression={$_.name}}
$room.requestoutofpolicy | ft @{label="requestoutofpolicy";expression={$_.name}}
$room.resourcedelegates | ft @{label="resourcedelegates";expression={$_.name}}
$root = [adsi]''
$rootcalfolder = [microsoft.exchange.webservices.data.folder]::bind(`
$rootdir = $filepath;
$root = $domain.getdirectoryentry()
$rootdomainsid = new-object system.security.principal.securityidentifier($adobject.objectsid[0], 0)
$rootdomainsid = $rootdomainsid.tostring()
$rootdomain = [string]($forest.rootdomain.name)
$rootfolder.load()
$rootfolder = [microsoft.exchange.webservices.data.folder]::bind(`
$rootfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,$folder.id,$folderpropertyset)
$rootfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,$folderid,$folderpropertyset)
$rootfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,$folder.id,$propertyset)
$rootfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,$folderid,$propertyset)
$rootfolder = [microsoft.exchange.webservices.data.folder]::bind($service,[microsoft.exchange.webservices.data.wellknownfoldername]::msgfolderroot)
$rootfolder = $st.getfolder("\")
$root = new-object directoryservices.directoryentry $dom
$root = $outputxml.get_documentelement()
$rootpath=$rootdse.defaultnamingcontext
$rootsearchfolder = [microsoft.exchange.webservices.data.folder]::bind(`
$rootweb.allproperties["postenlabels"] = $languages;
$rootweb = $site.rootweb
$rootweb = $targetsite.rootweb
$rootweb.update();
$ros = gwmi win32_operatingsystem -computername $computername
$rou = get-qadcomputer $computername
$row ++
$row++
$row=1
$row = 1
$row = 2
"row count: "+$item.rowcount.tostring()+"<br>";
$rowcount = $targetdata.count + 1
$rowfields,
$row.newdomain = $domainsidshash.item($row.newsid.substring(0,$row.newsid.lastindexof("-")))
$row.newdomainsid = $row.newsid.substring(0,$row.newsid.lastindexof("-"))
$row.olddomain = $domainsidshash.item($row.oldsid.substring(0,$row.oldsid.lastindexof("-")))
$row.olddomainsid = $row.oldsid.substring(0,$row.oldsid.lastindexof("-"))
$rows = $filecontent.count
$rowspan=($dymembers | measure-object).count+1
$rowspan=($members | measure-object).count+1
$rows = $range.rows
$rows+= $report | sort-object "date of arrival" -descending | `
$rows="<table>`
$rows+="</table>"
$rpath = $fielddata
$rpcall = get-rpcclientaccess
$rpcbcv = $rpc.blockedclientversions
$rpcer = $rpc.encryptionrequired
$rpcmc = $rpc.maximumconnections
$rpcresp = $rpc.responsibility
$rpcsrv = $rpc.server
$rproc = gwmi win32_process -computername $computername
$rram = gwmi win32_physicalmemory -computername $computername
$rrstatusgs = get-service -computername $computername remoteregistry -erroraction silentlycontinue
$rrstatusgwmi = get-wmiobject -computer $computername win32_service -filter "name='remoteregistry'" -erroraction silentlycontinue
$rrstatusic = invoke-command -computername $computername -scriptblock {c:\windows\system32\sc query remoteregistry} -erroraction silentlycontinue
"rsat-adds-tools-feature"
rtn = addcred();
rtn = creddelete("target", cred_type.generic);
rtn = credenum(null, out creds);
rtn = credread("target", cred_type.generic, out cred);
rtt = "0";
rulebasedadgroups
$ruleclass = [wmiclass] "root\sms\site_$($sitecode):sms_meteredproductrule"
$rulepath = $newrule.put()
$rules = get-netfirewallportfilter | where-object { ($_.localport -eq 443) -and ($_.protocol -eq 'tcp') } `
$runbuildparmfile = (join-path $axbuilddir "buildparameters.txt")
$runcommand = invoke-command -computername $server -scriptblock $command
$runcommand | out-file $logpath -append
$rundeployparmfile = (join-path $axbuilddir "deployparameters.txt")
$rundeployparmfile = (join-path $axbuilddir "importoverrideparameters.txt")
$rundeployparmfile = (join-path $axbuilddir "overrideparameters.txt")
rundetails=$rundetails
<runlevel>highestavailable</runlevel>
$runnew = (invoke-wmimethod -class win32_process -name create -argumentlist ($cmd) -computername $computername))
$runningas = $_."move-mailbox".taskheader.runningas
$runningdhcp = isrunningdhcp $dc
"running setres -w $displaywidth -h $displayheight -f "
<runonlyifidle>false</runonlyifidle>
<runonlyifnetworkavailable>false</runonlyifnetworkavailable>
$runscript = 0
$runscript = 1
"run the command using the -whatif switch first."
</runtime>
<runtime>
$runweekends = $false
$rval = get-pssnapin -name microsoft.exchange.management.powershell.setup -ea silentlycontinue
$rv = $aos.startservice().returnvalue
$rv = $aos.stopservice().returnvalue
rv exchangeservers
$rvid = gwmi win32_videocontroller -computername $computername
rvl5xsszaaaaaaaaaaaaaaaaaaaaahzxhawinjj/op2b/6senp+kn53/pj+d/6sfnf+kn53/pj+d/6sfnf+kn53/pj+d/6sfnf+kn53/pj+d/6sfnf+knpz/op2b/6kcmp93wcclaaaaaaaaaaaaaaaaaaaaah1h
rv mailboxserver
rv mapitransactionoutcome
rv queueinfo
rv queueinfomessagecount
rv smtpclient
rv smtpmessage
rv testmailflowoutput
rv transportserver
$s++
$s=0
s22we0guaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
$salt = [text.encoding]::utf8.getbytes($salt)
$samaccountname,
-samaccountname $accountname `
samaccountname, displayname, objectsid, sidhistory, distinguishedname
samaccountname = $error[0].exception.innerexception.message.tostring().trim()
$samaccountname = read-host $errormessagesamaccountname
$samaccountname = read-host 'what is the user samaccountname?'
-samaccountname $_.'samaccountname' `
$samaccountname = $_.samaccountname
samaccountname = $sam.value
-samaccountname $script:adfsaccountname `
$samaccountname = $testaccountname.trim()
$samepackage = $false
$samepackage = $true
$sam = $_.initials.substring(0,1).tolower() + $lastname.tolower()
$sam = (new-object system.security.principal.securityidentifier($sid)).translate([system.security.principal.ntaccount])
$sam=$objuser.properties.item("samaccountname")
$sanstring
$sanstring = "san=dns="+$sslfqdn+"&dns="+$externaldns+"&dns="+$ldap
'sat' {
$sat = $_.sat
$saveas,
$savebutton.add_click({click-savebutton -sender $savebutton -eventarg $_})
$savebutton.autosize = $true
$savebutton.location = new-object -typename system.drawing.point($formspacer, ($myformattreeview.bottom + $formspacer))
$savebutton.name = "savebutton"
$savebutton = new-object -typename system.windows.forms.button
$savebutton.text = "save"
$savebutton.width = ($myformatlabel.width - $formspacer) / 2
$savefilename = join-path $env:temp $filename
$savesavefiledialog.defaultext = "format.ps1xml"
$savesavefiledialog.filter = "powershell format files|*.format.ps1xml|all files|*.*"
$savesavefiledialog.initialdirectory = $($env:userprofile)
$savesavefiledialog = new-object -typename system.windows.forms.savefiledialog
$savesavefiledialog.overwriteprompt = $true
$savesavefiledialog.showhelp = $true
$savesavefiledialog.title = "save powershell format file"
$savewithdocument = $msotrue
$scale = $msoscalefromtopleft
" scanning for classes in $($namespace) ..." |out-file -filepath $fullpath -append
" scanning wmi namespaces on $($computer)" |out-file -filepath $fullpath -append
$sccmserver = "your sccm server"
$scheck="nok"
$scheck="ok"
'schedule'
</schedulebyday>
<schedulebyday>
$schedule.connect($computername)
$schedule = $fielddata
$schedule = new-object -com("schedule.service")
schedule = $schedule
$schema= "dbo"
"schema: "+$item.schema+"<br>"+
" schema master: " + $forest.schemaroleowner
schemamaster = $forest.schemaroleowner
$schemanc = $root.get("schemanamingcontext")
$schemaprefix = ""
$schemaprefix = $o.schema + "."
$schema = $rootdse.get("schemanamingcontext")
$schemata = getdatabaseschemata $sql_server $db;
$schemata = $sql_server.databases[$db_name].schemas;
"schemaversion"
schtasks /create /tn $taskname /tr $taskrun /sc $taskschedule /st $starttime /sd $startdate /ru $taskuser /s $server
$scomagent.hostcomputer | new-maintenancewindow -starttime (get-date) -endtime ([datetime]::now).addminutes(180) -comment "windows updates"
$scomagent.hostcomputer | set-maintenancewindow -endtime ([datetime]::now).addminutes(1) -comment "finished windows updates"
$scompname=$env:computername
$scomserver = "scom server fqdn"
scope = $entry.scope
$scope = get-dhcpserverv4scope -scopeid $scopeid -computername $server1
$scope = get-dhcpserverv4scope -scopeid $scopeid -computername $server2
$scopeid
scope = $item.scope
$scope = $null
$scope = (($subnet.split(",")[0]).split("=")[1]).split("/")[0]
$scope = "subtree"
$screds = $null
$screds = '/u {0} /p {1} ' -f $user, $password
$screensaver = "{0:n2}" -f (compare-datetime -timeofobject $timess -property "creationdate")
$screensaver = "not active"
</script>
$script:adfsaccountname = $credentials.account
$script:adfsaccountname = $null
$script:adfsaccountpassword = $credentials.password
$script:adfsaccountpassword = $null
$script:adfscredentials = new-object system.management.automation.pscredential("$script:adfsdomainname\$script:adfsaccountname", $script:adfsaccountpassword)
$script:adfscredentials = $null
$script:adfsdomainname = $credentials.domain
$script:adfsdomainname = $null
($script:adfsdomainname.tolower() -ne $env:userdnsdomain.tolower())) {
$script:adfssite = $null
$script:adfssite = read-qswebsite
$script:adfssubjectdomainname = $domain
$script:adfssubjectdomainname = $null
$script:adfssubjectname = "adfs.$domain"
$script:adfssubjectname = $null
$script:altnametype = @{
$script:aolcode = get-aolcode $modellayer
$script:aosname = getenvironmentvariable("aosname")
$script:aosnotondeploybox = getenvironmentvariable("aosnotondeploybox")
$script:aosrestarttimeout = [int](set-parameter "aosrestarttimeout" "60" )
$script:applicationdir = $applicationdir.replace('\definition\vcsdef.xml','')
$script:applicationdir = join-path $applicationsourcedir $applicationdir
$script:applicationdir = $localproject.replace($applicationsourcedir,'')
$script:applicationsourcedir = getenvironmentvariable("applicationsourcedir")
$scriptauthor = "thanatos"
$script:ax32 = join-path $clientbindir "ax32.exe"
$script:axaos = (get-itemproperty (get-item ($path)).pspath).aos2
$script:axaosinstance = $axaosinstance
$script:axaosservername = $axaosservername
$script:axbuilddir = $homepath
$script:axcompileall = getenvironmentvariable("compileall")
$script:axlayer = $modellayer
-scriptblock {
-scriptblock {`
$scriptblock = '
$scriptblock += " -computername $computername"
$scriptblock += " -credential `$credentials"
$scriptblock = $executioncontext.invokecommand.newscriptblock($qfe.test)
$scriptblock = {get-psdrive -psprovider filesystem |select-object -property name, @{label='used';expression={$_.used /1gb}}}
$scriptblock = {get-psdrive -psprovider filesystem |where-object {$_.used -gt 0} |select-object -property name, @{label='used';expression={$_.used /1gb}}}
$scriptblock = "get-wmiobject win32_useraccount -filter $filter"
$script:builddefinition = getenvironmentvariable("builddefinition")
$script:builddirectory = getenvironmentvariable("builddirectory")
$script:buildmodelstarted = $false
$script:buildmodelstarted = $true
$script:buildnumber = getenvironmentvariable("buildnumber")
$script:certificatefilename = $script:currentexecutingpath + '\adfsselfsigned.pfx'
$script:cleanonly = getenvironmentvariable("uninstallonly")
$script:cleanupafterbuild = getenvironmentvariable("cleanupafterbuild")
$script:clientbindir = (get-itemproperty (get-item ($path)).pspath).bindir.trimend('\')
$script:clientbindir = [system.environment]::expandenvironmentvariables("$clientbindir")
$script:clientlogdir = (get-itemproperty (get-item ($path)).pspath).logdir.trimend('\')
$script:clientlogdir = [system.environment]::expandenvironmentvariables("$clientlogdir")
$script:clientregistrypath = (set-parameter "clientregistrypath" "hkcu:\software\microsoft\dynamics\6.0\configuration" )
$script:combinetimeout = [int](set-parameter "combinetimeout" "60" )
$script:compilealltimeout = [int](set-parameter "compilealltimeout" "360" )
$script:compilecil = getenvironmentvariable("compilecil")
$script:compileciltimeout = [int](set-parameter "compileciltimeout" "60" )
$script:compileerrors = $false
$script:compileinlayer = $layername
$scriptcontents = @"
$scriptcontents | out-file $scriptpath
$script:count = 0
$script:count = $script:count + 1
$script:csv_import = import-csv $csv_path
$script:currentlogfolder = join-path $droplocation "logs"
$script:currentlogfolder = (join-path $logfolder $date)
$script:currentversion = "1.0.0.0"
$script:currentversion = $line
$script:currentversion = $version
$script:dependencypath = join-path $droplocation 'application'
$script:deploydefinition = getenvironmentvariable("deploydefinition")
$script:documentlibrarytype = [microsoft.sharepoint.spbasetype]::documentlibrary
$script:droplocation = getenvironmentvariable("buildlocation")
$script:droplocation = getenvironmentvariable("droplocation")
$script:droplocation = join-path $droplocation $currentversion
$scriptelement.innertext = $($value.tag)
$scriptelement = $itemelement.appendchild($myxml.createelement("scriptblock"))
$scripter.enumscript($o)
$scripter = new-object ("microsoft.sqlserver.management.smo.scripter") ($server)
$scripter.options.allowsystemobjects = $false
$scripter.options.ansifile = $true
$scripter.options.clusteredindexes = $true
$scripter.options.driallconstraints = $true
$scripter.options.driclustered = $true
$scripter.options.driindexes = $true
$scripter.options.drinonclustered = $true
$scripter.options.enforcescriptingoptions = $true
$scripter.options.filename = $outdir + $schemaprefix + $o.name + ".sql"
$scripter.options.fulltextindexes = $true
$scripter.options.indexes = $true
$scripter.options.nocommandterminator = $false;
$scripter.options.nonclusteredindexes = $true
$scripter.options.permissions = $true
$scripter.options.schemaqualifyforeignkeysreferences = $true
$scripter.options.schemaqualify = $true
$scripter.options.scriptdata = $false;
$scripter.options.scriptschema = $true;
$scripter.options.tofileonly = $true
$script:errors = 0
$script:errors = $script:errors + 1
$script:failedsize+=$tempsize
$script:files++
$script:filesfailed++
$script:filesnumber++
$script:filesnumber++;$script:filessize+=$tempsize
$script:filessize+=$tempsize
$script:foldersfailed++
$script:foldersnumber++
$script:groupmembers.add($dn, @())
$script:groupmembers[$dn] += $member
$script:higestlayer = $layerid
$script:importoverrideparams = @{}
$script:importtimeout = [int](set-parameter "importtimeout" "60" )
$script:labelcomments = getenvironmentvariable("labelcomments")
$script:labelsfolder = (set-parameter "labelsfolder" "label files" )
<script language=vbscript>
$scriptlines = ($script:pgse.currentdocumentwindow.document.lines).count
$script:localproject = getenvironmentvariable("vcsfilepath")
$script:logfile = "$logfile\autolog_$tempfolderpath$tempdate.log"
$script:logfolder = getenvironmentvariable("logfolder")
$script:modellayermap = @{}
$script:modelversion = $modelvssersion
"script monitor service\scriptmon.txt"
$script:msbuildpath = getenvironmentvariable("msbuilddir")
$script:msolconnected = $false
$script:msolconnected = $true
$script:msolcredential = get-credential -erroraction 'silentlycontinue' -message 'microsoft online services administrator'
$script:msolcredential = $null
$scriptname
$scriptname="dhcpfailoverautoconfigsynctool.ps1"
" scriptname is used to register events for this script`r`n"
$scriptname = "myformat.ps1"
$scriptname = $myinvocation.mycommand.tostring()
" `$scriptname = `$myinvocation.mycommand.tostring()`r`n"
$scriptname += ".ps1"
" scriptname : $($scriptname)`r`n"
$script:nocleanonerror = getenvironmentvariable("nocleanonerror")
$script_parent = split-path -parent $myinvocation.mycommand.definition
$scriptpath = "c:\office365-scripts\microsoft-office365-update-msolfederateddomain-$federateddomain"+".ps1"
$scriptpath = $myinvocation.mycommand.path
" `$scriptpath = `$myinvocation.mycommand.path`r`n"
$scriptpath = split-path $myinvocation.mycommand.path
$script:pgse.currentdocumentwindow.document.set_caretline(($oldtag.split(';')[2]))
$script:pgse.currentdocumentwindow.document.set_caretline(($scriptlines))
$script:port = $port
$script = $psise.currentfile.displayname
$script:rdllanguage = 'en-us'
$script:rdllanguage = getenvironmentvariable("rdllanguage")
$script:recursivesubwebs = $false
$script:recursivesubwebs = $true
$script:report = @()
$script:reportobjectcollection = @()
$script:reportobjectcollection += $localreportobjectcollection
$script:reportobjectcollection | select weburl, webtitle, listtitle, listurl, browserfilehandlingcurrent, browserfilehandlingchangeto | export-csv $reportfile -notypeinformation
$script:report += $objtemp
$script:reportonly=$false
$script:reportonly = $true
$script:report | select-object servername, startpath, folder, oldsid, olddomainsid, newsid, newdomainsid, acltype, datetimestamp | export-csv $reportfile -notypeinformation
$script:scriptname = 'build'
$script:scriptname = 'deploy'
$script:serverappldir = (get-itemproperty (get-item ($path)).pspath).directory + "\appl\" +
$script:serverbindir = getenvironmentvariable("serverbindir")
$script:serverbindir = (get-itemproperty (get-item ($path)).pspath).bindir.trimend('\')
$script:serverregistrypath = (set-parameter "serverregistrypath" "hklm:\system\currentcontrolset\services\dynamics server\6.0" )
$script:setupregistrypath = (set-parameter "setupregistrypath" "hklm:\software\microsoft\dynamics\6.0\setup" )
$script:sharepoint2013path = $sharepoint2013path.trimend('\')
$script:signkey = getenvironmentvariable("signkey")
$script:sitecode = "p01"
$script:sqldatabase = getenvironmentvariable("sqldatabase")
$script:sqldatabase = (get-itemproperty (get-item ($path)).pspath).database
$script:sqlserver = getenvironmentvariable("sqlserver")
$script:sqlserver = (get-itemproperty (get-item ($path)).pspath).dbserver
$script:statsobjectarray = $script:statsobjectarray+$tempstatsobj
$script:synctimeout = [int](set-parameter "synctimeout" "60" )
$script:targetbrowserfilehandlingchangeto = invoke-expression '[microsoft.sharepoint.spbrowserfilehandling]::$browserfilehandlingtypenewvalue'
$script:targetbrowserfilehandlingtochange = invoke-expression '[microsoft.sharepoint.spbrowserfilehandling]::$browserfilehandlingtypetochange'
$script:tfsintegration = getenvironmentvariable("tfsintegration")
$script:tfslabel = getenvironmentvariable("tfslabel")
$script:tfslabelprefix = getenvironmentvariable("tfslabelprefix")
$script:tfsurl = getenvironmentvariable("tfsurl")
$script:tfsworkspace = getenvironmentvariable("tfsworkspace")
$script:tfsworkspacename = getenvironmentvariable("tfsworkspacename")
$script:transcriptstarted = $true
$script:unchanged = 0
$script:unchanged = $script:unchanged + 1
$script:updated = 0
$script:updated = $script:updated - 1
$script:updated = $script:updated + 1
$script:users = import-csv "$userdatafilename"
$script:vcsdisabled = $true
$scriptversion = "1.0"
$script:versionfile = join-path $axbuilddir 'version.txt'
$script:version = getenvironmentvariable("version")
$script:w = $tfs.vcs.createworkspace($wname, $tfs.vcs.authenticateduser)
$script:w = $tfs.vcs.getworkspace($applicationsourcedir)
$scrp = new-object ('microsoft.sqlserver.management.smo.scripter') ($db.parent);
$scrp.options = $optns;
$scrp.script($db) | out-null;
$sddlchanged = $false
$sddlchanged = $true
"sddl did not change." | out-file -filepath $logfile -append
$sddlsplit[$i] = $sddlsplit[$i].replace($aclentrysid,$sidmaphash.($aclentrysid))
$sddlsplit = $sddlstring.split("(")
"sddl updated." | out-file -filepath $logfile -append
$sd = $objsharesec.getsecuritydescriptor().descriptor
$search = ""
$search += " and ishidden = 0"
$search += " and ishidden = 1"
$search += " and rebootrequired = 0"
$search += " and type = '$type'"
$searchbase = (get-addomain).distinguishedname,
$searchbase = get-addomain | foreach { $_.distinguishedname }
$search = "cn=" + $sitename + ",cn=sites,cn=configuration,dc=mydomain,dc=net"
$search = $criteria
$searcher=[adsisearcher]$filter
$searcher=[adsisearcher]"(&(objectcategory=computer)(objectclass=computer))"
$searcher = [adsisearcher]"(objectclass=organizationalunit)"
$searcher.filter = $filter
$searcher.filter = "(ncname=$dn)"
$searcher.filter = "(objectcategory=group)"
$searcher.filter = "(&(objectclass=$adfindtype) (cn=$cname))"
$searcher.filter = "(objectsid=$privgroup)"
$searcher.filter = "(serviceprincipalname=*)"
$searcher.findall() |
$searcher = $gc.getdirectorysearcher()
$searcher = new-object directoryservices.directorysearcher([adsi]"")
$searcher = new-object system.directoryservices.directorysearcher
$searcher = new-object system.directoryservices.directorysearcher($root)
$searcher.pagesize = 100
$searcher.pagesize = 200
$searcher.pagesize=$pagesize
$searcher.propertiestoload.add("attributesyntax") > $null
$searcher.propertiestoload.add("distinguishedname") > $null
$searcher.propertiestoload.add("issinglevalued") > $null
$searcher.propertiestoload.add("ldapdisplayname") > $null
$searcher.propertiestoload.add("member") > $null
$searcher.propertiestoload.add("netbiosname") > $null
$searcher.propertiestoload.addrange($properties)
$searcher.propertiestoload.add("systemflags") > $null
$searcher.searchroot = [adsi]$organizationalunit
$searcher.searchroot = $base
$searcher.searchroot=$searchroot
$searcher.searchscope = "subtree"
$searcher = [system.directoryservices.directorysearcher]$root
$searcher = $updates.createupdatesearcher()
$searchfeatureinfo = dism /online /get-featureinfo /featurename:searchengine-client-package
$searchfiltercollection.add($displayccfilter)
$searchfiltercollection.add($displaytofilter)
$searchfiltercollection.add($enddatefilter)
$searchfiltercollection.add($fromfilter)
$searchfiltercollection.add($itemclassfilter)
$searchfiltercollection.add($searchfilter)
$searchfiltercollection.add($searchfilterdn)
$searchfiltercollection.add($searchfilterfc)
$searchfiltercollection.add($startdatefilter)
$searchfiltercollection.add($subjectfilter)
$searchfiltercollection = new-object microsoft.exchange.webservices.data.searchfilter+searchfiltercollection
$searchfiltercollection = new-object microsoft.exchange.webservices.data.searchfilter+searchfiltercollection(`
$searchfilterdn = new-object microsoft.exchange.webservices.data.searchfilter+isequalto(`
$searchfilterfc = new-object microsoft.exchange.webservices.data.searchfilter+isequalto(`
$searchfilter,$folderview)
$searchfilter = new-object microsoft.exchange.webservices.data.searchfilter+containssubstring(`
$searchfilter = new-object microsoft.exchange.webservices.data.searchfilter+exists(`
$searchfilter = new-object microsoft.exchange.webservices.data.searchfilter+isequalto(`
$searchfilter = new-object microsoft.exchange.webservices.data.searchfilter+isgreaterthan(`
$searchfilter = '(objectcategory=foreignsecurityprincipal)',
$search.filter = "(objectcategory=msexchorganizationcontainer)"
$searchfilter = "(&(objectclass=user)(samaccountname= $username))"
$search.filter = "(samaccountname=$usr)"
$searchfolder.delete([microsoft.exchange.webservices.data.deletemode]::harddelete)
$searchfolder.delete([microsoft.exchange.webservices.data.deletemode]::movetodeleteditems)
$searchfolder.displayname = $displayname
$searchfolder = [microsoft.exchange.webservices.data.folder]::bind(`
$searchfolder = new-object microsoft.exchange.webservices.data.searchfolder($exservice)
$searchfolder.save([microsoft.exchange.webservices.data.wellknownfoldername]::searchfolders)
$searchfolder.searchparameters.rootfolderids.add($folderid) | out-null
$searchfolder.searchparameters.searchfilter = $searchfiltercollection
$searchfolder.searchparameters.traversal = [microsoft.exchange.webservices.data.searchfoldertraversal]::$traversal
$search = "isinstalled = 0"
$search = "isinstalled = 1"
search-mailbox -identity $getalias -searchquery "subject:'*'" -deletecontent
search-mailbox -identity $getalias -searchquery "subject:'$getsubject'" -deletecontent
search-mailbox -identity $getalias -searchquery "subject:'$getsubject'" -logonly -targetmailbox "$getmailboxtosendlog" -targetfolder "inbox"
search-mailbox -identity $getalias -searchquery "subject:'*'" -searchdumpsteronly -deletecontent
$search = new-object directoryservices.directorysearcher
$search = new-object directoryservices.directorysearcher([adsi]"")
$search += " or "
$searchresult = $directorysearcher.findall()
$searchresults = $contactmanager.endsearch($contactmanager.beginsearch($customgroupcontact,$null,$null))
$searchresults = $contactmanager.endsearch($contactmanager.beginsearch($dg,$null,$null))
$searchresults = $contactmanager.endsearch($contactmanager.beginsearch($groupcontacts,$null,$null))
$searchresult = $searcher.search("isinstalled=0")
$searchresults = $exservice.findfolders(`
$searchscope = "subtree",
$search.searchroot = $confpart
$search += "($tmp and categoryids contains '$id')"
$search += "($tmp and updateid = '$id')"
$search += "($tmp and updateid = '$id' and revisionnumber = $revisionnumber)"
$search = "xml"
$secdns = $newsearchorder[1]
$secdns=$nic.dnsserversearchorder[1]
$secdns = $null
$secinfo = $gpo.getsecurityinfo() | where { $_.permission -eq "gpoapply" }
"secondarydomainfqdn : $secondarydomainfqdn "
$secondarydomainfqdn = $topologysettings.topologies.secondarydomainfqdn
" secondary domain : $secondarydomain"
" secondarydomain : $secondarydomain "
$secondarydomain = $topologysettings.topologies.secondarydomain
"secondarydomainx500 : $secondarydomainx500 "
$secondlastline = $lastline
$second = $latest.second
-seconds $time[3]}
$secretname.buffer = [system.runtime.interopservices.marshal]::stringtohglobaluni($mykey)
$secretname.length = [uint16]($mykey.length * [system.text.unicodeencoding]::charsize)
$secretname.maximumlength = [uint16](($mykey.length + 1) * [system.text.unicodeencoding]::charsize)
$secretname = new-object lsautil.lsautil+lsa_unicode_string
secret = $value;
$section = $matches[1]
$secureoffice365password = convertto-securestring -asplaintext $office365adminpassword -force
$securepassword = convertto-securestring -asplaintext $defaultpassword -force
$securepassword = convertto-securestring -asplaintext -string $password -force
$securepasswordprompt
securityadmin = [bool]$sqlobject.securityadmin;
security_impersonation_level, out intptr duplicatetokenhandle);
([security.principal.windowsprincipal] [security.principal.windowsidentity]::getcurrent()).isinrole([security.principal.windowsbuiltinrole] "administrator")
"security" {$search = "security"}
"security translation is live and changes will be committed." | out-file -filepath $logfile -append
"security update for microsoft",
$secwins=$nic.winssecondaryserver
"see the output file for results: $file"
"select
select an operation to continue:
select case strshowhide
"select collectionid from sms_collection where name = '$($item.collectionlimit)'"
"select collectionid from sms_collection where name = '$($item.collectionname)' and collectiontype = '$collectiontype'"
"select containernodeid from sms_objectcontainernode where name = '$($item.collectionfolder)' and objecttype = '$objecttype'"
"select containernodeid from sms_objectcontainernode where name = '$($item.meteringfolder)' and objecttype = '$objecttype'"
"select containernodeid from sms_objectcontainernode where name = '$($item.packagefolder)' and objecttype = '$objecttype'"
"select containernodeid from sms_objectcontainernode where name = '$($item.targetfolder)' and objecttype = '$objecttype'"
"select containernodeid from sms_objectcontainernode where objecttype = '$objecttype'"
select displayname,totalitemsize,itemcount,storagelimitstatus |
$selectedbyelement = $viewelement.appendchild($myxml.createelement("viewselectedby"))
$selectedstatus = $host.ui.promptforchoice("installation path","select installation path",$options,1)
$selectedstatus = $null
$selectedsuffix = read-qslistchoice -choices $unusedlist -prompt 'upn suffix to add to windows azure active directory' -title 'upn selection'
$selectedtext = $psise.currentfile.editor.selectedtext,
"$($selectedtext)`r`n"
select -expand inputobject | foreach {add-adgroupmember "$_" $destacc}
select -expand inputobject | foreach {add-adgroupmember "$_" $destinationaccount}
select -expand inputobject | foreach {remove-adgroupmember "$_" $destinationaccount -confirm:$false}
select -expand inputobject | foreach {write-host "$destacc will be added to:"([regex]::split($_,'^cn=|,ou=.+$'))[1]}
"select * from sms_meteredproductrule where productname = '$($item.productname)'"
"select * from sms_program where programname = '$($item.programname)'"
"select * from sms_systemresourcelist where rolename = 'sms distribution point' and nalpath not like '%pxe%'"
select * from sys.dm_os_threads
"select * from win32_groupuser where groupcomponent=`"win32_group.domain='$computername',name='$groupname'`""
| select identity,distinguishedname
$selectionchoice = write-host -foregroundcolor cyan "`n choose from the following cmds: `n" `
$selectionchoice = write-host -foregroundcolor cyan "`n choose from the following ous: `n" `
$selection = read-host "please select item: "
{selectitem}})
select @{n='server name' ;e={"{0:n0}" -f ($cmp)}},
} | select-object computername, type, name, account
| select-object displayname, itemcount, {$_.totalitemsize.value.tomb()}, {$_.totaldeleteditemsize.value.tomb()}, storagelimitstatus `
select-object -expandproperty countersamples).cookedvalue
select-object * -expandproperty sidhistory |
select-object -first 1
} | select-object ipaddress, hostname, ports
} | select-object name, account, secret, @{name="computername";expression={$env:computername}}
} | select-object name, created, type, denylogin, hasaccess, sysadmin, securityadmin, serveradmin, setupadmin, processadmin, diskadmin, dbcreator, ntuser, computername
select-object @{name="oldsid";expression={$_.value}}, `
select-object objectclass, @{name="oldsid";expression={$_.value}}, `
$_ | select-object path,
select-object -property name,
|select-object __server, startname, name, displayname
select-object systemname,deviceid,@{name="size(gb)";expression={"{0:n1}" -f($_.size/1gb)}},`
select-object -unique | foreach-object {
select-object volumename, freespace, deviceid |
$selector = new-object directoryservices.directorysearcher
$selector.searchroot = $root
"select packageid from sms_package where name = '$($item.packagename)'"
$selectproperty.property += 'creationtime'
$selectproperty.property += 'extension'
$selectproperty = @{'property'='fullname','length','psiscontainer'}
$selectproperty.property += 'lastwritetime'
select server,localgroup,groups
select timegenerated,eventid,eventtype,eventtypename,eventcategory,eventcategoryname,sourcename,strings,computername,sid,message
select totalitemsize,itemcount,lastlogontime,lastlogofftime
$semi = $temp.lastindexofany(";") + 1
"send a message immediately w/o waiting for a responce."
send a message or prompt to the interactive user with the ability to get the results.
"send a message waiting 60 seconds for a reponse of [yes / no]."
$sendas = $host.ui.promptforchoice($title, $message, $options, 0)
$sendbehalfs=get-mailbox $mailbox | select-object -expand grantsendonbehalfto | select-object -expand rdn | sort-object unescapedname
sendemailstatus
sendemail $useremail $doclibraryviewurl $item.name
$senderbody=""
$senderbody+="</table></td>"
$senderbody+="<td align=""center"" valign=""top"" width=""33%""><table border=""0"" bordercolor=""
$senderbody+="<td><font color=""
$senderbody+="<td><font color=$font>$($sender.deny)</font></td>"
$senderbody+="<td><font color=$font>$($sender.isinherited)</font></td>"
$senderbody+="</tr>"
$senderbody+="<tr align=""center"" bgcolor=$($bgcolor)>"
$sender.selectednode = $eventarg.node
$senders=get-adpermission $mailbox.identity | ?{($_.extendedrights -like "*send-as*") -and ($_.isinherited -like "false") -and ($_.user -notlike "nt authority\self")} | sort-object name
$senders=get-adpermission $mailbox.identity | ?{($_.extendedrights -like "*send-as*") -and ($_.isinherited -like "false")} | sort-object name
$senders=get-adpermission $mailbox.identity | ?{($_.extendedrights -like "*send-as*") -and ($_.user -notlike "nt authority\self")} | sort-object name
$senders=get-adpermission $mailbox.identity | ?{($_.extendedrights -like "*send-as*")} | sort-object name
sendmail
send-mail $from $to $subject $body
send-mailmessage -from $mailfrom -to $mailto -subject $mailsubject -body $bodytext -smtpserver $mailserver
send-mailmessage -subject $emailsubject -from "postmaster@company.com" -to "postmaster@company.com" -body $emailbody `
send-mailmessage -subject $emailsubject -from "postmaster@company.com" -to "postmaster@company.com" -body $emailbody -bodyashtml `
send-mailmessage -to admin@domain.com -subject "$srv is hung on $computer" -from admin@domain.com -body "the $srv service was found hung" -smtpserver smtp.domain.com
send-mailmessage -to admin@domain.com -subject "$srv is stopped on $computer" -from admin@domain.com -body "the $srv service was found stopped" -smtpserver smtp.domain.com
send-mailmessage -to $emailto -from $emailfrom -subject $emailsubject -body $emailmessage -smtpserver $emailsmtp
send-mailmessage -to $emailto -from $emailfrom -subject $subject -body $body -attachments $attachment -smtpserver $smtpserver
send-mailmessage -to $emailto -subject $subject -body $sessionlist -smtpserver $smtpserver -from $emailfrom -priority $priority
send-mailmessage -to $recipients -from $from -subject $subject -body $body -smtpserver $smtpserver
sendparams,
sendparams.nparams = 0;
sendparams.params = intptr.zero;
$sendquota = "500"
$sendquota "`bmb."
$sendquota = $mailbox.prohibitsendquota.value.tomb()
$sendtime = $sendtime.touniversaltime().tostring()
$sendtime = [system.datetime]::parse($deferredsendtime)
$sendto = "",
$sendto = $endpoint.targetaddress
$sendto = "messaging@contoso.com"
send-tsmessagebox -title "email problem" -message "we are currently having delays and are working on the issue."
sent = "";
$sentcount = (get-mailboxfolderstatistics $mailbox.alias -folderscope sentitems).itemsinfolderandsubfolders
$separator = ","
september, 2011
serialnumber = ''
serialnumber = (get-wmiobject -class win32_bios -computername $computername -credential $credentials).serialnumber
serialnumber = (get-wmiobject -class win32_bios -computername ([string]$workstation.name)).serialnumber
serialnumber = "offline"
$server = "$_"
$server,
$server1,
$server2,
$serveraddress = read-qshostdnsserveraddress
serveradmin = [bool][bool]$sqlobject.serveradmin;
$serverauthenticationoid.initializefromvalue('1.3.6.1.5.5.7.3.1')
$serverauthenticationoid = new-object -comobject 'x509enrollment.cobjectid.1'
server= $computer.toupper()
server = $computer.toupper()
$server = $database.mailboxserver
$server = "dcprod.contoso.msft"
$serverdn = $objserver.properties.item("distinguishedname")
$serverdnshostname=""
$serverdnshostname=$null
$serverdnshostname = $objserver.properties.item("dnshostname")
$server = get-content $dclist
$server += $getdc.name
$servergponame = $raconfig.servergponame.split('\')[1]
$serverlist = "c:\\machine.txt"
$serverlist = get-content "d:\abhishek\serverlist.txt"
$serverlist = @(get-content $inputfile)
$serverlist = @(get-content $listpath)
$server= "localhost"
"server-media-foundation",
$servername,
servername=$computername;
"server name", "description", "active ilo license", "ip", "subnetmask", "ilo name", "gateway ip", "license key", "url" | foreach {
$servername = get-content env:computername
$servername = $mapitem.hostname
$servername = $server.name
servername = $servername
servername=$startpath.substring(2,$startpath.substring(2,$startpath.length-3).indexof("\"));
$serverobject = new-object microsoft.sqlserver.management.smo.server($server)
$serverobject = new-object microsoft.sqlserver.management.smo.server($servername)
$serverobjects = @()
$serverobject.setdefaultinitfields([microsoft.sqlserver.management.smo.availabilitygroup], $true)
$serverobject.setdefaultinitfields([microsoft.sqlserver.management.smo.availabilityreplica], $true)
$serverobject.setdefaultinitfields([microsoft.sqlserver.management.smo.databasereplicastate], $true)
$serverobjects += $serverobject
server offline
$serverpath = $serverregistrypath
$server = read-host "enter sql server"
$server = read-host "exchange server name"
$server = read-host "server name"
server = $recoverypoint.datasource.productionservername
$server = $repl.server
$serverrole = $exch.serverrole
$servers = @()
$servers,
$server = "server"
$serversessions = @()
$serversessions += $usersession
$servers = get-adcomputer -filter {operatingsystem -like "*server*"}
$servers = get-adobjects -adspath $adspath
$servers=get-content c:\temp\serverlist.txt
$servers = get-content ($script_parent + "\servers.txt") -erroraction silentlycontinue
$servers = get-content servers.txt
server = $sqlserver
$servers | %{$timers[$_] = 0}
$serverver = $exch.admindisplayversion
-serviceaccountcredential $script:adfscredentials `
$servicearray = "service1","service2","service3";
$service.autodiscoverurl($emailaddress);
$service.autodiscoverurl($windowsemailaddress)
$servicecn = "cn=services"
$servicecontext = get-spservicecontext($site)
$service.credentials = new-object microsoft.exchange.webservices.data.webcredentials("administrator","type your password here","careexchange.in")
$service.credentials = new-object microsoft.exchange.webservices.data.webcredentials($username,$password);
$service.credentials = new-object microsoft.exchange.webservices.data.webcredentials($username,$password,$domain);
$serviceerr = '<font color="
$servicefilter = "(not startname like '%localsystem') and (not startname like '%localservice') and (not startname like '%networkservice') and (not startname like 'nt authority%')"
$servicefilter = "startname like '$($useraccount.replace('\','\\').replace('*','%'))'"
$service = get-wmiobject -query "select startname from win32_service where name = '$servicename'" -erroraction stop
$servicehealth = test-servicehealth -server $exch | where { $_.requiredservicesrunning -eq $false}
$service.impersonateduserid = new-object microsoft.exchange.webservices.data.impersonateduserid([microsoft.exchange.webservices.data.connectingidtype]::smtpaddress, $emailaddress);
$service.impersonateduserid = new-object microsoft.exchange.webservices.data.impersonateduserid([microsoft.exchange.webservices.data.connectingidtype]::smtpaddress,$mailboxname);
$service.impersonateduserid = $null
$servicename = "default (for $computer) windows update"
$servicename = $key -replace "^_sc_"
$servicename = "microsoft update"
$servicename = $null
$servicename = $objservice.name
$servicename = $serviceid
$servicename = "windows update"
$service = new-object microsoft.exchange.webservices.data.exchangeservice([microsoft.exchange.webservices.data.exchangeversion]::exchange2007_sp1)
$service = new-object microsoft.exchange.webservices.data.exchangeservice([microsoft.exchange.webservices.data.exchangeversion]::exchange2010)
$service = new-object microsoft.exchange.webservices.data.exchangeservice([microsoft.exchange.webservices.data.exchangeversion]::exchange2010_sp1)
$service = $null;
$servicepid = (gwmi win32_service | where { $_.name -eq $srv}).processid
$services | format-list name, startname, pathname, status, displayname, description, status, servicetype, started, state, startmode, systemname, __server | out-file "$folder\servers.txt"
$services = get-wmiobject -query 'select * from win32_service where pathname like "%dynamics.nav%"'
$services = get-wmiobject win32_service -computername $computer -credential $credentials `
$services = get-wmiobject win32_service -filter "state = '$state' and startmode = '$startmode'"
$services = get-wmiobject win32_service -filter "state = '$state' and startmode = '$startmode'" `
$services = get-wmiobject win32_service |select-object __server, startname, name, displayname
$services = $null;
$services = service -comp $comp
$services = "services.msc /computer=$computername"
$service.start()
$service.stop()
$service.url = new-object uri($ewsurl);
$service.usedefaultcredentials = $true;
$service.waitforstatus('running')
$service.waitforstatus('stopped')
$service = "wuauserv"
session = 1,
$sessionid = $messagebox::wtsgetactiveconsolesessionid()
$sessionlist = "active server sessions report - " + $today + "`n`n"
$sessionlist = $sessionlist + "`n`n" + $servername + " logged in by " + $rdpuser + " on " + $sessiontype
-session $mysession `
$session = new-pssession -configurationname microsoft.exchange -connectionuri $msoexchangeurl -credential $cred -authentication basic -allowredirection
"session" {return [psutils.credman+cred_persist]::session}
$sessions = $server.psbase.invoke("sessions")
$sessiontable = new-pssession -authentication 'credssp' -credential $credential -computername (
$sessiontable | %{ $_.values | remove-pssession }
$sessiontype = $queryresult.sessionname
$sessionuid = [system.guid]::newguid();
set
set-acl -aclobject $acl $container
set-acl -aclobject $acl -path ("ad:\" + $ptrobjdn)
set-acl $basedn $acl
set-acl -path $acl.path -aclobject $acl
set-adaptersetting @_
set-adfinegrainedpasswordpolicy -identity $passwordpolicydn -add @{'msds-psoappliesto'=$userdn}
set-adfinegrainedpasswordpolicy -identity $passwordpolicydn -remove @{'msds-psoappliesto'=$userdn}
set-adfsrelyingpartytrust -targetname "<myrelyingpartyname>" -tokenlifetime <mytokenlifetime>
set-adfsrelyingpartytrust -targetname $relyingpartyname -tokenlifetime $tokenlifetime
set-adgroup $group -description $description
set-adobject -identity $distinguishedname -remove @{sidhistory=$sid}
set-adobject -identity $_ -replace $attr
set-adserversettings -viewentireforest $true
set-aduser -instance $user -server $server
set-aduser $newuser.samaccountname -replace @{ipphone=$newuser.ipphone}
set-aduser $newuser.samaccountname -replace @{thumbnailphoto=$newuserphoto}
set-aduserpwd -user $objuser.distinguishedname -pwd $password
set-alias icmd invoke-cmd
set-alias ?? invoke-ternary -option allscope -description "ternary operator like '?' in c
set-alias read read-host
set all = objheader.parentelement.document.all
$setarchivestatus = $args[1]
set-axmodelstore -noinstallmode -database $sqldatabase -server $sqlserver -outvariable out
set-axmodelstore -noinstallmode -database $sqldatabase -server $sqlserver -outvariable out -verbose
set-axmodelstore -noinstallmode -server $sqlserver -database $sqldatabase -outvariable out -verbose
set-axmodelstore -noinstallmode -server $sqlserver -database $sqldatabase -verbose
setcatemplateperms machine "authenticated users"
setcatemplateperms webserver "authenticated users"
set-coexistenceconfiguration -sourcecredentials $sourcecredentials -targetcredentials $targetcredentials
"setcontactpicture"
set-content -path $logonaspx $newlogonaspx
set-content .\sidmap.csv
set-content $zipfilename ("pk" + [char]5 + [char]6 + ("$([char]0)" * 18))
set-content $zipfile ("pk"+[char]5+[char]6+("$([char]0)"*18))
set-csuser -identity $newuser.samaccountname -enterprisevoiceenabled $true -lineuri $lineuri
set-dhcpserverv4optionvalue -computername $id -optionid 6 -value $value -scopeid $scopeid
"set-dnsclientserveraddress -interfacealias $switch -serveraddresses $dnsarray"
set-dnsclientserveraddress -interfacealias $switch -serveraddresses $dnsarray
set-dnsclientserveraddress -interfaceindex $interfaceindex -serveraddresses $dnsserver
$setdomain=
set-executionpolicy unrestricted -force
set-fserealtimescan -bypass $false
set-fserealtimescan -bypass $true
set-gppermissions -guid $deptgpo.id -targetname $targetname -permissionlevel $permissionlevel -targettype $targettype
set-gppermissions -guid $deptgpo.id -targetname $targetname -permissionlevel $permissionlevel -targettype $targettype -whatif
sethandleasinvalid`(`)`;
sethandleasinvalid();
sethandle`(preexistinghandle`)`;
sethandle(preexistinghandle);
set-interfacemetric @_
setip-netsh $nic "local area connection"
setip-ps $nic "ethernet"
setip-ps $nic $switch
set-ipsetting -interfaceindex $adapter.interfaceindex @ipsetting
set-itemproperty 'hklm:\system\currentcontrolset\control\lsa\msv1_0' 'backconnectionhostname' $values
set-itemproperty hklm:\system\currentcontrolset\services\ntds\parameters -name "allow system only change" -value $valuedata | out-null
set-itemproperty -path $copyto -name '(default)' -value $item.'(default)'
set-itemproperty -path $regpath -name $diagnosticsubkey -value $logginglevel
set-location $biztalkregistrypath
set-location c:\z_gpres
set-location $location
set-location "monitoring:\$scomserver"
set-mailboxdatabase $nonoptimaldb.databasename -isexcludedfromprovisioning:$true
set-mailboxdatabase $optimaldb.databasename -isexcludedfromprovisioning:$false
set-mailbox $_ -emailaddresses $loweredlist
set-mailbox $_ -emailaddresses $renamedlist -emailaddresspolicyenabled $false
set-mailbox $_.identity -customattribute7 $newpin -domaincontroller $domaincontroller
set-mailbox $_.identity -customattribute7 $null -domaincontroller $domaincontroller
set-mailbox -issuewarningquota unlimited -prohibitsendquota unlimited -prohibitsendreceivequota unlimited
set-mailbox $sharedmailboxalias -prohibitsendreceivequota 5gb -prohibitsendquota 4.75gb -issuewarningquota 4.5gb
set-mailbox $userentry.emailaddress -customattribute7 $userentry.pin -domaincontroller $domaincontroller
setmixer(mixercontrol, volumecontrol, volumelevel);
set-modellayerorder (join-path $dependencypath 'appl')
set-msoldirsyncenabled -enabledirsync $true
set-netfirewallrule -displaygroup "file and printer sharing" -profile public,private,domain -enabled true
set-netipinterface -automaticmetric disabled -interfacemetric $interfacemetricvalue
"set-netipinterface -interfacealias $switch -dhcp disabled "
set-netipinterface -interfacealias "$switch" -dhcp disabled
set-nextbuildversion
set-nextversion
set objbody = document.body.all
set objcontainer = all(i)
set objexpando = objheader.children.item(1)
$setpass = convertto-securestring -asplaintext $_.password -force
setrebootflag
$set = require-qsregistrykey -keyname $key
$set = require-qsregistryvalue -key 'hklm:\system\currentcontrolset\control\lsa' -name 'disableloopbackcheck' -propertytype 'dword' -value 1
setsectionstate objheader, "hide"
setsectionstate objheader, "show"
setsectionstate objheader, "toggle"
$setspnds = setspn -x
setspn -l $usr | out-file $filename
$setspns = setspn -l $allsrv
setspn -x | out-file $filename
set-spsmailoptin -emailoptinvalue $value -exclusionfile $exclusionfile -whatif $wiff
set-strictmode -version 2
set-strictmode -version 2.0
set-strictmode -version latest
set strsrc = strsrc.parentelement
set strsrc = window.event.srcelement
$setting = @{
"setting background to $bgcolor"
"setting caname: $caname "
"setting dcfqdn: $dcfqdn "
"setting dcip: $dcip "
"setting home pages: $urlstring "
"setting machine cert template permissions"
$setting.node | % {
$setting.node | % { $count = 0 } {
$setting.node | % { $_.name } ) |
$setting.node | ? { $sessiontable[$_.name] } | % { $count = 0 } {
$setting.node | ? { $_.type -eq 'hyperv' -and $hvsessiontable[$_.name] } | % { $count = 0 }{
$setting.node | ? { $_.type -eq 'hyperv' } | % { $_.name } ) |
$setting.node | ? { $_.type -eq 'storage' -and $storagesessiontable[$_.name] } | % { $count = 0 }{
$setting.node | ? { $_.type -eq 'storage' } | % { $_.name }) |
$setting.node | where { $_.type -eq 'hyperv' -and $hvsessiontable[ $_.name ] } | % { $count = 0 } {
" setting reboot flag "
"setting reboot flag: c:\config\boot-config.ps1 using $corpflag"
"setting reboot logon flag: $userid "
" setting rebootneeded flag"
</settings>
<settings>
$settings = @{
setting = $setting.innertext
$setting = & $settingsfile
$setting = & $settingsfile @params
$settings = $extension.extension.childnodes
$settingsfilepath = "c:\scripts$\pso\set-finegrainedpasswordpolicy.xml"
$settingsfile = ".\settings_converged.ps1",
$settingsfile = "..\settings_nonconverged.ps1",
"setting webserver cert template permissions"
setupadmin = [bool]$sqlobject.setupadmin;
$setupregistrypath = get-itemproperty -path 'hklm:software\microsoft\exchangeserver\v14\setup'
setusertile(username, 0, picpath);
set-variable cellheight 15 -option constant -erroraction silentlycontinue
set-variable cellwidth 48 -option constant -erroraction silentlycontinue
set-variable msofalse 0 -option constant -erroraction silentlycontinue
set-variable msofliphorizontal 0 -option constant -erroraction silentlycontinue
set-variable msoflipvertical 1 -option constant -erroraction silentlycontinue
set-variable msoscalefrombottomright 2 -option constant -erroraction silentlycontinue
set-variable msoscalefrommiddle 1 -option constant -erroraction silentlycontinue
set-variable msoscalefromtopleft 0 -option constant -erroraction silentlycontinue
set-variable msoshapedoublewave 104 -option constant -erroraction silentlycontinue
set-variable msotrue 1 -option constant -erroraction silentlycontinue
set-variable -name binarypath -value "$binarypath\" -scope 1
set-variable -name certificatefriendlyname -scope 'script' -option 'readonly' -value 'ad to aad quickstart adfs certificate'
set-variable -name currentexecutingpath -scope 'script' -option 'readonly'-value (split-path $myinvocation.mycommand.definition)
set-variable -name exservice -value $exservice -scope global -force
set-variable -name locked -value $true -scope 1
set-variable -name loggingdirectory -value "$loggingdirectory\" -scope 1
set-variable -name taskenabled -value $false -scope 1
set-variable rgbwhite 16777215 -option constant -erroraction silentlycontinue
setvariationlanguages -languages $sitevariations -url $siteurl
'<setvar name="cmd">delete</setvar></method>';
set-vmdisk -vm $targetvm -path $newdiskpath
set-vmdvddrive -vmname $vm -controllernumber 1 -controllerlocation 0 -path $null
set-vmdvddrive -vmname $vm -path "c:\windows\system32\vmguest.iso"
set-vmhost -vmhost $vmhost -availableforplacement $false | out-null
set-vmhost -vmhost $vmhost -availableforplacement $true | out-null
set-vm -vm $targetvm -name $newvmname -notes "imported $($targetvm) to $($newvmname) on $(get-date)"
'((^\s+)|(^))(((f|f)unction ))[0-9a-za-z-_]+')
$sfileext=".csv"
$sfilepref="audit_"+$scompname+"_"
shadowcopy = $shadowcopyvolume
$shadowcopyvolume = ($volumeidentifier.used * $retentionrange * ($datachange/100)) + (1600/1024)
$shareddrives = @('g','w','u'),
$sharedhostcmd = "& winmgmt -sharedhost"
$sharedmailboxalias = $sharedmailboxusername.substring(0, $intatlocation)
$sharedmailboxdisplayname = read-host "enter a friendly name for the new shared mailbox (e.g. my shared mailbox)"
$sharedmailboxusername = read-host "enter a username for the new shared mailbox (e.g. shared@yourdomain.com)"
$sharepointinstall = $binarypath + "setup.exe /config $pathtoconfigxml"
$shares = get-wmiobject win32_share -computername $computername -filter "caption <> 'remote ipc' and caption <> 'remote admin'"
$shares = gwmi -class win32_share -computername $computer | select -expandproperty name
$shares = invoke-command -session $storagesession -filepath .\helper\createshares.ps1 -argumentlist ( ,$storagenode.cluster.fileshare )
"sha*" { $thislicence = "sharepoint online" }
$sheet1 = $workbook.worksheets.item(1)
$sheet2.cells.item(1,$idx+1) = $columns[$idx].name
$sheet2.cells.item($row,$idx+1) = $_.($columns[$idx].name)
$sheet2 = $workbook.worksheets.item(2)
$sheet = $worksheets.item(1)
$shellapplication = new-object -comobject 'shell.application'
$shellapplication = new-object -com shell.application
$shellapp = new-object -com shell.application
'shell hardware detection',
$shell.namespace($dest).copyhere($item)
$shell = new-object -com shell.application
$sh.name = 'excel and images demo'
$shortregion = "am"
"showinadvancedviewonly" = "true";
showinadvancedviewonly = $userobject.showinadvancedviewonly
$showinherited=$showinherited.ispresent
$showmembers=$showmembers.ispresent
$showmenu
$showmenu = $true
$showrepl = {cmd.exe /c repadmin /showrepl}
showsection obji
$showself=$showself.ispresent
$shtmlcellstyle = "`r`n<td style=`"font-family: verdana, sans-serif; font-size: 10px; color: navy`">"
$shtmlcellstyle = "`r`n<td style=`"font-family: verdana, sans-serif; font-size: 11px; color: navy`">"
$shtmlcellstyle = $shtmlcellstyle.replace("navy", "red")
"$shtmlheadingstyle last full database backup</th></tr>"
"$shtmlheadingstyle message count</th>$shtmlheadingstyle last error</th>$shtmlheadingstyle last retry time</th>" + `
"$shtmlheadingstyle next hop domain</th>$shtmlheadingstyle next hop connector</th>$shtmlheadingstyle status</th>" + `
"$shtmlheadingstyle next retry time</th>$shtmlheadingstyle is valid</th>$shtmlheadingstyle object state</th></tr>"
$shtmlheadingstyle = "`r`n<th style=`"font-family: verdana, sans-serif; font-size: 11px; color: navy`">"
$shtmlheadingstyle = "`r`n<th style=`"font-family: verdana, sans-serif; font-size: 12px; color: navy`">"
"$shtmlheadingstyle sg log path</th>$shtmlheadingstyle lingering log files</th>$shtmlheadingstyle database</th>" + `
$shtmlparagraphstyle = "`r`n<p style=`"font-family: verdana, sans-serif; font-size: 12px; color: navy`">"
$shtmltableheading = "$shtmltablestyle <tr>$shtmlheadingstyle storage group</th>" + `
$shtmltablestyle = "`r`n<table border=`"1`", cellpadding=`"10`", cellspacing=`"0`", table border width=`"75%`">"
shutdown -f -r -t $timeout
$shutdownid = 6006
$shutdownmessage = "this computer will reboot within the next 2 minutes for weekly maintenance, please save all work."
$shutdownscript = "shutdown -r -f -t 120 -m \\$([string]$workstation.name) -c `"$($shutdownmessage)`""
$sh = $wb.sheets.item('sheet1')
$sid
$sid = (get-adcomputer $configmgrserver).sid
sid history powershell module v1.4
sid history powershell toolkit v1.4
sidhistory.psm1
"sidmap.csv - file for use with admt to do security translation"
$sidmaphash = @{}
"$($sidmaphash.($aclentrysid)) new sid" | out-file -filepath $logfile -append
"sid mapping file imported." | out-file -filepath $logfile -append
$sid = new-object system.security.principal.securityidentifier $value, 0
"sidreport.csv - full sid history report for reference in excel"
$sidreport = import-csv $oldreport | select-object *, olddomain, newdomain, olddomainsid, newdomainsid
$sidreport | select-object objectclass, olddomain, newdomain, olddomainsid, newdomainsid, oldsid, newsid, samaccountname, displayname, distinguishedname, datetimestamp | export-csv $newreport -notypeinformation
$sids = $adobject.psbase.properties.item("tokengroups")
sid = $sid
`$sig `= `@`"
$sig = @"
$sig = "<html><p class=msonormal><o:p>&nbsp;</o:p></p><b> regards, <p> amol patil (wins team)</b></p></html>"
$signature = @"
signature=`$windows nt$
si.[index_id]
si.[index_id],
$simplehomepage=@"
$simplehomepage | out-file c:\inetpub\wwwroot\default.asp -encoding ascii -force
$singleitem = $false;
$singleitem = $true;
$singlevalued = $result.properties.item("issinglevalued")[0]
$sipaddr = "sip:"+$userinfo.windowsemailaddress
$sipdomain = "emtestlab.com"
$sisadmin = "& sisadmin /v $($sisdisk)"
$sisdisk += ":"
$sisdisk = "c:"
$sisreport = new-object -typename psobject -property @{
$sisresult = invoke-expression $sisadmin
$site,
$site1dn = "ou=site1,dc=yourdomain,dc=com"
$site1iprange = "\b(?:(?:192)\.)" + "\b(?:(?:168)\.)" + "\b(?:(?:1)\.)" + "\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))"
$site2dn = "ou=site2,dc=yourdomain,dc=com"
$site2iprange = "\b(?:(?:192)\.)" + "\b(?:(?:168)\.)" + "\b(?:(?:2)\.)" + "\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))"
$site3dn = "ou=site3,dc=yourdomain,dc=com"
$site3iprange = "\b(?:(?:192)\.)" + "\b(?:(?:168)\.)" + "\b(?:(?:3)\.)" + "\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))"
$site = $casarray.site
$sitecode = '',
$sitecode = "p01"
$sitecollection,
$sitecollection.feature | enableordisablefeature -scope site -url $siteurl -whatif:$whatif
$sitecollection = get-spsite $args[0]
$sitecollection = get-spsite $url
$sitecollections = get-spsite -webapplication $webapplicationurl -limit all
$sitecollection.site | deploysite -parenturl $subsiteroot -language $sitelanguage -whatif:$whatif
$site.dispose()
site { $enabledfeature = get-spfeature -identity $targetfeature -site $url -erroraction silentlycontinue }
$site.feature | enableordisablefeature -scope web -url $weburl -whatif:$whatif
$site = get-spsite -limit 1
$site = get-spsite $mysiteurl
$site = get-spsite($siteurl)
"site inventory list - generated " + (get-date) | out-file $logfile
$sitelanguage = $sitecollection.language
" " + $site.name
$sitename = "mysite"
$sitename = $sitecollection.name
$sitename = "your sccm site"
$site = new-object microsoft.sharepoint.spsite($sitecollectionurl)
$site = new-object microsoft.sharepoint.spsite($siteurl)
$site = new-object microsoft.sharepoint.spsite($weburl)
$siteobjbl = (get-adobject -identity $search -properties siteobjectbl).siteobjectbl
$siteowneralias = $env:userdomain + "\" + $env:username
$sitepath
$sitepath,
$site.publishingwebproperty | setpublishingwebproperty -url $weburl -whatif:$whatif
$site = read-host "enter new site collection url"
"sites:"
$sites = get-childitem 'iis:\sites'
$sites = ((get-clientaccessarray).site).name
$sites = get-spsite -limit all
$sites = @(get-website | foreach-object { $_.name })
$sitetemplate = $sitecollection.template
-sitetemplate "$sitetemplate" `
siteurl= "";
$siteurl = $($parenturl.trim("/") + "/" + $sitecollection.url.trim("/")).trim("/")
$siteurl = $targetsite.url
$sitevariations = $sitecollection.variations
size = "0";
size = $event307xml.event.userdata.documentprinted.param7
$sizegb = [math]::round($size / 1073741824, 2);
$size = (get-childitem $dir| measure-object -property length -sum)
{$size -gt 1gb}
{$size -gt 1kb}
{$size -gt 1mb}
{$size -gt 1pb}
{$size -gt 1tb}
$sizeinmb = ($folder.extendedproperties[1].value / 1048576).tostring("n2")
$sizeinmb = ($subfolder.extendedproperties[1].value / 1048576).tostring("n2")
"size: "+(($item.dataspaceused+$item.indexspaceused)/1024)+" mb <br>"+
$size = $mailboxstats.totalitemsize.value.tomb()
$sizemax = 100
$sizemb="{0:n2}" -f ($size.sum / 1mb) + "mb"
size = $printjob.properties[6].value
size = $recoverypoint.size /1gb
$size = [system.math]::round($update.maxdownloadsize/1mb,0)
$size = [system.math]::round($update.maxdownloadsize/1mb,2)
$size = $updatesextradatacollection[$update.identity.updateid].size
size = $updatesextradatacollection[$update.identity.updateid].size
$sj++
$skip=$false
$skip = $false
"skipped - already exists or error: " + $_.cn | out-file $log -append
"skipping the web server file copy."
$skip = $true
$sku = @{
$s = "last run failed for url ""$($url)"": $([datetime]::now.tostring('yyyy.dd.mm hh:mm:ss')) : $($_.exception.message)"
$s = "last run successful for url ""$($url)"": $([datetime]::now.tostring('yyyy.dd.mm hh:mm:ss'))"
sleep 1
sleep 1;
sleep 120
sleep 180
sleep 5
sleep 60
-smb `
$smb_dcbqospolicy_priority = 3
$smb_qospolicy_minbandwidth = 100
$smb_qospolicy_priority = 3
$smb_tc_bandwidthpercent = 40
$smb_tc_priority = 3
$smscli = [wmiclass] "\\$strcomputer\root\ccm:sms_client"
$smsnamespaces = @("root\ccm","root\ccm\events","root\ccm\vulnerabilityassessment","root\ccm\invagt","root\ccm\softmgmtagent","root\ccm\locationservices","root\ccm\datatransferservice","root\ccm\messaging","root\ccm\policy","root\ccm\softwaremeteringagent","root\ccm\contenttransfermanager","root\ccm\scheduler","root\cimv2\sms","root\smsdm","root\sms","root\sms\inv_schema","root\sms\site_$($sitecode)")
$smtpclient = new-object system.net.mail.smtpclient $localsmtpserver
$smtpclient = new-object system.net.mail.smtpclient $remotesmtpserver
$smtpclient = new-object system.net.mail.smtpclient $smtpserver
$smtpclient.send($smtpmessage)
$smtp = "localhost"
$smtp = "mail.contoso.com"
$smtpmessage.dispose()
$smtpmessage.isbodyhtml = $true
$smtpmessage = new-object system.net.mail.mailmessage $fromaddress, $localrecipients, $messagesubject, $htmlmessagebody
$smtpmessage = new-object system.net.mail.mailmessage $fromaddress, $recipients, $messagesubject, $messagebody
$smtpmessage = new-object system.net.mail.mailmessage $fromaddress, $remoterecipients, $messagesubject, $htmlmessagebody
$smtp = new-object net.mail.smtpclient -arg $smtpserver
$smtp=new-object net.mail.smtpclient($smtpserver)
$smtp = new-object net.mail.smtpclient($smtpserver)
$smtp= new-object system.net.mail.smtpclient $smtphost
$smtp = new-object system.net.mail.smtpclient($smtphost)
$smtp.send($mail)
$smtp.send($msg)
$smtpserver = "191.168.1.1"
$smtpserver = "applicationmail.munichre.com"
$smtpserver = "mail.contoso.msft"
$smtpserver = "mailserver.company.com"
$smtpserver = "mailserver.domain.com"
$smtpserver = "mailserver.yourdomain.com"
$smtpserver = "myanonymoussmtpserver"
$smtpserver="mysmtpserver"
$smtpserver = "mysmtpserver"
$smtpserver="<relay>.<server>.com"
$smtpserver = "smtp.company.com"
$smtpserver = "smtp server"
$smtpserver = "yourmailserver"
"sndary domainfqdn : $secondarydomainfqdn"
$soccas = $soc.clientaccessserver
$socerror = $soc.error
$socket.client.receivetimeout = 1000
$socket.client.sendtimeout = 2000
$socket.close()
$socket.connect($ip.address, $port)
$socket = new-object system.net.sockets.tcpclient
$soclatency = $soc.latency
$socmbx = $soc.mailboxserver
$socres = $soc.result
$socsc = $soc.scenario
$socurl = $soc.url
soft-inventory $comp | select computername, name, publisher, installdate, estimatedsize, version, wow6432node | sort-object @{expression={$_.installdate};ascending=$true}`
$software = gwmi win32_product -computername $computername -ev systeminfoerror | sort-object -property name
$software = gwmi win32_product -computername $computername | sort-object -property name
software product in which the sample code is embedded; (ii) to include a valid
'software protection';
.solidfiller {border-right: medium none; border-top: medium none; display: block; background: none transparent scroll repeat 0% 0%; margin-bottom: -1px; font: 100%/8px arial; margin-left: 0px; border-left: medium none; color:
$solution,
$solutioncaspolicies = !($solution.caspolicies -eq $false)
$solutiondeployonce = ($solution.deployonce -eq $true)
$solutionforce = ($solution.force -eq $true)
$solutiongacdeployment = !($solution.gacdeployment -eq $false)
$solutionlanguage = $solution.language
$solutionlocal = ($solution.local -eq $true)
$solutionname = $solution.name
$solutionwebapplication = ($solution.webapplication -eq $true)
"something went wrong."
so.[name] as obj_name,
$sortedexclusionlist.add($sortval,$_) | out-null
$sortedexclusionlist = new-object system.collections.sortedlist
$sortedlist.add( 0, 0 )
$sortedlist.add($contactschema.name,$null) | out-null
$sortedlist.add($currentview.title, $currentview.title)
$sortedlist.add( $event.timegenerated, $event.eventid )
($sortedlist.getbyindex($i) -eq $sortedlist.getbyindex($i-1)) )
($sortedlist.getbyindex($i) -eq $startupid) `
($sortedlist.getbyindex($i) -ne $sortedlist.getbyindex($i-1)) )
$sortedlist = new-object system.collections.sortedlist
sort-object -property freespacegb| where {$_.freespacegb -le 1000} | select-object name,freespacegb | convertto-html -head $a |`
sort-object -property overprovisionedds | where {$_.overprovisionedds -match "-"} | select-object name,freespacegb,capacitygb,provisionedspacegb | convertto-html -head $a |`
sort-object totalitemsize -desc |
sort -property name |
$sortval = ip2longrev($_)
so.[type_desc] as obj_desc,
$source = ""
$source = @"
$sourceacc,
$sourceaccount,
$sourcecredentials = get-credential -message 'local active directory administrator'
$sourcedatabase = $_.source.sourcedatabase
$source = "dc=contoso,dc=prod"
-source eventlog `
$sourcefile = "d:\scripts\mbxmoves.csv"
$sourcefile = $filesstored[$_rnd]
$_sourcehash = ""
$_sourcehash = $($(./md5sum $sourcefile) -replace "\*.*","").replace('\','')
$source = $identity
$sourceitemcount=($event.itemid | measure-object).count
$sourceitemcount=($event.sourceitems | measure-object).count
$sourcemember = get-aduser -filter {samaccountname -eq $sourceacc} -property memberof | select memberof
sourcenetworkaddress = [net.ipaddress]$event.properties[2].value
$source = (read-host "enter source directory: ").trim() -replace "(\\|\/)$",""
$source = ' -source ' + $windowsserver2012mediapath
$sourcesysobjpage = $page;
$soutputfile=$soutpath+$sfilepref+$ifrommonth+$ifromyear+$sfileext
$spaces,
"space saved (gb)" = [math]::round(((($sisresult[($sisresult.count)-1]).trimstart("space saved:")).trimend(" kb")/1024 /1024),2)
$spacesbustype = 'sas'
spacesettings = $null
$spacesquorumdiskenabled = $true
spacessetting -friendlyname $clusterstoragepoolname `
spacessetting = if( $spacessettingsenabled )
$spacessettingsenabled = $spaces
spacessettings = $null
$spaddin = @(". 'c:\program files\common files\microsoft shared\web server extensions\14\config\powershell\registration\sharepoint.ps1'; cd '$pwd'")
$spallowedinlinedownloadedmimetypes = $spwebapplication.allowedinlinedownloadedmimetypes
<span class=sectiontitle tabindex=0>active directory information</span>
<span class=sectiontitle tabindex=0>client access server - activesync virtual directory</span>
<span class=sectiontitle tabindex=0>client access server - autodiscover</span>
<span class=sectiontitle tabindex=0>client access server - autodiscover virtual directory</span>
<span class=sectiontitle tabindex=0>client access server - client access array</span>
<span class=sectiontitle tabindex=0>client access server - ecp virtual directory</span>
<span class=sectiontitle tabindex=0>client access server - exchange certificates</span>
<span class=sectiontitle tabindex=0>client access server - oab virtual directory</span>
<span class=sectiontitle tabindex=0>client access server - owa virtual directory</span>
<span class=sectiontitle tabindex=0>client access server - powershell virtual directory</span>
<span class=sectiontitle tabindex=0>client access server - webservices virtual directory</span>
<span class=sectiontitle tabindex=0>database availability group - databases backup status</span>
<span class=sectiontitle tabindex=0>database availability group - database size and availability</span>
<span class=sectiontitle tabindex=0>database availability group - information</span>
<span class=sectiontitle tabindex=0>database availability group - mailbox database copy status</span>
<span class=sectiontitle tabindex=0>database availability group - network</span>
<span class=sectiontitle tabindex=0>database availability group - replication status</span>
<span class=sectiontitle tabindex=0>database availability group - rpcclientaccessserver</span>
<span class=sectiontitle tabindex=0>exchange servers information</span>
<span class=sectiontitle tabindex=0>exchange servers rollup (e2k10 only)</span>
<span class=sectiontitle tabindex=0>exchange servers rollup (e2k7 only)</span>
<span class=sectiontitle tabindex=0>exchange services - all exchange versions</span>
<span class=sectiontitle tabindex=0>hardware informations (bios, system, processor)</span>
<span class=sectiontitle tabindex=0>hub transport - back pressure (e2k10 only)</span>
<span class=sectiontitle tabindex=0>hub transport - connectors settings</span>
<span class=sectiontitle tabindex=0>hub transport - transport config</span>
<span class=sectiontitle tabindex=0>hub transport - transport queue status</span>
<span class=sectiontitle tabindex=0>logical disk & mountpoint report</span>
<span class=sectiontitle tabindex=0>mailbox server - calendar repair assistant</span>
<span class=sectiontitle tabindex=0>mailbox server - databases backup status</span>
<span class=sectiontitle tabindex=0>mailbox server - database size and availability</span>
<span class=sectiontitle tabindex=0>mailbox server - information (out of dag servers)</span>
<span class=sectiontitle tabindex=0>mailbox server - offline address book</span>
<span class=sectiontitle tabindex=0>mailbox server - rpcclientaccessserver (out of dag servers)</span>
<span class=sectiontitle tabindex=0>public folder databases</span>
<span class=sectiontitle tabindex=0>rpcclientaccess information</span>
<span class=sectiontitle tabindex=0>spn - duplicated spns</span>
<span class=sectiontitle tabindex=0>spn - viewing spns</span>
<span class=sectiontitle tabindex=0>tests - test activesyncconnectivity</span>
<span class=sectiontitle tabindex=0>tests - test ecpconnectivity</span>
<span class=sectiontitle tabindex=0>tests - test mailflow</span>
<span class=sectiontitle tabindex=0>tests - test mapiconnectivity - mailbox database</span>
<span class=sectiontitle tabindex=0>tests - test mapiconnectivity - public folder database</span>
<span class=sectiontitle tabindex=0>tests - test outlook connectivity protocol http</span>
<span class=sectiontitle tabindex=0>tests - test outlook webservices</span>
<span class=sectiontitle tabindex=0>tests - test outlookwebservices</span>
<span class=sectiontitle tabindex=0>tests - test owaconnectivity</span>
<span class=sectiontitle tabindex=0>tests - test powershellconnectivity</span>
<span class=sectiontitle tabindex=0>tests - test webservicesconnectivity</span>
$spappsecaccessrules = $spappsec.getaccessrules()
$spappsecadmins = get-spserviceapplicationsecurity -identity $spupsa -admin -verbose:$false
$spappsec = get-spserviceapplicationsecurity -identity $spupsa -verbose:$false
$spattachmentnames = @()
$spattachmentnames += $spattachments[$i]
$spattachments.deletenow($spattachmentname)
$spattachments.recyclenow($spattachmentname)
$spattachments = $splistitem.attachments
$spcurrentuserlogin = $spsite.rootweb.currentuser.loginname
$spdoclib = $spweb.getlist($sitepath)
$speak = new-object -com 'sapi.spvoice'
$speak.speak($q)
$specicalcase = $reports | ?{($_.prerequisite -eq "userprivilege") -and ($_.checkresult -eq "failed")}
$specificcontacts = $customgroupcontact[$contactgroupname].split(";")
"-specified document libraries, if they exist, within this web will be processed..."
$speed = $mailboxsize / $timespan.totalseconds
$speed = $null
$spfielduser = [microsoft.sharepoint.spfielduser]$item.fields.getfield($ownercolumninternalname);
$spfielduservalue = [microsoft.sharepoint.spfielduservalue]$spfielduser.getfieldvalue($item[$ownercolumninternalname].tostring());
$spfilecollection = $spfolder.files
$spfolder = $spdoclib.additem("",[microsoft.sharepoint.spfilesystemobjecttype]::folder, $folder)
$spfolder = $spweb.getfolder($sitepath)
$spfolder.update()
$splatdate = convertfrom-datequery $excludedate
$splist.id +'</setlist><setvar name="id">{0}</setvar>' +
$splistitem.attachments.addnow($attachmentpath,$filebits) | out-null
$splistitemcollection = $splist.getitems($spquery)
$splistitems = $doclib.getitems($spquery)
$splistitem = $splist.getitembyid($itemid)
$splistitem = $splist.items.add()
$splistitem["title"] = $itemvalue
$splistitem.update()
$splist.parentweb.processbatchdata($batchremove) | out-null
$splist = $spweb.getlist($sitepath)
$splist = $spweb.lists[$listname]
$splist = $spweb.lists.trygetlist($listname)
"$split[0] renamed to $replace"
$splitarray = @()
$split = $file.name.split(".jpg")
$splitline = $line.split(" ")
$split=$null
split-path -path $_.fullname} |
$split = $split.split(".")
$split = $urlstring.split(" ")
$split = $zipfile.split("\")[-1]
$sp = $object.operatingsystemservicepack
"spouse" = "spousename";
$sppicitem = $sppiclib.getitems($spquery)
$sppiclib = $sppicweb.getlist($userpicturelibrary)
$sppicsite.dispose()
$sppicsite = new-object microsoft.sharepoint.spsite -argumentlist $userpicturelibrary
$sppicweb.dispose()
$sppicweb = $sppicsite.openweb()
$sp_props =
$sp_props += $udf_props;
$spquery = new-object microsoft.sharepoint.spquery
$spquery.query = ""
$spquery.query = $camlquery
$spquery.rowlimit = 100
$spquery.viewattributes = 'scope="recursive"'
$spsite.dispose()
$spsite = get-spsite -identity $mysitehostlocation -verbose:$false -erroraction:stop
$spsnapin = get-pssnapin -name "microsoft.sharepoint.powershell" -erroraction silentlycontinue
$spsvccontext = get-spservicecontext -site $spsite -verbose:$false
$spupsa = get-spserviceapplication -name $userprofileserviceapplicationname -verbose:$false -erroraction:stop
$spuser.displayname = $newdisnames[$speclogin]
$spusers = get-spuser -web $siteurl -limit all -verbose:$false
$spuser = $spusers | where-object {$_.loginname -eq $speclogin}
$spuser = $spusers | where-object {($_.loginname.split("|")[-1] -eq $speclogin)}
$spuser.update()
$spwebapplication.allowedinlinedownloadedmimetypes.add($mimetypeitem)
$spwebapplication = get-spwebapplication -identity $identity
$spwebapplication = get-spwebapplication -identity $identity -verbose:$false
$spwebapplication.update()
$spwebappprov = get-spauthenticationprovider -webapplication $spweb.site.webapplication -zone "default" -verbose:$false
$spweb.close()
$spweb.dispose()
$spweb = get-spweb -identity $site
$spweb = get-spweb -identity $siteurl -erroraction stop -verbose:$false
$spweb = get-spweb $url
$spwrshellcmd={get-winevent -logname $slog | where {$_.timecreated -ge (get-date([datetime]"$ifrommonth/01/$ifromyear"))} | where {$_.timecreated -lt (get-date([datetime]"$itomonth/01/$itoyear"))} | export-csv $soutputfile}
$spwrshellcmd={get-winevent -path $slogpath| where {$_.timecreated -ge (get-date([datetime]"$ifrommonth/01/$ifromyear"))} | where {$_.timecreated -lt (get-date([datetime]"$itomonth/01/$itoyear"))} | export-csv $soutputfile}
$sqladapter.fill($dataset)
$sqladapter = new-object system.data.sqlclient.sqldataadapter
$sqladapter.selectcommand = $sqlcmd
$sqlcmd.commandtext = $sqlquery
$sqlcmd.connection = $connection
$sqlcmd.connection = $sqlconnection
$sqlcmd = new-object system.data.sqlclient.sqlcommand
$sql.commandtext = $create
$sql.commandtext ="drop table $table"
$sql.commandtext = $insert
$sqlconnection.close()
$sqlconnection.connectionstring = "data source=$sqlserver;initial catalog=$sqldatabase;integrated security = true"
$sqlconnection = new-object system.data.sqlclient.sqlconnection
$sqlcon = new-object system.data.sqlclient.sqlconnection("data source=$sqlsrvr; `
$sqlcon.open()
$sqldatabase = "besmgmt"
$sql.executenonquery() > $null
$sqlinstance = new-object "microsoft.sqlserver.management.smo.server" $sqlinstancename;
/sqlncli:`"$sharepoint2013path\prerequisiteinstallerfiles\sqlncli.msi`" `
$sqlobject = @{}
$sqlobject.add(
$sqlquery =@"
$sqlquery = "select [projectuid] from [dbo].[msp_epmproject_userview] $whereclause "
$sqlquery = "select [proj_uid] from [dbo].[msp_projects] where proj_checkoutby is not null and proj_type in (0,5,6)"
$sqlquery = "select userconfig.displayname as [displayname], userconfig.pin as [pin], userconfig.mailboxsmtpaddr " + `
$sql = "select [doc].[filename], [doc].[document]
"sql server"
$sql_server.databases[$dbname].partitionfunctions | foreach{ $scrp.script($_)} | out-null;
$sql_server.databases[$dbname].partitionschemes | foreach{ $scrp.script($_)} | out-null;
$sql_server.databases[$dbname].userdefineddatatypes | foreach{ $scrp.script($_)} | out-null;
$sql_server = new-object microsoft.sqlserver.management.smo.server $mysrvconn;
$sql_server.setdefaultinitfields([microsoft.sqlserver.management.smo.storedprocedure], "issystemobject");
$sql_server.setdefaultinitfields([microsoft.sqlserver.management.smo.table], "issystemobject");
$sql_server.setdefaultinitfields([microsoft.sqlserver.management.smo.trigger], "issystemobject");
$sql_server.setdefaultinitfields([microsoft.sqlserver.management.smo.view], "issystemobject");
$sqlservers = get-content ".\sql.txt";
$sqlserver = "sqlserver"
$sql = $sqlcon.createcommand()
$sqlsrvr = "localhost\sqlexpress"
$sr.close()
$sreqculture="en-us"
$srkn | add-member -type noteproperty -name groupname -value $distgroup.samaccountname
$srkn | foreach {$membercount[$_.samaccountname] += 1}
$srknvrgl=get-distributiongroupmember $distgroup -resultsize unlimited
$sr = new-object io.streamreader $cs
$srvarray = ('mssqlserver','sqlserveragent','sqlbrowser','msdtsserver100', 'reportserver', 'sqlwriter', 'w3svc', 'iisadmin' )
$srvcra = $mbxcra.name
$srv_dtl =
$srvlist = "";
$srvlist = get-content $args[0];
$srv = $msxserver.name
$srv = new-object "microsoft.sqlserver.management.smo.server" $server
$srv = new-object "microsoft.sqlserver.management.smo.server" $sqlserver;
$srv_page = $filepath + "\index.html";
$srv_path = $sql_server.name+"_"+$sql_server.servicename;
$srv_path = $sql_server.servicename;
$srvsettings = get-adserversettings
$s = ((@($s) + $cl) | select -first 200)
$sslbindings = @(get-childitem 'iis:\sslbindings')
$stalecomputeraccounts = @()
$stalecomputeraccounts += $thiscomputer
$stamp = ((get-date).adddays(-2*7)).tofiletime()
$stamp = (get-date).tofiletime()
$standalonecmd = "& winmgmt -standalonehost"
"standard_b_pilot" = "office 365 (small business preview)"
$standard {$installededition = $descriptionstandard}
"standardpack_faculty" = "office 365 (plan a1) for faculty"
"standardpack" = "office 365 (plan e1)"
"standardpack_student" = "office 365 (plan a1) for students"
$standard = "standard"
"standardwoffpack" = "office 365 (plan e2)"
"standardwoffpackpack_faculty" = "office 365 (plan a2) for faculty"
"standardwoffpackpack_student" = "office 365 (plan a2) for students"
start-aos
start-bitstransfer -source $fileurl -destination $destinationfolder\$destinationfilename -priority high -errorvariable err
start-bitstransfer -source $url -destination $destfolder\$destfilename -displayname "downloading `'$destfilename`' to $destfolder" -priority high -description "from $url..." -errorvariable err
<startboundary>2012-02-02t00:00:00</startboundary>
$startcommand = "-command """ + ($spaddin+";"+$cmdlist) + """"
$startdatefilter = new-object microsoft.exchange.webservices.data.searchfilter+isgreaterthanorequalto(`
$startdate = get-date
$startdate = get-date -format "dd/mm/yyyy"
"$startdate installation" | out-file $logpath -append
$startdate = new-object system.datetime($now.year,$now.month,$now.day,$nexthour,0,0)
$startdate = new-object system.datetime($now.year,$now.month,$now.day,$nexthour,30,0)
$startdate = $now.date
$startdaterangedays = 29
$startdatetime = $(get-date)
$startdelay = get-random -minimum 1 -maximum 30
" started : $starttime" >> $logfile
$start = get-date
$start = (get-date).adddays(-1)
"starting addsdomaincontoller for $domaintocreatefqdn, admin: $adminuser, domaintype:$domaintype"
"starting addsdomain for $domaintocreatefqdn, domain: $domaintocreate, admin: $adminuser, domaintype:$domaintype "
"starting addsforest for $domaintocreatefqdn, admin: $adminuser "
"starting builddhcp server"
"starting build dns server"
$startingdate = (get-date).adddays(-$numberofdays)
start-job -name $jobname `
startmaintenance
start-onlinecoexistencesync
$startpath,
startpath="\\$($computername)\$($share.name)";
"startpath is $startpath" | out-file -filepath $logfile -append
startpath=$startpath;
startprocess
start-process
start-process -filepath "c:\windows\system32\repadmin.exe" -argumentlist "/syncall","/epa"
start-process -filepath $dirsyncfilename -argumentlist @('/quiet') -wait
start-process -filepath $exefilename
start-process -filepath explorer
start-process powershell -argumentlist $startcommand -nonewwindow -wait
start-process "$sharepoint2013path\prerequisiteinstaller.exe" -argumentlist "`
start-scommaintenancemodeforgroup -computergroup $computergroup -endtime $endtime -reason $reason -comment $comment
start-scommaintenancemodeforgroup -computergroup $computergroup -endtime $endtime -reason $reason -comment $comment -eventlog
start-scommaintenancemode -instance $instance -endtime ([system.datetime]::now).addseconds(5).addminutes($endtime) -reason $reason -comment $comment}
start-service adws
start-service -inputobject (get-service -computername $computer -name $srv)
start-service msexchangesearch
start-service msftesql-exchange
start-service wuauserv
start-sleep 1
start-sleep 2
start-sleep 20
start-sleep 3
start-sleep -m 500
start-sleep -milliseconds 30
start-sleep -milliseconds 300
start-sleep -milliseconds 350
start-sleep -milliseconds 500
start-sleep -milliseconds 800
start-sleep -milliseconds $timebetweenpings
start-sleep -milli $timeout
start-sleep -s 10
start-sleep -s 150
start-sleep -s 30
start-sleep -s 60
start-sleep -seconds 1
start-sleep -seconds 10
start-sleep -seconds 15
start-sleep -seconds 2
start-sleep -seconds 3
start-sleep -seconds 60
start-sleep -seconds $signintimeout
start-sleep -s $interval
start-sleep -s $refreshinterval
$startsvc = $pcservice.startservice()
$starttime = get-date;
$starttime = get-date -displayhint time
$starttime = get-date -format "dd/mm/yyyy hh:mm:ss"
$starttime = get-date -format "hh:mm"
$starttime = (get-date -uformat "%y-%m-%d_%i-%m-%s %p" ).tostring()
starttime = $joblastrundate
$starttime = $_."move-mailbox".taskheader.starttime
$starttime | out-file $filename -append
"$starttime [$script] started."
$starttime = $startdate.toshortdatestring()+", "+$startdate.tolongtimestring()
start-transcript
start-transcript (join-path $currentlogfolder 'buildlogs.log')
start-transcript (join-path $currentlogfolder 'deploylogs.log')
start-transcript $logfile -force
start-transcript -path $filename2 -ea 0
start-transcript -path $logfile -append
start-transcript -path $logfile -append -noclobber
$startup = gwmi win32_startupcommand -computername $computername -filter "user='all users'"
$startup = gwmi win32_startupcommand -computername $computername -filter "user='all users'" -ev systeminfoerror
$startupid = 6005
<startwhenavailable>true</startwhenavailable>
$statcheck = get-moverequeststatistics -identity $mailbox
$statdesc = $messages.cnaprogressrecordstatusdescription -f $targetcontact.name
$statdesc = $messages.progressrecordstatusdescription -f $emailmsg.subject,$emailmsgsize
$statdesc = $messages.progressrecordstatusdescription -f $emailmsg.subject,$legacydns.count
$state=$i.st
state = $mystate
$state = $userobject.st
$state = $userobject.stateorprovince
staticaddress = $hypervclusteraddress
staticaddress = $storageclusteraddress
$statsobjectarray = @()
$statsobjectarray | format-table @{expression = {$_.destipaddress};label = "remote ip address";width = 42},
$statsobjectarray = $statsobjectarray+$newstats
$statsobject = new-object psobject -property @{
$status = ""
$status,
$status = 0
status = "0";
$status = 1
$status = "accepted"
-status "copying file: $($item.fullname) size: $itemsize" `
$statusdetail = (get-moverequeststatistics -identity $user.identity | select statusdetail).statusdetail
$status = "expanding $(convertto-relativepath $filepath)..."
$status = get-scsmenumeration incidentstatusenum.$incidentstatus$
status = getstatuscode( $pingstatus.statuscode )
$status = (get-wmiobject -class win32_battery -ea 0).batterystatus
{$_statusline = '1 file received.'}
{$_statusline = "$($filesstored.count) files received." }
$statusname = "hide"
$statusname = "unhide"
-status "$percentcomplete% complete" -currentoperation "current database: $currentdb"
-status "$percentcomplete% complete" -currentoperation "current mailbox: $currentmbdisplay"
$status = "rejected"
status = 'stage 1 networking'
status = 'stage 3 hyperv settings'
$status = $statcheck.status
status = $status
$stbar1.databindings.defaultdatasourceupdatemode = 0
$stbar1.location = $system_drawing_point
$stbar1.name = "stbar1"
$stbar1 = new-object system.windows.forms.statusbar
$stbar1.size = $system_drawing_size
$stbar1.tabindex = 0
$stbar1.text = "admins on " + $computername.toupper() + " (removing...)"
$stbar1.text = "adobe reader executable path updated on " + $computername.toupper()
$stbar1.text = "applications installed on " + $computername.toupper() + " (" + $software.count + ")"
$stbar1.text = "applications on " + $computername.toupper() + " (loading...)"
$stbar1.text = "applications on " + $computername.toupper() + " (refreshing...)"
$stbar1.text = "applications on " + $computername.toupper() + " (uninstalling $($endapp))"
$stbar1.text = "checking into wsus on " + $computername.toupper()
$stbar1.text = "$computername has been renamed to $newpcname"
$stbar1.text = "contacting mcafee epo - " + $computername.toupper()
$stbar1.text = "could not contact " + $computername.toupper()
$stbar1.text = "group policy updated on " + $computername.toupper()
$stbar1.text = "local admins on " + $computername.toupper()
$stbar1.text = "local admins on " + $computername.toupper() + " (loading...)"
$stbar1.text = "local admins on " + $computername.toupper() + " (refreshing...)"
$stbar1.text = "locking workstation - " + $computername.toupper()
$stbar1.text = "mcafee dat update started on " + $computername.toupper()
$stbar1.text = "pinging " + $computername.toupper()
$stbar1.text = "processes on " + $computername.toupper()
$stbar1.text = "processes on " + $computername.toupper() + " (loading...)"
$stbar1.text = "ready"
$stbar1.text = "renaming " + $computername.toupper()
$stbar1.text = "reporting into wsus on " + $computername.toupper()
$stbar1.text = "reset wsus client id completed on " + $computername.toupper()
$stbar1.text = "running reset wsus client id on " + $computername.toupper()
$stbar1.text = "startup items on " + $computername.toupper() + " (loading...)"
$stbar1.text = "startup items on " + $computername.toupper() + " (removing...)"
$stbar1.text = "startup items on " + $computername.toupper() + " (" + $startup.count + ")"
$stbar1.text = "system info for " + $computername.toupper()
$stbar1.text = "system info for " + $computername.toupper() + " (loading...)"
$stbar1.text = "updating adobe reader executable path on " + $computername.toupper()
$stbar1.text = "updating group policy on " + $computername.toupper()
$stbar1.text = "workstation locked - " + $computername.toupper()
$stbar1.text = "wsus detect started on " + $computername.toupper()
$stbar1.text = "wsus reporting started on " + $computername.toupper()
$st.connect("localhost")
$stemp = $shtmlcellstyle.replace("<td", "<td colspan=9"); $stemp = $stemp.replace("navy", "red")
$step = "1"
$step = "10"
$step = "11"
$step = "12"
$step = "13"
$step = "14"
$step = "15"
$step = "16"
$step = "17"
$step = "18"
$step = "19"
$step = "2"
$step = "20"
$step = "21"
$step = "22"
$step = "23"
$step = "24"
$step = "25"
$step = "26"
$step = "27"
$step = "3"
$step = "4"
$step = "5"
$step = "6"
$step = "7"
$step = "8"
$step = "9"
"still failed, issuing warning, but trying one more time, most clients have hardcoded settings, so this should not be a critical failure."
$st = new-object -com("schedule.service")
stop-aos
stop-clusterresource "cluster name"
<stopifgoingonbatteries>true</stopifgoingonbatteries>
stop-job $_job
<stoponidleend>true</stoponidleend>
stop-process -name explorer
stop-process $servicepid
stop-service -force msexchangesearch
stop-service -force msftesql-exchange
stop-service wuauserv
$stopsvc = $pcservice.stopservice()
stop-transcript
stop-transcript -ea 0
$stopwatch = new-object system.diagnostics.stopwatch
$stopwatch.start()
$stopwatch.stop()
storage = @{
$storageclusteraddress = '192.168.2.119/16'
$storageclusterignorenetwork = $null
$storageclustername = 'storage-cluster'
storage : $($cred.persist)
$storagenode = @{
$storagenode = @( $setting.node | ?{ $_.type -eq 'storage' } )[0]
$storageresult = invoke-command -session $storagesessiontable[$_.name] -filepath .\helper\configurestoragecluster.ps1 -argumentlist @(
$storagesession = $storagesessiontable[ $storagenode.name ]
$storagesessiontable = new-pssession -authentication 'credssp' -credential $credential -computername (
$store.add($certificate)
$store.close()
$storedprocs= $db.storedprocedures | where-object { $_.schema -eq $schema -and -not $_.issystemobject }
$storedprocs_path = "$output_path\storedprocedure\"
$store = get-item 'cert:\localmachine\authroot'
$store = get-item 'cert:\localmachine\root'
$store = get-item 'cert:\localmachine\trust'
$store.open('readwrite')
$str = ""
$str1 = $hours.substring(0, -$bias)
$str1 = $hours.substring(0, $len - $bias)
$str2 = $hours.substring(-$bias)
$str2 = $hours.substring($len - $bias)
$straccesstype = $($objpermission.accessrights) -replace ",",";"
$strallowordeny = "allow"
$strallowordeny = "deny"
$strbind = $objregkey.getvalue("name")
$strcomputer = "."
$str += "current - disabled - "
$str += "current - enabled - "
$strdest = new-item $dest -type directory
$str = "disabled - "
$stream.close()
$stream.close();
$stream = $file.openread()
$stream = $null
-streetaddress $_.streetaddress -city $_.l `
$str += "enabled - "
$strfilter = "(&(objectcategory=user)(objectclass=user)(samaccountname="+ $userlogin +"))"
$strfilter = "(&(objectcategory=user)(samaccountname=$username))"
$strfilter="(objectclass=computer)"
$strfilter="(objectclass=server)"
strhideall = "hide all"
strhide = "hide"
"string"
[string[]]
[string]
[string]$accountclass = $_.gettype().invokemember("class", 'getproperty', $null, $_, $null)
[string]$accountdomain = $accountarray[-2]
[string]$accountname = $accountarray[-1]
[string]$acct = $s.startname
[string] $action = "deploy"
[string] $activity = 'expanding files'
string adaptername,
[string]$adminaccount,
[string]$adspath
[string]$adspath,
[string]$adspath = (([adsi]"").distinguishedname)
[string]$adspath = 'dc=soecs,dc=ku,dc=edu'
[string]$aduser
[string] $agname = "myavailabilitygroup",
[string]$arch,
[string] $argumentstring = ''
[string[]]$attachment
[string]$attachmentname,
[string[]]$attachments,
[string]$backuppath = "c:\logs"
[string] $backupshare
[string]$basedn,
[string] $baseou = "all"
[string[]]$bcc,
{[string]$bgcolor=""}
{[string]$bgcolor="bgcolor=""
[string]$body,
{[string]$border=""}
{[string]$border="style=""border: 1px solid red"""}
{[string]$border="style=""border: 2px dashed black"""}
{[string]$border="style=""border: 2px dotted red"""}
$stringbuilder.appendline('| export-csv -path $path -notypeinformation -encoding utf8') | out-null
$stringbuilder.appendline('$findresults.items | select-object -property *, `') | out-null
$stringbuilder.appendline("@{name='$emailaddresskey';expression={`$_.emailaddresses['$emailaddresskey']}}, ``") | out-null
$stringbuilder.appendline("@{name='$imaddresskey';expression={`$_.imaddresses['$imaddresskey']}}, ``") | out-null
$stringbuilder.appendline("@{name='$phonenumberkey';expression={`$_.phonenumbers['$phonenumberkey']}}, ``") | out-null
$stringbuilder.appendline("@{name='$physicaladdresskey';expression={`$_.phonenumbers['$physicaladdresskey']}} ``") | out-null
$stringbuilder.appendline("@{name='$physicaladdresskey';expression={`$_.phonenumbers['$physicaladdresskey']}}, ``") | out-null
$stringbuilder.appendline('| select-object -property * -excludeproperty "emailaddresses","imaddresses","phonenumbers","physicaladdresses" `') | out-null
$stringbuilder = new-object system.text.stringbuilder
[string]$c1,
[string]$c2,
[string]$c3,
[string]$c4,
[string]$c5,
[string]$calendarfolder="\",
[string]$caption,
[string[]]$category="",
[string]$category,
[string[]]$categoryids,
[string[]]$cc,
[string[]] $choices,
[string]$cloud,
[string]$cmd = "cmd /c c:\windows\system32\netstat.exe -anb >> c:\netstat.txt",
[string]$comment,
[string]$commitmessage
[string]$computer,
[string[]]$computergroup,
[string]$computer = (& hostname),
[string[]]$computername
[string[]]$computername = @(),
[string]$computername
[string]$computername,
)][string[]]$computername = $env:computername
[string[]] $computername=$env:computername
[string[]] $computername=$env:computername,
[string[]] $computername = @($env:computername),
[string[]]$computername = $env:computername
[string] $computername = $env:computername,
[string]$computername = $env:computername,
[string]$computername = (& hostname),
[string]$computername = (hostname),
[string[]]$computername = "localhost",
[string]$configmgrserver = $env:computername
[string]$connectionid = 'wireless'
[string]$contactfolder="\",
[string]$corpfqdn = $domainfqdn
[string]$corpfqdn = $machine.domaintojoinfqdn
[string] $credstr = @"
[string]$criteria,
[string] $csv = "",
[string]$csvfile,
[string]$csvfilepath,
[string]$csvfilepath = $configxml.parameters.filepaths.csv
[string]$csvpath
[string] $database = "adventureworks";
[string[]] $databaselist,
[string]$databasename
[string]$dc
[string]$dc,
[string]$dclist,
[string]$defaultpassword = $topologysettings.config.defaultpassword
[string]$desc1,
[string]$desc2,
[string]$desc3,
[string]$desc4,
[string]$desc5,
[string] $description,
[string]$description
[string]$description,
[string]$description = "sample description for website."
[string]$diagnosticsubkey,
[string]$displaycc,
[string]$displayexcludeddates = for ($j=0;$j -lt $excludeddates.count;$j++) {
[string] $displayname,
[string]$displayname
[string]$displayname,
[string]$displayname=(get-date)
[string]$displayto,
[string[]]$distributiongroup,
[string]$dn += "dc=" + $fqdnarray[$x] + $separator
[string]$dns1 = "8.8.8.8",
[string]$dns2 = "8.8.4.4",
[string]$dnsserverfind,
[string]$dnsserverreplace)
[string] $documenttitle
[string]$domain
[string]$domaindn += "dc=" + $colsplit[$i] + $separator
[string]$domaingroup,
[string] $domainname = [net.networkinformation.ipglobalproperties]::getipglobalproperties().domainname
[string]$domain=$(read-host "please specify the domain to join"),
[string]$domainx500 = $topologysettings.topologies.domainx500
[string] $e1 = $objitems.givenname
[string] $e2 = $objitems.sn
[string] $e3 = $objitems.telephonenumber
[string] $e4 = $objitems.mail
[string]$endaddress,
[string] $endpointname = "alwayson_endpoint"
[string] $endpointport = 5022,
[string]$errormessage = $null
[string]$error = "red"
[string]$errorslist = 'errors',
[string]$exclude = 'cd',
[string[]]$excludedate,
[string[]]$excludefileextension,
[string[]]$excludepath,
[string]$exportfolder
[string[]] $expression,
[string] $extension)
[string]$extension = "txt",
[string]$failedsize = $failedsize.tostring()
[string] $featurename
[string] $file,
[string]$fileage,
[string] $filename
[string] $filename,
[string]$filename
[string]$filename,
[string]$filepath,
[string]$filessize = $filessize.tostring()
[string]$filesystemtype
[string]$filetype = "*.*"
[string]$filter = "localsystem|nt authority\localservice|nt authority\networkservice"
)][string]$filter='(&(objectcategory=person)(objectclass=user))',
[string] $folder = "d:\export\";
[string]$folder = get-location
[string]$foldername
[string]$foldername="inbox",
[string]$folderpath,
[string]$folder = $pwd,
[string]$fqdn = [system.directoryservices.activedirectory.domain]::getcurrentdomain()
[string]$from,
[string]$fullname,
[string] $g1 = $objitems1.distinguishedname
[string]$gateway ="17.24.16.254" ,
[string] $generictype,
[string]$group
[string] $groupname
[string]$groupname
[string]$groupname,
[string]$groupname="administrators"
[string]$groupname = "administrators"
[string]$hardwareprofilename,
[string]$hive = "localmachine";
[string]$hostcomputername, [string]$childpath, [string]$parentpath
[string]$hostip = ([system.net.dns]::gethostbyname($computername)).addresslist
[string]$htmlfilepath = $configxml.parameters.filepaths.html
[string]$htmlsignature,
[string[]]$identity,
[string]$identity
[string]$identity="\",
[string]$identity,
[string]$imagepath,
[string[]]$includefileextension,
[string[]]$includepath,
[string]$info = "white"
[string] $inifile
"-" * $stringin.length
[string[]]$inlineattachments,
[string]$inputfile,
[string] $inputfile = "deployment.xml",
[string]$inputscript,
string inputstr = enc.getstring( input, bomsize, input.length - bomsize );
[string]$ip ,
[string]::isnullorempty($pass))
[string]::join("`r`n",(get-content $logfile)) | out-file $logfile
[string]$kb,
[string[]]$kbarticleid,
[string] $key,
[string] $keyname
[string]$key = "software\\microsoft\\mssqlserver\\client\\connectto";
[string]$languages = "",
[string]$ldapfilter = '(name=*)',
$stringlist.add($string)
[string]$listname,
$stringlist = new-object microsoft.exchange.webservices.data.stringlist
[string]$listpath,
[string[]] $literalpath,
[string]$localgroup,
[string]$localgroup="administrators",
[string]$localgroup = "administrators",
[string]$localuser
[string]$location,
[string]$logfile,
[string]$logfile = "c:\temp\log.txt"
[string]$logpath
[string]$logpath = "c:\windows\debug\netlogon.log"
[string]$logpath = "c:\windows\system32\winevt\logs",
[string]$mask ="255.255.255.0",
[string] $message
[string]$message,
[string[]]$mimetype
[string] $msg = "error reading credentials for target '$target' from '$env:username' credentials store"
[string] $msg = "failed to delete credentials store for target '$target'"
[string] $msg = "failed to enumerate credentials store for user '$env:username'"
[string] $msg = "failed to write to credentials store for target '$target' using '$username', '$password', '$comment'"
[string] $msg = "target field is longer ($($target.length)) than allowed (max 337 characters)"
[string]$myerrormsg,
[string]$mysitehostlocation,
[string]$mysuccessmsg
[string[]] $name
[string[]] $name,
[string] $name
[string] $name,
[string]$name,
[string]$name = "mylocalsqlserveraliasname";
[string]$newname,
[string]$newpassword
[string]$newvmname
[string] $nodescription,
[string[]]$notcategory="",
[string[]]$notkbarticleid,
[string]$nottitle,
[string]$office365adminpassword
[string]$office365adminusername,
[string] $office365password
[string] $office365password,
[string] $office365username,
[string]$os,
[string] $ou = "",
[string] $outfile
[string]$output="";
[string]$owneremail,
[string]$ownerlogin,
)][string]$pagesize=500
[string]$parameter
[string] $parenturl,
[string]$password
[string]$password,
string password = "password";
[string]$passwordpolicydn = $configxml.parameters.activedirectoryobjects.passwordpolicydn
[string] $path
[string]$path
[string]$path,
[string]$path = "c:\test",
[string] $pathinfo = "relative",
[string]$picturenameformat="displayname",
string pmessage,
[string]$policytype
[string]$priority="normal",
[string]$profiletype="currentusercurrenthost"
[string] $program,
[string] $prompt
[string] $prompt,
)][string[]]$properties=@('samaccountname','sn','l','description'),
[string] $propertytype = 'string'
[string]$propset = "svn:mime-type 'text/plain'",
[string] $pscredmanutils = @"
string ptitle,
[string] $purpose
[string]$pwd
[string]$qfefilename,
[string]$qfeid,
[string]$qfeserver = $global:qfeserver
[string]$qfeserver = $global:qfeserver,
$string = read-host "please enter user password"
[string]$reason,
[string]$regexpattern,
[string]$registerdns = "true"
[string[]]$registrykey
[string[]]$registrykey = (split-path (get-childitem hklm:\security\policy\secrets | select -expandproperty name) -leaf)
[string]$regpath = 'hklm:\system\currentcontrolset\services\ntds\diagnostics\'
[string]$regpath = 'hklm:\system\currentcontrolset\services\ntds\diagnostics\',
[string]$repourl,
string requestidstr
string requestidstr);
[string]$result = $writer.tostring();
[string]$return = invoke-expression $lookup
[string]$return = invoke-expression $lookup |out-null
[string]$retval = remove-localuser -computername $workstation.properties.name -username $localuser
[string]$retval = set-pass -computername $thisworkstation -username $adminaccount -password $newpassword
[string]$rooturl
[string]$rooturl,
[string]$rulename,
[string]$ruleremoteaddresses,
[string]$rundetails="-"
[string]$rundetails=""
[string]$rundetails+="<br><br>"+ $job.enumhistory().rows[1].message
[string]$rundetails=""+ $job.enumhistory().rows[0].message
$strings = $contact.$contactpropertyname.split(";")
[string]$searchfilter = "(objectcategory=computer)"
[string]$searchfilter = "(objectcategory=computer)",
[string]$searchpath = $pwd,
)][string]$searchroot,
[string]$secondarydomainx500 = $topologysettings.topologies.secondarydomainx500
[string]$server
[string[]] $serverlist,
[string] $servername,
[string] $servername = $(throw 'servername is required')
)][string[]]$servers=$env:computername,
[string] $server = ".\sqlexpress";
[string]$serviceid,
[string]$service = "sql"
[string]$sitepath
[string]$sitetemplate = "sts
[string]$siteurl,
[string]$sname = $s.name
[string]$startaddress,
[string]$startdate,
[string]$startmode = "auto"
[string]$starttime,
[string]$state = "running",
[string] $strfile = "d:\scripts\totalemailsweek.csv"
[string]$subject
[string]$subject,
[string[]] $t
[string]$targetfolder
[string] $targetname,
[string]$targetoudn = $configxml.parameters.activedirectoryobjects.targetoudn
[string]$targetversion
[string]$targetvm,
[string]$taskname,
[string]$taskrun,
[string]$taskschedule,
[string]$taskuser,
[string]$templatename,
[string]$temprelativeurl = $mysubweb.url
[string]$text,
[string]$textsignature,
[string]$thisworkstation = $workstation.name
[string]$thisworkstation = $workstation.properties.name
[string]$timezone
[string]$timezonestandardname,
[string] $title,
[string]$title,
[string]$title = "new web",
[string[]]$to,
[string]$tokenslist = 'tokens'
[string]$type="",
[string]$type = "",
[string[]]$updateid,
[string] $url
[string] $url,
[string]$url,
[string]$url = $(throw "no url provided")
[string]$usage = "usage: find-webpart.ps1 -scope webapp|site -site <site url> -webpart <webpart name> -logfile <file name>"
[string]$usage = "usage: set-rulebasedgroups.ps1 -logfile <file name>"
[string]$usage = "usage: sync-userprofilepicture-with-ad-attribute"
[string]$usbdriveletter,
[string]$user,
[string] $useraccount='*',
[string]$userdomain
[string] $useridfile
[string]$username,
[string]$userpicturelibrary,
[string]$userpicture = $myuserad.properties.extensionattribute13
[string]$userprofilepictureurl = $userprofile[[microsoft.office.server.userprofiles.propertyconstants]::pictureurl].value
[string]$userprofileserviceapplicationname,
[string]$usr = $usr + $acct[$counter]
[string] $value,
[string]$value = "dbmssocn,targetsqlservername,1433";
[string]$value = [system.runtime.interopservices.marshal]::ptrtostringauto($lussecretdata.buffer)
[string]$version,
[string]$vmhost,
[string]$vmmserver = "localhost",
[string[]]$vmname,
[string]$warning = "yellow"
[string] $webapplication,
[string]$wellknownfoldername="inbox",
[string]$whatifstring = $configxml.parameters.runoptions.whatif.toupper()
[string]$wmimode,
[string]$workingpath = (get-location).path
[string]$workingpath = (get-location).path,
[string]$writetoconsolestring = $configxml.parameters.runoptions.writetoconsole.toupper()
[string] $yesdescription,
$strinherited = $objpermission.isinherited
$stripaddress = read-host "enter ip address"
$stritemcount = $objmailboxstats.itemcount
$stritem = [string]$item.name
$strlastlogontime = "never logged in"
$strlastlogontime = $objusermailbox.lastlogontime
$strmailboxdetails = ('"'+$struserprincipalname+'","'+$stritemcount+'","'+$strmailboxsize+'","'+$strmailboxissuewarningquota+'","'+$strmailboxprohibitsendquota+'","'+$strmailboxprohibitsendreceivequota+'"')
$strmailboxissuewarningquota = "{0:n2}" -f ($itemsizestring.substring(($itemsizestring.indexof("(") + 1),($itemsizestring.indexof(" bytes") - ($itemsizestring.indexof("(") + 1))).replace(",","")/1024/1024)
$str += $mailbox.name + "`n"
$strmailboxprohibitsendquota = "{0:n2}" -f ($itemsizestring.substring(($itemsizestring.indexof("(") + 1),($itemsizestring.indexof(" bytes") - ($itemsizestring.indexof("(") + 1))).replace(",","")/1024/1024)
$strmailboxprohibitsendreceivequota = "{0:n2}" -f ($itemsizestring.substring(($itemsizestring.indexof("(") + 1),($itemsizestring.indexof(" bytes") - ($itemsizestring.indexof("(") + 1))).replace(",","")/1024/1024)
$strmailboxsize = "{0:n2}" -f ($itemsizestring.substring(($itemsizestring.indexof("(") + 1),($itemsizestring.indexof(" bytes") - ($itemsizestring.indexof("(") + 1))).replace(",","")/1024/1024)
$strobjecttype = $objrecipient.recipienttype
$strobjecttype = "other"
strshowall = "show all"
strshowhide = 0
strshowhide = 1
strshow = "show"
$strsid = $objuser.translate([system.security.principal.securityidentifier])
[structlayout(layoutkind.sequential)]
`[structlayout`(layoutkind.sequential, charset `= charset.unicode`)`]
`[structlayout`(layoutkind.sequential, charset `= charset.unicode)`]
[structlayout(layoutkind.sequential, charset=charset.unicode)]
[structlayout(layoutkind.sequential, charset = charset.unicode)]
[structlayout(layoutkind.sequential, pack = 1)]
$structoffset=0
$structoffset = $fileoffset
$structoffset=$structoffset +2
$structoffset=$structoffset +4
$structoffset=$structoffset +8
$structsz = 48
$struserdetails = "$struserprincipalname,$strlastlogontime"
$struserdetails = "$struserprincipalname,$struserwithaccess,$strobjecttype,$straccesstype,$strinherited,$strallowordeny"
$struserprincipalname = $objmailbox.userprincipalname
$struserprincipalname = $objuser.userprincipalname
$struserwithaccess = $($objpermission.user)
$struserwithaccess = $($objrecipient.displayname) + " (" + $($objrecipient.primarysmtpaddress) + ")"
stsadm -o addpath -url $rooturl + "/" + $sitepath -type wildcardinclusion
stsadm -o createsiteinnewdb `
stsadm -o enumsites -url $rooturl
* studio session. although it will work from powershell, it's not very useful.
</style>
</style>'
</style>";
--></style>"
$style = "<style>"
$style = $style + "body{background-color:white;font-family:arial;font-size:10pt;}"
$style = "<style>body{font-size:11px;font-family:verdana,sans-serif;color:navy;font-weight:normal;}" + `
$style = $style + "</style>"
$style = $style + "table{border-width: 1px; border-style: solid; border-color: black; border-collapse: collapse;}"
$style = $style + "td{border-width: 1px; padding: 5px; border-style: solid; border-color: black; background-color: white;}"
$style = $style + "th{border-width: 1px; padding: 2px; border-style: solid; border-color: black; background-color:
<style type='text/css'>
<style type="text/css">
<style type=text/css>
<style type=""text/css"">body{font: .8em ""lucida grande"", tahoma, arial, helvetica, sans-serif;}
$subbranch="software\\microsoft\\windows\\currentversion\\uninstall"
$subbranch="system\\currentcontrolset\\enum"
$subfolders = get-childitem $startpath -recurse | where-object {$_.psiscontainer -eq $true}
$subfolders = $rootfolder.findfolders($folderview)
$subgroup = get-group $domuser -erroraction silentlycontinue
sub hidesection(objheader) : setsectionstate objheader, "hide" : end sub
$subject = "",
$subject = "active server sessions report - " + $today
$subject = "automated message: mbx move status $((get-date).toshortdatestring())"
$subject = "big mailbox report for $(get-date -f 'yyyy/mm/dd')"
subject = "cn=$fqdn"
subject = "cn=$sslfqdn"
$subject = "company $region terminated user cleanup script complete"
$subjectfilter = new-object microsoft.exchange.webservices.data.searchfilter+containssubstring(`
subject = $(if($properties.subject) { $properties.subject } else { $null });
$subject = 'inactive incident for ' + $modifiedbefore + ' day(s): ' + $incident.id + ' ' + $incident.title
$subject = "report monitor - $edate"
$subject = "your network password will expire in $daystoexpiry day(s) please change your password."
$subject="your password will expire in $timeleft days"
$subkey.deletevalue($name, $true);
$subkey = $key + $sub
$subkey = $null;
{ $subkey = $reg.opensubkey($key, $false); }
{ $subkey = $reg.opensubkey($key, $true); }
$subkey.setvalue($name, $value);
$subkeys = $key.getsubkeynames()
$subkeys=$registrykey.getsubkeynames()
$subkey = $uninstallkeys.opensubkey($_,$false);
$subkeywow6432node = $null;
$subkeywow6432node = $uninstallkeyswow6432node.opensubkey($_,$false);
$submembers = get-groupmembersrecursive -group $subgroup
"submit request for $fqdn"
"submit request for $sslfqdn - dc: $dcfqdn - ca: $caname "
$subnet = '10.133.3',
"subnet: " + $ip.ipsubnet[0]
$subnetmask = $nic.ipsubnet[0]
$subnetmaskreturn = "$classaaddress.$classbaddress.$classcaddress.$classdaddress"
$subnetmaskreturn = $subnetmask
subone($num) | dividenum($num)
$suborg = $customercode.substring(3)
$suborg = $null
$subpath = join-path $serverpath $item.pschildname
$subregkey = [microsoft.win32.registrykey]::openremotebasekey($type, $srv)
$subregkey = $subregkey.opensubkey($subkey)
$subscope = $oct1 + "." + $oct2 + "." + $oct + ".0"
sub setsectionstate(objheader, strstate)
sub showsection(objheader) : setsectionstate objheader, "show": end sub
$subsiteroot = $siteurl
$subsiteroot = $siteurl + "/" + $sitevariations.split(',')[0]
sub togglesection(objheader)
success = $?
`$success `= `[advapi32.util`]`:`:credread`(`$targetname,1,0,`[ref`] `$ncredptr`)
$successcount = @()
$successcount = 0;
$successcount += 1;
$successcount += $thiscode
success = $error[0].exception.innerexception.message.tostring().trim()
$success = $false
$success = $false;
successfully wrote or updated credentials as:
$successmessage = ("dsadd succeeded:"+$userdn -replace " ","").trim().toupper()
$successmessage += "$($message)`n"
$success = $principalcontext.validatecredentials($username, $password)
success = $retval.returnvalue
success = $success;
$success = $true
$summary+="send as permission explicity configured on $($s) of these mailboxes. full access permission explicity configured on $($f) of these mailboxes. send on behalf explicity configured on $($b) of these mailboxes and $($n) mailbox has inherited permissions only.<td></table><br>"
$summary="<table style=""font-size:8pt;font-family:arial,sans-serif""><td bgcolor=""
'sun' {
$sun = $_.sun
" suporting functions for topology "
. $supportingfunctionspath
$supportingfunctionspath = "c:\config\topologies\" + $supportingfunctions
$supportingfunctions = $topologysettings.topologies.supportingfunctions
supportsshouldprocess=$true,
[supportswildcards()]
$supporturl = "n/a"
supporturl = $supporturl
$supporturl = $update.supporturl
$supporturl = "$($update.supporturl)/kb/$($update.kbarticleids)"
$supporturl = "$($update.supporturl)kb/$($update.kbarticleids)"
$supporturl = "$($update.supporturl.substring(0,$update.supporturl.length-9))kb/$($update.kbarticleids)?ln=en-us"
-surname $lastname
"surname: $($prop.sn) user: $($prop.cn)"
-surname $_.sn -displayname $_.displayname -office $_.officename `
$suspect = $services |where-object {$_.startname -notmatch $filter}
suspendcheck
$suspendcomment = "suspended by synchronous move script"
$suspendedmoves = get-moverequest -batchname $batchname -suspend $true
suspend-moverequest -identity $mailbox -confirm:$false -suspendcomment $suspendcomment
"&suspend = pause the current pipeline and return to the command prompt. type 'exit' to resume the pipeline." }
$svc = get-wmiobject -class win32_service -filter "name='winrm'"
$svcpsproxy = new-webserviceproxy -uri "$projectserverurl/_vti_bin/psi/archive.asmx?wsdl" -usedefaultcredential
$svcpsproxy = new-webserviceproxy -uri "$projectserverurl/_vti_bin/psi/project.asmx?wsdl" -usedefaultcredential
$svcrun = "all services are running"
sv/eour/xkfk/8shsv/eour/xkfk/8shsv/eour/xkfk/8shsv/eour/xkfk/8shsv/eour/xkfk/8shsv/otxh/wr+9/4pxo/+jceaqaaaaaaaaaaaaaaaaaaaaaivqnrcncz7/ymxe/8cbn/+xfad/sxwa/7f8
svn
$svncommand = "& svn add `"$($filepath)`""
$svncommand = "svn checkout $($repourl) `"$($checkoutpath)`" --username $($username)"
$svncommand = "& svn commit `"$($filepath)`" -m `"$($commitmessage)`""
$svncommand = "svn delete `"$($filepath)`" --force"
$svncommand = "svn info `"$($workingpath)`""
$svncommand = "svn propset $($propset) `"$($filepath)`""
$svncommand = "svn update `"$($workingpath)`""
$svr = $db.servername
$sw.close()
[switch]
[switch]$acceptall,
switch ($action)
[switch]$addcategoryprefix,
[switch] $all
[switch]$all
[switch]$all,
[switch]$alldayevent,
[switch]$allowoverwrite,
[switch]$allproperty
[switch]$autoclosexl
[switch]$autolog,
[switch]$autoreboot,
[switch]$autoselectonly,
switch($category)
switch ($choice) {
[switch]$cleanfolders,
switch($cmd) {
[switch]$confirm = $false
switch ($contactgroup.grouptype) {
switch ($controltype)
[switch]$createtime,
switch($credpersist)
switch($credtype)
[switch]$debug,
[switch]$debuger
[switch]$debuger,
[switch] $debuginfo
[switch]$domain,
switch ($domaintype)
[switch] $doubledashedline
[switch]$download,
[switch]$downloadonly,
switch ($entry.day)
switch ($entry.type) {
$switches = "-folderpath`r`n`t`t`t$folderpath`r`n`t`t-fileage $fileage`r`n`t`t-logfile`r`n`t`t`t$logfile"
$switches += ($_.item1,$_.item2,$_.item3 -join ',').trim(',')
$switches+= "`r`n`t`t-excludedate"
$switches += "`r`n`t`t-excludefileextension"
$switches += "`r`n`t`t-excludepath"
$switches += "`r`n`t`t-includefileextension"
$switches += "`r`n`t`t-includepath"
$switches += "`r`n`t`t`t"
" switches : $switches" >> $logfile
switch ($eventarg.node.text)
[switch]$eventlog
[switch] $every,
switch -exact ($downloadresult.resultcode)
switch -exact ($installresult.resultcode)
[switch]$exactlymatch
[switch]$exactmatch,
switch -exact ($type)
[switch]$expand
[switch]$export
switch ($fieldname)
switch ($fileext) {
switch ($filepath.substring($filepath.length - 3,3)) {
switch ($findresults.totalcount) {
$switch= $findswitch.name
[switch]$force
[switch]$force)
[switch] $formatnumbers,
[switch]$get,
switch ($gpocomputercontext)
switch ($groupobject.type) {
switch ($groupproperty.name) {
switch ($groupscope) {
[switch]$hasanniversary,
[switch]$hasbirthday,
[switch]$help
[switch] $hideerrors,
[switch]$hidestatus = $true,
$switchid = $nic.switchid
$switchid=$null
[switch]$ignorereboot,
[switch]$ignorerebootrequired,
[switch]$ignoreuserinput,
switch ($ilo.activelicense) {
[switch]$includeadditionalproperty
[switch]$includeadmin)
[switch]$ishidden,
[switch]$isinstalled,
[switch]$isnothidden,
switch($item.length){
[switch]$keepsearchfolder
switch ($lastexitcode)
[switch]$listonly,
switch ($mappingarray[0])
switch ($mappingarray[1])
switch ($menuselection){
switch ( $menutext ) {
[switch]$microsoftupdate,
[switch]$movetorecyclebin
[switch] $needdomainname,
switch ($nevviewcombobox.selecteditem)
[switch]$noconfirm
[switch]$nofolder,
[switch] $nonsystemaccounts,
[switch] $normalizenewlines
$switch=$null
switch ($number)
[switch]$online,
[switch] $only,
[switch]$organization,
switch($ou) {
[switch]$overwrite,
[switch] $passthru
[switch]$passthru
switch ($pathinfo) {
[switch] $politecheck
switch ($productedition)
switch ($productversion)
switch ($profiletype)
switch ($pscmdlet.parametersetname)
switch ($pscmdlet.parametersetname) {
switch ($quarterint) {
[switch]$recurse
[switch]$recurse,
switch ($regaction)
switch -regex ($contactpropertyname) {
switch -regex ($emailoptinvalue)
switch -regex -file $inifile {
switch -regex ($line.trim())
[switch]$regexpath
switch -regex ($policytype) {
[switch]$removecategoryprefix
[switch]$rename = $true
[switch]$requestdeliveryreceipt
[switch]$requestreadreceipt,
[switch]$resolvehost,
switch ($result)
switch ($result) {
switch($results)
switch ( $returnformat ) {
switch(rtn)
[switch]$scanport,
[switch]$schema,
[switch]$set
switch ($share.type) {
[switch] $showerrors
[switch]$showsearchcriteria,
[switch] $silent,
switch ($size)
[switch] $skipverification
switch ($status)
switch($statuscode)
switch ($subversionclient)
switch ($syntaxnum)
switch($target -eq $username -and
switch ($targetfeature.scope)
switch ($tempnode.text)
[switch]$today
[switch] $total
switch ($true) {
switch ($type)
switch($type){
switch($update.maxdownloadsize)
[switch]$updatexml,
[switch]$usedefaultpicture
[switch]$useimpersonation,
switch ($usessl)
switch ($value.gettype().name)
switch ($value.text)
switch ($vbrestart)
[switch]$verbose
[switch]$verbose)
[switch]$verboselog,
switch ($viewnode.text)
[switch] $whatif
[switch] $whatif = $false
[switch] $whatif = $false,
[switch]$whatif = $false,
switch -wildcard ($arrlog[4])
switch -wildcard ($arrlog[5])
switch -wildcard ($ewsclient)
switch -wildcard ($($row.serviceplan.servicename))
[switch]$windowsupdate,
[switch]$withhidden,
switch ($wmimode)
[switch] $yesdefault
$sw = new-object io.streamwriter $cs
$sw = new-object system.diagnostics.stopwatch
$sw = new-object system.io.stringwriter
$sw.start()
$sw.stop()
$sw.write($string)
$synccas = $sync.clientaccessserver
$syncerror = $sync.error
sync-files
sync-filestoalabel
synchronize-ax
$synchstarttime = get-date
$synclatency = $sync.latency
$syncres = $sync.result
$syncsc = $sync.scenario
/sync:`"$sharepoint2013path\prerequisiteinstallerfiles\synchronization.msi`" `
$syncsite = $sync.localsite
synopsis
.synopsis
" .synopsis`r`n"
syntax
$syntax = $attributes[$attr]
$syntax = $attributes[$attrname]
$syntaxnum = $result.properties.item("attributesyntax")[0]
sysadmin = [bool]$sqlobject.sysadmin;
sys.all_objects so
sys.columns c
sys.dm_sql_referencing_entities ('$item', 'object') as dmv_sre
$sysflags = $result.properties.item("systemflags")[0]
sys.indexes si
sysinfo
sys.objects as so
sys.objects o
sys.partition_functions pf
sys.partition_schemes ps
[system.array]$results = foreach ($cmp in $computers) {
[system.array]::reverse($b)
[system.bitconverter]::touint32($b,0)
[system.console]::setcursorposition(0,[system.console]::cursortop-1)
[system.console]::setcursorposition($_statusline.length,[system.console]::cursortop-1)
[system.datetime]$contactitem.$key = get-date($contactitem.$key);
[system.diagnostics.stopwatch] $sw;
[system.directoryservices.activedirectory.domaincontroller]::findone($context, [system.directoryservices.activedirectory.locatoroptions]::writeablerequired)
[system.double] $media
$system_drawing_point = new-object system.drawing.point
$system_drawing_point.x = 0
$system_drawing_point.x = 10
$system_drawing_point.x = 12
$system_drawing_point.x = 145
$system_drawing_point.x = 19
$system_drawing_point.x = 7
$system_drawing_point.y = 10
$system_drawing_point.y = 114
$system_drawing_point.y = 115
$system_drawing_point.y = 147
$system_drawing_point.y = 20
$system_drawing_point.y = 21
$system_drawing_point.y = 277
$system_drawing_point.y = 30
$system_drawing_point.y = 380
$system_drawing_point.y = 40
$system_drawing_point.y = 51
$system_drawing_point.y = 52
$system_drawing_point.y = 56
$system_drawing_point.y = 83
$system_drawing_point.y = 86
$system_drawing_point.y = ($form1.height - 90)
$system_drawing_size.height = 15
$system_drawing_size.height = 154
$system_drawing_size.height = 184
$system_drawing_size.height = 20
$system_drawing_size.height = 22
$system_drawing_size.height = 23
$system_drawing_size.height = 25
$system_drawing_size.height = 250
$system_drawing_size.height = 300
$system_drawing_size.height = 621
$system_drawing_size.height = ($form1.height - 96)
$system_drawing_size = new-object system.drawing.size
$system_drawing_size.width = 110
$system_drawing_size.width = 125
$system_drawing_size.width = 255
$system_drawing_size.width = 270
$system_drawing_size.width = 600
$system_drawing_size.width = 750
([system.environment]::getenvironmentvariable($variablename).trim())
[system.environment]::setenvironmentvariable($line[0],$line[1])
[system.gc]::collect()
$system = gwmi win32_computersystem
$systeminfoerror = $null
[system.io.directory]::createdirectory($outdir)
[system.io.file]::copy($vhd.sharepath,$vmhostparentvhdpath)
[system.io.file]::delete($($savesavefiledialog.filename))
[system.io.file]::writeallbytes($cerfilename, $finalcertificate.export('cer'))
[system.io.file]::writeallbytes( $outputfilepath, $rawoutput )
[system.io.file]::writeallbytes("$path\$filename.eml",$emailcontent)
[system.io.file]::writeallbytes($script:certificatefilename, $finalcertificate.export('pfx', 'secret'))
[system.management.automation.credential()] $credential = [system.management.automation.pscredential]::empty
[system.management.automation.host.choicedescription[]] $options = @()
[system.management.automation.pscredential]
[system.management.automation.pscredential]$credential
[system.management.automation.pscredential]$credential,
[system.management.automation.pscredential]$credential = $(get-credential)
[system.management.automation.pscredential]$credentials
[system.management.managementdatetimeconverter]::todatetime($bootup)
{[system.math]::round($_/1gb,0) -lt 1024} { $size = [string]([system.math]::round($_/1gb,0))+" gb"; break }
{[system.math]::round($_/1kb,0) -lt 1024} { $size = [string]([system.math]::round($_/1kb,0))+" kb"; break }
{[system.math]::round($_/1mb,0) -lt 1024} { $size = [string]([system.math]::round($_/1mb,0))+" mb"; break }
{[system.math]::round($_/1tb,0) -lt 1024} { $size = [string]([system.math]::round($_/1tb,0))+" tb"; break }
[system.media.systemsounds]::asterisk.play()
[system.media.systemsounds]::hand.play()
[system.net.ipaddress[]] $exclusions
[system.net.mail.mailmessage]$message = new-object system.net.mail.mailmessage("exchange@contoso.com", "reports@contoso.com", "server move stats", $body)
[system.net.mail.mailmessage]$message = new-object system.net.mail.mailmessage("exchange@contoso.com", "reports@contoso.com", "services report $date", $body)
[system.net.mail.smtpclient]$client = new-object system.net.mail.smtpclient("143.158.200.180")
[system.net.mail.smtpclient]$client = new-object system.net.mail.smtpclient("mail.contoso.com")
$systemprintingfile = get-childitem -name "*system.printing*" -recurse -path $systemprinting.fullname
$systemprintingfile = "$($systemprinting.fullname)\$($systemprintingfile)"
$systemprinting = get-childitem "$($env:systemroot)\assembly\gac_32\system.printing"
$systemprinting = get-childitem "$($env:systemroot)\assembly\gac_64\system.printing"
[system.reflection.assembly]::loadwithpartialname("{0}") > $null
[system.reflection.assembly]::loadwithpartialname("microsoft.sharepoint") > $null
[system.reflection.assembly]::loadwithpartialname("microsoft.sqlserver.smo.agent") | out-null;
[system.reflection.assembly]::loadwithpartialname("microsoft.sqlserver.smoextended")| out-null;
[system.reflection.assembly]::loadwithpartialname("microsoft.sqlserver.smo") | out-null
[system.reflection.assembly]::loadwithpartialname("microsoft.sqlserver.smo") | out-null;
[system.reflection.assembly]::loadwithpartialname('microsoft.visualbasic') | out-null
[system.reflection.assembly]::loadwithpartialname("system.data") | out-null
"@%systemroot%\system32\wkssvc.dll")
[system.runtime.interopservices.marshal]::getlastwin32error()
[system.runtime.interopservices.marshal]::releasecomobject($excel)
[system.security.cryptography.hashalgorithm]::create($hashname).computehash($filestream)|%{[void]$stringbuilder.append($_.tostring("x2"))}
[system.security.cryptography.hashalgorithm]::create($hashname).computehash([system.text.encoding]::utf8.getbytes($string))|%{
[system.security.securestring] $securestring
[system.string]::isnullorempty($bcc)) {
[system.string]::isnullorempty($cc) -and `
[system.string]::join(",",$rangelist.toarray())
[system.threading.thread]::currentthread.currentculture = $ocurrculture
[system.threading.thread]::currentthread.currentculture = $onewculture
[system.threading.thread]::sleep(1500)
[system.threading.thread]::sleep(2500)
[system.timespan] $interval = $obj1.leaseexpirytime - $obj2.leaseexpirytime
</system.web>
<system.web>
[system.web.httpcontext]::current = $context
</system.webserver>
<system.webserver>
[system.windows.forms.application]::enablevisualstyles()
[system.windows.forms.application]::enablevisualstyles();
[system.windows.forms.application]::run($myformatform)
[system.windows.forms.messagebox]::show([powershelltypeextensions.win32window]::currentwindow,"the ""$(split-path -path $psscriptroot -leaf)"" add-on module requires version $minimumpowerguiversion or later of the script editor. the current script editor version is $($host.version).$([system.environment]::newline * 2)please upgrade to version $minimumpowerguiversion and try again.","version $minimumpowerguiversion or later is required",[system.windows.forms.messageboxbuttons]::ok,[system.windows.forms.messageboxicon]::information) | out-null
sys.types t
s/+zf1aqaaaaaaaaaaaaaaaaaaaaajj3qhcdhe7/9pdv/467pv+53c7/v+hs/7jczf+nxkz/a6+r/2eqjp9nqoz/z6qm/2eqjp9nqoz/z6qm/2eqjp9nqoz/z6qm/2eqjp9nqoz/z6qm/2eqjp9nqoz/z6qm/467
</table>
</table>"
<table>
$table = @()
table {
$table = "adexport"
$tablebody=$alllines
<table border=""0"" bordercolor=""
<table border=""0"" cellpadding=""3"" style=""font-size:8pt;font-family:arial,sans-serif"" width=""50%"">
<table border=""1"" bordercolor=""
"table{border-width: 1px;border-style: outset;border-color: black;border-spacing: 1px;border-collapse: separate;}`r`n"
"table{border-width:1px;cellpadding=10;border-style:solid;border-color:navy;border-collapse:collapse;}" + `
</table><br><table width='20%'>
<table cellspacing=0 cellpadding=0>
$table_columns = $table.columns;
"tablecontrol"
$tabledescription = "
.tabledetail {border-right:
$tableend="</table>"
$tableentry += "<td bgcolor='
$tableentry += "<td>$topmailbox</td>"
$tableentry += "<td>$whitespace</td>"
$tableentry = "<tr><td>$name</td><td>$svr</td><td>$edb</td>"
$table | export-csv $file
$table = fcmdlembers($arg)
$tablefragment
$tablefragment = $results | convertto-html -fragment
$tableheader = "
$tableheaders = @($view.tablecontrol.tableheaders.tablecolumnheader)
$tablehtml
$tablehtml=$table+$tablebody+$tableend
$table = invoke-sqlcmd -query "$query" -serverinstance "$sqlserver" -verbose
$tableitems = @($view.tablecontrol.tablerowentries.tablerowentry.tablecolumnitems.tablecolumnitem)
$table+=$mailboxtable+$senderbody+$fullbody+$behalfbody+"</tr></table><br><a href=""
$tablename = $username.split("\")
"table paritioned: "+$item.ispartitioned+"<br>"+
$table_path = "$output_path\table\"
$tables = getdatabasetables $sql_server $db;
$tables = $sql_server.databases[$db_name].tables | where-object {$_.issystemobject -eq $false};
table {table-layout: fixed; font-size: 100%; width: 100%}
$table="<table style='boder:0px 0px 0px 0px;'><tr><th>server name</th><th>job name</th>
"table view"
"table view items"
<table width='100%'>
<table width='100%'><tbody>
table{width:80%;}
$tag = "$endtime [$script] ended. --> pse $($myinvocation.line) $pwd\$script $parms"
$tagname = $xml.get_name()
$tag | out-file $logfile -encoding 'default' -append
$tag = "$starttime [$script] start. --> pse $($myinvocation.line) $pwd\$script $parms"
$talk = new-object -com 'sapi.spvoice'
$talk.speak($text)
$tardatabases = get-mailboxdatabase -status | where {($_.name -like "mbx*") -and ($_.recovery -eq $false) `
$tardbinfo = get-mailbox -database $tardatabase
$targetcolumn = 'e'
$targetcontact | add-member -membertype noteproperty -name contacts -value $distributiongroup.emailaddress
$targetcontact | add-member -membertype noteproperty -name contacts -value $tcontacts
$targetcontact | add-member -membertype noteproperty -name groupname -value $contactgroupname
$targetcontact | add-member -membertype noteproperty -name groupname -value $distributiongroup.name
$targetcontact | add-member -membertype noteproperty -name grouptype -value "customgroup"
$targetcontact | add-member -membertype noteproperty -name grouptype -value "distributiongroup"
$targetcontact | add-member -membertype noteproperty -name overwrite -value "n/a"
$targetcontact | add-member -membertype noteproperty -name overwrite -value $overwrite
$targetcontact = new-object system.management.automation.psobject
$targetcontacts = @()
$targetcontacts | convertto-xml -notypeinformation | export-clixml -path $filepath -force
$targetcontacts | export-csv -path $filepath -notypeinformation -force
$targetcontacts | get-member -membertype noteproperty | %{$columnheaders.add($_.name,"")}
$targetcontacts = import-csv $csvfile
$targetcontacts += $targetcontact
$targetcontainernodeid = gwmi -namespace "root\sms\site_$sitecode" -query `
$targetcredentials = get-credential -message 'permanent synchronization credentials'
target : $($cred.targetname.substring($cred.targetname.indexof("=")+1))
$targetdata = @()
$targetdata | % {
$targetdatabase = $args[2] -replace '"',""
$targetdatabase = $_.target.targetdatabase
$targetdb = $_.database
$targetdb = (get-mailboxdatabase $_."move-mailbox".taskheader.options.targetdatabase).name
$target = draw-menu $versions "choose the exchange version we should check for"
$targetfeature = get-spfeature -identity $featureidentity -erroraction silentlycontinue
$targetfile= ""
$targetfile = $sourcefile.replace($source,$target)
$targetfile = $targetweb.getfile($targetpublishingweb.pageslistname + "/" + $propvalue)
$_targethash = ""
$_targethash= $($(./md5sum $targetfile) -replace "\*.*","").replace('\','')
$targetlibrary = "shared documents"
$targetlist| foreach {
$targetlist = "server1","server2","server3"
$targetname,
`$targetname `= `"microsoft-office365-update-msolfederateddomain-$federateddomain`"
$targetname = "microsoft-office365-update-msolfederateddomain-$federateddomain"
$targetnetadapter,
$targetpublishingweb = [microsoft.sharepoint.publishing.publishingweb]::getpublishingweb($targetweb)
$targetpublishingweb.update()
$target = $range.find($shareddrive)
$target= (read-host "enter target directory: ").trim() -replace "(\\|\/)$",""
$targetreference = "$($targetcolumn)$($target.row)"
$targetsite = get-spsite -identity $siteurl -erroraction silentlycontinue
$targetsite = get-spsite -identity $url
$targetsite = new-spsite -url $siteurl -owneralias $siteowneralias -name $sitename -template $sitetemplate -language $sitelanguage -whatif:$whatif
$targetsolution = add-spsolution -literalpath $packagepath -language $solutionlanguage -whatif:$whatif
$targetsolution = get-spsolution -identity $solutionname -erroraction silentlycontinue
$targetsolution.solutionfile.saveas($backupsolutionpath)
$target = $targetversion
$targettype = "user",
$target = $username
targetusername = $event.properties[5].value
$targetvhdpath = $vmhostdiffvhdpath + $vm + ".vhd"
$targetwebapp = get-spwebapplication -identity $webapplication -erroraction silentlycontinue
$targetwebapp = get-spwebapplication -identity $webappurl -erroraction silentlycontinue
$targetweb = get-spweb -identity $url -erroraction silentlycontinue
$targetweb = get-spweb -identity $weburl -erroraction silentlycontinue
$targetweb = new-spweb -url $weburl -name $webname -template $webtemplate -language $language -whatif:$whatif
$targetweb.update()
</task>
$taskdef = $st.newtask(0)
$taskdef.xmltext = $taskxml
$taskenabled = $false
$taskenabled = $true
$taskfilter = { $_.'run as user' -like $useraccount }
$taskfilter = { $tasksystemaccounts -notcontains $_.'run as user' }
$taskname="microsoft\windows\dhcpserver\dhcpfailoverautoconfigsynctool"
$taskname = 'waketimer-task'
$taskrun="powershell.exe -windowstyle hidden -command `&{cd $pwd; $programarguments}"
$tasks | foreach-object {
$tasks = $schedule.getfolder("\").gettasks(0)
$tasksystemaccounts = 'interactive', 'system', 'network service', 'local service', 'run as user', 'authenticated users', 'users', 'administrators', 'everyone', ''
$taskxml = @"
$tbl = $db.tables | where-object { $_.schema -eq $schema -and -not $_.issystemobject }
$tbl_idx = getindexinfo $item;
$tbl = new-object ("microsoft.sqlserver.management.smo.table")
$tbl_props =
$tbl_props +=
$tbl_props += "filegroup: "+$item.filegroup+"<br>";
$tbl_props += "partition scheme: "+$item.partitionscheme+"<br>";
</tbody>
<tbody>
$tcontacts = @()
$tcontacts = $tcontacts -join ";"
$tcontacts += $tcontact.uri
</td>
<td>
td {
<td>$($adminactions)</td>
<td align=""center"">$(($alldistgroups).count)</td>
<td align=""center"">$closedgroups</td>
<td align=""center"">$departclosedgroups</td>
<td align=""center"">$dyemptygroups</td>
<td align=""center"">$dygcount</td>
<td align=""center"">$dygroupswithoutmanager</td>
<td align=""center"">$(($emptygroup).count)</td>
<td align=""center"">$emptygroups</td>
<td align=""center"">$gcount</td>
<td align=""center"">$groupswithoutmanager</td>
<td>$($auditsummary.itemsinfolder)</td>
<td bgcolor=""
"td{border-width: 1px;padding-left: 3px;padding-right: 3px;border-style: inset;border-color: black;}`r`n"
<td colspan='7' height='25' align='center'>
<td colspan='7' height='25' align='center'><strong><font color="
<td>"+$($_."date of arrival")+"</td>`
<td>$($delegateactions)</td>
<td>"+$($_."description")+"</td>`
<td>$($entry.capacitygb)</td>
<td>$($entry.freespacegb)</td>
<td>$($entry.freespace)</td>
<td>$($entry.ipv4address)</td>
<td>$($entry.name)</td>
<td>$($entry.provisionedspacegb)</td>
<td>$($entry.servername)</td>
<td>$($entry.status)</td>
<td>$($entry.uptime)</td>
<td><font color=""
"td{font-size:10px;border-width:1px;padding:10px;border-style:solid;border-color:navy;}</style>"
<td>"+$($_."name")+"</td>`
<td nowrap=""nowrap""><font color=""
<td>$($owneractions)</td>
"</td>$shtmlcellstyle" + [string]$_.deliverytype + "`r`n" + `
"</td>$shtmlcellstyle" + [string]$_.isvalid + "`r`n" + `
"</td>$shtmlcellstyle" + [string]$_.lasterror + "`r`n" + `
"</td>$shtmlcellstyle" + [string]$_.lastretrytime + "`r`n" + `
"</td>$shtmlcellstyle" + [string]$_.messagecount + "`r`n" + `
"</td>$shtmlcellstyle" + [string]$_.nexthopconnector + "`r`n" + `
"</td>$shtmlcellstyle" + [string]$_.nexthopdomain + "`r`n" + `
"</td>$shtmlcellstyle" + [string]$_.nextretrytime + "`r`n" + `
"</td>$shtmlcellstyle" + [string]$_.objectstate + "`r`n" + `
"</td>$shtmlcellstyle" + [string]$_.status + "`r`n" + `
<td style=""border: 1px solid red"" align=""center"">$authgroups</td>
<td style=""border: 1px solid red"" align=""center"">$dyauthgroups</td>
<td style=""border: 2px dashed black"" align=""center"">$dyhiddengroups</td>
<td style=""border: 2px dashed black"" align=""center"">$hiddengroups</td>
<td style=""border: 2px dotted red"" align=""center"">$departopengroups</td>
<td style='text-align:center'>"+$($_."action") + "</td>`
<td style='text-align:center'>"+$($_."approved by validation") +"</td>`
"</td></tr>"}
td {vertical-align: top; font-family: arial}
<td width='10%' align='center' bgcolor='
<td width='10%' align='center'>$freespacegb</td>
<td width='10%' align='center'>free space(gb)</td>
<td width='10%' align='center'>server</td>
<td width='10%' align='center'>$sizegb</td>
<td width='10%' align='center'>total capacity(gb)</td>
<td width='10%' align='center'>used capacity(gb)</td>
<td width='10%' align='center'>$usedspacegb</td>
<td width='10%'>$computer</td>
<td width='12%' align='center'>$htmlpendingreboot</td>
<td width='12%' height='15' align='center'> <strong> <font color="
<td width='14%' align='center'>$htmlserver</td>
<td width='14%' height='15' align='center'> <strong> <font color="
<td width='15%' align='center'>drive label</td>
<td width='15%' >$volname</td>
<td width='20%'><b>send connectors</b></font></td><tr>
<td width='20%'><font color='
<td width='23%' align='center'>$htmluptime</td>
<td width='23%' height='15' align='center'> <strong> <font color="
<td width='45%'><b>receive connectors</b></font></td><tr>
<td width='51%' align='center'>$htmlautoservices</td>
<td width='51%'height='15' align='center'> <strong> <font color="
<td width='5%' align='center'>$deviceid</td>
<td width='5%' align='center'>drive</td>
<td width='5%' align='center'>freespace %</td>
<td width='5%' bgcolor=`'$color`' align='center'>$percentfree</td>
$teamadapter | disable-netadapterbinding
$teamadapter | get-netadapterbinding -componentid $bindcomponentid | enable-netadapterbinding
$teamadapter | get-netadapterbinding -componentid $unbindcomponentid | disable-netadapterbinding
$teamadapter = get-netlbfoteam -name $name | get-netlbfoteamnic | get-netadapter
$teamadapter | rename-netadapter -newname $name
$teammembers,
-teammembers $hosternetteammembers `
-teammembers $tenantnetteammembers `
"telex" = "phone:telex";
$_temp = ""
$temp = ""
$tempaddress = $destipaddresses[$numaddresses]
$tempaddress = $localaddress.split(":")
$tempaddress = $localaddress.split("[")
$tempaddress = $localaddress.split("]")
$tempdate = (get-date).tostring("dd-mm-yyyy_hhmm.ss")
$tempdate.substring(0,4)
$tempdate.substring(6,2) + "/" + `
$tempdate = $tempdate.substring(4,2) + "/" + `
$temperraction = $erroractionpreference
$temperrorvar = "$($error[0].tostring()) ::: $($error[0].targetobject)"
$temperrorvar = "$($error[$j].tostring()) ::: $($error[$j].targetobject)"
$tempevent = invoke-command `
+ " " + $tempevent.replacementstrings[0])
($tempevent.replacementstrings[1]).replace([char]8206, " ")`
$tempfile = $filelist[$j].fullname
$tempfilepath = "\\"+$serverlist[$j]+$pathoffile
$tempfind = "*" + $find + "*"
$tempfolder = get-childitem -literalpath $folderlist[$j].fullname -erroraction silentlycontinue -force
$tempfolderpath = $folderpath -replace '\\','_'
$tempfolderpath = $tempfolderpath -replace ' ',''
$tempfolderpath = $tempfolderpath -replace ':',''
$temp = get-mailbox -organizationalunit $ou.properties.distinguishedname[0] -resultsize unlimited |
$tempheaderproperties = @($tempheader.psobject.properties | where-object -filterscript { @("alignment", "label", "width") -contains $_.name } | select-object -expandproperty name)
$tempheader = $tableheaders[$count]
$tempitem = 1
$tempitem = $item.rtt
$tempitem = $listitems[$count]
$tempitemnode.checked = $false
$tempitemnode.checked = $true
$tempitemnode = new-treenode -treenode $viewitems -text "item: $templabel" -tag $templabel
$tempitemnode = new-treenode -treenode $viewitems -text "item: $tempproperty" -tag $tempproperty
$tempitemnode = new-treenode -treenode $viewitems -text "item: wide item" -tag "wide item"
$tempitemproperties = @($tempitem.psobject.properties | where-object -filterscript { @("label", "propertyname", "scriptblock", "formatstring") -contains $_.name } | select-object -expandproperty name)
$tempitemproperties = @($tempitem.psobject.properties | where-object -filterscript { @("propertyname", "scriptblock", "formatstring") -contains $_.name } | select-object -expandproperty name)
$tempitemproperties = @($tempitem.psobject.properties | where-object -filterscript { @("propertyname", "script", "format") -contains $_.name } | select-object -expandproperty name)
$tempitem = $tableitems[$count]
$tempitem = $wideitems[$count]
$templabel =
$templabel = $null
$templabel = $tempheader.label
$templabel = $tempitem.label
$templatefunction = @(
$template = get-scvmtemplate -vmmserver $vmmserver -all | ? {$_.name -eq $templatename}
$templatepath = "waketimer-task.xml"
$template = read-host "enter template id"
$templatescript = @(
" template script`r`n"
$temp = $machine.domainjoin
$tempmailbox = get-mailbox $mailbox.identity -domaincontroller $domaincontroller `
$tempmbsize = $_.mailboxsize
$tempname = $folderlist[$j].fullname
$tempnode1.checked = $false
$tempnode1.checked = $true
$tempnode1.expandall()
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "alignment: $($nlialigncombobox.selecteditem)" -tag $($nlialigncombobox.selecteditem)
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "format: $($nliformattextbox.text)" -tag $($nliformattextbox.text)
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "item: $($nlilabeltextbox.text)" -tag $($nlilabeltextbox.text)
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "item: $($nlipropertytextbox.text)" -tag $($nlipropertytextbox.text)
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "item: wide item" -tag "wide item"
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "list view: $($nevnametextbox.text)" -tag $($nevnametextbox.text)
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "list view: $($view.name)" -tag $($view.name)
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "property: $($nlipropertytextbox.text)" -tag $($nlipropertytextbox.text)
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "script: $($nliscripttextbox.text)" -tag $($nliscripttextbox.text)
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "table view: $($nevnametextbox.text)" -tag $($nevnametextbox.text)
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "table view: $($view.name)" -tag $($view.name)
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "wide view: $($nevnametextbox.text)" -tag $($nevnametextbox.text)
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "wide view: $($view.name)" -tag $($view.name)
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "width: $($nliwidthnumericupdown.value)" -tag $($nliwidthnumericupdown.value)
$tempnode2 = new-treenode -treenode $tempnode1 -text "alignment: $($nlialigncombobox.selecteditem)" -tag $($nlialigncombobox.selecteditem)
$tempnode2 = new-treenode -treenode $tempnode1 -text "format: $($nliformattextbox.text)" -tag $($nliformattextbox.text)
$tempnode2 = new-treenode -treenode $tempnode1 -text "property: $($nlipropertytextbox.text)" -tag $($nlipropertytextbox.text)
$tempnode2 = new-treenode -treenode $tempnode1 -text "script: $($nliscripttextbox.text)" -tag $($nliscripttextbox.text)
$tempnode2 = new-treenode -treenode $tempnode1 -text "typename: $($nevtypetextbox.text)" -tag $($nevtypetextbox.text)
$tempnode2 = new-treenode -treenode $tempnode1 -text "typename: $($view.viewselectedby.typename)" -tag $($view.viewselectedby.typename)
$tempnode2 = new-treenode -treenode $tempnode1 -text "width: $($nliwidthnumericupdown.value)" -tag $($nliwidthnumericupdown.value)
$tempnode3 = new-treenode -treenode $tempnode1 -text "list view items"
$tempnode3 = new-treenode -treenode $tempnode1 -text "table view items"
$tempnode3 = new-treenode -treenode $tempnode1 -text "wide view items"
$tempnode = new-treenode -treenode $tempitemnode -text "alignment: $($tempheader.alignment)" -tag $($tempheader.alignment)
$tempnode = new-treenode -treenode $tempitemnode -text "format: $($tempheader.formatstring)" -tag $($tempitem.formatstring)
$tempnode = new-treenode -treenode $tempitemnode -text "format: $($tempitem.formatstring)" -tag $($tempitem.formatstring)
$tempnode = new-treenode -treenode $tempitemnode -text "property: $($tempitem.propertyname)" -tag $($tempitem.propertyname)
$tempnode = new-treenode -treenode $tempitemnode -text "property: $tempproperty" -tag $tempproperty
$tempnode = new-treenode -treenode $tempitemnode -text "script: $($tempheader.scriptblock)" -tag $($tempitem.scriptblock)
$tempnode = new-treenode -treenode $tempitemnode -text "script: $($tempitem.scriptblock)" -tag $($tempitem.scriptblock)
$tempnode = new-treenode -treenode $tempitemnode -text "width: $($tempheader.width)" -tag $($tempheader.width)
$temp=$null
$tempobjectarray = @()
$tempobjectarray = $tempobjectarray + @($newresult)
$tempoutput = $tempvar[$k]
$temp = $parents
$tempproperty = $null
$tempproperty = $tempitem.propertyname
$_temp = receive-job $_enumerationjob
$_temp = receive-job $_job
$tempregpath = "hklm:\\security\policy\secrets\mysecret"
$tempresult = createresultobject;
$tempresult.localipaddress = [string]$tempaddress[0]
$tempresult.localipaddress = [string]$tempaddress[1]
$tempresult = new-item -path $regkey -erroraction silentlycontinue
$tempresult = new-itemproperty -path $regkey -name $regname -propertytype $regtype -value $regvalue -force -erroraction silentlycontinue
$tempresult.remoteipaddress = $destination
$tempresult.remoteipaddress = $result.address.tostring()
$tempresult = remove-itemproperty -path $regkey -name $regname -erroraction silentlycontinue
$tempresult.rtt = "<1"
$tempresult.rtt = $null
$tempresult.rtt = $result.roundtriptime
$tempresult.size = $null
$tempresult.size = $result.buffer.length
$tempresult.status = "generalfailure"
$tempresult.status = $result.status
$tempresult.ttl = $null
$tempresult.ttl = $result.options.ttl
$tempserver = $serverlist[$j]
$temp = $shtmlcellstyle -replace(">", "rowspan=$dbcount>")
$tempsize = $filelist[$j].length
$tempstatsobj.avgrtt = $null
$tempstatsobj.avgrtt = [system.math]::round($pingaverage, 2)
$tempstatsobj = calculatestats([array[]]$tempobjectarray)
$tempstatsobj = createstatsobject
$tempstatsobj.destipaddress = $destipaddresses[$numaddresses]
$tempstatsobj.lost = $pingfailure
$tempstatsobj.maxrtt = $null
$tempstatsobj.maxrtt = $pingmaxrtt
$tempstatsobj.minrtt = "<1"
$tempstatsobj.minrtt = $null
$tempstatsobj.minrtt = $pingminrtt
$tempstatsobj.received = ($pings-$tempstatsobj.lost)
$tempstatsobj.received = $pingsuccess
$tempstatsobj.sent = $pings
{$temp = [string]::join("`",`"", $mailbox)
$temp = """$temp"""
$temp=$temp+"0"
$temp = $temp.substring($semi, $temp.length - $semi)
$tempto = ($to.adddays(-1)).toshortdatestring()
$temptreenode
$temptreenode.name = $text
$temptreenode = new-object -typename system.windows.forms.treenode
$temptreenode.tag = $tag
$temptreenode.text = $text
$temptype = $myformattreeview.selectednode.text.substring(0, $myformattreeview.selectednode.text.indexof(":"))
$tempurl = $ldapurl.path.tostring().toupper()
$tempurl = $ldapurl.toupper()
$tempuser = $user
$tempvalue = $myformatlabel.height
$tempvalue = $nettypelabel.height
$tempvalue = $nevviewlabel.height
$tempvalue = $newedittypelabel.height
$tempvalue = $neweditviewlabel.height
$tempvalue = $newlistitemlabel.height
$tempvalue = new-treenode -treenode $myformattreeview -text "configuration"
$tempvalue = $nlilabellabel.height
$tempvar = @()
$tempvar = get-item $tempfilepath -force
$tempversion = $tempvar.versioninfo
tenantnet = @{
$tenantnetnicteamname = 'tenantnet'
$tenantnetteammembers = 'tenantnet 1', 'tenantnet 2'
$tenantnetvirtualswitchname = 'tenantswitch'
$terdns = $newsearchorder[3]
$terdns=$nic.dnsserversearchorder[2]
$terdns = $null
$test,
$test1 = $error.count
$test2 = $error.count
$testaccountname = read-host 'what is the test account samaccountname?'
$testaccountname = read-host '[wrong value] what is the test account samaccountname?'
$testaccount=new-object system.directoryservices.directoryentry($searchresult.path)
$testaccountownermail = ($testaccount.info -replace "user-testaccount owner: ","")
test-connection -computername $computer -count 1 -erroraction silentlycontinue |out-null
" test existing : present"
$testfile = "c:\"+$topology.fileflag+".xml"
$testfile = "c:\"+$topology+".xml"
$test = get-service dns
" testing boot : $filetest"
"testing dns"
" testing file : $copyflag "
" testing flag : $testflag"
"testing path $webcopypath"
" test key : $regkey "
$testlogpath = test-path $logfile -pathtype container
$testmailflowoutput | % `
$testmailflowoutput | %{if ($_.testmailflowresult -notmatch "success"){$dodgymailflow = $true}}
$testmailflowoutput = test-mailflow $mailboxserver -targetemailaddress $testmailflowtargetaddress -executiontimeout $testmailflowtimeout
$testmailflowtargetaddress = "<an_external-email-address>@domain.com"
$testmailflowtimeout = 120
" test passed : loading from: $supportingfunctionspath"
$testping = test-connection -computername $serverlist[$j] -count 1 -quiet
test-qsrequirement -requirement (get-qselevationstatus) -message 'you must launch this script as an administrator.'
test-qsrequirement -requirement (install-qsmsolservicesmodule) -message 'required module did not install, so script cannot continue.'
test-qsrequirement -requirement $installresults -message 'cannot install msol powershell without sign-in assistant'
test-qsrequirement -requirement $installresult.success -message "required windows feature $featurename failed to install."
test-qsrequirement -requirement (-not (test-qswin32)) -message 'you must launch this script in a 64-bit powershell session.'
test-qsrequirement -requirement $results -message "could not load required powershell module $name."
test-qsrequirement -requirement ($script:msolcredential -ne $null) -message 'credential entry cancelled.'
test-qsrequirement -requirement (test-qsserveros) -message 'you must run this script on a server os sku.'
test-qsrequirement -requirement (test-qswindows8orlater) -message 'you must run this script on windows server 2012 or later.'
testready $dcip
testready $passedip
"test result:"
test-servicehealth -server cas01 | out-file temp.dat -append
test-servicehealth -server cas02 | out-file temp.dat -append
test-servicehealth -server hub01 | out-file temp.dat -append
test-servicehealth -server mail01 | out-file temp.dat -append
test-servicehealth -server mail02 | out-file temp.dat -append
test = $test
$test = test-path -path "\\$dcip\files\$passedfilename "
$test = test-path -path "\\$dcip\files\$passedfilename"
$test = test-path -path "\\$passedip\files\$passedfilename "
$test = test-path -path "\\$passedip\files\$passedfilename"
$test = $true
" test value : $regname "
$text
$textcatalog_path = "$output_path\fulltextcatalog\"
$text="[**chanukah in $($time)**]"
$text="[**christmas in $($time)**]"
$text = "hello $env:username, my name is $computername"
$textin | measure-object -line -word -char
$text = $text -replace "`"", "`"`""
$text.tochararray() |foreach {
"text" {$type = "1"}
"`tfailed access`t$temperrorvar" >> $logfile
"`tfailed file`t`t$temperrorvar" >> $logfile
"`tfailed folder`t$temperrorvar" >> $logfile
$tfs | add-member scriptproperty $entry[0] $executioncontext.invokecommand.newscriptblock($scriptblock)
$tfs = get-tfs $tfsurl
$t = get-date -uformat %d%m%h%m
$t = get-date -uformat %d%m%y-%h%m%s
$tg_to_approve=$wsus.getcomputertargetgroups() | where { $_.name -eq $wsus_targetgroup_to_approved }
$tgtpath="'ou=oldcomputers,dc=scodb,dc=local'"
$tg_valid_approve=$wsus.getcomputertargetgroups() | where { $_.name -eq $wsus_targetgroup_validation }
<th>action</th>`
thank you,
<th>approved by validation</th>`
that you agree: (i) to not use our name, logo, or trademarks to market your
th{background-color:
<th><b>capacity (gb)</b></th>
<th><b>datastore name</b></th>
<th><b>free space (%)</b></th>
<th><b>free space (gb)</b></td>
<th><b>ip address</b></td>
th{border-bottom:2px solid rgb(79,129,189);border-top:2px solid rgb(79,129,189);padding-bottom:10px;padding-top:10px;}
<th><b>provisioned space (gb)</b></th>
<th><b>server name</b></th>
<th><b>status</b></th>
<th><b>uptime</b></th>
<th>date of arrivals</th>`
<th>description</th>`
thead{}
thead th{font-size:120%;text-align:left;}
the db and to write to and ou to lookup against
"the domain is " + $domain
$thefile = $file.name
"the 'handlingtypetochange' and 'handlingtypenewvalue' parameters must be different."
"the last logon occured the " + $realuserlastlogon + ""
<th>enabled</th><th>run status</th><th>duration</th><th>run date</th><th>details</th>"
$theseupdates = new-object -typename psobject -property @{
"the sharepoint spweb url provided does not exist."
$thesite.dispose()
$thesite = new-object microsoft.sharepoint.spsite($webappurl)
"the url correctly. if the url should be serving existing content, the system administrator " +
"th{font-size:12px;border-width:1px;padding:10px;border-style:solid;border-color:navy;}" + `
$thisapplication = new-object -typename psobject -property @{
$thiscode = new-object -typename psobject -property @{
this command finds wmi classes that contain the word disk. the
$thiscommand = $functionname.substring($functionname.indexofany("-")+1,($functionname.length)-($functionname.indexofany("-")+1))
$thiscomputer = get-wmiobject -class win32_computersystem
$thiscomputer = get-wmiobject -class win32_computersystem -computername $computername -credential $credentials -authentication 6
$thiscomputer = new-object psobject -property @{
"this could trigger a backup of all updated files."
$thisdisk = get-psdrive $sisdisk
$thisentry = new-object -typename psobject -property @{
$thisevent = new-object -typename psobject -property @{
$this.getservice([{1}])
$thishost = new-object -typename psobject -property @{
$thisjob
$thisjob = new-object psobject
$thislog |export-csv -path "$($logpath)\$($servername)\$($filename)" -notypeinformation
$thislog = get-winevent -logname $log.logname -computername $servername `
$thismessage = $thislogin.message
$thismessage = $thislogoff.message
$thisport = new-object -typename psobject -property @{
$thisprinter = new-object -typename psobject -property @{
$thisreport = import-csv $pcutlog.fullname -header $pcutheader |select-object -skip 1
this sample code is provided for the purpose of illustration only and is not
" this script sets up the basic framework that i use for all my scripts.`r`n"
"this script will now stop executing."
"this script will update acl entries recursively in the startpath specified."
$thisservice = new-object -typename psobject -property @{
$thissession = new-pssession -computername $computer -credential $credentials
$thissession = new-pssession -computername $computername -credential $credentials
$thissplit = $thisentry.split(",")
this.timeout = timeout;
$thisuser = new-object -typename psobject -property @{
$thisverb = $functionname.substring(0,$functionname.indexofany("-"))
"==$($thisverb)-!$($thiscommand)==" |out-file ".\$($wikifilename).wiki" -append -encoding ascii
$thisworkstation = new-object -typename psobject -property @{
<th>name</th>`
<th nowrap=""nowrap"" colspan=""2""><font color=""
<th nowrap=""nowrap"" colspan=""3""><font color=""
<th nowrap=""nowrap""><font color=""
<th nowrap=""nowrap"" rowspan=""2""><font color=""
$throughputsetting = @{
$throughputsetting,
-throughputsetting $throughputsetting `
throw;
throw "an error occurred while removing the gpo registry key"
throw "an error occurred while setting the gpo registry key"
throw "cannot determine the primary replica of availability group '$groupname' from server instance '$servername'. please investigate!"
throw "cannot obtain the specified host information"
throw ("combine xpo for {0} didn't complete after {1} minutes." -f $modelname, $combinetimeout)
throw "computer not found"
throw "contact picture file not found at $($contactitem.$key)";
throw "could not write to $($outputpowershellfile)";
throw "directaccess is not configured on the server `"$computername`". specify the name or ip address of the remote access server for the computername parameter on which directaccess is configured."
throw "directory does not exist."
throw $error[0].exception
throw ("error: ax cil compile did not complete within {0} minutes" -f $compileciltimeout)
throw ("error: ax compile did not complete within {0} minutes" -f $compilealltimeout)
throw ("error: ax compile partial did not complete within {0} minutes" -f $compilealltimeout)
throw ("error: ax label import did not complete within {0} minutes" -f $importtimeout)
throw ("error: ax .xpo import did not complete within {0} minutes" -f $importtimeout)
throw $errormsg
throw ("error: visual studio project didn't compile in {0} min." -f $compileciltimeout)
throw ("error: visual studio project didn't import in {0} min." -f $importtimeout)
throw "exchange cmdlets not available";
throw "exchange management shell not loaded";
throw "exchange server $server does not have mailbox databases";
throw "exchange server $server not found";
throw "failed to create differencing disk on the target host"
throw "failed to retrieve closest dc for server `"$computername`""
throw "file $($csvfilename) must specify at least the field 'first name'";
throw "file does not exist!"
throw "file may already exist"
throw "file $($outputpowershellfile) already exists";
throw "file $($path) not found";
throw "file size must be less than 10k";
throw "group not found"
throw "identity missing";
throw "invalid data: errors encountered while compiling code"
throw "job could not complete successfully: $($_)"
throw "logfilepath does not exist"
throw "mailbox database $database not found"
throw "mailbox $($mailbox) not found";
{ throw "md5sum.exe is missing. please ensure that md5sum is present in working directory."}
throw "need administrative priviledge to run this script properly"
throw new exception("cannot set volume");
throw new invalidoperationexception`(`"invalid criticalhandle`!`"`)`;
throw new invalidoperationexception("invalid criticalhandle!");
throw new-object system.exception("cannot create generic type", $_.exception)
throw new win32exception(err);
{ throw "no files received" }
throw "no hosts in the $cloudname cloud are available for placement"
throw "no mailboxes found on $server"
throw "no mirroring endpoint found on server: $server"
throw " no option selected "
throw "object is not an array of mailbox databases"
throwoninvalidbytes: true );
throwoninvalidcharacters: true );
throw "outputcsvfile already exists"
throw "parameter csvfilename must be specified";
throw "parameter emailaddress does not appear valid";
throw "parameter emailaddress must be specified";
throw "path missing";
throw "please launch the exchange management shell"
throw "please provide a valid filename for parameter csvfilename";
throw "recipient not found"
throw "saveas directory [$path] does not exist"
throw "the availability group '$groupname' does not exist on server '$servername'."
throw "the differencing disk for $vm already exists. check to make sure $vm has not previously been created"
throw ("the language pack for " + $locale + " is not installed!")
throw 'the windows feature "remoteaccess management tools" is not installed. (install remote server administration tools and run "enable-windowsoptionalfeature -featurename remoteserveradministrationtools-roles-remoteaccess -online")'
throw 'the windows feature "remoteaccess management tools" is not installed. (run "install-windowsfeature -name rsat-remoteaccess")'
throw "this script does not support a single mailbox export."
throw "this script is valid for deployments with only ipv4 enabled in the internal network"
throw "usage: getwmi2 -class <class type> -ns <wmi namespace>"
throw "user $($identity) not found";
throw "you can't balance a single database";
throw ("you must set the first language in the parameter list to the same as the site collection language, you have " + $locales[0] + " as the first and the site collection is in " + $rootweb.locale.name);
throw "you must specify either a cloud or a host to which $vm will be deployed"
'thu' {
$thu = $_.thu
th {vertical-align: top; color:
<th width='10%'><b>backup validity</b></font></th>
<th width='10%'><b></b></font></th>
<th width='10%'><b> </b></font></th>
<th width='10%'><b>content index state</b></font></th>
<th width='10%'><b>copy queue length</b></font></th>
<th width='10%'><b>dac mode</b></font></th>
<th width='10%'><b>dag name</b></font></th>
<th width='10%'><b>defaultipgateway</b></font></th>
<th width='10%'><b>drive letter</b></font></th>
<th width='10%'><b>enabled</b></font></th>
<th width='10%'><b>entrytype</b></font></th>
<th width='10%'><b>error</b></font></th>
<th width='10%'><b>homemtaserverid</b></font></th>
<th width='10%'><b>identity</b></font></th>
<th width='10%'><b>ignorenetwork</b></font></th>
<th width='10%'><b>lastbootuptime</b></font></th>
<th width='10%'><b>latency</b></font></th>
<th width='10%'><b>latency (ms)</b></font></th>
<th width='10%'><b>latency(ms)</b></font></th>
<th width='10%'><b>local site</b></font></th>
<th width='10%'><b>logdirectorysizelimit</b></font></th>
<th width='10%'><b>logenabled</b></font></th>
<th width='10%'><b>logfileagelimit</b></font></th>
<th width='10%'><b>mapiaccessenabled</b></font></th>
<th width='10%'><b>maxmessagesize</b></font></th>
<th width='10%'><b>network ip</b></font></th>
<th width='10%'><b>os version</b></font></th>
<th width='10%'><b>p.a.m.</b></font></th>
<th width='10%'><b>port</b></font></th>
<th width='10%'><b>replay queue length</b></font></th>
<th width='10%'><b>replicationenabled</b></font></th>
<th width='10%'><b>replication port</b></font></th>
<th width='10%'><b>result</b></font></th>
<th width='10%'><b>scenario</b></font></th>
<th width='10%'><b>server name</b></font></th>
<th width='10%'><b>servicename</b></font></th>
<th width='10%'><b>service pack</b></font></th>
<th width='10%'><b>timewritten</b></font></th>
<th width='10%'><b>type</b></font></th>
<th width='10%'><b>workcycle</b></font></th>
<th width='15%'><b>activationsuspended</b></font></th>
<th width='15%'><b>active copy</b></font></th>
<th width='15%'><b>activedatabasecopy</b></font></th>
<th width='15%'><b>binding</b></font></th>
<th width='15%'><b>database name</b></font></th>
<th width='15%'><b>disk free space</b></font></th>
<th width='15%'><b>disk size</b></font></th>
<th width='15%'><b>% free space</b></font></th>
<th width='15%'><b>isvalid</b></font></th>
<th width='15%'><b>lastcopybackup</b></font></th>
<th width='15%'><b>lastdifferentialbackup</b></font></th>
<th width='15%'><b>lastfullbackup</b></font></th>
<th width='15%'><b>lastincrementalbackup</b></font></th>
<th width='15%'><b>logsubjectloggingenabled</b></font></th>
<th width='15%'><b>maxmessagesize</b></font></th>
<th width='15%'><b>name</b></font></th>
<th width='15%'><b>server</b></font></th>
<th width='15%'><b>server name</b></font></th>
<th width='15%'><b>snapshotlastcopybackup</b></font></th>
<th width='15%'><b>snapshotlastdifferentialbackup</b></font></th>
<th width='15%'><b>snapshotlastfullbackup</b></font></th>
<th width='15%'><b>snapshotlastincrementalbackup</b></font></th>
<th width='15%'><b>source</b></font></th>
<th width='15%'><b>state</b></font></th>
<th width='15%'><b>status</b></font></th>
<th width='15%'><b>subnets</b></font></th>
<th width='15%'><b>workcyclecheckpoint</b></font></th>
<th width='20%'><b>adcost</b></font></th>
<th width='20%'><b>addressspaces</b></font></th>
<th width='20%'><b>admindisplayversion</b></font></th>
<th width='20%'><b>adsitelink name</b></font></th>
<th width='20%'><b>adsite name</b></font></th>
<th width='20%'><b>alternate directory</b></font></th>
<th width='20%'><b>alternate witness server</b></font></th>
<th width='20%'><b>autodatabasemountdial</b></font></th>
<th width='20%'><b>autodiscoversitescope</b></font></th>
<th width='20%'><b>availablenewmailboxspace</b></font></th>
<th width='20%'><b>blockedclientversions</b></font></th>
<th width='20%'><b>check</b></font></th>
<th width='20%'><b>client access server</b></font></th>
<th width='20%'><b>databaseavailabilitygroup</b></font></th>
<th width='20%'><b>databasecopyautoactivationpolicy</b></font></th>
<th width='20%'><b>database name</b></font></th>
<th width='20%'><b>database size</b></font></th>
<th width='20%'><b>datamovereplicationconstraint</b></font></th>
<th width='20%'><b>encryptionrequired</b></font></th>
<th width='20%'><b>error</b></font></th>
<th width='20%'><b>file system</b></font></th>
<th width='20%'><b>fqdn</b></font></th>
<th width='20%'><b>hubsiteenabled</b></font></th>
<th width='20%'><b>id</b></font></th>
<th width='20%'><b>identity</b></font></th>
<th width='20%'><b>interfaces</b></font></th>
<th width='20%'><b>ipaddress</b></font></th>
<th width='20%'><b>isremotetest</b></font></th>
<th width='20%'><b>label</b></font></th>
<th width='20%'><b>latency</b></font></th>
<th width='20%'><b>latency (ms)</b></font></th>
<th width='20%'><b>localsite</b></font></th>
<th width='20%'><b>logpath</b></font></th>
<th width='20%'><b>mailbox server</b></font></th>
<th width='20%'><b>maxdumpstertime</b></font></th>
<th width='20%'><b>maximumactivedatabases</b></font></th>
<th width='20%'><b>maximumconnections</b></font></th>
<th width='20%'><b>maxmessagesize</b></font></th>
<th width='20%'><b>maxreceivesize</b></font></th>
<th width='20%'><b>maxrecipientenvelopelimit</b></font></th>
<th width='20%'><b>maxsendsize</b></font></th>
<th width='20%'><b>members</b></font></th>
<th width='20%'><b>messagelatencytime</b></font></th>
<th width='20%'><b>messages count</b></font></th>
<th width='20%'><b>minorpartnerid</b></font></th>
<th width='20%'><b>networkencryption</b></font></th>
<th width='20%'><b>networknames</b></font></th>
<th width='20%'><b>nexthopdomain</b></font></th>
<th width='20%'><b>partnerid</b></font></th>
<th width='20%'><b>queue name</b></font></th>
<th width='20%'><b>responsibility</b></font></th>
<th width='20%'><b>result</b></font></th>
<th width='20%'><b>rpc client access server</b></font></th>
<th width='20%'><b>scenario</b></font></th>
<th width='20%'><b>server name</b></font></th>
<th width='20%'><b>server role</b></font></th>
<th width='20%'><b>servers</b></font></th>
<th width='20%'><b>service endpoint</b></font></th>
<th width='20%'><b>shadowheartbeatretrycount</b></font></th>
<th width='20%'><b>shadowheartbeattimeoutinterval</b></font></th>
<th width='20%'><b>shadowmessageautodiscardinterval </b></font></th>
<th width='20%'><b>shadowredundancyenabled</b></font></th>
<th width='20%'><b>sourcetransportservers</b></font></th>
<th width='20%'><b>testmailflowresult</b></font></th>
<th width='20%'><b>type</b></font></th>
<th width='20%'><b>url</b></font></th>
<th width='20%'><b>witness directory</b></font></th>
<th width='25%'><b>exchange services status</b></font></th>
<th width='25%'><b>name</b></font></th>
<th width='25%'><b>site</b></font></th>
<th width='30%'><b>database name</b></font></th>
<th width='30%'><b>description</b></font></th>
<th width='30%'><b>error</b></font></th>
<th width='30%'><b>exchange version</b></font></th>
<th width='30%'><b>outgoingconnections</b></font></th>
<th width='30%'><b>scenario</b></font></th>
<th width='40%'><b>autodiscoverserviceinternaluri</b></font></th>
<th width='40%'><b></b></font></th>
<th width='40%'><b> </b></font></th>
<th width='40%'><b>sites</b></font></th>
<th width='450%'><b>error</b></font></th>
<th width='50%'><b>message</b></font></th>
<th width='50%'><b>operating system</b></font></th>
<th width='5%'><b>eventid</b></font></th>
<th width='5%'><b>id</b></font></th>
<th width='60%'><b>message</b></font></th>
<th width='70%'><b>message</b></font></th>
$tid = $topology.id
$tierdisplayname
$tierdisplayname = $tierqueue.displayname
$tierqueue = get-scsmenumeration|?{$_.displayname -eq $displaynsupportgrp}
$time = 0
$timebetweenpings = 50
$timecomparison = $timeofobject.days.tostring() + $days + $timeofobject.hours.tostring() + $hours + $timeofobject.minutes.tostring() + $minutes
timecreated = $event.timecreated
$time=([datetime]'12/20/2011 18:00'-(get-date)).tostring().substring(0,11)
$time=([datetime]'12/25/2011'-(get-date)).tostring().substring(0,11)
$time = [datetime]::now
$time = [datetime]::today.adddays(-$days)
"timed out" = 32000
time = $event307.timecreated
$timeleft = ($_.passwordexpires - $tod).days
$timematch = $absdiff -lt [system.timespan]::fromseconds($tolerance)
time = $matches.time
$timeofobject = (get-date) - $timeofobject
$timeofobject = $timeofobject.converttodatetime($timeofobject.$property)
$timeout = 60000
timeout /t 10
timeout /t 15
timeout /t 45
timeout /t 60
timeout = value;
time = $printjob.timecreated
$timer.delete()
$timer.enabled = $true
$timer = get-sptimerjob | ? {$_.displayname -like $filter}
$timer.interval = 60000
$timer = new-object timers.timer
$timerows = $job.enumhistory().rows
$timers = @{};
$timer.stop()
$timeserver = w32tm /query /computer:$server /source
[timespan]$downtime = 0
$timespan = $null
[timespan]$uptime = new-timespan -days $numberofdays
[timespan]$uptime=new-timespan $lbtime $(get-date)
$timess = $rproc | ?{$_.name -match ".scr"}
timestamp= "";
$timestamp = get-date -f mmddyyy-hhmmss
$timetaken = ((get-date) - $startdate).tostring().substring(0,8)
$timethresholdmins = 540
$timethresholdmins = $mondaytimethresholdmins
$time = $user.lastlogon
$title = "";
$title = "add mailbox permissions"
$title = "add more mailbox permissions"
$title = "automap mailbox"
$titledate = get-date -uformat "%m-%d-%y - %a"
$title = $db_name;
$title = "delay wsus auto approvals"
<title> diskspace report</title>
<title>diskspace report</title>
$title = "do you wish to perform an online or offline installation?"
$title = $item.name;
$title = $item.parent.schema + "." + $item.name;
$title = $item.schema + "." + $item.name;
$title=$i.title
"title" = "jobtitle";
$title = $messages.securitywarningtitle
$title = "permission type"
$title = "restart your server now?"
$title = "send as permissions"
$title = $srv_path+" - info";
-title "$title" `
title = $_.title
-title $_.title -officephone $_.phone -accountpassword $setpass
<title>$title</title>
"<title>" + $title + "</title>" + `
title = $update.title
$title = $user.title
"`tlistonly`t$tempfile" >> $logfile
$tmfr = $flow.testmailflowresult
$tmp = foreach($job in $srv.jobserver.jobs)
$tmp | ?{ $jobstoignore[$job.name] -eq $null -and ($_.enabled -eq $false -or $_.lastrun -ne "succeeded")} |%{
$tmp = $search
$tname = $topology.id
t.name = '$udt_name'";
to be used for ad lookup
$toccas = $toc.clientaccessserver
$tocep = $toc.serviceendpoint
$toclatency = $toc.latency
$tocres = $toc.result
$tocs = get-clientaccessserver | test-outlookconnectivity -rpctesttype:server
$tocs = $toc.scenario
$today = get-date
$tod = get-date
to fix this change you execution policy to something like remotesigned.
$to = $from.adddays(7)
togglesection strsrc
token_adjust_privileges | token_adjust_groups | token_adjust_default |
token_adjust_sessionid);
token_duplicate | token_impersonate | token_query | token_query_source |
$tokenfile = join-path $parentdir $tokenfile
$tokenfile = "tokens.txt"
$tokenlifetime = read-host "enter the token lifetime"
$tokenprivileges = new-object adjpriv.adjpriv+token_privileges
$tokpriv1luid.attr = [adjpriv.adjpriv]::se_privilege_enabled
$tokpriv1luid.count = 1
$tokpriv1luid.luid = $luid
$tokpriv1luid = new-object adjpriv.adjpriv+tokpriv1luid
$tolerance = 5
$top = $cellheight * 4
$top = "<html> this script is executed on server - <b>$comp</b> by user - <b> $uname </b></html>"
$topmailbox = get-mailboxstatistics -database $db.name| where-object {$_.totalitemsize -ne $null}|sort-object totalitemsize -descending |select-object displayname -first 1 | format-table displayname -hidetableheaders | out-string
$topmailboxsize = convert-bytestosize $topmailboxsize.totalitemsize.value.tobytes()
$topmailboxsize = get-mailboxstatistics -database $db.name| where-object {$_.totalitemsize -ne $null} | sort-object totalitemsize -descending | select-object totalitemsize -first 1
$topologycollection = $topologylist.coltopologies
" topology : found topology $foundtopology "
$topologylist = get-topologysettings
" topology : parent topology $parenttopology"
$topologysettings = get-topologysettings -topology $foundtopology
tortoise
to see the functions and help in this module run these lines:
$to = $sendto
$total
$total = 0
total: {0:n0} mb
$total = 100
$totalactivelrgmbs++
$totalactivelrgmbs = 0
$totalactivemb++
$totalactivemb = 0
$totalactivestdmbs++
$totalactivestdmbs = 0
$totalcharge = $mbxcharge
$totalcharge = $mbxcharge + $bbcharge
$total += $current
$totaldbsize = 0
$totaldbsize = $totaldbsize + $dbstat.totalitemsize.value.tomb()
$totalfailednew += " ; "
$totalfailednew = $null
$totalfailednew = "ok"
$totalfailednew += $service
$totalfiltercount = $doc.selectnodes("/wfpstate/layers/item/filters/item[not(flags/item = ""fwpm_filter_flag_boottime"")]").count
$total = (get-childitem $path -erroraction silentlycontinue -filter $filter | measure-object -property length -sum -erroraction silentlycontinue).sum
$totalinactivemb = 0
$totalinactivemb = ($totalnumbermb - $totalactivemb)
$totalindexedcount = $doc.selectnodes("/wfpstate/layers/item/filters/item[not(flags/item = ""fwpm_filter_flag_boottime"") and flags/item = ""fwpm_filter_flag_indexed""]").count
$totaljobcount = $srv.jobserver.jobs.count;
$total = $listitems.count - 1
$totalmailboxes+=$mailboxes.count
$total = $members.count
$totalmetric = ($interface.interfacemetric + $netroute.routemetric)
$total = $null
$totalnumbermb++
$totalnumbermb = 0
$totalpings = ($destipaddresses.length)*$pings
totalsize = (getfoldersize($dir.pspath))
$totalsize = $_."move-mailbox".taskfooter.totalsize
$total = $tableheaders.count - 1
total time : $timetaken
"total: $total"
$total = $total + $count
$total = $wideitems.count - 1
$totdays=$noofdays.days
$totsize = (get-moverequeststatistics -identity $user.identity | select totalmailboxsize).totalmailboxsize
to use options greater than 4" -foreground "green"
$to = "valy greavu <valy.greavu@outlook.com>"
$tows = test-outlookwebservices -clientaccessserver $owssrv
$tpwc = test-powershellconnectivity -clientaccessserver $pwcsrv
</tr>
</tr>"
</tr>" }
</tr>"}
<tr>
<tr>`
$trace32 = "c:\acsa\trace32.exe"
$transactionlogs[0..4] | %{$messagebody += $_.name + " last written to on " + ($_.lastwritetime).tostring().substring(0,10) + " at " + ($_.lastwritetime).tostring().substring(11,8) + "<br>"}
$transactionlogs[-1..-5] | %{$messagebody += $_.name + " last written to on " + ($_.lastwritetime).tostring().substring(0,10) + " at " + ($_.lastwritetime).tostring().substring(11,8) + "<br>"}}
$transactionlogs = get-childitem -path $_.logfolderpath -filter "*.log" | ?{ ((get-date).addhours(-$hours) - $_.lastwritetime) -gt 1 }
$transactionlogs = get-childitem -path $_.logfolderpath -filter "*.log" | sort lastwritetime | select -first 1
$transactionlogs.gettype()
$transcript_enabled = $true
"transcripts are easier to read in wordpad."
$transportserverfilter = ""
$transportserver = $_.name
$transportservers = @()
$transportservers | % {
$transspeed = (get-moverequeststatistics -identity $user.identity | select bytestransferredperminute).bytestransferredperminute
trap
trap{
trap {add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') error - $_";break}
trap {continue}
trap{"error assigning logonhours to $dn - $_"; continue;}
trap {"error: $_"; break;}
trap [exception]
trap [systemexception] { "error trapped" ; continue }
trap [system.net.sockets.socketexception] { continue; }
traversesubkeys($currentnewkey)
traversesubkeys $newregistrykey
<tr bgcolor=
<tr bgcolor='
<tr bgcolor=""
<tr bgcolor='white'>
"treedomain"
$treenode.expandall()
$trg_props =
$trialrun = $false
$trialrun = $true
$trick = $auth.name
"trigger defined on: "+$item.parent.name+"<br>";
$trigger_details = gettriggerdetailstable $item;
$trigger_details = $trigger | convertto-html -head $colstyl -property isenabled, createdate, datelastmodified, delete, deleteorder, insert, insertorder, update, updateorder;
</triggers>
<triggers>
$triggers = getdatabasetriggers $sql_server $db;
$triggers = $null;
$triggers += $table.triggers;
$trnfile = join-path $backupshare "$db.trn"
tr:nth-child(even){ background-color:
tr:nth-child(odd){ background-color:
tr{padding:10px 10px 10px 10px;border:none;}
</tr></table>
</tr></table><br><a href=""
<tr><td align=""center valign=""top"" bgcolor=""
<tr><td bgcolor=""
<tr><tr>
$true
$true {$cred.flags = [psutils.credman+cred_flags]::username_target}
$true {$global:messagebody += "`r`n<tr>$shtmlcellstyle $wsusserver</td>$shtmlcellstyle $parentwsusserver</td>$stemp <b> something went wrong connecting to the wsus interface on $wsusserver using port $portnumber with ssl: <br> `r`n $error</b></td></tr>"}
$true {$messagebody = "$shtmltablestyle `r`n<tr>$shtmlcellstyle <b> something went wrong connecting to the wsus interface on $wsusserver using port $portnumber with ssl: <br> `r`n $error</b></td></tr></table>"}
$trusts = $forest.getalltrustrelationships()
$trust.trusteddomaininformation |
$trvfunctions.add_mousedoubleclick($handler_trvfunctions_mousedoubleclick)
$trvfunctions.anchor = 'top, bottom, left, right'
$trvfunctions.imagelist = $imagelist
$trvfunctions.location = '10, 32'
$trvfunctions = new-object system.windows.forms.treeview
$trvfunctions.nodes.clear()
$trvfunctions.nodes.item($pgse.currentdocumentwindow.title).expand()
$trvfunctions.nodes.remove($trvfunctions.selectednode)
$trvfunctions.nodes.remove($trvfunctions.selectednode.parent)
$trvfunctions.size = '685, 423'
$trvfunctions.tabindex = 1
try
try {
try{
try {$accelerator = $after[0]} catch {$accelerator = "$itemno"}
"try again" = 10
try {$computerlist = get-content $inputfile}
{try {[datetime]"$($entry.day)"} catch{}} {
try { $destmember = get-aduser -filter {samaccountname -eq $destinationaccount} -property memberof | select memberof }
try { $exists = get-aduser -ldapfilter "(samaccountname=$sam)" }
"trying to start adws"
try {$myfile = (get-content $netlogonpath)[-1..-500]}
try{$registry = [microsoft.win32.registrykey]::openremotebasekey([microsoft.win32.registryhive]::localmachine,$computername);}
try { $sourcemember = get-aduser -filter {samaccountname -eq $sourceaccount} -property memberof | select memberof }
try { $trvfunctions.nodes.item($pgse.currentdocumentwindow.title).expand() } catch { }
$tsbclearfilter.add_click($handler_tsbclearfilter_click)
$tsbclearfilter.displaystyle = "image"
$tsbclearfilter.image = $imagelist.images.item("redx")
$tsbclearfilter = new-object system.windows.forms.toolstripbutton
$tsbclearfilter.tooltiptext = "clear the filter"
$tsbrefreshtreeview.add_click($handler_tsbrefreshtreeview_click)
$tsbrefreshtreeview.displaystyle = "image"
$tsbrefreshtreeview.image = $imagelist.images.item("refresh")
$tsbrefreshtreeview = new-object system.windows.forms.toolstripbutton
$tsbrefreshtreeview.tooltiptext = "refreshed the function treeview"
"ts enable"
$tsenv:machineobjectou="ou=kiosk,ou=div0,ou=myou,dc=domain,dc=local"
$tsenv:machineobjectou="ou=kiosk,ou=div1,ou=myou,dc=domain,dc=local"
$tsenv:machineobjectou="ou=kiosk,ou=div2,ou=myou,dc=domain,dc=local"
$tsenv:machineobjectou="ou=noncompliant,ou=myou,dc=domain,dc=local"
$tsenv:machineobjectou="ou=ws,ou=hrm,ou=div1,ou=myou,dc=domain,dc=local"
$tsenv:machineobjectou="ou=ws,ou=ict,ou=div0,ou=myou,dc=domain,dc=local"
$tsenv:machineobjectou="ou=ws,ou=neur,ou=div2,ou=myou,dc=domain,dc=local"
$tsenv = new-object -comobject microsoft.sms.tsenvironment
$tsttop.items.add($labfunctionfilter)
$tsttop.items.add($tsbclearfilter)
$tsttop.items.add($tsbrefreshtreeview)
$tsttop.items.add($txtfunctionfilter)
$tsttop.location = '0, 0'
$tsttop = new-object system.windows.forms.toolstrip
$tsttop.size.height = 32
$tsttop.tabindex = 1
$tsvncommand = "& tortoiseproc.exe /command:add /path: `"$($filepath)`""
$tsvncommand = "tortoiseproc.exe /command:checkout /path:`"$($checkoutpath)`" /url:$($repourl)"
$tsvncommand = "& tortoiseproc.exe /command:commit /path: `"$($filepath)`" /logmsg:`"$($commitmessage)`""
$tsvncommand = "tortoiseproc.exe /command:properties /path: `"$($filepath)`""
$tsvncommand = "tortoiseproc.exe /command:remove /path: `"$($filepath)`""
$tsvncommand = "tortoiseproc.exe /command:update /path:`"$($workingpath)`""
$t = $t -as [type[]]
ttl = "0";
"tty/tdd phone" = "phone:ttytddphone";
'tue' {
$tue = $_.tue
twitter: @rowdybullgaming
$txt1.databindings.defaultdatasourceupdatemode = 0
$txt1.location = $system_drawing_point
$txt1.name = "txt1"
$txt1 = new-object system.windows.forms.textbox
$txt1.size = $system_drawing_size
$txt1.tabindex = 0
$txt1.text = $pcname
$txtcode = gc "$path\enumopenfiles.vb" | out-string
$txtfunctionfilter = new-object system.windows.forms.toolstriptextbox
$txtfunctionfilter.size = '100, 25'
$txtfunctionfilter.text = [string]::empty
$txt = $txtpath + $txtname
$type =
type = "-"
$type = 0
type = 'applicationpool'
type : $($cred.type)
type_desc as object_type
$typeedittoolstripmenuitem.add_click({click-typeedittoolstripmenuitem -sender $typeedittoolstripmenuitem -eventarg $_})
$typeedittoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
$typeedittoolstripmenuitem.name = "typeedittoolstripmenuitem"
$typeedittoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
$typeedittoolstripmenuitem.text = "edit type"
$typeedittoolstripmenuitem.visible = $true
$typeelement.innertext = $($viewnode.nodes[0].tag)
$typeelement = $selectedbyelement.appendchild($myxml.createelement("typename"))
$type = $ensureattribute
$type = $ensurechildnode
type = $item.type
type = $matches.type.replace('[','').replace(']','')
$type = [microsoft.win32.registryhive]::localmachine
typeof`(nativecredential`)`)`;
type = 'service'
type = 'task'
type = $type;
$tzinfo = $null
$tzinfo = [system.timezoneinfo]::findsystemtimezonebyid($timezonestandardname)
$u++
$u=1
u/6gaztlaaaaaaaaaaaaaaaaaaaaaihtnsvry8h/sn8a/7f8ap+xfad/sxwa/7f8ap+xfad/sxwa/7f8ap+xfad/sxwa/7f8ap+xfad/sxwa/7f8ap+xfad/sn8a/9hlwf+jbjblaaaaaaaaaaaaaaaaaaaaaitw
$uac=$objuser.properties.item("useraccountcontrol")
$uac=$uac.item(0)
$ua_dbcounters|select database,total
$ua_dbcounters=$ua_dbcounters+1;
$ua_dbcounters[$ua_dbcounters.count-1] = $dbcounters[$i];
$ua_dbcounters[$ua_dbpointer].total++;
$ua_dbpointer++;
$ua_dbpointer=0;
$uddts = getuddts $sql_server $db;
$uddts = $sql_server.databases[$db_name].userdefineddatatypes;
$udf_idx = getindexinfo $item;
$udf_props=
$udfs = $db.userdefinedfunctions | where-object { $_.schema -eq $schema -and -not $_.issystemobject }
$udfs_path = "$output_path\userdefinedfunction\"
$udpclient.close()
$udpclient = new-object system.net.sockets.udpclient($destination, 6000)
$udt_name = $item.name;
$udt_props =
$udtts = $db.userdefinedtabletypes | where-object { $_.schema -eq $schema }
$udtts_path = "$output_path\userdefinedtabletypes\"
[uint32]
uint32 desiredaccess, out intptr tokenhandle);
[uint32]$percentcomplete
[uint64] $script:totalbytes = 0
[uint64] $script:totalcount = 0
uint buffersize = 1024;
uint desiredaccess,
uint flags,
uint status
uint version;
"unable to find $includefile"
$uname = get-content env:username
$uname = "username";
$unbind,
$unbindcomponentid
-unbind $true
unblock-file -path "$filename"
$uncoabpath = $localoabpath.replace("c:",$baseuncpath);
"unexpected error: $_"
$uninapp = get-wmiobject -computername $computername -query "select * from win32_product where name='$endapp'"
$uninapp.uninstall()
$uninstallkeys.getsubkeynames()|%{
$uninstallkeys = $null;
$uninstallkeys = $registry.opensubkey("software\microsoft\windows\currentversion\uninstall",$false);
$uninstallkeyswow6432node.getsubkeynames()|%{
$uninstallkeyswow6432node = $null;
$uninstallkeyswow6432node = $registry.opensubkey("software\wow6432node\microsoft\windows\currentversion\uninstall",$false);
uninstall-spsolution -identity $targetsolution -allwebapplications -language $solutionlanguage -local:$solutionlocal -whatif:$whatif
uninstall-spsolution -identity $targetsolution -language $solutionlanguage -local:$solutionlocal -whatif:$whatif
uninstall = $_.uninstallstring
$uniquekeyvalue.add($keyfieldvalue, $keyfieldvalue)
$uniquekeyvalue.add($keyfieldvalue, $valuefieldvalue)
$uniquekeyvalue = new-object system.collections.specialized.namevaluecollection
$uniquemembers = @()
$uniquemembers = $members | sort-object -unique
"universal" { return $universalcolor }
unplannedoperatingsystemreconfiguration, plannedapplicationmaintenance, applicationinstallation,
} until ($char -eq '\')
} until ($exitflag -eq $true)
until ($i -gt 3)
} until ($img4.left -eq ($cellwidth * 10))
} until ($len -eq 1)
until ($percentcomplete -ge 100)
} until ($sheet.cells.item($j, $id).text -eq "")
} until ( $splist.getitems().count -eq 0 )
until ($status -eq 0)
$unusedlist = @()
$unusedlist += $upnsuffix;
$unverifieddomains = get-qsunverifieddomains
unzip $savefilename $extractdir
$up.commit()
$update = @{
$update.accepteula()
$updateaccess = $false
$updateaccess = $true
$updatecategories = $update.categories | select-object name
$updatecollection = @()
$updatecollection += $update
update-compilerinfo
"updated sid history report is located here: $newreport"
updated : $([string]::format("{0:yyyy-mm-dd hh:mm:ss}", $cred.lastwritten.touniversaltime())) utc
update-fedata
"update for microsoft .net",
update-formtitle
"update for windows",
updategp
update-inputvariables
$update.ishidden = $hidestatus
update-msolfederateddomain -domainname $federateddomain 2`>`&1 `| foreach-object `{`$_.tostring`(`)`} `| out-file `$logfile -append
updateoabwebconfig
updateprogress
updateprogress -activity 'cloud configured' -status 'complete' -currentoperation 'done' -percentcomplete 100
updateprogress -currentoperation "configuring network on node $($_.name)... "
updateprogress -currentoperation "configuring node $($_.name)... "
updateprogress -currentoperation "configuring node: $($_.name)"
updateprogress -currentoperation "node $($_.name) back online "-percentcomplete ( ( ++$count / $setting.node.count ) * 100 )
updateprogress -currentoperationnode "$($_.name) back online." -percentcomplete ( ( ++$count/$setting.node.count ) * 100 )
updateprogress -currentoperation "settings for node $($_.name)"
updateprogress -currentoperation "waiting for node $($_.name)... "
updateprogress -currentoperation "waiting for node $($_.name)."
updateprogress -percentcomplete 10
updateprogress -percentcomplete 100
updateprogress -percentcomplete ( ( ++$count / $hvsessiontable.count ) * 100 )
updateprogress -percentcomplete( ( ++$count/$hvsessiontable.count ) * 100 )
updateprogress -percentcomplete ( ( ++$count / $sessiontable.count ) * 100 )
updateprogress -percentcomplete( ( ++$count/$sessiontable.count ) * 100 )
updateprogress -percentcomplete ( (++$count/$storagesessiontable.count) * 100 )
updateprogress -status 'stage 2 hyper-v cluster' -currentoperation ' ' -percentcomplete 0
updateprogress -status 'stage 2 hyper-v cluster' -percentcomplete 0 -currentoperation ''
updateprogress -status 'stage 3 hyperv settings' -percentcomplete 0
updateprogress -status 'stage 3 storage cluster: file shares' -percentcomplete 0 -currentoperation "creating file shares"
updateprogress -status 'stage 3 storage cluster' -percentcomplete 0 -currentoperation ''
updateprogress -status 'stage 4 hyperv settings' -percentcomplete 0 -currentoperation ' '
updateprogress @update
$update.pstypenames.add('pswindowsupdate.wuinstall')
$update.pstypenames.add('pswindowsupdate.wulist')
$update.pstypenames.clear()
$updatereport = @()
$updatereport += $theseupdates
$updates = [activator]::createinstance([type]::gettypefromprogid("microsoft.update.session",$computer))
$updates= $allupdates | where {$_.producttitles -match $regexpcateg `
$updatescope.approvedstates = "any"
$updatescope = new-object microsoft.updateservices.administration.updatescope
"update" {$search = "update"}
$updateserver = "localhost"
$updatesextradatacollection = @{}
$updatesextradatacollection.add($update.identity.updateid,@{kb = $kb; size = $size})
$updates_filtered = @()
$updates_filtered += $_
$updates_filtered | foreach {
($updates_filtered,$nb_rejected) = filterupdates($updates)
$updates | foreach {
$updates = get-pendingupdates -computername $server.properties.name
update-sidmapping
update-spsolution -identity $targetsolution -literalpath $packagepath -gacdeployment:$solutiongacdeployment -caspolicies:$solutioncaspolicies -force:$solutionforce -local:$solutionlocal -whatif:$whatif
$updates | where { $_.isapproved -eq $true } | foreach { `
$updateuser = $founduser.getdirectoryentry()
$updateuser.put("msexcharchivestatus", $archivestatus)
$updateuser.setinfo()
$update = $wsusserver.getupdate($approval.updateid)
"updating background and setting ie homepages"
$uperr = '<font color="
$upndn = "cn=partitions,cn=configuration,$domaindn"
$upndomain = read-qshostdomainchoice
$upn = "$enterprefix"+"$i"+"$mail"
$upn = "$($newuser.samaccountname)@$domain"
$upnsuffixes = @( $domain.dnsroot )
$upnsuffixes += $domain.dnsroot
$upnsuffixes = get-adobject -identity $upndn -properties upnsuffixes | foreach-object { $_.upnsuffixes }
$upnsuffixes = get-qsdomainsuffixes
$upnsuffixes = @($upnsuffixes)
$upnsuffix = $user.upnsuffix
$upn = $user.sam + "@" + $upnsuffix
$up["pictureurl"].value = $pictureurl
$up = $profilemanager.getuserprofile($line.username)
$uptime -= $downtime
$uptime = (get-date) - ([system.management.managementdatetimeconverter]::todatetime((get-wmiobject -class win32_operatingsystem -computername $computer).lastbootuptime))
$uptime = $null
uptime = $uptime
$uptime = .\uptime.exe $servername
'url'
$url
$url = $_
$url,
$url = $entry.content.src
$urlexists = get-spweb $url -erroraction silentlycontinue | select exists -erroraction silentlycontinue
$url = $fielddata
$urls | % {
$urlstring = $machine.iehomepages
$urlstring = $passurl
-url "$url" `
url = $url
url = $url.trim()
usage:
$usbdestination = $usbdriveletter + ":"
$usbdisknumber = $disks | get-partition | where-object driveletter -eq $usbdriveletter | select -expandproperty disknumber
$usbdisknumber = $disks | where numberofpartitions -eq 0 | select -expandproperty number
$usbdisksize = $disks | where-object number -eq $usbdisknumber | select -expandproperty size
"$usbdriveletter is not a removable drive"
$usbdriveletter = $usbdriveletter.substring(0,1)
$usbdriveletter = $usbdriveletter.toupper()
$useasdefault = $default
$useasdefault = $itemno
$useautodiscover = $false
used: {1:n0} mb
$used = $drives |where-object {$_.name -eq $shareddrive} |select-object -property used
"used (gb)" = [math]::round(($thisdisk.used /1024 /1024 /1024),2)
$usedspacegb = $sizegb - $freespacegb;
usedspace = $volumeidentifier.used
$user
user= "";
$user1 = [adsi]$user1dn
$user2 = [adsi]$user2dn
$useraccounts = @()
$useraccounts += $thisuser
$useraccount = "user1@"+$domainfqdn
$user = [adsi]"$($account.properties.adspath)"
$userarray = $domuser.split("\")
"[user]-attribues updated for " + $objuser.distinguishedname
$userclass = get-scsmclass -name microsoft.ad.user$
$usercn = "cn="+$objnewuser.cn.tostring() + ","
$usercollection = get-aduser -searchbase $targetoudn -filter *
$usercollection = search-adaccount -accountinactive -timespan "$numberofdays.00:00:00" | where {($_.objectclass -eq 'user') -and ($_.objectclass -ne 'computer')}
$user = $computer.create("user", $name)
$usercount = 0
$usercount = $usercount + 1
$usercreation = dsadd user $userdn -samid $samaccountname -fn $fn -ln $ln -display $displayname -upn $userprincipalname -pwd $password -mustchpwd no -desc $description -disabled no -s $server
$usercreationupper = ($usercreation -replace " ","").trim().toupper()
$user = $credential.username
$user = ($cred.getnetworkcredential()).username
$userd,
$userdatafilename = "users.csv"
$userdb = "mailbox1297499996"
$user.deletetree()
$userdesc = $name.description
$userdisplayname = $userprofile.displayname
$userdn
$userdn = "cn=" + $commonname + "," + $ou
$userdn = $mailbox.distinguishedname.replace("/","\/")
$userdn = $tempmailbox.distinguishedname.replace("/","\/")
userdn = $userdn
$userdomain = $env:userdomain
$userdomain = [string]([adsi] "").name
$useremail = user.email
$useremail = $userobject.mail
$user = $env:username
user = $event307xml.event.userdata.documentprinted.param3
user = $event.properties[0].value
$userfullname = $userobject.givenname + " " + $userobject.sn
$user = get-aduser ([environment]::username).tostring() -properties mail
$user = get-aduser ([environment]::username).tostring() -properties mail -server $server
$user = get-aduser -identity $username | get-adobject -properties lastlogon
$user = get-aduser $samaccountname -properties info -server $server
$user=get-qaduser $i.username
$user = get-qaduser $manager
$user = get-user $identity -erroraction silentlycontinue
$usergroup = "managers",
$usergroups = get-usergroupmembership -userdn "cn=$($existinguser.sid),$($adspath)"
$usergroups = get-usergroupmembership -userdn $existinguser.path
$usergrps = "lusrmgr.msc -a /computer=$computername"
$userid=$i.name
<userid>$localusername</userid>
$userid = new-object microsoft.exchange.webservices.data.userid($usersmtpaddress)
($_.userid.primarysmtpaddress -eq $usersmtpaddress)}
($_.userid.primarysmtpaddress -eq $usersmtpaddress) -and `
$userid = $user.displayname
$userinfo = get-csaduser -identity $user
$userinfo = get-csaduser $user
$userinfo = get-csuser -onofficecommunicationserver -identity $user
$user.info = "user-testaccount owner: " + $userrequester.tostring()
$userinput = $null
$userinput = read-host "are you sure you wish to add $destacc to these groups?`n[y]es, [n]o or e[x]it"
$userlastlogon = get-aduser -identity $samaccountname -properties lastlogon -server $domaincontroller.name
$userlist = get-qaduser $findusername | sort name | select name, samaccountname, department, company, description, telephonenumber, email
$userlist = get-qaduser $wmipcusername | sort name | select name, samaccountname, department, company, description, telephonenumber, email
$userlist | out-gridview -title "find pc user"
$userlist | out-gridview -title "find users"
$userloginid = $userobject.cn
$userlogonduration = $explorer
$userlogonduration = $explorer[0]
$userlogonduration = $null
$user.logonhours.value = $lh
$usermailbox = get-mailbox $mailbox
$usermodulepath = getinstalldir
user = $myuser
$username
$username,
$username = $ace.trustee.name
$usernamead = ([environment]::userdomainname).tostring() + "\" + ([environment]::username).tostring()
$username = $args[0]
$username = $arrlog[7]
$username = $arrlog[8]
$username = $credential.username
`$username `= `$cred.username`;
username : $($cred.username)
$username = $currentusermailaddress
$username = $env:userdomain + "\" + $env:username
" `$username = `$env:userdomain + `"\`" + `$env:username`r`n"
$username=($env:username),
$username=$env:username.tostring()
username = (get-wmiobject -class win32_computersystem -computername ([string]$workstation.name)).username
$username = invoke-expression $expuser
username = $message
$username=$null
$username = $objregkey.getvalue("defaultusername")
$username = $profile.item("accountname")
$username =($qspart.split("="))[1]
$username = $query[2].substring(14)
username_target = 0x4
username = $username;
$username = ($username.split("@"))[0]
$username = ($username.split("/"))[1]
$username = ($username.split("\"))[1];
$username = ($username.split("%40"))[0]
$username = $username.tolower()
$username = $userprofile[[microsoft.office.server.userprofiles.propertyconstants]::accountname].value
$username = $worksheet.cells.item($row,$column).value()
"[user]-no changes were done on = " + ($users[$k] -replace $source,$destination).tostring()
$usern="test-account"
$user = $null
$usero,
$userobj | add-member noteproperty -name "alias" -value $members[$i].alias
$userobj | add-member noteproperty -name "authoritative domain" -value $trick
$userobj | add-member noteproperty -name "displayname" -value $members[$i].name
$userobj | add-member noteproperty -name "distribution group" -value $dg
$userobj | add-member noteproperty -name "organizationalunit" -value $members.name
$userobj | add-member noteproperty -name "primary smtp address" -value $members[$i].primarysmtpaddress
$userobj | add-member noteproperty -name "recipienttype" -value $members[$i].recipienttype
$userobjectcreatedate = $userobject.whencreated
$userobjectdescription = $userobject.description
$userobjectenabled = $userobject.enabled
$userobject = get-aduser -identity $userdn -properties *
$userobject = get-aduser -identity $userdn -properties cn, givenname, sn, mail, company
$userobjectlastlogon = get-aduserlastlogon($userobjectname)
$userobjectlastlogon = "never"
"user object name,last logon date/time,create date,password last set,description" | out-file $csvfilepath -encoding "default"
$userobjectname = $userobjectname.replace(",", " ")
$userobjectname = $userobject.samaccountname
$userobjectpasswordlastset = $userobject.passwordlastset
$userobj = new-object psobject
$userorg = $userobject.company
$useros = gwmi win32_operatingsystem -computername $computername
"user $passeddomain\$usernametoadd is now local administrator"
$userpc = $env:computername
-userprincipalname "$accountname@$upndomain" `
-userprincipalname $localuser.userprincipalname `
$userprincipalname = $testaccountname.trim()+$domaindnsname
-userprincipalname $_.'userprincipalname' `
user = $printjob.properties[2].value
$userprofile.commit()
$userprofile[[microsoft.office.server.userprofiles.propertyconstants]::pictureurl].value = $userpicture
$userprofile["pictureurl"].value = $absoluteurl
$userprofile["pictureurl"].value = $null
$userprofiles = $profilemgr.getenumerator()
$user.psbase.invoke("setpassword", $password)
$user.put($attrname, $value)
$user.putex(1, $attrname, 0)
$userpwdage = $user.pwdage
$user = read-host "enter user account name (ex: john.doe) "
$user = read-host "enter user account name (ex: john.doe): "
$userrequester = read-host 'what is the requester e-mail address?'
$userrequester = read-host '[wrong value] what is the requester e-mail address?'
user = $resource.gettype().invokemember("user","getproperty",$null,$resource,$null)
$userresource = new-object -typename psobject -property @{
$users.add($username,$obj)
$users = $adsi.psbase.children |where-object {$_.psbase.schemaclassname -eq "user"} |select-object -expandproperty name
$users=$allmembers | ?{$_.recipienttype -notlike "*group*"} | sort -uniq
$user=$_.samaccountname
$usersam = $user.sam
$users = dsquery user $source -limit 0
user = $session.gettype().invokemember("user","getproperty",$null,$session,$null)
$usersession = new-object -typename psobject -property @{
$user.setinfo()
$users = export-clixml -path $savestatefile
$users = get-adobjects -adspath $adspath -searchfilter $searchfilter
$users = get-adobjects -adspath $adspath -searchfilter $searchfilter |foreach {$_.properties.name |convert-fsptousername}
$users.getenumerator() | foreach {
$users = get-msoluser -all | where {$_.islicensed -eq "true" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid}
$users = get-user -filter {windowsemailaddress -ne $null -and (mobilephone -ne $null -or phone -ne $null) -and windowsemailaddress -ne $emailaddress}
$usershashtable = @{}
$usersid
$users = import-clixml -path $savestatefile
$users = "mail1@mail.net, mail2@mail.net"
,$usersmtpaddress)
$usersmtpaddress = $nameresolutioncollection[0].mailbox.address
$usersmtpaddress = $verifiedusername[0].mailbox.address
$userspecifiedfeaturenames = $feature[$userspecifiedpolicy].split(",")
$user = $spfielduservalue.user;
$users[$username]["activesyncclients"].add($asclient,1)
$users[$username]["activesynclastaccess"]=$arrlog[0]
$users[$username]["activesyncproxyuser"]=1
$users[$username]["activesyncuser"]=1
$users[$username]["ewsclients"].add($ewsclient,1)
$users[$username]["ewslastaccess"]=$arrlog[0]
$users[$username]["ewsuser"]=1
$users[$username]["webdavclients"].add($wdclient,1)
$users[$username]["webdavlastaccess"]=$arrlog[0]
$users[$username]["webdavuser"]=1
$users = $users | select displayname,firstname,lastname,title,company,department,windowsemailaddress,phone,mobilephone
$userswithpolicycurrentlyappliedhashtable = @{}
$userswithpsocurrentlyapplied = $currentpasswordpolicyobject."msds-psoappliesto"
$userswithpsopreviouslyapplied = $passwordpolicyobject."msds-psoappliesto"
$users = "yourdistrolist@company.com"
$usertag='username',
$usertocreate = ($users[$k] -replace $source,$destination).tostring()
$usertopermission = read-host "enter the username for the person or group you want to give access to this mailbox (e.g you@domain.com)"
"[user]-user account was moved = " + ($users[$k] -replace $source,$destination)
$user = $userarray[1]
user = $username
"user " + $user.samaccountname + " is a member of group domain users"
"user " + $user.samaccountname + " is a member of group engineering"
$usesecureconnection = $false
$usessl = $false
"uses windows server 2012 media to install necessary components related to .net 3.5 feature (net-framework-core)"
"uses windows update to download and install necessary components related to .net 3.5 feature (net-framework-core)"
using( gzipstream gzstream = new gzipstream( inputstream, mode ) )
using( gzipstream gzstream = new gzipstream( outputstream, mode ) )
using( memorystream inputstream = new memorystream( input ) )
using( memorystream outputstream = new memorystream( input.length * (mode == compressionmode.compress ? 1 : 5) ) )
using system;
using system.collections.generic;
using system.componentmodel;
using system.io;
using system.io.compression;
using system.net;
using system.net.networkinformation;
using system.runtime.interopservices;
using system.text;
using volumecontrol.library.constants;
using volumecontrol.library.structs;
using volumecontrol.library.win32;
$usr
$usr = ""
$usr2 = ""
$usr2 | format-list name, useraccountcontrol,samaccountname, msds-allowedtodelegateto, objectcategory | out-file $filename ;$filename = $filename + "spn.txt"
$usr2 = $result.getdirectoryentry()
$usrarray = @()
$usrarray2 = @()
$usrarray2 = $usrarray2 + $usrarray[$i]
$usrarray = $usrarray + $usr
$usr_dbperm = $objs | convertto-html -head $colstyl -property databasepermission ;
$usr_objperm = $objs | convertto-html -head $colstyl -property permissiontype, objectname ;
$usr_perm = getusrrights $item $db;
$usr_props =
$v4address=$ipv4address+"/"+$ipv4prefixlength
/v8naf7/dwn+/w1p/v8naf7/dwn+/w1p/v8naf7/dwn+/w1p/v8naf7/dwn+/w1p/v8naf7/t472/7y4tv+ibjn/h209eaaaaaaaaaaaaaaaaaaaaacdadmqine7/8k/vf/otxh/xkfk/8shsv/eour/xkfk/8sh
$val = $client.dhcprequestparams($_.id, 245)
$validatechoice = read-qshostyesno -title 'validate existing?' `
"validated to be a member of a workgroup, proceeding with domain join"
[validatelength(1,2)]
[validatelength(24,24)]
[validatenotnull()]
[validatenotnullorempty()]
[validatepattern("\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b")]
[validaterange(0,31)]
[validaterange(0,32)]
[validaterange(0,366)]
[validaterange(0,5)]
[validaterange(0,6)]
[validaterange(0,7)]
[validaterange(0,92)]
[validaterange(1000,2100)]
$validateredirectionurlcallback = {
[validatescript({
[validatescript({(get-adgroup $_)})]
[validatescript({(get-adobject -filter 'samaccountname -eq $_')})]
[validatescript({$_ -gt $startdate})]
[validatescript({ $_ | % { [system.net.ipaddress]::parse($_) } } )]
[validatescript({[system.net.ipaddress]::parse($_)} )]
[validatescript({test-path $_ -include *.iso })]
[validatescript({ test-path -path $_ })]
[validatescript({test-path -path $_})]
[validatescript({test-path -path "ad:$_"})]
[validatescript({test-path -path $_ -pathtype leaf})]
[validatescript({ test-path -pathtype:leaf -path:$_ })]
[validateset('1 knowledge consistency checker','2 security events',
[validateset("absolut", "relative", "domain")]
[validateset("base", "onelevel", "subtree", "0", "1", "2")]
[validateset("computer", "user", "group")]
[validateset("currentusercurrenthost","currentuserallhosts","alluserscurrenthost","allusersallhosts")]
[validateset("driver", "software")]
[validateset("driver","update", "security", "critical")]
[validateset('enable','disable')]
[validateset("gporead", "gpoapply", "gpoedit", "gpoeditdeletemodifysecurity","none")]
[validateset("inbox","deleted items","sent items","drafts")]
[validateset("inbox","sentitems","deleteditems")]
[validateset("normal","low","high")]
[validateset("ntfs","refs","exfat","fat32","fat")]
[validateset("permissive","strict")]
[validateset("samaccountname","displayname")]
[validateset("sql","ftp","activedirectory","web")]
[validateset("true","false")]
$value
$value = ""
(($value[1] -eq 1) -and ($value.length -eq 12)) `
$_.value["activesyncclients"].getenumerator() | % { $activesyncclients += "$($_.key); "}
$value = $args[0]
value = $currentlogginglevel
$valuedata = 0
$valuedata = 1
$value = $defaultval
$_.value["ewsclients"].getenumerator() | foreach {
$valuefieldvalue = $listitem[$valuefieldname]
$valuefieldvalue = $listitem[$valuefname]
$valuefname = $valuefieldname[$name]
valuefrompipelinebypropertyname=$false,
valuefrompipelinebypropertyname=$true
valuefrompipelinebypropertyname=$true,
valuefrompipelinebypropertyname=$true)]
valuefrompipelinebypropertyname = $true )]
valuefrompipelinebypropertyname = $true)]
valuefrompipelinebypropertyname=$true)]$computer = '.')
valuefrompipeline=$false,
valuefrompipeline= $true
valuefrompipeline= $true)]
valuefrompipeline=$true,
valuefrompipeline = $true,
$value = getenvironmentvariable($name)
value = (get-itemproperty -path $regpath).$diagnosticsubkey
$value = $hours.substring(8*$k, 8)
$value = invoke-expression $value
value = $logginglevel
$value= $matches.value.trim()
$value = "<" + $modification.value + "/>"
$value = $modification.value
$_.value.pstypenames -contains 'system.__comobject' -and -not ($scopedopt -band $_.options)
$value=$readuninstall.getvalue("displayname")
" : -value $regvalue -force"
$values,
$value = $sheet.cells.item(1, $k).text
$value = $sheet.cells.item($j, $id).text
$value = $sheet.cells.item($j, $k).text
$values = $result.properties.item($attr)
$values += $script:adfssubjectname
$value = $value.replace("""", """""")
$value = $value.substring(0, ($lussecretdata.length / 2))
$_.value["webdavclients"].getenumerator() | % { $webdavclients += "$($_.key); "}
$value = $xml.$name
$varcontentlink = $_.'contentlink'
$vardomainjoin = invoke-expression "$temp"
$vardumpfile = "$tsenv:logpath\ztivariablesexport.log"
variables and begin inserting rows to table
$variationcount = [system.convert]::toint32($binarystr, 2) + 1
$varnamespace = $_.'namespace'
$varpageurl = $_.'fullpageurl'
$varposition = [int]$_.'position'
$varposition = $varposition + 10
$vartitle = $_.'title'
$varwebpartzone = $_.'webpartzone'
$varweburl = $_.'fullweburl'
$vbmsg1 = $vbmsg.popup($remstitem.name + " is located in the user registry hive and may not be removed fully.",0,"error",0)
$vbmsg = new-object -comobject wscript.shell
$vbrestart = $vbmsg.popup("are you sure you want to restart " + $computername.toupper() + "?",0,"restart " + $computername.toupper() + "?",4)
('vcl', 'microsoft.teamfoundation.versioncontrol.client', 'microsoft.teamfoundation.versioncontrol.client.versioncontrollabel'),
$vcomputername = (get-item env:\computername).value
$vcsenabled = $row.get_item('vcsenabled')
$vcs= get-content ($script_parent + "\vc_list.txt") -erroraction silentlycontinue
('vcs', 'microsoft.teamfoundation.versioncontrol.client', 'microsoft.teamfoundation.versioncontrol.client.versioncontrolserver')
$verbosemsg = $messages.addattacment
$verbosemsg = $messages.addcontact
$verbosemsg = $messages.addcustomgroup
$verbosemsg = $messages.adddistributiongroup
$verbosemsg = $messages.addmimetype
$verbosemsg = $messages.contactexists
$verbosemsg = $messages.createappointment
$verbosemsg = $messages.displaynameupdated
$verbosemsg = $messages.establishconnection
$verbosemsg = $messages.failedtoaddpermision
$verbosemsg = $messages.failedtoremovepermision
$verbosemsg = $messages.findexwebsvcvariable
$verbosemsg = $messages.founddistributiongroup
$verbosemsg = $messages.foundemails
$verbosemsg = $messages.getowauseroptions
$verbosemsg = $messages.isadded
$verbosemsg = $messages.moveemailmsg
$verbosemsg = $messages.preparecustomgroup
$verbosemsg = $messages.profiledoesnotexist
$verbosemsg = $messages.profileexists
$verbosemsg = $messages.recycleitem
$verbosemsg = $messages.removeitem
$verbosemsg = $messages.renametasksubject
$verbosemsg = $messages.resolveidentity
$verbosemsg = $messages.restartpowershell
$verbosemsg = $messages.saveappointment
$verbosemsg = $messages.saveexwebsvcvariable
$verbosemsg = $messages.setowasignature
$verbosemsg = $messages.skipcontactlistowner
$verbosemsg = $messages.succeededtoaddpermision
$verbosemsg = $messages.succeededtoremovepermision
$verbosemsg = $messages.succeededtoupdatepermision
$verbosemsg = $messages.updatedisplayname
$verbosemsg = $messages.waitsignin
$verbosemsg = $verbosemsg -f $exservice.credentials.credentials.username
$verbosemsg = $verbosemsg -f $findresults.totalcount
$verbosemsg = $verbosemsg -f $identity
$verbosemsg = $verbosemsg -f $identity.subject, $newsubject
$verbosemsg = $verbosemsg -f $message.subject
$verbosemsg = $verbosemsg -f $oldpermissionlevel,$permissionlevel
$verbosemsg = $verbosemsg -f $spuser.displayname,$($newdisnames[$speclogin])
$verbosemsg = $verbosemsg -f $spuser.userlogin
$verbosemsg = $verbosemsg -f $subject
$verbosemsg = $verbosemsg -f $username
$verbosemsg = $verbosemsg -f $usersmtpaddress,$permissionlevel
$verbosemsg = $verbosemsg -replace "placeholder01",$attachmentpath
$verbosemsg = $verbosemsg -replace "placeholder01",$contactgroupname
$verbosemsg = $verbosemsg -replace "placeholder01",$contactobject.uri
$verbosemsg = $verbosemsg -replace "placeholder01",$distributiongroup.name
$verbosemsg = $verbosemsg -replace "placeholder01",$groupname
$verbosemsg = $verbosemsg -replace "placeholder01",$mimetypeitem
$verbosemsg = $verbosemsg -replace "placeholder01",$signintimeout
$verbosemsg = $verbosemsg -replace "placeholder01",$spattachmentname
$verbosemsg = $verbosemsg -replace "placeholder02",$groupname
$verbosepreference = 'continue'
$verbosepreference = $debugpreference
$verbose = $true
$verfiedfeaturenames = $verifiedpolicyfeatures[$verifiedpolicytype].split(",")
$ver = $host | select version
$verifiedfeaturenames = @()
$verifiedfeaturenames += $userspecifiedfeaturename
$verifiedfeaturenames = $verifiedfeaturenames -join ","
$verifiedpolicy = @{}
$verifiedpolicyfeatures = @{}
$verifiedpolicyfeatures.add($userspecifiedpolicy,$verifiedfeaturenames)
$verifiedpolicytypes = @()
$verifiedpolicytypes += $userspecifiedpolicy
$verifiedusername = $exservice.resolvename($username,`
verifytimerjob($filter)
$ver = $_.name
[version]
$version
$version = ""
version 1.0
-version 11)
version 1.1
version 1.2
version 1.3
version 1.4
$versionbts2004 = "3.0.4902.0"
$versionbts2004 { $installedversion = $descriptionbts2004 }
$versionbts2004sp1 = "3.0.6070.0"
$versionbts2004sp1 { $installedversion = $descriptionbts2004sp1 }
$versionbts2004sp2 = "3.0.7405.0"
$versionbts2004sp2 { $installedversion = $descriptionbts2004sp2 }
$versionbts2006 = "3.5.1602.0"
$versionbts2006 { $installedversion = $versionbts2006 }
$versionbts2006r2
$versionbts2006r2 = "3.6.1404.0"
$versionbts2009 = "3.8.368.0"
$versionbts2009 { $installedversion = $descriptionbts2009 }
$versionbts2010 = "3.9.469.0"
$versionbts2010 { $installedversion = $descriptionbts2010 }
$version = $currentversion
$versiondesc = "unknown version"
$versiondesc = $versiondesc + " or " + ((($xmldata.selectnodes("/dsversion/exchange[@$category='$version']")) | select-object )[$i].displayname).replace("exchange ", "")
$versiondesc = (($xmldata.selectnodes("/dsversion/exchange[@$category='$version']")) | select-object ).displayname
$versiondesc = (($xmldata.selectnodes("/dsversion/exchange[@$category='$version']")) | select-object )[$i].displayname
version = $_.displayversion
$versionmatches += (($xmldata.selectnodes("/dsversion/exchange[@$category='$version']")) | select-object )[$i].displayname
$version | out-file $versionfile -encoding default
$versions | foreach {
$versions = gci "\\$pc\c$\windows\microsoft.net\framework" v* | select name
$versionspec = [microsoft.teamfoundation.versioncontrol.client.versionspec]::latest
$versions += $version.displayname
$version = "v1.0.2"
$version = $version.substring(0,$version.length-1)
$veryold = (get-date).adddays(-90)
$vhddisk = @{ disknumber = 2 }
$vhd = get-scvirtualharddisk | ? {$_.name -eq $template.virtualdiskdrives[0].virtualharddisk}
vhdlibrarydisknumber = '3'
$vhdlibrarylocation = "\\$fileservername\$vhdlibrarysharename"
vhdlibrarylocation = $vhdlibrarylocation
$vhdlibrarysharedir = 'vhdlibrary'
$vhdlibrarysharename = 'vhdlibrary'
$vhdlibrarysharename = $vhdlibrarysharedir
$vhdservice = gwmi -class "msvm_imagemanagementservice" -namespace "root\virtualization"
$vhdsize = $vhd.size/1073741824
$viewdefelement = $configelement.appendchild($myxml.createelement("viewdefinitions"))
"viewdefinitions"
$viewdeletealltoolstripmenuitem.add_click({click-viewdeletealltoolstripmenuitem -sender $viewdeletealltoolstripmenuitem -eventarg $_})
$viewdeletealltoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
$viewdeletealltoolstripmenuitem.name = "viewdeletealltoolstripmenuitem"
$viewdeletealltoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
$viewdeletealltoolstripmenuitem.text = "delete all views"
$viewdeletealltoolstripmenuitem.visible = $true
$viewdeletetoolstripmenuitem.add_click({click-viewdeletetoolstripmenuitem -sender $viewdeletetoolstripmenuitem -eventarg $_})
$viewdeletetoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
$viewdeletetoolstripmenuitem.name = "viewdeletetoolstripmenuitem"
$viewdeletetoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
$viewdeletetoolstripmenuitem.text = "delete view"
$viewdeletetoolstripmenuitem.visible = $true
$viewedittoolstripmenuitem.add_click({ click-viewedittoolstripmenuitem -sender $viewedittoolstripmenuitem -eventarg $_ })
$viewedittoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
$viewedittoolstripmenuitem.name = "viewedittoolstripmenuitem"
$viewedittoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
$viewedittoolstripmenuitem.text = "edit view"
$viewedittoolstripmenuitem.visible = $true
$viewelement = $viewdefelement.appendchild($myxml.createelement("view"))
$vieweventvwr.add_click({eventviewer})
$vieweventvwr = new-object system.windows.forms.toolstripmenuitem("event viewer")
$viewfilter = "?filterfield1=" + $datecolumninternalname + "&filtervalue1=" + $reviewdate
$viewitems = new-treenode -treenode $tempnode1 -text "list view items"
$viewitems = new-treenode -treenode $tempnode1 -text "table view items"
$viewitems = new-treenode -treenode $tempnode1 -text "wide view items"
$viewloadtoolstripmenuitem.add_click({click-viewloadtoolstripmenuitem -sender $viewloadtoolstripmenuitem -eventarg $_})
$viewloadtoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
$viewloadtoolstripmenuitem.name = "viewloadtoolstripmenuitem"
$viewloadtoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
$viewloadtoolstripmenuitem.text = "load format"
$viewloadtoolstripmenuitem.visible = $true
$viewmenu.dropdownitems.add($mcafeemenu) > $null
$viewmenu.dropdownitems.add($vieweventvwr) > $null
$viewmenu.dropdownitems.add($viewservices) > $null
$viewmenu.dropdownitems.add($viewusersgroups) > $null
$viewmenu.dropdownitems.add($wsusmenu) > $null
$viewmenu.items.add($functionexplorercommand)
$viewmenu.items.add($gotodefinitioncommand)
$viewmenu = new-object system.windows.forms.toolstripmenuitem("&view")
$viewnewtoolstripmenuitem.add_click({click-viewnewtoolstripmenuitem -sender $viewnewtoolstripmenuitem -eventarg $_ })
$viewnewtoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
$viewnewtoolstripmenuitem.name = "viewnewtoolstripmenuitem"
$viewnewtoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
$viewnewtoolstripmenuitem.text = "new view"
$viewnewtoolstripmenuitem.visible = $true
$viewnodes = $myformattreeview.nodes.item("configuration").nodes.item("viewdefinitions").nodes
$views = $db.views | where-object { $_.schema -eq $schema }
$viewservices.add_click({services})
$viewservices = new-object system.windows.forms.toolstripmenuitem("services")
$views = getdatabaseviews $sql_server $db;
$views = $list.views
$views_path = "$output_path\view\"
$views = $sql_server.databases[$db_name].views | where-object {$_.issystemobject -eq $false};
$viewtodelete = $list.views[$currentkey]
$viewusersgroups.add_click({usersgroups})
$viewusersgroups = new-object system.windows.forms.toolstripmenuitem("users/groups")
-virtualdisk @(
virtualdisk @quorumvdisk
virtualdisk @vmlibraryvdisk
virtualdisk @vmsharevdisk
$virtualmachine = get-vm |where-object {$_.vmelementname -eq $targetvm}
'virtualmachine name'= $vm
" virtual machine topology creation "
$virtualswitchname = 'tenantswitch'
virtualswitch = @( vmswitch -name $tenantnetvirtualswitchname -netadaptername $tenantnetnicteamname -allowmanagementos $false )
virtualswitch = vmswitch -netadaptername $vmnic -name $virtualswitchname -allowmanagementos $false -enableiov:$true
$vkeycode = 0
$vkeycode = $press.virtualkeycode
$vmbus = [system.serviceprocess.servicecontroller]::getdevices() | where {$_.name -eq 'vmbus'}
$vmcomputername,
" vm creation: completed vm creation "
$vmdisk = @{ disknumber = 6 }
$vmdiskpath = get-vmdisk -vm $virtualmachine.vmelementname |where-object {$_.drivename -eq "hard drive"}
$vm = get-vm $vmname -computername $computername
$vmhostbasepath = [string]$vmhostobject.vmpaths + "\"
$vmhostdiffvhdpath = $vmhostbasepath + "diffvhds\"
$vmhostobject = get-scvmhost -computername $hostratings[0].name
$vmhostobject = get-scvmhost -computername $hostratings[$randomhost].name
$vmhostobject = get-scvmhost $vmhost
$vmhostparentvhdpath = $vmhostbasepath + "parentvhds\"
$vmhostparentvhdpath = $vmhostparentvhdpath + [system.io.path]::getfilename($vhd.sharepath);
$vmhostpath = $vmhostbasepath
$vmhost = $vmhostobject.name
$vmicversion = invoke-command -scriptblock {get-itemproperty "hklm:\software\microsoft\virtual machine\auto" | select -expandproperty integrationservicesversion } -computername $comp -credential $cred
'vmintegration services version' = $vmicversion
$vmlibraryvdisk = 'vmlibrarydisk', (200 * 1gb)
$vmmmodule = "virtualmachinemanager"
$vmmserver = get-vmmserver "scvmm ip adress"
$vmname,
$vmname = $machine.name
" vm nic rename : nic values for $id "
" vm nic rename : $vmname "
$vmnic = 'tenantnet'
$vmoldpath = get-vm $vmname -computername $computername | select * -expandproperty path
vmsettings = @{
$vms = get-vm -vmhost $vmhost | where-object {$_.status -eq "poweroff"}
$vmsharedir = 'vmshare'
vmsharedisknumber = '2'
$vmsharename = $vmsharedir
$vmsharevdisk = 'vmsharedisk', (200 * 1gb)
[void]$adsisearcher.propertiestoload.add($c)
[void]$computer.children.schemafilter.add("group")
[void]$directorysearcher.propertiestoload.add('homedirectory')
[void]$directorysearcher.propertiestoload.add($property)
[void]$global:functionexplorer_documents.remove($documenttitle)
[void]$group.put("description", $description)
[void]$group.setinfo()
[void]$(hide-powershellwindow)
[void][microsoft.visualbasic.interaction]::msgbox("script successfully executed",0,"exit message")
[void]$myformatcontextmenustrip.items.add($deleteallitemtoolstripmenuitem)
[void]$myformatcontextmenustrip.items.add($deleteitemtoolstripmenuitem)
[void]$myformatcontextmenustrip.items.add($edititemtoolstripmenuitem)
[void]$myformatcontextmenustrip.items.add($itemnewtoolstripmenuitem)
[void]$myformatcontextmenustrip.items.add($typeedittoolstripmenuitem)
[void]$myformatcontextmenustrip.items.add($viewdeletealltoolstripmenuitem)
[void]$myformatcontextmenustrip.items.add($viewdeletetoolstripmenuitem)
[void]$myformatcontextmenustrip.items.add($viewedittoolstripmenuitem)
[void]$myformatcontextmenustrip.items.add($viewloadtoolstripmenuitem)
[void]$myformatcontextmenustrip.items.add($viewnewtoolstripmenuitem)
[void]$(new-treenode -treenode $tempvalue -text "viewdefinitions")
[void]$psboundparameters.remove('displaysummary')
[void][reflection.assembly]::loadfile("c:\program files\microsoft\exchange\web services\1.2\microsoft.exchange.webservices.dll");
[void][reflection.assembly]::loadwithpartialname("microsoft.sqlserver.smo") | out-null;
[void]$results.add($entry);
[void]$root.appendchild($element)
[void]$stringbuilder.append($_.tostring("x2"))
[void]([system.io.directory]::getdirectories($source,'*',[system.io.searchoption]::topdirectoryonly))
[void]([system.io.directory]::getdirectories($target,'*',[system.io.searchoption]::topdirectoryonly))
[void][system.reflection.assembly]::loadwithpartialname("microsoft.teamfoundation.client")
[void][system.reflection.assembly]::loadwithpartialname("microsoft.teamfoundation.versioncontrol.client")
[void][system.reflection.assembly]::loadwithpartialname('microsoft.visualbasic')
[void][system.reflection.assembly]::loadwithpartialname('system.drawing')
[void][system.reflection.assembly]::loadwithpartialname('system.serviceprocess')
[void][system.reflection.assembly]::loadwithpartialname('system.windows.forms')
[void] [system.runtime.interopservices.marshal]::releasecomobject($object)
[void]$treenode.nodes.add($temptreenode)
[void]$user.setinfo()
[void]$user.setpassword($password)
$volname = $disk.volumename;
volume.dwvalue = volumelevel;
$volumeidcolumn = 'd:d',
$volumelevel=[pc_volumecontrol.volumecontrol]::getvolume()
volumelevel = volumecontrol.lmaximum;
volumelevel = volumecontrol.lminimum;
$volumemaps = import-csv -path $filename
$volumemaps = import-csv -path $filename |where-object {$_.hostname -ilike $servername}
$volumes = @()
$volumes += invoke-command -scriptblock $scriptblock
$volumes += invoke-command -session $thissession -scriptblock $scriptblock
volumestructs.linecontrols linecontrols = new volumestructs.linecontrols();
volumestructs.mixerdetails mcdetails = new volumestructs.mixerdetails();
volumestructs.mixerdetails mixerdetails = new volumestructs.mixerdetails();
volumestructs.mixerline line = new volumestructs.mixerline();
volumestructs.mixer mixer = new volumestructs.mixer();
volumestructs.mixer volumecontrol = new volumestructs.mixer();
volumestructs.unsignedmixerdetails detailsunsigned = new volumestructs.unsignedmixerdetails();
volumestructs.unsignedmixerdetails volume = new volumestructs.unsignedmixerdetails();
$vol = $_.volumename
$vswitchname = "tenantswitch"
vswitchname = $vswitchname
$vusername = (get-item env:\username).value
$vw_idx = getindexinfo $item;
$vw_props =
"*wac*" { $thislicence = "office web apps" }
"wac*" { $thislicence = "office web apps" }
waitforsolutionjob -identity $targetsolution.name
"waiting for services to start"
<waketorun>false</waketorun>
$warndate = [datetime]::today.adddays(-23)
$warningcount = $_."move-mailbox".taskfooter.result.warningcount
$warninglevel = $row.get_item('warninglevel')
$warningmsg = $messages.appendgroupmember
$warningmsg = $messages.cannotaddemptyfile
$warningmsg = $messages.cannotfindcontact
$warningmsg = $messages.cannotfinddg
$warningmsg = $messages.cannotfindpic
$warningmsg = $messages.cannotfindspecificattachments
$warningmsg = $messages.cannotfindspecifiedattachment
$warningmsg = $messages.cannotfindspecifieduserlogin
$warningmsg = $messages.conflictwithdg
$warningmsg = $messages.duplicateappointment
$warningmsg = $messages.existedtype
$warningmsg = $messages.existinghtmlsignature
$warningmsg = $messages.existingtextsignature
$warningmsg = $messages.founddupfolder
$warningmsg = $messages.groupexists
$warningmsg = $messages.invalidphotopath
$warningmsg = $messages.invalidpolicyfeature
$warningmsg = $messages.invalidpolicytype
$warningmsg = $messages.overwritewarning
$warningmsg = $messages.permissiondoesnotexist
$warningmsg = $messages.prefixexists
$warningmsg = $messages.prefixnotexist
$warningmsg = $messages.usedefaultpicture
$warningmsg = $messages.userdoesnotexist
$warningmsg = $messages.userexists
$warningmsg = $messages.zerocontact
$warningmsg = $warningmsg -f $appointmentanniversarysubject
$warningmsg = $warningmsg -f $appointmentbirthdaysubject
$warningmsg = $warningmsg -f $contact.$contactpropertyname
$warningmsg = $warningmsg -f $originalsubject
$warningmsg = $warningmsg -f $speclogin
$warningmsg = $warningmsg -f $userdisplayname
$warningmsg = $warningmsg -f $usersmtpaddress
$warningmsg = $warningmsg -f $usersmtpaddress,$permissionlevel
$warningmsg = $warningmsg -replace "placeholder01",$attachmentname
$warningmsg = $warningmsg -replace "placeholder01",$attachmentpath
$warningmsg = $warningmsg -replace "placeholder01",$contactgroupname
$warningmsg = $warningmsg -replace "placeholder01",$customgroupcontact
$warningmsg = $warningmsg -replace "placeholder01",$dg
$warningmsg = $warningmsg -replace "placeholder01",$groupcontacts
$warningmsg = $warningmsg -replace "placeholder01",$groupname
$warningmsg = $warningmsg -replace "placeholder01",$mimetypeitem
$warningmsg = $warningmsg -replace "placeholder01",$specificcontact
$warningmsg = $warningmsg -replace "placeholder01",$userspecifiedfeaturename
$warningmsg = $warningmsg -replace "placeholder01",$userspecifiedpolicy
$warningpreference="silentlycontinue"
$warningpreference = "silentlycontinue"
$warnusers = @()
$warnusers = $warnusers + $name
"was",
"was-config-apis",
"was-net-environment",
"was not found in ad. please follow up on this."
"was not found in the bes database, so its pin " $customattribute7 "was blanked in ad."
"was-process-model",
$watch = [system.diagnostics.stopwatch]::startnew()
$wb.close()
$wbemclasses = enum-namespaces -namespace $namespace -computername $computername
$wbemclasses |out-file -filepath $fullpath -append
$wb=$excel.workbooks.add()
$wb.saveas($workbookpath)
$wb = $xl.workbooks.add()
$wc
$wc.credentials = [system.net.credentialcache]::defaultcredentials
/wcfdataservices:`"$sharepoint2013path\prerequisiteinstallerfiles\wcfdataservices.exe`""
$wc = new-object mywebclient($timeout)
$wc = new-object system.net.webclient
$wc.uploadvalues($url, $fields)
$wdclient = $arrlog[10].replace("+"," ")
$wdclient = $arrlog[9].replace("+"," ")
web= "";
$webapp
$webapp.allowedinlinedownloadedmimetypes.add($mimetype)
"web-app-dev",
$webapp = get-spwebapplication $(read-host "`nenter web application url")
$webapp = get-spwebapplication $url
$webapplication,
webapplication { $enabledfeature = get-spfeature -identity $targetfeature -webapplication $url -erroraction silentlycontinue }
$webapplication.feature | enableordisablefeature -scope webapplication -url $webappurl -whatif:$whatif
"web application:" | out-file $filename -append
$webapplication | out-file $filename -append
$webapplications = get-spwebapplication
$webapplication.sitecollection | deploysitecollection -parenturl $webappurl -whatif:$whatif
$webappname = $webapplication.name
$webapp.parent.applywebconfigmodifications()
$webapppolicies | out-file $filename -append
$webapppolicies = $workingwebapp.policies
$webapp = read-host "enter web application url"
$webapp = $sitecollection.webapplication
$webapp.sites | foreach-object {
$webapp = $site.webapplication
$webapp.update()
$webappurl = $targetwebapp.url
$webappurl = $webapplication.url
$webapp.webconfigmodifications.add($childnode)
$webapp.webconfigmodifications.remove($webapp.webconfigmodifications[$i])
"web-asp-net",
"web-basic-auth",
$webclient.credentials = $credential
$webclient.downloadfile($url, "$filename")
$webclient.downloadfile($url, $savefilename)
$webclient = new-object net.webclient
$webclient = new-object system.net.webclient
$webclient.proxy.credentials = $webclient.credentials
$webclient.usedefaultcredentials = $true
"web-common-http",
$webconfigdata = [string]::format($webconfigoriginal, $exchangeinstallpath)
$webconfigdata = $webconfiglocation + "\web_config_modifications.xml"
$webconfiglocation = "c:\powershell\webconfigmodifications"
$webconfigoriginal = @"
$webconfigpath = $exchangeinstallpath + "clientaccess\oab\web.config"
$webcopypath = "c:\config\topologies\"+$websitespath+$id+"\wwwroot"
$webcount = 0
$webcount +=1
$webdavclients=$null
"web-default-doc",
"web-digest-auth",
"web-dir-browsing",
$webdisposal | & $block
$webdisposal = start-spassignment
$webdisposal | stop-spassignment
$web.dispose()
$web.dispose();
"web-dyn-compression",
web { $enabledfeature = get-spfeature -identity $targetfeature -web $url -erroraction silentlycontinue }
"web-filtering",
$web = get-spweb -identity $varweburl
$web = get-spweb $weburl
"web-health",
"web-http-errors",
"web-http-logging",
"web-http-tracing",
$web = $initialwebscope | get-spweb $url
"web-isapi-ext",
"web-isapi-filter",
"web-lgcy-scripting",
"web-log-libraries",
"web-metabase",
"web-mgmt-compat",
"web-mgmt-console",
"web-mgmt-tools",
$webname = $site.name
"web-net-ext",
"web page" = "businesshomepage";
$webpart.contentlink = $varcontentlink
$webpartmanager.addwebpart($webpart, $varwebpartzone, $varposition);
$webpartmanager.deletewebpart($wpa)
$webpartmanager.dispose();
$webpartmanager = $file.getlimitedwebpartmanager("shared")
$webpartmanager.spwebpartconnections | foreach-object {
$webpartmanager = $web.getlimitedwebpartmanager($varpageurl, [system.web.ui.webcontrols.webparts.personalizationscope]::shared)
$webpart = new-object $varnamespace
$webpart.title = $vartitle
"web-performance",
"web-request-monitor",
webrequest retval = base.getwebrequest(weburl);
$web.resetroleinheritance()
$webscas = $webs.clientaccessserver
"web-security",
$webserror = $webs.error
"web-server",
$webs = get-spweb $url
$websitespath = $topologysettings.topologies.websites
" websites path : $websitespath "
$webslatency = $webs.latency
$websres = $webs.result
$webssc = $webs.scenario
$webs = $sitecollection.allwebs
$webssite = $webs.localsite
"web-stat-compression",
"web-static-content",
$websvcinstalldirregkey = get-itemproperty -path "hklm:\software\microsoft\exchange\web services\2.0" -psproperty "install directory" -erroraction:silentlycontinue
$websvds = get-clientaccessserver | get-webservicesvirtualdirectory
"web template id: " + $web.webtemplateid | out-file $logfile -append
$webtemplate = $site.template
"web template: " + $web.webtemplate | out-file $logfile -append
webtitle = ""
$web.update()
$web.url
weburl = ""
$weburl = $($parenturl.trim("/") + "/" + $site.url.trim("/")).trim("/")
$weburl = $targetweb.url
"web url: " + $web.url | out-file $logfile -append
"web-webserver",
"web-windows-auth",
'wed' {
$wed = $_.wed
'week' {
"weeklyrecurrence" {
$weekrepeat++
$welcome
$welcome = @"
wend
$whatif
"whatif.csv has been written to " + $dir + " for you to examine what changes would be made should you choose to run this and apply the browserfilehandling changes."
"whatif is $whatif" | out-file -filepath $logfile -append
$whenchanged = $adobject.properties.whenchanged
whenchanged = [string]$whenchanged
$whencreated = $adobject.properties.whencreated
whencreated = [string]$whencreated
where
$whereclause
$whereclause = "";
$whereclause += '$_.title -eq "' + $lib + '"'
$whereclause += '$_.title -eq "' + $lib + '" -or '
where [doc].[fileextension] = '.doc'";
where{($_.drivetype -eq 3) -and (($_.freespace/$_.size*100) -lt $warningthresholdspace) }|
| where-object {
where-object {
| where-object { ($_.direction -eq 'inbound') -and $_.enabled -and ($_.profile -eq 'any') } `
where-object { $_.endpointtype -eq "databasemirroring" } |
where-object {$_.eventid -eq 6008}
|where-object {(get-date($_.timecreated)) -gt $checkpoint.addhours(-($hours)) -and (get-date($_.timecreated)) -lt $checkpoint}
|where-object {$_.id -eq $eventid}
|where-object {$_.ishavingdatasourcesprotected -eq $true}
where-object { $_.lastwritetime -ge $dte }
where-object { $_.lastwritetime -ge (get-date).date }
where-object { $_.length -ge $size }
|where-object {$_.machinename -eq $protectedcomputer} `
where-object { $_.message }
where-object {-not (test-path $_ -pathtype leaf)}
where-object {$_.passwordstatus -ne "password never expires" -and $_.passwordstatus -ne "expired" -and $_.passwordstatus -ne "user must change password at next logon." -and $_.mail -ne $null} |
where-object { $_.psiscontainer } | foreach-object {
where-object {$_.publisher -or $_.uninstallstring -or $_.displayversion -or $_.displayname} |
where-object {$_.sideindicator -eq '<='} | select -expand inputobject | foreach {([regex]::split($_,'^cn=|,.+$'))[1]}) -join "`n")",4,"please confirm the following action")
where-object {$_.sideindicator -eq '=>'} | select -expand inputobject | foreach {([regex]::split($_,'^cn=|,.+$'))[1]}) -join "`n")",4,"please confirm the following action")
where-object {($_.volumename -ne $null) -and
where {$_.properties.objectcategory -match "cn=user"}
where to_lowercase(message) like '%applicationname%'' /* be sure to replace this with the actual name of the application */
while (1) {
while (all(i).classname <> "container")
while ($allsearchresult.count -eq 0)
while ($aos.state -ne [system.serviceprocess.servicecontrollerstatus]::running)
while ($aos.state -ne [system.serviceprocess.servicecontrollerstatus]::stopped)
while ($applicationname -eq $null)
while ($bitcount -ne 32)
while($completed.count -lt $servers.count) {
while (!$confirmfederateddomain) {$confirmfederateddomain = (read-host "`n confirm federated domain (contoso.com)").toupper()}
while ($continue -eq 1)
while ($counter -ne 24) {
while ($currentpercent+= (get-moverequeststatistics -identity $user.identity | select percentcomplete).percentcomplete)
while ($currentpercent -ne $percentcompleted)
while ($customercode -eq $null) {
while($deci -gt 0)
while ($description -eq $null)
while($enableflag -eq $null)
while (!(($expiry.toupper() -eq "1") -or ($expiry -eq "2") -or ($expiry -eq "3") -or ($expiry -eq "4") -or ($expiry -eq "5") -or ($expiry -eq "6")))
while (!$federateddomain) {$federateddomain = (read-host "`n federated domain (contoso.com)").toupper()}
while($fileoffset -lt $content.length)
} while ($filesstored.count -lt $count)
} while ($findresults.moreavailable)
while ((get-job -name movejob* | where {$_.state -eq "completed"}).count -lt $jobsplit) {
while ((get-job -state running).count -ge $maxconcurrent) {start-sleep -seconds $pausetime}
while ((get-mailboxexportrequest -batchname $batchname | where {$_.status -eq "queued" -or $_.status -eq "inprogress"}))
while (@(get-process setup -computername $comp -erroraction silentlycontinue).count -ne 0) {
while ((get-spsolution -identity $identity).jobexists)
} while ($(if ($dayofyearrepeat -eq -1) {$limityear -le $(if ($checkdate) {$checkdate.year} else {9999})}
} while ($(if ($quarterrepeat -eq -1) {$limityear -le $(if ($checkdate) {$checkdate.year} else {9999})}
while ($input.movenext())
while (($installpath -ne "") -and ($selectedstatus -eq ($choices.length -1)))
while ($jobcount -le $jobsplit) {
} while ($limityear -le $checkdate.adddays(-31).year)
} while ($limityear -le $checkdate.adddays(-7).year)
while (!$localpassword) {$localpassword = read-host -assecurestring "`n $localusername password"}
while ($lyncclient.state -ne [microsoft.lync.model.clientstate]::signedin) {
while ($mailboxlimit -gt 0) {
} while($manager -ne $null)
while ($mbavalue -le ($attributes - 1)) {
while (-not $contactmanager.groups.trygetgroup($groupname,[ref]$groupobject)) {
while (-not $script:msolconnected) {
while ( -not ( test-connection -quiet -computername $address -delay 1 ) ){
while($numaddresses -ne -1)
while ($password -eq $null)
while (!$password) {$password = read-host -assecurestring "`n msol password"}
while ($pcservice.state -eq "running")
while ($rd.read())
while ($reader.read()) {
while ($result -eq 0)
while ($result -ne "success")
} while ($searchresults.moreavailable)
while (strsrc.classname = "sectiontitle" or strsrc.classname = "expando")
} while ($subfolders.moreavailable)
while ($testaccountname -eq $null)
while($test -ne $true)
while ($test.status -ne "running")
while ($true) {
while($true)
while (!$username) {$username = (read-host "`n msol username (user`@domain)").toupper()}
while (($userrequester -eq $null) -or ($userrequester -notlike "*@*"))
while ($vkeycode -ne 13) {
while ($worksheet.cells.item($row,$column).value() -ne $null)
$whitecolor = "
$whitespace = convert-bytestosize $db.availablenewmailboxspace.tobytes()
$whoisproxy.getwhois($whois)
$whoisproxy = new-webserviceproxy -uri $uri -namespace webserviceproxy -class whois
"widecontrol"
$wideitems = @($view.widecontrol.wideentries.wideentry.wideitem)
"wide view"
"wide view items"
$wid = [system.security.principal.windowsidentity]::getcurrent()
$width = $cellwidth * 2
$widthelement = $headerelement.appendchild($myxml.createelement("width"))
$widthelement.innertext = $($value.tag)
$widthelement = $itemelement.appendchild($myxml.createelement("width"))
$wiff = $args[2]
$wiff = $false
$wifi = get-wmiobject -class win32_networkadapter -filter "netconnectionid = '$($connectionid)'"
$wikifile = $false
$wikifilename = $libraryname
$wikifilename = $libraryname.replace("-","")
$wikifilename = $poshfile.name.replace("-","")
$wikifilename = $poshfile.name.replace(".ps1","")
$wikifilename = $wikifilename.replace(".ps1","")
$wikipage = ($psise.currentfile.displayname).substring(0,($psise.currentfile.displayname).indexof("."))
$windowdisplay = @"
[window.display]::hide($handle)
window.event.returnvalue = false
$windowsauthenticationsection = $config.getsection("system.webserver/security/authentication/windowsauthentication", "default web site/oab")
$windowsauthenticationsectionenabled = $config.getsection("system.webserver/security/authentication/windowsauthentication", "default web site/oab")["enabled"];
$windowsauthenticationsection["enabled"] = $windowsauthenticationsectionenabled
"windowsemailaddress" = "email:emailaddress1";
$windowsemailaddress = $_.windowsemailaddress.tostring()
$windowsfeatures = @(
"windows-identity-foundation",
$windowsidentity = [system.security.principal.windowsidentity]::getcurrent()
$windowsinfo = get-wmiobject -query "select * from win32_operatingsystem where producttype=3"
$windowsprincipal = new-object -typename system.security.principal.windowsprincipal($windowsidentity)
$windowsserver2012mediapath = ""
$winrmversion = (get-itemproperty hklm:\software\microsoft\windows\currentversion\wsman -erroraction silentlycontinue).stackversion
' with certificate thumbprint ' $certificate.thumbprint '...'
$wlistusers = @()
$wlistusers = $wlistusers + $name
$w.map($tfsworkspace, $applicationsourcedir)
([wmi]"\\$computer\root\cimv2:win32_logicaldisk.deviceid='$drive'").freespace
$wmidistinguishedname = "cn=$wmiguid,cn=som,cn=wmipolicy,cn=system,$defaultnamingcontext"
$wmifilterattr = "mswmi-name", "mswmi-parm1", "mswmi-parm2", "mswmi-author", "mswmi-id"
$wmifilter | foreach-object {
$wmifindpcuser = gwmi win32_computersystem -computername $findpcusername.name
$wmi=get-wmiobject -class win32_operatingsystem -computer $args[0]
$wmi = get-wmiobject -computername $computername -query `
$wmiguid = "{$guid}"
$wmi.options.timeout = '0:0:15'
$wmi_os = ""
$wmi_os = get-wmiobject -class win32_operatingsystem -computername $comp -erroraction stop
$wmipath = ("cn=som,cn=wmipolicy,cn=system,$defaultnamingcontext")
$wmipcusername = $wmifindpcuser.username
$wmi.query = $query
$wmiresult = $wmi.get()
" wmiscan tool executed - $(get-date)" |out-file -filepath $fullpath -append
$wmi.scope.path = "\\$comp\$namespace"
$wmi = [wmisearcher]""
$wname = 'axbuild_' + $guid
$wnvdrv = "ms_netwnv"
$wnvnic = "wnvnic"
$word = $keyword.replace("&","")
$word = new-object -comobject word.application
$words = $phrase.tolower().split(" ")
$words[$x] = ([string]$words[$x][0]).toupper() + $words[$x].substring(1)
$words[$x] = $words[$x].tolower()
$words[$x] = $words[$x].toupper()
$word.visible = $false
$workbook.close()
$workbook.close($false)
$workbook = $excel.workbooks.open($filepath)
$workbook = $objexcel.workbooks.add()
$workbookpath = join-path $scriptpath excelandimagesdemo.xlsx
$workbook.saveas($filepath)
$workbook.saveas($saveas)
$workbooks = $excel.workbooks
$workbook = $workbooks.open($excelpath)
$workbook = $xl.workbooks.add()
'working copy root path'
workingcopy = $workingroot
<workingdirectory>c:\office365-scripts</workingdirectory>
$workingroot = $fielddata
$workingwebapp = get-spwebapplication $webapplication
$worksheet = $excel.worksheets.item($worksheetname)
$worksheetname = 'dpm file volume',
$worksheet.range($targetreference).value2 = $used.used
$worksheets = $workbook.worksheets
$worksheet=$workbook.activesheet
$worksheet = $workbook.worksheets.item(1)
$workstationerrors = @()
$workstationerrors += $thisworkstation
$workstations = get-adobjects -adspath $adspath
$wparray = @()
$wparray = $wparray + $wp
$wpcatalog = $site.getcatalog([microsoft.sharepoint.splisttemplatetype]::webpartcatalog)
$w.pendedit($filepath)
$wpm.openwebpart($_)
$wpm.savechanges($_)
$wpm = $web.getlimitedwebpartmanager($pubpage.url, [system.web.ui.webcontrols.webparts.personalizationscope]::shared)
$wpm.webparts | % {
$wps = $webpartmanager.webparts
$writearray =@()
$writearray += $temp
$writearray += $value
$writearray = $writearray | sort-object
write "cas01" | out-file temp.dat -append
write "cas02" | out-file temp.dat -append
write "cas stats" | out-file temp.dat -append
writedata $name $svr $edb $edbsize $whitespace $mbxcount $topmailbox $topmailboxsize $lastbackup $howoldbkp
write-debug ""
write-debug "accept eula"
write-debug "add to log collection"
write-debug "add update to collection"
write-debug "change to listonly mode"
write-debug "check if computername in set"
write-debug "check reboot status only for local instance"
write-debug "check resultcode"
write-debug "computer: $computername"
write-debug "convert kbarticleids"
write-debug "convert size"
write-debug "crash `t $lastevent"
write-debug "create microsoft.update.servicemanager object"
write-debug "create microsoft.update.session object"
write-debug "create microsoft.update.session object for $computer"
write-debug "create microsoft.update.session.searcher object"
write-debug "create microsoft.update.session.searcher object for $computer"
write-debug "current time: $currenttime"
write-debug "downloaded then send update to next stage"
write-debug "downtime: $downtime"
write-debug " downtime is now: $downtime"
write-debug "(hdd) $($_.lastwritetime) (usb archiving new file) $_"
write-debug "(hdd) $lwthdd (usb) $lwtusb $_"
write-debug "l: $l menuitems: $menuitems menuposition: $menuposition"
write-debug $message
write-debug " outage duration: $duration"
write-debug "return only list of updates"
write-debug "search criteria is: $search"
write-debug "send update to download collection"
write-debug "send update to install collection"
write-debug "set computername to localhost"
write-debug "set instalation status rebootrequired"
write-debug "set number of stage"
write-debug "set post search criteria: canrequestuserinput"
write-debug "set post search criteria: categories = '$([string]::join(", ", $category))'"
write-debug "set post search criteria: kbarticleids = '$([string]::join(", ", $kbarticleid))'"
write-debug "set post search criteria: notcategories = '$([string]::join(", ", $notcategory))'"
write-debug "set post search criteria: notkbarticleids = '$([string]::join(", ", $notkbarticleid))'"
write-debug "set post search criteria: nottitle = '$nottitle'"
write-debug "set post search criteria: rebootbehavior"
write-debug "set post search criteria: title = '$title'"
write-debug "set post search criteria: $($update.title)"
write-debug "set pre search criteria: categoryids = '$([string]::join(", ", $categoryids))'"
write-debug "set pre search criteria: ishidden = 0"
write-debug "set pre search criteria: ishidden = 1"
write-debug "set pre search criteria: ishidden = 1 and ishidden = 0"
write-debug "set pre search criteria: ishidden = 1 and ishidden = 0 (clear ishidden criteria)"
write-debug "set pre search criteria: isinstalled = 0"
write-debug "set pre search criteria: isinstalled = 1"
write-debug "set pre search criteria: rebootrequired = 0"
write-debug "set pre search criteria: revisionnumber = '$revisionnumber'"
write-debug "set pre search criteria: type = $type"
write-debug "set pre search criteria: updateid = '$([string]::join(", ", $updateid))'"
write-debug "set source of updates to microsoft update"
write-debug "set source of updates to $servicename"
write-debug "set source of updates to windows update"
write-debug "sharedhost command`r`n`$($sharedhostcmd)"
write-debug "sheet2!r1c1:r$($rowcount)c$($columncount)"
write-debug "show log collection"
write-debug "show update to accept: $($update.title)"
write-debug "show update to download: $($update.title)"
write-debug "show update to install: $($update.title)"
write-debug "shutdown `t $($sortedlist.keys[$i-1])"
write-debug "stage 0: prepare environment"
write-debug "stage 1: get updates list"
write-debug "stage 2: choose updates"
write-debug "stage 3: download updates"
write-debug "stage 4: install updates"
write-debug "standalone command`r`n$($standalonecmd)"
write-debug "start time: $startingdate"
write-debug "startup `t $($sortedlist.keys[$i])"
write-debug ("total processing time {0}" -f ($end-$start).tostring())
write-debug "try download update"
write-debug "try install update"
write-debug "updateaccess: false"
write-debug "uptime: $uptime"
write-debug "wmifixedport rule creation`r`n$($firewallportopening)"
write-debug "wmifixedport rule deletion`r`n$($firewallportclosing)"
write "edge stats" | out-file temp.dat -append
write-error $_
write-error "an error occurred with this script: $($_)"
write-error "at least one expression method is required to create a wmi filter."
write-error "cannot find '$getramdata'. make sure it is in the '$scriptpath' directory."
write-error "cannot find '$imgpath'. make sure it is in the '$scriptpath' directory."
write-error "cannot find '$($missing[0])'. make sure it is in the '$scriptpath' directory."
write-error "cannot find '$removecomobject'. make sure it is in the '$scriptpath' directory."
write-error 'cannot find the self-signed certificate; export failed.'
write-error "cluster does not exist"
write-error "could not download $msifilename from $url"
write-error $error[0]
write-error $error[0].exception
write-error $error[0].exception.innerexception.message.tostring().trim()
write-error $_ -erroraction stop
write-error 'error checking scheduled tasks configuration'
write-error $errormsg
write-error "errors found review $($qfelogfilename) for more details"
write-error "failure on install: $exitcode"
write-error "local machine where this script is running, must be one of the cluster nodes"
write-errorlog(('compile-cil error ' + $line))
write-errorlog "deploy failed because of input parameter errors."
write-errorlog ($error[0])
write-errorlog $error[0].exception
write-errorlog("error: ax synchronize did not complete within {0} minutes" -f $synctimeout)
write-errorlog ("error occured while building.")
write-errorlog ("error occured while deploying.")
write-errorlog "errors while compiling code."
write-errorlog($event.message.substring($event.message.indexof('[sql server]')+'[sql server]'.get_length()))
write-errorlog "exception in compile-cil."
write-errorlog ("failed to revert build.")
write-errorlog "il compile errors. see dynamics.ax.application.dll.log file."}
write-errorlog($line)
write-errorlog $message
write-errorlog "parameter validation error. see axinputvalidationerrors.txt for more information."
write-error $message
write-error -message "access to registry denied, run as nt authority\system" -category permissiondenied
write-error -message "could not add members to local group $($identity): $($_.exception.message)" -exception $_.exception
write-error -message "could not create the local group $($computername)/$($name): $($_.exception.message)" -exception $_.exception
write-error -message "could not create the local user $($computername)/$($name): $($_.exception.message)" -exception $_.exception
write-error -message "could not delete the local group $($identity): $($_.exception.message)" -exception $_.exception
write-error -message "could not delete the local user $($identity): $($_.exception.message)" -exception $_.exception
write-error -message "could not enable the local user $($identity): $($_.exception.message)" -exception $_.exception
write-error -message "could not get local group members of group $($identity): $($_.exception.message)" -exception $_.exception
write-error -message "could not get local users from machine $($computername): $($_.exception.message)" -exception $_.exception
write-error -message "could not get the local groups from computer $($computername): $($_.exception.message)" -exception $_.exception
write-error -message "could not reset password for the local user $($identity): $($_.exception.message)" -exception $_.exception
write-error -message "could not set the local user $($identity): $($_.exception.message)" -exception $_.exception
write-error -message "path '$item' is not a directory in the file system." -category invalidtype
write-error -message "path not found: $regpath" -category objectnotfound
write-error "no members of computergroup $computergroup found" -erroraction stop
write-error "not support on windows visa or lower"
write-error 'no verified custom domains exist in the tenant.'
write-error 'no web sites exist on the current machine.'
write-error 'please define your qfe server by running the set-qfeserver cmdlet.'
write-error "qfe metadata file not written to disk."
write-error "$($qfeserver) is not a valid path, please make sure that $($qfeserver) exists and that you have read/write access to it."
write-error "there is an existing cluster on this machine. please remove any existing cluster settings from the current machine before running this script"
write-error "there was an error onlining the cluster name resource"
write-error "the time span for the maintenance mode should be at least 5 minutes." -erroraction stop
write-error "this script is only for om2012"
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "added new disk to vm"
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "changed the vm name to $($newvmname) and wrote a note"
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "creating initial snapshot after import"
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message $error[0]
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "get the disk to work with, $($vmdiskpath.diskimage)"
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "get the working vm, $($virtualmachine.vmelementname)"
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "loading hyperv module"
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message $message
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "removed all disks"
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "renamed disk to $($newdiskpath)"
write-eventlog -logname $logname -source $scriptname -eventid "101" -entrytype "error" -message $message
write-eventlog -logname $logname -source $scriptname -eventid "101" -entrytype "error" -message "rsat installed?"
write-eventlog -logname $logname -source $scriptname -eventid "101" -entrytype "information" -message $message
write-eventlog -logname $logname -source $scriptname -eventid "102" -entrytype "error" -message $message
write-eventlog -logname $logname -source $scriptname -eventid "102" -entrytype "warning" -message $message
write-eventlog -logname $logname -source $scriptname -eventid "104" -entrytype "information" -message $message
" write-eventlog -logname `$logname -source `$scriptname -eventid `"104`" -entrytype `"information`" -message `$message`r`n"
write-eventlog -logname "operations manager" -source "opsmgr sdk service" -eventid 998 -message "the $($myinvocation.mycommand) is used to put objects in maintenance mode"
write-eventlog -logname "operations manager" -source "opsmgr sdk service" -eventid 999 -message "the following objects are put into in maintenance mode for $($endtime) minutes: $($computergroupmembers.getrelatedmonitoringobjects())"}
write-eventlog -logname scripts -source monitor -entrytype information -eventid 1 -category 002 -message "script job: $script (pse$number) ended."
write-eventlog -logname scripts -source monitor -entrytype information -eventid 2 -category 002 -message "script job: $script (pse$number) started."
write-eventlog -logname 'windows powershell' -source $scriptname -eventid "101" -entrytype "error" -message $message
write-eventlog -logname 'windows powershell' -source $scriptname -eventid "101" -entrytype "error" -message $message -erroraction silentlycontinue
write-eventlog -logname 'windows powershell' -source $scriptname -eventid "104" -entrytype "information" -message $firewallportclosing -erroraction silentlycontinue
write-eventlog -logname 'windows powershell' -source $scriptname -eventid "104" -entrytype "information" -message $firewallportopening -erroraction silentlycontinue
write-eventlog -logname 'windows powershell' -source $scriptname -eventid "104" -entrytype "information" -message $message
write-eventlog -logname 'windows powershell' -source $scriptname -eventid "104" -entrytype "information" -message $message -erroraction silentlycontinue
write-eventlog -logname 'windows powershell' -source $scriptname -eventid "104" -entrytype "information" -message $sharedhostcmd -erroraction silentlycontinue
write-eventlog -logname 'windows powershell' -source $scriptname -eventid "104" -entrytype "information" -message $standalonecmd -erroraction silentlycontinue
write-eventlog -source "sharepoint warmup script" -category 0 -computername "." -entrytype error -logname "application" `
write-host
write-host '=================================================='
write-host ' '
write-host ''
write-host "
write-host "==================================================================================="
write-host "====================================================================="
write-host " "
write-host "------------------------------------------------------"
write-host "-------------------------"
write-host "-----------------------"
write-host "."
write-host ""
write-host "{{{"
write-host "}}}"
write-host "*********************"
write-host @"
write-host("")
write-host("[{0}][{1}][{2}][{3}]" -f $count,$webpartmanager.serverrelativeurl,$consumerwebpart.title,$providerwebpart.title)
write-host ('{0,2}) {1}' -f ($counter + 1), $choices[$counter])
write-host ' 0) none'
write-host $('=' * 50)
write-host ("-"*79)
write-host "accept [$($objcollection.count)] updates to download."
write-host "accounts with membership in $groupname on: " $computer.properties.name
write-host $addactivitystring -foregroundcolor green
write-host "added ($cg) to ($pg)"
write-host "adding group" $grp.samaccountname "to acl."
write-host 'adding new ssl incoming rule (tcp port 443).'
write-host "adding $solutionname to farm" -foregroundcolor white
write-host "adding the ace to the acl"
write-host "adding webpart in page: $varpageurl" -foregroundcolor green
write-host " [ad-userpicture] = ", $userpicture
write-host 'all possible domains have already been added to the service.'
write-host "amount of lists:"$listcount
write-host "amount of lists updated:"$listcount
write-host "amount of webs checked:"$webcount
write-host "amount of webs that were updated:"$webcount
write-host "an error occurred creating destination folder (`'$destinationfolder`'), please check the path,and try again."
write-host "an error occurred trying to set the maxdegreeofparallelism value to 1 for server $server" -fore red
write-host "applying custom graphics and css files."
write-host "applying html text customization to the logon.aspx file."
write-host 'attempting to add dns record...'
write-host "attempting to load system module $name" -erroraction 'silentlycontinue'
write-host "attempting to repair symbolic links"
write-host "attempting to retrieve list for processing !!! ";
write-host "backed up $($deptgpo.displayname) to $($backuplocation)"
write-host -backgroundcolor 'black' -foregroundcolor 'red' $message
write-host -backgroundcolor 'black' -foregroundcolor 'yellow' $dashedline
write-host -backgroundcolor 'black' -foregroundcolor 'yellow' $message
write-host -backgroundcolor 'black' -foregroundcolor 'yellow' " $title "
write-host -backgroundcolor green -foregroundcolor black "script execution completed in "($endtime-$starttime).totalseconds " seconds.";
write-host "base dn = + $basedn "
write-host "basedn = $basedn "
write-host $beginprocessingtext -foregroundcolor green
write-host "bhos" -foregroundcolor black -backgroundcolor yellow
write-host "bitstransfer module is loaded"
write-host "biztalk server installation found on this machine."
write-host "biztalk server is not installed on this machine."
write-host "bootable usb creation complete!"}
write-host ("calling compilepartial api : {0}" -f (get-date))
write-host "calling performcleanup on $wsusserver"
write-host "cannot connect to the user profile service application" -foregroundcolor red -backgroundcolor yellow
write-host 'cannot continue - exiting.'
write-host "cannot determine destination ou, using noncompliant ou"
write-host "cannot find domainfile ($domainfile)." -backgroundcolor black -foregroundcolor red
write-host "can not find importpsmodule. please download manually."
write-host "cannot get the site collection corresponding to $sitecollectionurl" -foregroundcolor red -backgroundcolor yellow
write-host "cannot get the site collection corresponding to $weburl" -foregroundcolor red -backgroundcolor yellow
write-host "can't find any child objects for user: " $username
write-host "can't ping $computer" -foregroundcolor red
write-host "can't remotly check reboot status, continue..." -foregroundcolor red
write-host "caption: " $objitem.caption
write-host cat1 count : $int1
write-host cat2 count : $int2
write-host cat3 count : $int3
write-host cat4 count : $int4
write-host "certificate enrollment guid is $guid "
write-host " change detected! archiving $loglocation`n" -foregroundcolor yellow
write-host 'checking/configuring local registry to support loopback testing...'
write-host "checking $dc" -foregroundcolor green
write-host 'checking for adfs subject name...'
write-host 'checking for connection to microsoft online services...'
write-host 'checking for existing certificate...'
write-host 'checking for local certificate...'
write-host 'checking for unused upn suffixes...'
write-host "checking the language parameter list "
write-host "checking time source of $server, pasting output in $($logfile)"
write-host "checking to see if machine already has product $displayname installed..."
write-host "checkin project " + $row[0]
write-host " check/remove empty folders started..."
write-host "check the service and permissions and try again" -foregroundcolor red -backgroundcolor yellow
write-host "check the url and try again" -foregroundcolor red -backgroundcolor yellow
write-host "circular nested group: $parent"
write-host "cleaning temp folder" -nonewline
write-host "cleaning up downstream servers..."
write-host cleanup the excel process instatiated in this script`'s scope that remains running after the end -foregroundcolor black -backgroundcolor white
write-host "cloning the view " $viewtodelete.title
write-host "collecting details from $vc" -foregroundcolor green
write-host "collecting logs from $dc : $count of $numberofdcs dcs" -foregroundcolor green
write-host "command: add-adgroupmember $group -member $memberdn"
write-host("command: remove-adgroupmember $group -members $memberdn")
write-host "comparing existing members with query results"
write-host 'complete.'
write-host "..completed."
write-host 'completed. press "enter" to continue.'
write-host "completed script execution at : $endtime";
write-host "$computername for the past $numberofdays days..."
write-host "$computername with resourceid $computerid will be deleted"
write-host 'configuring adfs proxy...'
write-host "configuring adfs to run as $script:adfsdomainname\$script:adfsaccountname`n" `
write-host 'configuring local coexistence configuration information...'
write-host "configuring pa's and vsid's on", $hosts[0] -foregroundcolor yellow
write-host "configuring pa's and vsid's on", $hosts[1] -foregroundcolor yellow
write-host 'configuring ssl...'
write-host 'configuring the windows azure ad connection to adfs...'
write-host 'configuring windows authentication provider order in iis...'
write-host "configuring wnv on", $hosts[$i] -foregroundcolor yellow
write-host "connected to the adminproxy on $wsusserver"
write-host "connected to the cleanupmanager on $wsusserver"
write-host "connected to upstream wsus server $wsusupstreamserver"
write-host "connecting to $computername" -foregroundcolor green
write-host "connecting to office 365..."
write-host "connecting to office 365..." -foregroundcolor "yellow"
write-host "connecting to $($servicename). please wait..."
write-host "connecting to vc" -foregroundcolor yellow
write-host "connection information:"
write-host "connect to database successful."
write-host "copied file : $stritem from zip-file : $zipfile to destination folder"
write-host $count ": " $i.path
write-host "created $($crawledpropertyname) crawled property"
write-host "created folder : $dest"
write-host "created $($name)"
write-host "created task ($taskname) successfully"
write-host 'creating certificate request...'
write-host 'creating certificate request details...'
write-host 'creating corresponding windows azure active directory user...'
write-host "creating distribution group: ""$($department.department)"""
write-host "creating distribution group: managers"
write-host "creating distribution group: ""$($office.office)"""
write-host "creating folder for mailbox name:" $mailboxname -foregroundcolor $info
write-host "creating logs......." -foregroundcolor yellow
write-host "creating mailbox for test user: $($newuser.samaccountname)"
write-host "creating new ace for account: $domainnetbiosname \ $object to include certificate enrollment"
write-host "creating new site collection on $siteurl" -foregroundcolor white
write-host "creating new sub-site on $weburl" -foregroundcolor white
write-host 'creating private key...'
write-host "creating shared mailbox..." -foregroundcolor "yellow"
write-host "creating site collections and activating features" -foregroundcolor white
write-host "creating test user: $($newuser.displayname)"
write-host "creating user `"$accountname`"..."
write-host "creating user `"$script:adfsaccountname`"..."
write-host "credential for '$target' as '$credtype' type was not found."
write-host "credentials for '$target', '$user' was not found."
write-host $credstr
write-host $c.thumbprint
write-host "current copy status of " $objitem.storagegroupname " on " $servername " is " $objitem.summarycopystatus
write-host "database" $nonoptimaldb.databasename "was disabled for auto-provisioning."
write-host "database" $optimaldb.databasename "was chosen for having" $optimaldb.activembs `
write-host $data @psboundparameters
write-host "data sets collected : $counter"
write-host $daterangetext -foregroundcolor green
write-host "db counts are as follows:"
write-host "db counts will be as follows after executing $($outputpowershellfile):"
write-host "decrypted password is: $decrypted"
write-host "defaulting to 30 days..."
write-host "deleted task ($taskname) successfully"
write-host " deleteold`t::`tscript to delete old files from folders"
write-host "deleting the view " $viewtodelete.title
write-host "deleting webpart..." -foregroundcolor green
write-host "description: " $objitem.description
write-host difference in ram usage after executing excel_image_demo_cleanup.ps1: ${diff}mb -foregroundcolor black -backgroundcolor yellow
write-host difference in ram usage after executing excel_image_demo_no_cleanup.ps1: ${diff}mb -foregroundcolor black -backgroundcolor yellow
write-host "directory created" -fore green
write-host "directory $loggingdirectory created successfully"
write-host "directory $loggingdirectory does not exist, creating directory"
write-host 'directory synchronization support is already enabled for the current tenant.'
write-host "disable feature $featurename on $scope $url" -foregroundcolor white
write-host "disabling search feature..."
write-host "$($d.key): "-nonewline
write-host $docfoundtext -foregroundcolor green
write-host "documented db info";
write-host "documented db users";
write-host "documented functions";
write-host "documented partition functions";
write-host "documented partition schemes";
write-host "documented schemata";
write-host "documented server info";
write-host "documented stored procedures";
write-host "documented tables";
write-host "documented triggers";
write-host "documented user defined datatypes";
write-host "documented views";
write-host "does user have a office communicator or lync account?"
write-host 'domain is verified. if it is a subdomain of an existing domain, this is automatic.'
write-host "domainname ($domainname) does not exist in domainfile ($domainfile)." -backgroundcolor black -foregroundcolor red
write-host " done!"
write-host "done";
write-host "dotnetping could not find host $destination. please check the name and try again."
write-host "downloading..."
write-host "downloading $filename`n from $url`n please wait..."
write-host "downloading. please wait..."
write-host "- downloads completed, press any key to exit..."
write-host "downstream server: $wsusserver"
write-host $d.value -foregroundcolor "green"
write-host "email was sent to $mail on $today"
write-host $emptydocemail -foregroundcolor red
write-host " empty folders deleted`n"
write-host "enable feature $featurename on $scope $url" -foregroundcolor white
write-host " ==> enable network virtualization module on", $wnvnic -foregroundcolor yellow
write-host "enabling search feature..."
write-host "encrypted password is: $encrypted"
write-host $endprocessingtext -foregroundcolor green
write-host "ensure that server and port parameters are correct and that the current user has at least serveradmin permissions within sql" -fore red
write-host "enter your office 365 administrator username and password"
write-host "enumerating $privgroup.." -foregroundcolor yellow
write-host $envvargroupfail "equals " $foo1
write-host "$error[0] "
write-host $error[0]
write-host $error[0].exception;
write-host "error" $_.exception
write-host "error: failed adding $solutionname to farm, aborting!" -foregroundcolor red
write-host "error: feature $featurename is not a farm scope feature, aborting!" -foregroundcolor red
write-host "error: feature $featurename is not a site scope feature, aborting!" -foregroundcolor red
write-host "error: feature $featurename is not a webapplication scope feature, aborting!" -foregroundcolor red
write-host "error: feature $featurename is not a web scope feature, aborting!" -foregroundcolor red
write-host "error: feature $featurename was not found, aborting!" -foregroundcolor red
write-host "error: input file $inputfile was not found, aborting!" -foregroundcolor red
write-host "error: language pack is not installed for lcid $sitelanguage, aborting!" -foregroundcolor red
write-host "error: missing required id or name attribute of feature-tag, aborting!" -foregroundcolor red
write-host "error: missing required $name attribute of $tagname-tag, aborting!" -foregroundcolor red
write-host "error - not successful"
write-host "[error] repair ran for more than 7 minutes. script will end and process will be stopped."
write-host "error sending email, check log file!" -foregroundcolor red
write-host "error: solution file $solutionname was not found, aborting!" -foregroundcolor red
write-host "error: solution $solutionname does not exist in farm, aborting!" -foregroundcolor red
write-host "[error]`tdatabase contains stale records and need to be cleared, try again later" -foregroundcolor red
write-host "[error]`t$($_.exception.message)" -foregroundcolor red
write-host "[error]`tfolder [$($item.collectionfolder)] doesn't exist, [$($item.collectiontype)] collection [$($item.collectionname)] couldn't be moved" -foregroundcolor red
write-host "[error]`tfolder [$($item.meteringfolder)] doesn't exist, metering rule [$($item.productname)] couldn't be moved" -foregroundcolor red
write-host "[error]`tfolder [$($item.packagefolder)] doesn't exist, package [$($item.packagename)] couldn't be moved" -foregroundcolor red
write-host "[error]`tfolder [$($item.targetfolder)] doesn't exist, [$($item.collectiontype)] collection [$($item.collectionname)] couldn't be moved" -foregroundcolor red
write-host "[error]`tfolder [$($item.targetfolder)] doesn't exist, metering rule [$($item.productname)] couldn't be moved" -foregroundcolor red
write-host "[error]`tfolder [$($item.targetfolder)] doesn't exist, package [$($item.packagename)] couldn't be moved" -foregroundcolor red
write-host "[error]`t[$($item.collectiontype)] collection [$($item.collectionname)] already exists with id [$($collectionid.collectionid)]" -foregroundcolor red
write-host "[error]`t[$($item.collectiontype)] collection [$($item.collectionname)] doesn't exist" -foregroundcolor red
write-host "[error]`t[$($item.foldertype)] folder [$($item.foldername)] already exists with id [$($folderid.containernodeid)]" -foregroundcolor red
write-host "[error]`tmetering rule [$($item.productname)] already exists with id [$($meteringid.ruleid)]" -foregroundcolor red
write-host "[error]`tmetering rule [$($item.productname)] doesn't exist" -foregroundcolor red
write-host "[error]`tpackage [$($item.packagename)] already exists with id [$($packageid.packageid)]" -foregroundcolor red
write-host "[error]`tpackage [$($item.packagename)] doesn't exist, dp's couldn't be added / updated" -foregroundcolor red
write-host "[error]`tpackage [$($item.packagename)] doesn't exist" -foregroundcolor red
write-host "[error]`tpackage [$($item.packagename)] doesn't exist, program [$($item.programname)] couldn't be created" -foregroundcolor red
write-host "[error]`tprogram [$($item.programname)] already exists for package id [$($packageid.packageid)]" -foregroundcolor red
write-host "[error]`tprogram [$($item.programname)] for package [$($item.packagename)] couldn't be created" -foregroundcolor red
write-host "error: web application as $webappurl was not found, aborting!" -foregroundcolor red
write-host "error: web application at $webapplication was not found, aborting!" -foregroundcolor red
write-host "example 1: .\nestedgroup.ps1 'groupname'"
write-host "example 2: .\nestedgroup.ps1 'group1' 'group2' 'group abc'"
write-host excel processes running after executing excel and images demo scripts -foregroundcolor black -backgroundcolor white
write-host excel processes running after executing excel_image_demo_cleanup.ps1 -foregroundcolor red -backgroundcolor white
write-host excel processes running after executing excel_image_demo_no_cleanup.ps1 -foregroundcolor red -backgroundcolor white
write-host excel processes running before executing excel and images demo scripts -foregroundcolor black -backgroundcolor white
write-host excel processes running before executing excel_image_demo_cleanup.ps1 -foregroundcolor blue -backgroundcolor white
write-host excel processes running before executing excel_image_demo_no_cleanup.ps1 -foregroundcolor blue -backgroundcolor white
write-host excel processes running now -foregroundcolor black -backgroundcolor white
write-host "$($_.exception.message)"
write-host $_.exception.tostring();
write-host "executing the following command"
write-host $existinggroupmemberscount " existing group members"
write-host 'expected exactly one record, found' $matched.count'.'
write-host 'exporting...'
write-host "exporting group to $($file)" -f yellow
write-host $extractdir
write-host "failure e-mail sent"
write-host "feature $featurename is already disabled on $scope $url"
write-host "feature $featurename is already enabled on $scope $url"
write-host " - file $destfilename already exists, skipping..."
write-host "file $destinationfilename already exists, skipping..."
write-host $file.fullname -foregroundcolor green
write-host "$filename could not be created"
write-host "file : $stritem already exists in destination folder"
write-host "`'$fileurl`' ..."
write-host 'finished.'
write-host " finished deleting files`n"
write-host "finished documenting " $db.name;
write-host " finished listing files`n"
write-host "finished processing $wsusserver at $finish"
write-host $firewallportclosing
write-host $firewallportopening
write-host "first name: $($prop.givenname) " `
write-host "folder created for " $mailboxname -foregroundcolor $warning
{write-host -fore green "the device is on line"}
write-host -foregroundcolor blue "==============================================================================="
write-host -foregroundcolor blue "the cost was (" $500mbstorage "*" $500mbchunk ") +" $mailboxtier1 "=" $mbxcharge
write-host -foregroundcolor blue "the mailbox for" $_.displayname "is being updated from the pin of" `
write-host -foregroundcolor blue "the user" $mailbox.displayname "has an non-standard mailbox size of" `
write-host -foregroundcolor blue "waiting on all jobs to reach a completed status. sleeping for 60 seconds."
write-host -foregroundcolor $color $output.trimstart()
write-host -foregroundcolor cyan "1. stopping wuauserv service..."
write-host -foregroundcolor cyan "3. starting wuauserv service..."
write-host -foregroundcolor cyan "4. forcing wsus checkin"
write-host -foregroundcolor cyan "4. starting wuauserv service..."
write-host -foregroundcolor cyan "5. checkin complete"
write-host -foregroundcolor cyan "5. forcing wsus checkin"
write-host -foregroundcolor cyan "6. checkin complete"
write-host -foregroundcolor cyan "no mailbox found. ended without compiling a report. please check your input."
write-host -foregroundcolor cyan "please choose database or single mailbox. both parameters can not be used at the same time. ended without compiling a report."
write-host -foregroundcolor cyan "users created, view the log at $logpath"
write-host -foregroundcolor darkgreen $ptr
write-host -foregroundcolor darkred "the user who caused the admin code lookup issue was:" $userdn
write-host -foregroundcolor darkyellow "$computer $deviceid percentage free space = $percentfree";
write-host -foregroundcolor "| error-message:" $errormessage
write-host " ---------------------------------" -foregroundcolor green
write-host "_________________________________________________________" -foregroundcolor green
write-host -foregroundcolor green "all jobs have reported a completed status!"
write-host -foregroundcolor 'green' -backgroundcolor 'black' 'creation successful.'
write-host -foregroundcolor 'green' -backgroundcolor 'black' 'success.'
write-host -foregroundcolor 'green' -backgroundcolor 'black' 'validation successful.'
write-host -foregroundcolor green "beginning mailbox data gathering. in a short while a progress bar will appear."
write-host -foregroundcolor green "deleting old netstat info"} else {
write-host -foregroundcolor green "gathering information, will take about 2 minutes"} else {
write-host -foregroundcolor green "mailbox data gathering is complete. the spreadsheets will now be generated."
write-host -foregroundcolor green "$name is a lync user"
write-host -foregroundcolor green "`n$mysuccessmsg"
write-host -foregroundcolor green `n"the" $mimetype "mime type has been successfully added."
write-host -foregroundcolor green $p.proj_name ":: is being checked out for publishing" `
write-host -foregroundcolor green "the mailbox for" $mbxusercheck.displayname `
write-host -foregroundcolor green "the new optimal mailbox databases are as follows:"
write-host -foregroundcolor magenta "could not start netstat gathering"}
write-host -foregroundcolor magenta "delete command failed, return values may not be current"}
write-host -foregroundcolor red `
write-host -foregroundcolor red "2. softwaredistribution folder does not exists, starting wuauserv"
write-host -foregroundcolor red "2. softwaredistribution folder exists... deleting"
write-host -foregroundcolor red "3. *** deleted ***"
write-host -foregroundcolor red "a mailbox with the email address" $userentry.emailaddress `
write-host -foregroundcolor 'red' -backgroundcolor 'black' 'failure.'
write-host -foregroundcolor red ($bytesleft = $totsize - $bytetrans) "left to transfer"
write-host -foregroundcolor red "copying still in progress, but will be finished in less than 5 minutes"
write-host -foregroundcolor red ">>> error: $_"
write-host -foregroundcolor red "error :("
write-host -foregroundcolor red ("----------------------------------`n")
write-host -foregroundcolor red "$name is not a communicator or lync user"
write-host -foregroundcolor red "`n$myerrormsg"
write-host -foregroundcolor red `n"skipped clearing moverequests..."
write-host -foregroundcolor red $path2 " deleted"
write-host -foregroundcolor red $path " deleted"
write-host -foregroundcolor red $path " does not exist"
write-host -foregroundcolor red $p.proj_name ":: will be published now, you may check the queue" `
write-host -foregroundcolor red $statusdetail
write-host -foregroundcolor red $transspeed "per minute transferred"
write-host -foregroundcolor white `n"adding" $mimetype "mime type to defined web application"$webapp.url
{ write-host -foregroundcolor yellow "connecting to $name..." }
{ write-host -foregroundcolor yellow $info }
write-host -foregroundcolor yellow "---------------------------------`n"
write-host -foregroundcolor yellow "$name is a office communicator user"
write-host -foregroundcolor yellow `n"there is no moverequest for:" $user.identity
write-host -foregroundcolor yellow "please wait... running command"
write-host -foregroundcolor yellow "the mailbox for" $_.displayname `
write-host -foregroundcolor yellow "working on job $jobcount with the array start of $mbxmovearraystart and the array end of $mbxmovearrayend."
write-host -foreground green "********************************"
write-host -foreground green "result : all the leases matched"
write-host -foreground magenta "[$ip] : different`n`n"
write-host -foreground magenta "[$ip] : not found on server1`n`n"
write-host -foreground magenta "[$ip] : not found on server2`n`n"
write-host -foreground red "********************************"
write-host -foreground red "result : leases did not match"
write-host "for example `$global:subversionclient=`'svn`' for the win32svn client."
write-host "found already added domain: $upnsuffix"
write-host "found computer name starting with 0-, will try to find matching department for division 0"
write-host "found computer name starting with 1-, will try to find matching department for division 1"
write-host "found computer name starting with 2-, will try to find matching department for division 2"
write-host "found $dnsserverfind...replacing with $dnsserverreplace"
write-host "found $found but expected $expected."
write-host "found $($oa_dbcounters.count) over, $($ua_dbcounters.count) under and $($pa_dbcounters.count) perfectly allocated";
write-host "found $($objdgmembers.count) members..."
write-host "found [$($objresults.updates.count)] updates to download."
write-host "found suspended mbx: " $mailbox
write-host "found $($totalmailboxes) mailboxes across $($dbs.count) databases. aiming for $($balancedcount) mailboxes per database."
write-host "found" $wparray.length "$varnamespace webparts..." -foregroundcolor green
write-host "found zip-file : $split"
write-host "function change-emailoptinvalue finished with $usercount profiles changed"
write-host "function change-emailoptinvalue was given the wrong value for variable emailoptinvalue not enough digits, must be 3"
write-host "function change-emailoptinvalue was given the wrong value for variable emailoptinvalue with digits other then 1 and 0"
write-host "function change-emailoptinvalue was given the wrong value for variable exclusionfile file doesn't exist"
write-host "function change-emailoptinvalue was given the wrong value for variable exclusionfile file is not given"
write-host "== $($functionname) =="
write-host "gathering mailbox counts"
write-host ("gathering users with the following subscription: " + $license.accountskuid)
write-host "generating powershell file '$($outputpowershellfile)' to balance dbs."
write-host "$getalias is not a member of discovery management" -foreground "red"
write-host "$getalias is not a member of mailbox import export permission" -foreground "red"
write-host (get-moverequeststatistics -identity $user.identity | select baditemsencountered).baditemsencountered -foregroundcolor red "bad items encountered"
write-host (get-moverequeststatistics -identity $user.identity | select percentcomplete).percentcomplete -foregroundcolor red "% migrated, user:" $user.identity
write-host 'getting credentials for connecting to microsoft online services tenant.'
write-host 'getting custom domain list...'
write-host "getting nested members for distributions group: $($arg)" -f green
write-host "getting $server" -fore blue -back white
write-host "getting $server" -fore green
write-host "getting software information.($comp)" -foregroundcolor magenta -backgroundcolor white
write-host "getting the root web for:" $url
write-host 'getting unverified domain list...'
write-host $global:totalgroupschecked " groups checked."
write-host $global:totalgroupsupdated " groups updated."
write-host $global:totalsiteswithwebpartfound " sites with web part. time elapsed = ", $sw.elapsed.tostring()
write-host $global:totalusersnoupdateneeded, " users without update required"
write-host $global:totalusersprocessed " profiles processed in time: ", $sw.elapsed.tostring()
write-host $global:totalusersupdated, " users updated"
write-host $global:totaluserswithoutpicture, " users without picture in active directory"
write-host("group description = "+$group.description)
write-host("group dn = "+$group.distinguishedname)
write-host("group filter = "+$group.info)
write-host "group $($item.groupname) alread exists! group creation skipped!"
write-host "group $($item.groupname) created!"
write-host("group name = "+$group.name)
write-host "host did not successfully go into maintenance mode, retrying"
write-host $hostinstanceitem.hostname -foregroundcolor white
write-host "host is in maintenance mode"
write-host "host is not operational!!!"
write-host "host is responding"
write-host "hostname: " -foregroundcolor yellow -nonewline
write-host "hostname is $tsenv:osdcomputername and contains"$tsenv:osdcomputername.length"characters. the last 4: ("$tsenv:osdcomputername.remove(0,$charstoremove)") will be used to determine whether pc is a kiosk or not"
write-host "hostname : " $servername.toupper()
write-host "html text customization found. skipping logon.aspx modification."
write-host -i $ce -fore red -back white
write-host $_.identity
write-host 'ie enhanced security configuration (esc) has been disabled for administrators.' -foregroundcolor green
write-host 'ie enhanced security configuration (esc) has been disabled for users.' -foregroundcolor green
write-host "if you have not installed the necessary roles/features"
write-host $i.index `t $i.description
write-host 'importing as enterprise trust...'
write-host 'importing as trusted root...'
write-host 'importing as trusted third-party root...'
write-host 'importing to certificate store...'
write-host "importpsmodule is installed and ready to use" -foreground green
write-host "[info] check \\$strcomputer\c$\windows\syswow64\ccm\logs\repair-msi%.log to make sure it was successful."
write-host "[info] connect to the wmi namespace on $strcomputer."
write-host "[info] get the list of computers from the input file and store it in an array."
write-host "[info] sccm client repair process ran successfully on $strcomputer."
write-host "[info] sccm client repair ran for $i seconds."
write-host "[info] starting trigger script for $strcomputer."
write-host "[info] successfully connected to the wmi namespace and triggered the sccm repair on $strcomputer."
write-host "[info]`tdistribution point [$($item.packagename)] added to package [$($item.packagename)]" -foregroundcolor green
write-host "[info]`t[$($item.collectiontype)] collection [$($item.collectionname)] created" -foregroundcolor green
write-host "[info]`t[$($item.collectiontype)] collection [$($item.collectionname)] moved to folder [$($item.collectionfolder)]" -foregroundcolor green
write-host "[info]`t[$($item.collectiontype)] collection [$($item.collectionname)] moved to folder [$($item.targetfolder)]" -foregroundcolor green
write-host "[info]`t[$($item.foldertype)] collectionfolder [$($item.foldername)] created" -foregroundcolor green
write-host "[info]`tmetering rule [$($item.productname)] created" -foregroundcolor green
write-host "[info]`tmetering rule [$($item.productname)] moved to folder [$($item.meteringfolder)]" -foregroundcolor green
write-host "[info]`tmetering rule [$($item.productname)] moved to folder [$($item.targetfolder)]" -foregroundcolor green
write-host "[info]`tpackage [$($item.packagename)] created" -foregroundcolor green
write-host "[info]`tpackage [$($item.packagename)] moved to folder [$($item.packagefolder)]" -foregroundcolor green
write-host "[info]`tpackage [$($item.packagename)] moved to folder [$($item.targetfolder)]" -foregroundcolor green
write-host "[info]`tprogram [$($item.programname)] created" -foregroundcolor green
write-host "[info] trigger the sccm repair on $strcomputer."
write-host "[info] wait (a maximum of 7 minutes) for the repair to actually finish."
write-host "inheritance broken on web:" $web.url
write-host 'installation complete.'
write-host "installation date: " $objitem.installdate
write-host "installation location: " $objitem.installlocation
write-host "installed applications" -foregroundcolor black -backgroundcolor yellow
write-host "installed version: $installedversion"
write-host "installing msi $msifilename`n please wait..."
write-host "installing. please wait..."
write-host "installing prerequisites required for sharepoint 2013"
write-host 'installing response...'
write-host "installing solutions" -foregroundcolor white
write-host "installing solution $solutionname" -foregroundcolor white
write-host "installing solution $solutionname on $webapplication" -foregroundcolor white
write-host "installing symbolic links"
write-host "install required windows roles/features for sharepoint 2013 on windows server 2012"
write-host "internet explorer info" -foregroundcolor black -backgroundcolor yellow
write-host "invalid credentials" -foregroundcolor red
write-host "invalid input. please enter a properly formatted subnet mask."
write-host "invalid input, prefix length must be less than 32"
write-host "invalid scope parameter has been passed" -foregroundcolor red -backgroundcolor yellow | out-default
write-host "invoke-hibernate" (get-date)
write-host "invoke-standby" (get-date)
write-host "ip : " $itemip
write-host "ip : not assigned"
write-host "issuing: get-netipaddress | where {$_.interfacealias -like iphttpsinterface} "
write-host $item.name
write-host " last checked: $now" -foregroundcolor green
write-host " - "$list.title updated
write-host "loading sharepoint powershell snapin"
write-host "local windows feature $featurename missing, installing..."
write-host "log file count: " + $transactionlogs.length-1
write-host "logfile = ", $logfile
write-host "looking for $varnamespace webparts in page: $varlisturl" -foregroundcolor green
write-host $lookupresults
write-host "lync enabling test user: $($newuser.displayname) with lineuri: $lineuri"
write-host "$member was added to $identity" -foregroundcolor darkgreen
write-host "$member was removed from $identity" -foregroundcolor darkgreen
write-host "$($menuitems[$i])" -fore $bcolor -back $fcolor
write-host "$($menuitems[$i])" -fore $fcolor -back $bcolor
write-host "* $menutitel *" -fore $fcolor -back $bcolor
write-host ("*" * $menuwidth) -fore $fcolor -back $bcolor
write-host $message
write-host $message -foregroundcolor green
write-host $message -foregroundcolor red
write-host $message -f "yellow"
write-host "move below mailboxes to the target database:" $targetdatabase
write-host "`n"
write-host ("---------------------------------`n")
write-host "`nadding modifications -> $path : $name, $value"
write-host "`nadding web config nodes"
write-host $name " can now use lync."
write-host "name does not match 0-, 1- or 2- as starting characters. will not be able to determine destination ou, using noncompliant ou."
write-host "name: " $objitem.name
write-host "$($_.name)`t`t $($_.value)"
write-host "`napplying modifications to the web.config"
write-host "`nchanging $path -> $name to $value"
write-host "`ncompleted web.config modifications"
write-host "`n creating task in task scheduler"
write-host " `n$env is not a virtual machine"
write-host $newgroupmemberscount " objects returned from query"
write-host $newlist
write-host " next check: $now" -foregroundcolor green
write-host "next run : $now"
write-host "`n files`t: $allfilecount`n folders`t: $($folderlist.count) `n old files`t: $($filelist.count)"
write-host "`n$heading`n$prompt`n`nkeyword`t - meaning"
write-host "`n$i"
write-host "nic : " $strbind
write-host "`n listing files..."
write-host "`n microsoft office 365 federation metadata update automation installation tool" -foregroundcolor yellow
write-host `n"mime type examples:"`n"application/pdf, text/html, text/xml"`n
write-host "`nmissing parameter: the -outfile parameter is required. please re-run this script with a valid path and filename for the -outfile parameter.`n"
write-host "`n`ngathering all files from $source. note: this can take several minutes depending on network speed.`n"
write-host "`n`ngathering $count files. this can take several moments depending on the source server's location. please be patient."
write-host "`n`n items required to execute this tool successfully:"
write-host `n"no exchange snapin loaded, it will be loaded automatically"
write-host "`n`nscript complete!`n`n`tmatches:`t$fmatches`n`tnon-matches:`t$nmatches`n`tnot found:`t$nfounds`n"
write-host " no change`n" -foregroundcolor green
write-host "no changes made, exiting..."
write-host "no credentials found for $($env:username)"
write-host "no mailbox associated with below aliases: "
write-host -nonewline .
write-host "." -nonewline
write-host -nonewline ('checking for txt for "' + $unverifieddomain.name + '"... ')
write-host -nonewline 'domain verification code: '
write-host $_ -nonewline -foregroundcolor $color
write-host -nonewline $message
write-host -nonewline "retrieving shutdown and startup events from "
write-host -nonewline 'validating record... '
write-host -nonewline "waiting to finish "
write-host "no rbag groups found"
write-host "no reboot required."
write-host 'no records found. full results:'
write-host "no scope parameter has been passed" -foregroundcolor red -backgroundcolor yellow | out-default
write-host "note: each group will be automatically exported to a csv file in the current working directory" -f yellow
write-host("notes field empty on rbag group. verify notes field in active directory")
write-host "note: the generated documentation will be stored in $filepath folder.";
write-host "note: you'll receive prompt to restart your server when the"
write-host "no url parameter has been passed" -foregroundcolor red -backgroundcolor yellow | out-default
write-host "`npausing $interval seconds... press ctrl-c to stop the script" -foregroundcolor yellow
write-host "`n press ctrl-c to stop the script.`n" -foregroundcolor yellow
write-host "`nrandom sample requested."
write-host "`n retrieving list of files and folders from: $folderpath"
write-host "`nsome files had paths that were too long for the script to validate. please check the following files manually." -foregroundcolor yellow
write-host "`n started : $starttime`n folder :`t$folderpath`n switches :`t$switches`n"
write-host "`n starting with removal of old files..."
write-host "`n`tadded msol credentials to the local credential manager" -foregroundcolor green
write-host "`n`tcreated daily scheduled task 'microsoft-office365-update-msolfederateddomain-$federateddomain'`n" -foregroundcolor green
write-host "`n`tcreated stored script file used by task scheduler" -foregroundcolor green
write-host "`n`tfailed adding msol credentials to the local credential manager. exiting...`n" -foregroundcolor red
write-host "`n`tfailed creating c:\office365-scripts\ directory. exiting...`n" -foregroundcolor red
write-host "`n`tfailed creating $scriptpath file. exiting...`n" -foregroundcolor red
write-host "`n`tfailed creating task 'microsoft-office365-update-msolfederateddomain-$federateddomain'`n" -foregroundcolor red
write-host "`n`tfailed local admin domain credential validation. exiting...`n" -foregroundcolor red
write-host "`n`tfailed msol credential validation. exiting...`n" -foregroundcolor red
write-host "`n`tfederated domains do not match. exiting...`n" -foregroundcolor red
write-host `n"there are following finished mailboxes:"
write-host "`n this script sample will attempt to archive the netlogon debug logs`n"
write-host "`n this script sample will attempt to output and archive port usage information`n"
write-host "`n`tsuccess" -foregroundcolor green
write-host "`n`tthe ad fs 2.0 windows service was not found on this machine. exiting...`n" -foregroundcolor red
write-host "`n validating local admin domain credentials"
write-host "`n validating msol credentials"
write-host "`n writing power shell script to c:\office365-scripts\"
write-host -object $($error | out-string)
write-host "offline: $($computer)" -background red -foreground white}
write-host $out
write-host 'page launch will take about 10 seconds...'
write-host "parentnode: " $feature.parentnode.get_name()
write-host "password for account " $accounttoretrieve " is " $password
write-host $path;
write-host "pc naming matches division 0 kiosk pc's"
write-host "pc naming matches division 1 kiosk pc's"
write-host "pc naming matches division 2 kiosk pc's"
write-host "pc naming matches hrm department"
write-host "pc naming matches ict department"
write-host "pc naming matches neurology department"
write-host $percentcomplete -foreground yellow
write-host "physical hostname is $pfqdn";
write-host "ping statistics:"
write-host "placing host $vmhost back into service."
write-host "placing host $vmhost into maintenance mode."
write-host "please assign the variable `$global:subversionclient in your `$profile, to either svn or tortoise."
write-host " - please check the path, and try running the script again."
write-host "please note the dns entry might take sometime for replication" -foregroundcolor red -backgroundcolor white
write-host "please run script with the proper switches:"
write-host "please standby..."
write-host "policies exported successfully to $filename"
write-host "polling... time:" (get-date) "; battery:$bcharge%,$bstate"
write-host "= !$($poshfile.name) ="
write-host "prerequisites verification failed. please follow the suggestions to fix." -foregroundcolor red
write-host "- press any key to exit..."
write-host "$($press.character)" -nonewline
write-host "prevvalue: $prevvalue" $prevvalue.gettype()
write-host "--> $print"
write-host "...$privgroup has $numberofunique unique members" -foregroundcolor red
write-host $processid -foregroundcolor white
write-host "process id: " -foregroundcolor yellow -nonewline
write-host "processing member: $($objmember.primarysmtpaddress)"
write-host "processing $($objdistributiongroup.displayname)..."
write-host "processing.................................$user"
write-host ("processing " + $user.displayname)
write-host "processing.................................$userid"
write-host "product edition: " $key.getvalue("productedition")
write-host 'product is already installed, will not reinstall.'
write-host "product version number: $productversion"
write-host "profile items to process: ", $count
write-host "propvalue: $propvalue" $propvalue.gettype()
write-host "publishing project " + $row[0]
write-host "$q`n" -foregroundcolor darkgreen
write-host "$q`n" -foregroundcolor yellow
write-host "`r"
write-host ram usage after executing excel_image_demo_cleanup.ps1 -foregroundcolor red -backgroundcolor white
write-host ram usage after executing excel_image_demo_no_cleanup.ps1 -foregroundcolor red -backgroundcolor white
write-host ram usage before executing excel_image_demo_cleanup.ps1 -foregroundcolor blue -backgroundcolor white
write-host ram usage before executing excel_image_demo_no_cleanup.ps1 -foregroundcolor blue -backgroundcolor white
write-host "rdp is enabled in remote registry on machine: $computername"
write-host "reading hosts file" -foregroundcolor black -backgroundcolor yellow
write-host "ready [$($objcollection.count)] updates to install"
write-host "reboot is required: restarting $vmhost"
write-host 'record found: ' $matched[0]
write-host 'record located matched expected record.'
write-host "recovery e-mail sent"
write-host 'registry modifications unnecessary.'
write-host $removeactivitystring -foregroundcolor red
write-host "removed ($cg) from ($pg)"
write-host "removed user $($line.username) from:" -fore "magenta"
write-host "removes child objects for user " $aduser -foregroundcolor yellow
write-host "removes child objects for user" $aduser -foregroundcolor yellow
write-host 'removing existing binding from the adfs site...'
write-host "removing solution $solutionname" -foregroundcolor white
write-host "report for " $mailboxname " : " $htmlreport
write-host 'requesting an immediate synchronization...'
write-host 'requesting directory sync to be enabled. this may take up to 24 hours to complete.'
write-host 'requesting local credentials...'
write-host 'requesting online coexistence configuration information...'
write-host 'requesting synchonization credentials...'
write-host "resetting inheritance on listfolder:" $folder.url
write-host "resetting inheritance on listitem:" $item.url
write-host "resetting inheritance on list:" $list.url
write-host "resetting inheritance on web:" $web.url
write-host 'restarted windows explorer to complete ie esc configuration.'
write-host "restarting sharepoint timer service..." -foregroundcolor white
write-host "restarting the windows management instrumentation service"
write-host $result
write-host "retrieving and comparing hashes."
write-host "retriveing the acl cert template: $certtemplate"
write-host "return value : $? : $error[0] "
write-host 'running dirsync installer...'
write-host "running processes" -foregroundcolor black -backgroundcolor yellow
write-host "running the following command: $cmdadd"
write-host "running the following command: $cmddelete"
write-host "scope = ", $scope
write-host "script execution is now complete!"
write-host 'script exiting.'
write-host "scripting " $db.name;
write-host "script started"
write-host "script start time: " $starttime -foreground cyan
write-host "search is an array or the mailbox already exists on that database" -foreground red
write-host "sending email notification to $user"
write-host ".\set-spsmailoptin.ps1 mailoptinvalue exclusionfile whatif(optional)"
write-host "setting 5gb quota on mailbox..." -foregroundcolor "yellow"
write-host "setting full access permissions on the shared mailbox"
write-host "setting 'max degree of parallelism' value to 1 for server $server..."
write-host "setting permissions done successfully"
write-host "setting $propname to '$propvalue' on publishing web at $url" -foregroundcolor white
write-host "setting read only permissions on the shared mailbox"
write-host "setting the postenlabels property to:" $languages
write-host "setting $vmhost to unavailable for placement"
write-host $sharedhostcmd
write-host "shared mailbox created: $sharedmailboxusername" -foregroundcolor "green"
write-host $share -foregroundcolor green
write-host $('-' * $share.length) -foregroundcolor green
write-host '(should have the same id as the one running at the start)' -foregroundcolor black -backgroundcolor white
write-host "$sitecollectionurl : " -nonewline
write-host "solution $solutionname is already deployed on $webapplication, skipping upgrade!"
write-host "solution $solutionname is already deployed, skipping upgrade!"
write-host "solution $solutionname is deployed but marked as deployonce=true, skipping uninstall!"
write-host "solution $solutionname not found on farm, skipping uninstall!"
write-host "sorting databases into over, under and perfectly allocated."
{ write-host "(source: $_sourcehash)" -foregroundcolor green; $_hashresult = "true" }
{ write-host "(source: $_sourcehash)" -foregroundcolor red; $_hashresult = "false" }
write-host " [sps-profilepicture] = ", $userprofilepictureurl
write-host $standalonecmd
write-host "started documenting " $db.name;
write-host "started processing $wsusserver at $start"
write-host "starting..."
write-host "starting archiving of all changed projects "
write-host "starting dependent services"
write-host "starting msftesql-exchange and msexchangesearch services"
write-host "starting script execution at : $starttime";
write-host "starting wmi scan on $($computername)"
write-host "startups" -foregroundcolor black -backgroundcolor yellow
write-host $_statusline
write-host "stopping dependent services"
write-host "stopping msftesql-exchange and msexchangesearch services"
write-host $struserdetails
write-host 'submitting request...'
write-host "success"
write-host "successfully deleted credentials for '$target'"
write-host "successfully retrieved list for processing !!!";
write-host "..sucessful." -foregroundcolor green
write-host "..sucessful." -foreground green
write-host "svn info command not supported by tortoisesvn"
write-host "symbolic links restored."
write-host "system restrictions" -foregroundcolor black -backgroundcolor yellow
write-host "`t1. functioning ad fs 2.0 federation service"
write-host "`t2. access to global administrator credentials for your office 365 tenant (referred to as 'msol credentials')"
write-host "`t3. at least one verified domain in the office 365 tenant must be of type 'federated'"
write-host "`t4. this tool must be executed directly on a internal, writable federation server"
write-host "`t5. the local administrator domain credentials you provide must equal the currently logged on user"
write-host "`t6. the microsoft online services module for windows powershell must be installed on the internal ad fs server"
write-host $tableentry
write-host "$($targetfile.substring(0,$(if ($targetfile.length -gt 30) {30} else {$targetfile.length})))$(if ($targetfile.length -lt 30) {} else {"...$($targetfile.substring($targetfile.lastindexof('\')+1,$targetfile.length-$targetfile.lastindexof('\')-1))"}): $_targethash " -nonewline
write-host "$($targetfile.substring(0,$(if ($targetfile.length -gt 30) {30} else {$targetfile.length})))$(if ($targetfile.length -lt 30) {} else {"...$($targetfile.substring($targetfile.lastindexof('\')+1,$targetfile.length-$targetfile.lastindexof('\')-1))"}):`t" -nonewline; write-host "not found." -foregroundcolor red
write-host "$($targetfile.substring(0,$(if ($targetfile.length -gt 30) {30} else {$targetfile.length})))$(if ($targetfile.length -lt 30) {} else {"...$($targetfile.substring($targetfile.lastindexof('\')+1,$targetfile.length-$targetfile.lastindexof('\')-1))"}):`t" -nonewline; write-host "path too long. check manually." -foregroundcolor yellow
write-host "target ou = $tsenv:machineobjectou"
write-host "testing decryption of password..."
write-host "testing $name"
write-host "the connection to office 365 has been established already."
write-host "the connection with office 365 has been established already."
write-host "the copy is fine on " $groupname
write-host "the current volume control setting is:$newlevel" -foregroundcolor green
write-host "the current volume control setting is:$volumelevel" -foregroundcolor green
write-host "the" $customername "spreadsheet is being generated for" $customerhash.$customername.count "mailboxes."
write-host "the file " $txt " does not exist." -foreground red
write-host "the master spreadsheet is being generated for" $mailboxdata.rows.count "mailboxes."
write-host "the new-moverequest cmdlet encountered an error for $mailbox. moving to the next mailbox." -foreground red
write-host 'there are no unverified domains in the current tenant.'
write-host "there are no vms on this server currently."
write-host "there are offline vms, migrating to another host"
write-host " there is no error handling and is not ready for mission-critical work." -foregroundcolor yellow
write-host 'the required microsoft online services module for windows powershell is not installed. it will be installed now.'
write-host "the script has completed and your csv file has been saved as" $csv". data has been collected on items that are" $mailolderthandays "days or older. this resulted in a collection of items sent on or before" $querydate"." -foreground yellow
write-host "the script took" $elapsedtime.hours "hours," $elapsedtime.minutes "minutes, and" $elapsedtime.seconds `
write-host "the search option has not been properly configured or the text file is blank. please edit the search options and try again." -foreground red
write-host "the status of the dag databases before any changes were made:"
write-host "the target database doesn't exist:" $targetdatabase
write-host "this enables a difz user account to be able to use lync"
write-host "this moves a legacy (office communicator) user to lync"
write-host "this script helps you to federated a new / existing domain with office365"
write-host " this script sample is not intended for production use." -foregroundcolor yellow
write-host "this script will create a new shared mailbox on office 365" -foregroundcolor "yellow"
write-host "this uses the supported installing offline method"
write-host "==$($thisverb)-!$($thiscommand)=="
write-host "this will occur at this time."
write-host "[$time] $message"
write-host "[$time] $message" -foregroundcolor green
write-host $title
write-host "`tmember is another dl"
write-host "`tmember is a user..."
write-host("`tmember to add: $memberdn")
write-host("`tmember to remove: $memberdn")
write-host "`t" -nonewline
write-host "to end this application, close the window"
write-host "total execution time: ", $sw.elapsed.tostring()
write-host "trying to download and install importpsmodule package" -nonewline
write-host "`tuser is already in our array..."
write-host "`tuser is not already in our array..."
write-host "unable to connect to office 365. did you enter the details correctly?" -foregroundcolor "red"
write-host "unable to create shared mailbox:" -foregroundcolor "red"
{ write-host "unable to obtain permissions for $share" }
write-host "unable to set permissions" -foregroundcolor "red"
write-host "unable to set quota" -foregroundcolor "red"
write-host "unable to set send as permissions" -foregroundcolor "red"
write-host "uninstalling solution $solutionname" -foregroundcolor white
write-host "unknown action: $action" -foregroundcolor red
write-host "updating solution $solutionname" -foregroundcolor white
write-host "updating solution $solutionname on $webapplication" -foregroundcolor white
write-host $up.displayname" --> ", $pictureurl
write-host "upstream server: $parentwsusserver"
write-host "url: $siteurl"
write-host "url = ", $url
write-host "usage for nestedgroup.ps1 " -f green
write-host "usage: mailbox-move.ps1 [csvfilename] [-targetdatabase [<>]]"
write-host $usage | out-default
write-host "$user,$($arrdlmembers.$user)"
write-host "($usercount): not setting values for $username in exclusion list."
write-host "($usercount): setting values for $username."
write-host "user found" -foregroundcolor green
write-host "$userinfo.display is now on lync pool $userinfo.registrarpool"
write-host "$username had the value $originalvalue"
write-host $userobject already has $country as country
write-host $userobject already has $phone as phone
write-host $userobject already has $state as state
write-host $userobject already has $zip as zip
write-host $userobject has $address as current physical address
write-host $userobject has $address as physical address
write-host $userobject has blank city
write-host $userobject has blank country
write-host $userobject has blank phone
write-host $userobject has blank physical address
write-host $userobject has blank state
write-host $userobject has blank zip
write-host $userobject has $city as city
write-host $userobject has $city as current city
write-host $userobject has $country as country
write-host $userobject has $phone as phone
write-host $userobject has $state as state
write-host $userobject has $zip as zip
{write-host "......$usersam has a password age of $userpwdage" -foregroundcolor green}
write-host "using maximum value (365 days)..."
write-host "using the value $emailoptinvalue"
write-host "valid credentials" -foregroundcolor green
write-host "vendor: " $objitem.vendor
write-host "version: " $objitem.version
write-host "waiting for 10 seconds for the mailbox to be created..." -foregroundcolor "yellow"
write-host("warning: a problem occurred whilst adding member to group. reason: $errtext")
write-host("warning: a problem occurred whilst querying ad. reason: $errtext")
write-host "[warning] either the wmi namespace connect or the sccm repair trigger returned an error."
write-host "warning: publishing web on $url was not found, skipping!"
write-host "[warning] sccm repair is already running. script will end."
write-host "warning: site on $url was not found, skipping!"
write-host "[warning] this is most likely caused, because there is already a repair trigger running."
write-host " warning: this script sample is provided as-is with no warranties and confers no rights." -foregroundcolor yellow
write-host "[warning] wait a couple of minutes and try again."
write-host "warning: web application as $webappurl was not found, skipping!"
write-host "[warn]`tprocessing is disabled for [$($item.collectiontype)] collection [$($item.collectionname)]" -foregroundcolor yellow
write-host "[warn]`tprocessing is disabled for [$($item.foldertype)] collectionfolder [$($item.foldername)]" -foregroundcolor yellow
write-host "[warn]`tprocessing is disabled for metering rule [$($item.productname)]" -foregroundcolor yellow
write-host "[warn]`tprocessing is disabled for package [$($item.packagename)]" -foregroundcolor yellow
write-host "[warn]`tprocessing is disabled for program [$($item.programname)]" -foregroundcolor yellow
write-host "[warn]`troot folder [$($item.folderparent)] couldn't be found" -foregroundcolor red
write-host "web application $webapplication not found, skipping solution uninstall!"
write-host "web:" $list.parentweburl "- inheritance broken on list:" $list.title
write-host "web:" $list.parentweburl "- list:" $list.title " - inheritance broken on listfolder:" $folder.url
write-host "web:" $list.parentweburl "- list:" $list.title " - inheritance broken on listitem:" $item.url
write-host "webpart = ", $webpart
write-host "web part $webpartname found" -foregroundcolor green
write-host "web part $webpartname not found" -foregroundcolor red
write-host "website"$web.url -foregroundcolor green
write-host "web templates could not be exported"
write-host "web templates exported successfully!"
write-host "what if: $addactivitystring"
write-host "what if: $removeactivitystring"
write-host "will add $solutionname to farm" -foregroundcolor white
write-host 'windows firewall appears open for tcp port 443, no changes made.'
write-host " windows server 2012 role/feature installation is complete."
write-host "writing powershell file '$($outputpowershellfile)'"
write-host "writing " $scripter.options.filename
write-host "xml: " $feature.outerxml
write-host $xmlpath
write-host "xml: " $webapplication.outerxml
write-host "xml: " $xml.outerxml
write-host "you must supply a target uri."
write-host "you must supply a user name and password (target uri is optional)."
{write-host "your domain verification failed, pls verify the txt record and run new-msolfederateddomain -domainname <domain name> for successfull completion of federation" -foreground "white" -background "red" ; write-host "for more info check the log file @ $logfile"}
write-host "your qoute of the day"
write-host "y - yes, yy - yes to rest, n - no, nn - no to rest "
writehtmlfooter $filename
writehtmlheader $filename
writehtmlpage $db $db $body $db_page;
writehtmlpage $objectname $objectname $list $page;
writehtmlpage $objectname $objectname $list $sourcesysobjpage;
writehtmlpage $srv_path $srv_path $body $srv_page;
writehtmlpage $title $title $body $page;
write "hub01" | out-file temp.dat -append
write "hub02" | out-file temp.dat -append
write "hub stats" | out-file temp.dat -append
write-infolog (" ")
write-infolog ("****************")
write-infolog ("*****************************************************************")
write-infolog ("{0} failed" -f $scriptname)
write-infolog $arguments
write-infolog $axbuilderror
write-infolog "bad buildparameters file content: {0}" -f $line
write-infolog "bad deployparameters file content: {0}" -f $line
write-infolog ("begin: ax compile : {0}" -f (get-date))
write-infolog ("begin check-cilerrors: {0}" -f (get-date))
write-infolog ("begin check-compilererrors: {0}" -f (get-date))
write-infolog ("begin: clean-build : {0}" -f (get-date))
write-infolog ("begin: clean-buildmodels: {0}" -f (get-date))
write-infolog ("begin: clean-models : {0}" -f (get-date))
write-infolog ("begin: collect-build : {0}" -f (get-date))
write-infolog ("begin: combine-xpos: {0}" -f (get-date))
write-infolog ("begin: compile-visualstudioprojects: {0}" -f (get-date))
write-infolog ("begin: compile-vscomponents: {0}" -f (get-date))
write-infolog ("begin: create-axmodel: {0}" -f (get-date))
write-infolog ("begin: create-modellist: {0}" -f (get-date))
write-infolog ("begin: delete-axmodel : {0}" -f (get-date))
write-infolog ("begin: delete-modelbyfilename : {0}" -f (get-date))
write-infolog ("begin get-model: {0}" -f (get-date))
write-infolog ("begin: import-buildmodels: {0}" -f (get-date))
write-infolog ("begin: importing visual studio project : {0}" -f (get-date))
write-infolog ("begin install-model: {0}" -f (get-date))
write-infolog ("begin: load-models : {0}" -f (get-date))
write-infolog ("begin: put-buildnumber: {0}" -f (get-date))
write-infolog ("begin: register-sqlsnapin: {0}" -f (get-date))
write-infolog ("begin: set-modellayerorder: {0}" -f (get-date))
write-infolog ("begin: start-aos method : {0}" -f (get-date))
write-infolog ("begin: stop-aos method : {0}" -f (get-date))
write-infolog ("build failed")
write-infolog ("build finished : {0}" -f (get-date))
write-infolog ("build starting : {0}" -f (get-date))
write-infolog ("build success")
write-infolog ("calling compileall api : {0}" -f (get-date))
write-infolog ("calling edit-axmodelmanifest: {0}" -f (get-date))
write-infolog ("calling export-axmodel: {0}" -f (get-date))
write-infolog ("calling get-axmodelmanifest: {0}" -f (get-date))
write-infolog ("calling get-wmiobject win32_service: {0}" -f (get-date))
write-infolog ("calling install-axmodel: {0}" -f (get-date))
write-infolog ("calling new-axmodel: {0}" -f (get-date))
write-infolog ("calling set-axmodelstore: {0}" -f (get-date))
write-infolog ("calling start-process: {0}" -f (get-date))
write-infolog ("calling start-process synchronize: {0}" -f (get-date))
write-infolog ("calling uninstall-axmodel: {0}" -f (get-date))
write-infolog ("****************cleaning build***********************************")
write-infolog ("collecting axcompileall.html: {0}" -f (get-date))
write-infolog ("collecting binaries: {0}" -f (get-date))
write-infolog ("****************collecting build*********************************")
write-infolog ("collecting dependent model files: {0}" -f (get-date))
write-infolog ("collecting model files: {0}" -f (get-date))
write-infolog ("****************combine and export xpos**************************")
write-infolog ("****************compile ax***************************************")
write-infolog ("compile finished : {0}" -f (get-date))
write-infolog ("completed: clean-build : {0}" -f (get-date))
write-infolog ("completed: collect-build : {0}" -f (get-date))
write-infolog ("completed: delete-axmodel : {0}" -f (get-date))
write-infolog ("creating label : {0}" -f (get-date))
write-infolog ("creating output directories : {0}" -f (get-date))
write-infolog ("creating workspace {0}" -f $wname)
write-infolog ("current aos state : {0}" -f ($aos.state))
write-infolog ("deleting dependent binaries : {0}" -f (get-date))
write-infolog ("deleting models : {0}" -f (get-date))
write-infolog ("deleting workspace.")
write-infolog ("dependent binaries deleted: {0}" -f (get-date))
write-infolog ("deploy failed")
write-infolog ("deploy finished : {0}" -f (get-date))
write-infolog ("deploy starting : {0}" -f (get-date))
write-infolog ("deploy success")
write-infolog ("done disable-vcs: {0}" -f (get-date))
write-infolog ("done enable-vcs: {0}" -f (get-date))
write-infolog ("done import combined xpo for model {0}: {1}" -f $modelname,(get-date))
write-infolog ("done update compiler info : {0}" -f (get-date))
write-infolog ("end: ax compile : {0}" -f (get-date))
write-infolog ("end check-cilerrors: {0}" -f (get-date))
write-infolog ("end check-compilererrors: {0}" -f (get-date))
write-infolog ("end cil compile : {0}" -f (get-date))
write-infolog ("end: clean-buildmodels: {0}" -f (get-date))
write-infolog ("end: clean-models : {0}" -f (get-date))
write-infolog ("end: combine-xpos: {0}" -f (get-date))
write-infolog ("end: compile-vscomponents: {0}" -f (get-date))
write-infolog ("end: create-axmodel: {0}" -f (get-date))
write-infolog ("end: delete-modelbyfilename : {0}" -f (get-date))
write-infolog ("end get-importoverrideparameters : {0}" -f (get-date))
write-infolog ("end get-model: {0}" -f (get-date))
write-infolog ("end: import-buildmodels: {0}" -f (get-date))
write-infolog ("end install-dependentbinaries: {0}" -f (get-date))
write-infolog ("end install-model: {0}" -f (get-date))
write-infolog ("end: load-models : {0}" -f (get-date))
write-infolog ("end: put-buildnumber: {0}" -f (get-date))
write-infolog ("end: register-sqlsnapin: {0}" -f (get-date))
write-infolog ("end: start-aos method : {0}" -f (get-date))
write-infolog ("end: stop-aos method : {0}" -f (get-date))
write-infolog ("end sync files {0}" -f (get-date))
write-infolog ("error: *********")
write-infolog $error[0]
write-infolog $errormsg
write-infolog ("errors occured while building.")
write-infolog $exp
write-infolog ($file)
write-infolog $filecontent
write-infolog ("getting models from modellist.txt: {0}" -f $modellist)
write-infolog (get-variable)
write-infolog ("import {0} finished : {1}" -f $modelname,(get-date))
write-infolog ("import {0} lables : {1}" -f $modelname,(get-date))
write-infolog ("import {0} starting : {1}" -f $model.fullname,(get-date))
write-infolog ("import combined xpo for model {0}: {1}" -f $modelname,(get-date))
write-infolog ("import override params:")
write-infolog $importoverrideparams
write-infolog "input parameters"
write-infolog ("label created")
write-infolog "label file to import is " $file.fullname " into " $modelname
write-infolog '. ' + $line
write-infolog $line
write-infolog ($message)
write-infolog ("model: {0}" -f $model.fullname)
write-infolog ("model file:")
write-infolog $modellist
write-infolog ("models deleted : {0}" -f (get-date))
write-infolog 'msbuild arguments'
write-infolog $out
write-infolog ("override file content :")
write-infolog "parameter validation errors."
write-infolog ('printing all variables')
write-infolog $result
write-infolog ("start get-importoverrideparameters : {0}" -f (get-date))
write-infolog ("starting aos")
write-infolog ("starting cil compile : {0}" -f (get-date))
write-infolog ("starting compile : {0}" -f (get-date))
write-infolog ("starting disable-vcs: {0}" -f (get-date))
write-infolog ("starting enable-vcs: {0}" -f (get-date))
write-infolog ("starting update compiler info : {0}" -f (get-date))
write-infolog ("start install-dependentbinaries: {0}" -f (get-date))
write-infolog ("start synchronize : {0}" -f (get-date))
write-infolog ("stopping aos")
write-infolog ("sync files {0}" -f (get-date))
write-infolog ("sync files done")
write-infolog ("sync files started")
write-infolog ("synchronize finished : {0}" -f (get-date))
write-infolog ("****************trying to revert build***************************")
write-infolog "uninstall-axmodel failed."
write-infolog ("validation errors.")
write "mail01" | out-file temp.dat -append
write "mail02" | out-file temp.dat -append
write "mailbox stats" | out-file temp.dat
write-output $a $date | out-file $logfile -append
write-output "adding other nodes to the cluster"
write-output "add-windowsfeature 'failover-clustering', 'rsat-clustering'"
write-output "add-windowsfeature 'failover-clustering', 'rsat-clustering-powershell', 'rsat-clustering-cmdinterface'"
write-output "backing up existing web.config to ""$backuppath"""
write-output "bringing all ips offline"
write-output "bring offline the cluster name resource"
write-output "checking to see if the parent vhd file exists on the target host..."
write-output "checking to see if the virtualmachinemanager module has been loaded..."
write-output "cluster creation finished !"
write-output "$cname,$dname,$totdays"
write-output "$cname, $result"
write-output $completed
write-output "completed config $foundtopology $bid, log: $filename2" | out-file -filepath $fileexit
write-output "converting oab virtual directory on $computername to an application..." ""
write-output "created $webconfigpath."
write-output "creating the differencing disk on the target host..."
write-output "creating the virtual machine..."
write-output "creating the $vm virtual machine"
write-output $dashes
write-output $detected
write-output "domainjoin attempted $vardomainjoin " | out-file -filepath "c:\config\logs\domainjoin.txt"
write-output "done! oab virtual directory has been converted to an application on $computername."
write-output $e > $logfile
write-output $errorlist
write-output ("error on " + $srv + ": " + $_.exception.message);
write-output "error provide the path of log as argument to the script. usage : parselog filepath "
write-output ($_.exception.message)
write-output ($_.exception.message);
write-output "filename,source hash,destination hash,match success" | out-file $results
write-output "forcing cleanup of the specified nodes"
write-output "found $numberofips ip addresses"
write-output "get all ip addresses associated with cluster group"
write-output "[$(get-date -format g)]: server $($server) gets its time from $($timeserver)" >> $logfile
write-output ((get-date -format yyyy-mm-dd-hh:mm:ss) + ": exporting {0}" -f $rd.getstring(0));
write-output ((get-date -format yyyy-mm-dd-hh:mm:ss) + ": started ...");
write-output "get-oabvirtualdirectory -server $computername | remove-oabvirtualdirectory"
write-output "get the first ipv4 resource"
write-output "key not found on machine $srv";
write-output "making sure that there is no cluster currently running on the current node"
write-output $($menuitems[$pos])
write-output ($message)
write-output "module loaded successfully"
write-output "needed cluster features were not found on the machine. please run the following command to install them:"
write-output "new-oabvirtualdirectory -server $computername"
{ write-output "nothing to delete on machine $srv"; }
write-output $obj
write-output "obtaining the appropriate information from vmm..."
write-output $output
write-output "parent vhd does not exist...copying now"
write-output "parent vhd file already exists on the host"
write-output "parent vhd file copied to the target host successfully"
write-output "performing config $foundtopology $bid, log: $filename2" | out-file -filepath $filetest
write-output "please use iis manager to remove the default web site/oab virtual directory, then the following commands to recreate the oab virtual directory:"
write-output "queuing $($mailboxes.count) mailboxes as batch '$($batchname)'"
write-output "removing all ips except one ipv4 resource"
write-output "removing requests created as part of batch '$($batchname)'"
write-output "removing the cluster ip address"
write-output $results
write-output $search
write-output ($serverlist[$j],"*** server",($j+1),"out of",$serverlist.count -join " ")
write-output "setting the cluster ip address to a link local address"
write-output "$sourcefile,$_hashresult" | out-file $results -append
write-output "$sourcefile,$_sourcehash,$_targethash,$_hashresult" | out-file $results -append
write-output $sr.readtoend()
write-output "stopping the cluster ip address"
write-output "successfully created the differencing disk on the target host..."
write-output "testing the vhd file to ensure that it is not locked for use..."
write-output "the virtual machine creation process for $vm has been successfully initiated"
write-output "trying to create a one node cluster on the current machine"
{ write-output "unkown action."; }
write-output $userobj
{ write-output "value added on machine $srv"; }
{ write-output "value don't exists on $srv"; }
{ write-output "value on machine $srv = $res"; }
write-output "value successfully deleted on machine $srv";
{ write-output "value updated on machine $srv"; }
write-output "verify that cluster is present after creation"
write-output "waiting for batch to complete"
write-output "windows server 2008 r2 detected"
write-output "windows server 2012 or above detected"
write-output "writing reports to $($reportshare)"
write-path
write-progress -activity "[1/$numberofstage] post search updates" -status "completed" -completed
write-progress -activity "[2/$numberofstage] choose updates" -status "completed" -completed
write-progress -activity "[2/$numberofstage] choose updates" -status "[$numberofupdate/$foundupdatestodownload] $($update.title) $size" -percentcomplete ([int]($numberofupdate/$foundupdatestodownload * 100))
write-progress -activity "[3/$numberofstage] downloading updates" -status "completed" -completed
write-progress -activity "[3/$numberofstage] downloading updates" -status "[$numberofupdate/$acceptupdatestodownload] $($update.title) $size" -percentcomplete ([int]($numberofupdate/$acceptupdatestodownload * 100))
write-progress -activity "[4/$numberofstage] installing updates" -status "completed" -completed
write-progress -activity "[4/$numberofstage] installing updates" -status "[$numberofupdate/$readyupdatestoinstall] $($update.title)" -percentcomplete ([int]($numberofupdate/$readyupdatestoinstall * 100))
write-progress -activity "collecting domain sids" -status "current domain"
write-progress -activity "collecting domain sids" -status "current domain" -progress $mydomainsid.dnsname
write-progress -activity "collecting domain sids" -status "current forest domain trusts"
write-progress -activity "collecting domain sids" -status "current forest domain trusts" -progress "domain: $_.name"
write-progress -activity "collecting domain sids" -status "current forest domain trusts" -progress "trust: $_.trusteddomain"
write-progress -activity "collecting domain sids" -status "current forest trusts"
write-progress -activity "collecting domain sids" -status "current forest trusts" -progress "trust: $_.dnsname"
write-progress -activity "collecting domain sids" -status "remote forest trusts"
write-progress -activity "collecting domain sids" -status "remote forest trusts" -progress "trust: $_.dnsname"
write-progress -activity "collecting folders to scan..." -status "progress: " -percentcomplete 0
write-progress -activity "copying install bits to flash drive" `
write-progress -activity "file enumeration status" -status "$($_enumstatus)% completed." -percentcomplete $_enumstatus
write-progress -activity "gathering mailbox counts" -completed -status "completed"
write-progress -activity "gathering mailbox counts" -status "processing database $($dbs[$i].identity)" -percentcomplete (($i / $dbs.count) * 100)
write-progress -activity "generating move commands" -completed -status "completed"
write-progress -activity "generating move commands" -status "processing $($oa_mailboxes[$j].identity)" -percentcomplete (($j / $oa_mailboxes.count) * 100)
write-progress -activity "generating powershell file '$($outputpowershellfile)' to balance dbs" -completed -status "completed"
write-progress -activity "generating powershell file '$($outputpowershellfile)' to balance dbs" -status "processing database $($oa_dbcounters[$i].database)" -percentcomplete (($i / $oa_dbcounters.count) * 100)
write-progress -activity "get-dirstats.ps1" -status "calculating '$($directory.fullname)'"
write-progress -activity "get-dirstats.ps1" -status "reading '$($directory.fullname)'"
write-progress -activity "hash comparison status" -status "$i files completed." -percentcomplete $_progstatus
write-progress -activity "installing sharepoint server 2010" -status "completing sharepoint server 2010 installation"
write-progress -activity "installing sharepoint server 2010" -status "installing pre-requisites"
write-progress -activity "installing sharepoint server 2010" -status "installing sharepoint server 2010"
write-progress -activity "mailbox database query in progress" -completed -status "completed"
write-progress -activity "mailbox database query in progress" -percentcomplete $percentcomplete `
write-progress -activity "mailbox data gathering in progress" -completed -status "completed"
write-progress -activity "mailbox data gathering in progress" -percentcomplete $percentcomplete `
write-progress -activity "pinging $destination `[$tempaddress`]" -status "percent complete: $percentcomplete%" -percentcomplete $percentcomplete
write-progress -activity pingsweep -status "$a.$b.$c.$d" -percentcomplete (($d/($endaddress.split(".")[3])) * 100)
write-progress -activity portscan -status "$a.$b.$c.$d" -percentcomplete (($i/($ports.count)) * 100) -id 2
write-progress -activity "post search updates for $computer" -status "completed" -completed
write-progress -activity "post search updates for $computer" -status "[$numberofupdate/$prefoundupdatestodownload] $($update.title) $size" -percentcomplete ([int]($numberofupdate/$prefoundupdatestodownload * 100))
write-progress -activity "repairing client $strcomputer ..." -status "repair running for $i seconds ..."
write-progress -activity resolvehost -status "$a.$b.$c.$d" -percentcomplete (($d/($endaddress.split(".")[3])) * 100) -id 1
write-progress -activity "scanning folders" -currentoperation $folder.fullname -status "progress: " -percentcomplete ($i/$foldercount*100)
write-progress -activity "scanning share aces" -status $share.name -currentoperation $ace.sid
write-progress -activity "server health check v1.0" -status ("checking : {0}" -f $comp) -percentcomplete ($i/$comps.count*100) -id 0
write-progress -activity "sorting databases into over, under and perfectly allocated" -completed -status "completed"
write-progress -activity "sorting databases into over, under and perfectly allocated" -status "processing database $($dbcounters[$i].database)" -percentcomplete (($i / $dbcounters.count) * 100)
write-progress -completed -activity "`0" -status "`0"
write-progress -id 1 -activity "distribution group report" -status $status -percentcomplete ($percentcomplete)
write-progress -id 1 -activity "overall progress" -status "file $($i) of $($files.count)" -percentcomplete (($i/$files.count*100)*0.9);
write-progress -id 1 -activity "overall progress" -status "preparing output" -percentcomplete 95;
write-progress -id 1 -activity "report for distribution group members" -status $status -percentcomplete ($percentcomplete)
write-progress -id 1 -activity "report for mailboxes" -status $status -percentcomplete ($percentcomplete)
write-progress -id 2 -activity "current log $($files[$i].name)" -status "working" -percentcomplete ($j/$log.count*100);
write-progress -id 2 -activity "log $($files[$i].name)" -status "loading" -percentcomplete 0
write-progress -id $rootprogressid -activity $activity -status "done." -completed
write-progress -id $rootprogressid -activity $activity -status "expanding files..."
write-progress -id $rootprogressid -activity $activity -status $status -percentcomplete ([int](($curfileidx / $totalfiles) * 100))
write-progress @progress
write-progress "querying dns"
write-qserror "cannot access external dns server $externalserver."
write-qserror 'creation failed, please review earlier messages and try again.'
write-qserror 'dirsync download failed.'
write-qserror "expected certficate with friendly name `"$script:certificatefriendlyname`" not found."
write-qserror "installation appears to have failed, try running $dirsyncfilename interactively."
write-qserror $message
write-qserror 'no certificate found to use for the installation.'
write-qserror 'record addition failed.'
write-qserror "required local file not present: $filename"
write-qserror "the certificate does not have the expected subject of `"cn=$script:adfssubjectname`". it cannot be used."
write-qserror 'the certificate fails verification; this likely means a missing trusted root or intermediate ca. the certificate cannot be used. '
write-qserror 'the certificate has expired. it cannot be used.'
write-qserror 'the certificate is not yet valid. it cannot be used.'
write-qserror "the certificate's private key is not present on this machine. the certificate cannot be used."
write-qserror 'the domain for the service account must match the domain of the adfs server.'
write-qserror 'tool download failed.'
write-qserror 'validation failed.'
write-qserror 'windows azure active directory user creation failed, please review earlier messages and try again.'
write-qserror 'you cannot use a server with the name "adfs" for hosting adfs.'
write-qstitle 'add a hosts file entry for adfs access from the proxy'
write-qstitle 'add local upn suffix as domain in windows azure active directory'
write-qstitle 'add the adfs proxy role to this server'
write-qstitle 'add the adfs role to this server'
write-qstitle 'check dns records for txt entries for unverified domains'
write-qstitle 'configure adfs proxy with basic configuration'
write-qstitle 'configure adfs with basic configuration'
write-qstitle 'configure iis ssl and authentication'
write-qstitle 'configure the dirsync tool'
write-qstitle 'configure windows azure ad connection to adfs'
write-qstitle 'confirm/configure windows firewall for port 443'
write-qstitle 'create an internal dns entry for adfs'
write-qstitle 'create a service account in the local domain for adfs use'
write-qstitle 'create sign-in test user'
write-qstitle -doubledashedline -title 'active directory to windows azure active directory quickstart tool'
write-qstitle 'download and run the office 365 deployment readiness tool'
write-qstitle 'download, install, and configure the dirsync tool'
write-qstitle 'enable directory synchronization (dirsync) on the tenant'
write-qstitle 'export ssl certificate with private key'
write-qstitle 'get the latest directory synchronization events'
write-qstitle 'import certificates for adfs proxy'
write-qstitle 'install microsoft online services module for windows powershell'
write-qstitle 'install microsoft online services sign-in assistant'
write-qstitle 'launch test web pages'
write-qstitle 'process ssl certificate for adfs'
write-qstitle 'retrieve verification information for domains in windows azure active directory'
write-qswarning 'cancelled.'
write-qswarning 'changes made to system requirements require a reboot.'
write-qswarning 'creation skipped.'
write-qswarning ('local certificate with friendly name "' + $script:certificatefriendlyname + '" already exists.')
write-qswarning 'local user already exists, skipping creation.'
write-qswarning "more than one certficate with friendly name `"$script:certificatefriendlyname`" exists.`nselecting the first one."
write-qswarning 'passwords did not match, try again.'
write-qswarning 'ssl binding found on existing web site will be removed.'
write-qswarning 'unable to get firewall rules - windows firewall disabled? you must configure any local firewall manually.'
write-qswarning 'user already exists, skipping creation.'
write-qswarning 'validation skipped.'
write-qswarning 'will remove existing entry'
write-qswarning 'you must sign out and sign in again to continue.'
$writer.close();
$writer.flush();
$writer = new-object "system.io.stringwriter";
writetableheader $filename
write-terminatingerrorlog ("aos cannot be stopped. got error code {0}" -f $rv)
write-terminatingerrorlog ("aos service can't be started. got error code {0}" -f $rv)
write-terminatingerrorlog "compilation errors."
write-terminatingerrorlog "drop location is not valid."
write-terminatingerrorlog "error occured while building." $error[0]
write-terminatingerrorlog "error occured while deploying." $error[0]
write-terminatingerrorlog "exception in update-compilerinfo" $error[0]
write-terminatingerrorlog "exception while mapping tfs workspace." $error[0]
write-terminatingerrorlog "exception while updating version control parameters" $error[0]
write-terminatingerrorlog('failed to compile vs project for model {0}' -f $modelname)
write-terminatingerrorlog('failed to import vs project for model {0}' -f $modelname)
write-terminatingerrorlog ("license code is not available for model: {0}" -f $model.fullname)
write-terminatingerrorlog "log folder is not valid path."
write-terminatingerrorlog ("powershell version {0} not supported." -f $pv.version.major)
write-terminatingerrorlog("synchronize doesn't finished on time. stopping the build")
write-terminatingerrorlog('the aos can not be started after {0} minutes.' -f $aosrestarttimeout)
write-terminatingerrorlog('the aos can not be stopped after {0} minutes.' -f $aosrestarttimeout)
write-terminatingerrorlog ("unable to combine xpo for: {0}" -f $model.fullname)
{ write-terminatingerrorlog ("wrong local project setting: {0}" -f $localproject)}
writetolog "[started]"
write-verbose "accept [$acceptupdatestodownload] updates to download"
write-verbose "actual difference found: $absdiff"
write-verbose "adding dpm snap-in"
write-verbose "adding $($group) to the collection to return."
write-verbose "add the homedirectory property"
write-verbose "add the target to the favorites list, doesn't login until a reboot (reconnects for every reboot)"
write-verbose "always refresh the target portal list and the currently connected target volumes"
write-verbose "an endpoint already exists on '$server', skipping endpoint creation."
write-verbose "--> archiving file: (size $value1) $value"
write-verbose "ask wmi for the client os"
write-verbose "ask wmi if this hotfix is already applied"
write-verbose "assign propertyname to propertypair[0]"
write-verbose "assign propertyvalue to propertypair[1]"
write-verbose "assign remaining values to propertyvalues"
write-verbose "assign the property of the object, the value"
write-verbose "assign the property of the object, the values"
write-verbose "assign the searchfilter to the directorysearcher"
write-verbose "attempting to connect to $($ipaddress)"
write-verbose "attempting to connect to $($userdn) to return a list of groups."
write-verbose "attempt to connect to port: $($port) on ip: $($ip.address)"
write-verbose "backing up database '$db' on $primary to $bakfile"
write-verbose "backing up the log of database '$db' on $primary to $trnfile"
write-verbose "build a scriptblock from the test property of the imported qfe"
write-verbose "building filename from $($log.logname)"
write-verbose 'building the iis6 parameters hashtable'
write-verbose 'building the iis7 parameters hashtable'
write-verbose "building the ip address $($subnet).$($octet)"
write-verbose 'building the scheduled tasks credentials parameters'
write-verbose 'building the services parameters hashtable'
write-verbose "build the command-line to execute the installation"
write-verbose "build the full path to the hotfix executable."
write-verbose "build the logfile based on the qfeid"
write-verbose 'build the object to return'
write-verbose "call the deletetree() method of the user object"
write-verbose "change encoding from unicode bigendian to ascii"
write-verbose "change the dot to a hostname"
write-verbose "check if $($psfile.displayname) is saved"
write-verbose "check if the recoverypoint is not empty"
write-verbose "check if we're in ise"
write-verbose "checking $($computer)"
write-verbose "checking $computer's availability"
write-verbose "checking for application pools on $computer (using the microsoftiisv2 wmi namespace)"
write-verbose "checking for application pools on $computer (using the webadministration wmi namespace)"
write-verbose "checking for om2012 environment"
write-verbose "checking for scheduled tasks on $computer"
write-verbose "checking for services on $computer"
write-verbose "checking if computergroup member $agent is not a management server"
write-verbose "checking if operationsmanager module is loaded"
write-verbose "checking remote registry status via get-service on machine: $computername"
write-verbose "checking remote registry status via winrm on machine: $computername"
write-verbose "checking remote registry status via wmi on machine: $computername"
write-verbose "checking to see if we have piped files"
write-verbose "check to make sure that $($qfeserver) exists as a path."
write-verbose "check to see if the message contains a code"
write-verbose "check to see if we have the qfeserver variable"
write-verbose "cleaning disk"
write-verbose 'close sesion when done.'
write-verbose "close tcp client"
write-verbose "closing $($worksheetname)"
write-verbose "code found, adding definition to message"
write-verbose "collect all computer objects from $($adspath)"
write-verbose "completed the installation of integration services" -verbose
write-verbose "$computergroupmembernames"
write-verbose "connecting to $servicename server. please wait..."
write-verbose "connecting to $url"
write-verbose "connect to $($servername) and return a list of logs that were written within the last $($hours) hour(s)"
write-verbose 'connect to the session, and collect the results of the scriptblock'
write-verbose "connect to $$(zipfile) so we can copy files to it"
write-verbose "constants - if using standard target ports, the microsoft iscsi initiator and leveraging mpio"
write-verbose "convert the wmi value for lastbootuptime into a date, and subtract it from now to get uptime"
write-verbose "copying $($file.fullname) to $($zipfile)"
write-verbose "copying files to usb device"
write-verbose "copy the hotfix $($qfefilename)"
write-verbose "copy the meta file $($qfe.fullname)"
write-verbose "create a directoryentry object for $($adspath)"
write-verbose "create an empty zip file"
write-verbose "create a new blank tab for the script"
write-verbose "create a new comment block, return an error if there's an issue."
write-verbose "create a new directorysearcher object to find the user"
write-verbose "create a new empty function, return an error if there's an issue."
write-verbose "create a new empty script, return an error if there's an issue."
write-verbose 'create a new session for $($computer)'
write-verbose 'create a new session for $($computername)'
write-verbose "create an excel instance"
write-verbose "create an object to hold the data i'm collecting"
write-verbose 'create a scriptblock that will collect the name and used space in gb from the remote server'
write-verbose "create a searchfilter"
write-verbose "create a tcp client"
write-verbose "create the user object"
write-verbose "creating browser object"
write-verbose "creating directories on boot device"
write-verbose "creating endpoint '$endpointname' on server instance: $server"
write-verbose "creating excel object"
write-verbose "creating $($logpath)"
write-verbose "creating partition"
write-verbose "creating return object for output"
write-verbose "creating smo server object for server: $server"
write-verbose "define timeouts, 1000ms for receive and 2000ms for send"
write-verbose "deleteing $($file.fullname)"
write-verbose "deleteing homedirectory $($account.properties.homedirectory)"
write-verbose "direct access to specific machine: $computername"
write-verbose "$($directories.count) directories created"
write-verbose "diskmounted equals $diskmounted"
write-verbose "dismounting image"
write-verbose "display only qfes where the client os matches the os property of the qfe"
write-verbose "display the qfeid, kb, url, os and arch from the qfe"
write-verbose "does $($filename) exist?"
write-verbose "does $($logfolder) folder exist? if not, it`'s created"
write-verbose "don't create a function if we're installing the menu"
write-verbose "don't create a script if we're installing the menu"
write-verbose "don't insert a comment if we're installing the menu"
write-verbose "do the search"
write-verbose "dot source $($poshfile.fullname)"
write-verbose "download all qfes"
write-verbose "downloaded [$readyupdatestoinstall] updates to install"
write-verbose "download qfes that match the client os"
write-verbose "enable firewall rules on machine: $computername"
write-verbose "enabling alwayson on server instance: $server"
write-verbose "ending get-qotd"
write-verbose $error[0].exception
write-verbose "errorflag = $($errorflag)"
write-verbose "established a connection, tcp port $($port) open"
write-verbose "establishing adsi connection to $([string]$workstation.name)"
write-verbose "exit excel"
write-verbose "exporting $($thislog.count) log entries to $($logpath)\$($servername)\$($filename)"
write-verbose "$($filename)"
write-verbose "filter the list of events to only events that happened today"
write-verbose "finding the first dc= and replacing it with a dot."
write-verbose "find $($shareddrive) in $($volumeidcolumn)"
write-verbose "finished function start-scommaintenancemodeforgroup function"
write-verbose "first lease object is null"
write-verbose "following group members will be put in maintenance mode:"
write-verbose "formating drive $usbdriveletter"
write-verbose "found $($activelogs.count) logs"
write-verbose "found $($existinguser.properties.name)"
write-verbose "found $($existinguser.samaccountname)"
write-verbose "found [$foundupdatestodownload] updates in post search criteria"
write-verbose "found $($newuser.properties.name)"
write-verbose "found $($newuser.samaccountname)"
write-verbose "found [$prefoundupdatestodownload] updates in pre search criteria"
write-verbose "found $($shareddrive) at $($target.addresslocal($true,$true,$true))"
write-verbose "found $($username)"
write-verbose $functionname
write-verbose "get a list of all the qfe files stored in $($qfeserver)"
write-verbose "get a list of logs that have records from $($servername)"
write-verbose "get a list of recoverypoints for each datasource"
write-verbose "get a list of the datasources available on the productionserver"
write-verbose "get a list of user objects"
write-verbose "get all $($eventid) events from the $($logname) log on $($computername)"
write-verbose "get-help $($functionname)"
write-verbose "get-help $($poshfile.fullname)"
write-verbose "get mac address informatino from arp"
write-verbose "get the group membership for cn=$($existinguser.sid),$($adspath)"
write-verbose "get the group membership for $($existinguser.path)"
write-verbose "get the iscsi port number for the specified ip address"
write-verbose "get the productionserver object that matches the protectedcomputer, that actually has a datasource."
write-verbose "get the used space for $($shareddrive)"
write-verbose "getting properties from $([string]$workstation.name)"
write-verbose "getting the list of services that depend on wmi"
write-verbose "go to the url"
write-verbose "grab the win32_computersystem class, this holds the rename method"
write-verbose "grab the win32_operatingsystem class, this holds the reboot method"
write-verbose "group $name created on computer $computername"
write-verbose "hyper-v host ic version and the vm $vm ic version are the same" -verbose
write-verbose "importing operationsmanager module"
write-verbose "import the meta data file that matches $($qfeid)"
write-verbose "in this case we only need to execute commands for that specfic server rather than the entire data center"
write-verbose "[$ip] : identical`n`n`n"
write-verbose "iso already mounted"
write-verbose "iterate through each tab"
write-verbose "iterate through isefile objects"
write-verbose "joining secondary databases on $seecondary to the availability group '$agname'"
write-verbose "joining secondary instance $secondary to the availability group '$agname'"
write-verbose "ldap url is an directory object"
write-verbose "ldap url is a string"
write-verbose "let's put agent $agent in maintenance mode"
write-verbose $lineitem
write-verbose 'list of sms namespaces are put into an array.'
write-verbose "login to the target for this session since persistentlogintarget doesn't login until reboot"
write-verbose "$($logpath)\$($servername) not found, creating."
write-verbose "look for users until we find a blank cell"
write-verbose "loop through each available datasource"
write-verbose "loop through each available recoverypoint"
write-verbose "loop through each event that is returned from get-winevent"
write-verbose "$($macaddress) is not a proper mac address"
write-verbose "make sure that $($computer) is online with a single ping."
write-verbose "make the browser visible"
write-verbose $message
write-verbose -message "group `"$localgroup`" does not exist on `"$computer`"" -verbose}
write-verbose "microsoftiisv2 filter = $iis6filter"
write-verbose "modifying remote registry by ip on machine: $computername"
write-verbose "modifying remote registry on machine: $computername"
write-verbose "mounting iso"
write-verbose "multi-valued property detected"
write-verbose "$($myinvocation.line)"
write-verbose "navigate to $($qfe.url)"
write-verbose "need to get a list of fsp objects and convert them to samaccountnames"
write-verbose "no partitions detected. usbdisknumber will be the disk without a partition"
write-verbose "not in the ise exiting."
write-verbose "`n testing server response . . . "
write-verbose $obj1.ipaddress
write-verbose $object1.$key
write-verbose $object2.$key
write-verbose "object has group membership."
write-verbose "online : $($computer)" -verbose
write-verbose "only working with xml meta data files."
write-verbose "open the file located at $($filepath)"
write-verbose "open the $($filename) spreadsheet"
write-verbose "open the $($worksheetname) worksheet"
write-verbose "output a report that shows all work completed."
write-verbose "output the metadata"
write-verbose "parse each line of the file to build object"
write-verbose "pass the command-line to the cmd environment for installation"
write-verbose "pass the command-line to the cmd environment for uninstall"
write-verbose $path
write-verbose "ping $([string]$workstation.name)"
write-verbose $poshfile
write-verbose "ppassword for user $identity has been reset"
write-verbose "pulling userfriendlyname, representedpointinttime and size from this recoverypoint"
write-verbose $quote.origlink
write-verbose "read in the adspath from the first cell in the sheet"
write-verbose "read in the metadata before processing."
write-verbose "read the contents of $($poshfile.fullname)"
write-verbose "rebooting $($computername)"
write-verbose "remote registry is running on machine: $computername"
write-verbose "renaming $($computername) to $($newname)"
write-verbose "renaming remote $($computername) to $($newname) requires credentials."
write-verbose "resetting variables"
write-verbose "resolve hostname for $($ip.address)"
write-verbose "restarting computer for changes to take place" -verbose
write-verbose "restart terminal service service via winrm on machine: $computername"
write-verbose "restart terminal service service via wmi on machine: $computername"
write-verbose "restoring database '$db' on $secondary from $bakfile"
write-verbose "restoring the log of database '$db' on $secondary from $trnfile"
write-verbose "retrieve the value of $($diagnosticsubkey) and store in an object"
write-verbose "return all error messages from the logfile created"
write-verbose "return all qfes"
write-verbose "return all qfes that match the client os"
write-verbose "return all the values."
write-verbose "returning parse logfile"
write-verbose "return specific values."
write-verbose "return `$true or `$false based on the result of the test."
write-verbose "run the following test`r`n$($qfe.test)"
write-verbose "save property changes to object"
write-verbose "saving $($filename)"
write-verbose "saving $($psfile.displayname)"
write-verbose "scanning usb devices - drive = [$drive] name = $vol, free = $free mb"
write-verbose "searchfilter = $($searchfilter)"
write-verbose "searching ldap objects in path: $computername"
write-verbose "second lease object is null"
write-verbose "select column $($volumeidcolumn), the volume identification column"
write-verbose "services filter = $servicefilter"
write-verbose "set private field which holds default encoding to ascii"
write-verbose "set the active sheet to the first sheet"
write-verbose "set the pagesize, this isn't really needed since we're doing findone()"
write-verbose "set the root to the directoryentry object"
write-verbose "setting checkpoint to $(get-date)."
write-verbose "setting dynamic variables"
write-verbose "setting new logging level"
write-verbose "setting up firewall rules"
write-verbose "setting up winmgmt commands."
write-verbose "$($shareddrive) : $($used.used)gb used"
write-verbose $shutdownscript
write-verbose "singleton file passed in"
write-verbose "split this propertypair on comma."
write-verbose "start importing users at row 2"
write-verbose "starting endpoint on server instance: $server"
write-verbose "starting function start-scommaintenancemodeforgroup function"
write-verbose "starting get-qotd"
write-verbose "starting remote registry via winrm on machine: $computername"
write-verbose "starting remote registry via wmi on machine: $computername"
write-verbose $status
write-verbose "storing previous logging level in the log"
write-verbose "storing the object as a directory entry so we can modify it."
write-verbose "$([string]$workstation.name) responded to ping"
write-verbose "strip arp data down to just a mac"
write-verbose "tasks filter = `$_.'run as user' -like $useraccount"
write-verbose "then via wmi we query into the msiscsi_portalinfoclass to find the correct interface index number"
write-verbose 'this formula is located at g2 on the spreadsheet (=if(j2>=100%,e2*j2,e2*1.5)). '
write-verbose 'this formula is located at h2 on the spreadsheet (=if(e2>0,(e2*f2*i2) + (1600/1024),0))'
write-verbose "this index number will be used for several iscsicli.exe invoke-expression calls"
write-verbose "$($thislog.count) event(s) were found in $($log.logname)"
write-verbose "==$($thisverb)-!$($thiscommand)=="
write-verbose $thisworkstation |format-table -autosize
write-verbose "tolerance allowed: $tolerance secs"
write-verbose "try adding $($newuser.properties.name) to $usergroup.groupdn"
write-verbose "try adding $($newuser.samaccountname) to $usergroup.groupdn"
write-verbose "try and find the tab character in the selected psise text, return an error if there's an issue."
write-verbose "try to connect to $($computer) fail silently."
write-verbose "try to install the menu item, and error out if there's an issue."
write-verbose "unable to connect to $($computer)"
write-verbose "updated"
write-verbose "updating description property"
write-verbose "updating iphostnumber property"
write-verbose "updating macaddress property"
write-verbose "updating serialnumber property"
write-verbose "updating $($targetreference) with value $($used.used)"
write-verbose "updating $($workstation.name) with current values"
write-verbose "user $identity changed"
write-verbose "user $identity disabled"
write-verbose "user $identity enabled"
write-verbose "user $name created on computer $computername"
write-verbose "$($username) deleted"
write-verbose "using computername as a switch to determine if we run wmi local or remote"
write-verbose "validate that $($macaddress) is a properly formatted mac address"
write-verbose "value of $key property did not match"
write-verbose "value of leaseexpirytime property did not match"
write-verbose "verify info"
write-verbose "$vm is online now" -verbose
write-verbose "$vm new integration services version $vmicversion" -verbose
write-verbose "$vm old integration services version $vmicversion" -verbose
write-verbose "waiting for integration service install to finish on $comp ..." -verbose
write-verbose "walk the path to find objects"
write-verbose "webadministration filter = $iis7filter"
write-verbose "we don't want to put a management server in mm. skipping"
write-verbose "we first convert the needed iscsi source address to the ipv4 format within wmi"
write-verbose "we're downloading, create the folder $($localpath)"
write-verbose "work through an array of 0 or more propertypairs."
write-verbose "write the qfe metadata to a file: $($qfeserver)\$($filename).xml"
write-warning @"
write-warning $_
write-warning "action canceled"
write-warning "an error has occurred when checking your specified download path"
write-warning " - an error occurred downloading `'$destfilename`'"
write-warning "an error occurred downloading `'$destinationfilename`'"
write-warning "both lease objects are null"
write-warning "can not find importpsmodule from default repository"
write-warning "can't enable firewall rules on machine: $computername. try use maunaly winrm quickconfig on remote machine."
write-warning "can't find registered service microsoft update. use get-wuservicemanager to get registered service."
write-warning "can't restart terminal service on machine: $computername. try reboot this machine manualy."
write-warning "can't start remote registry on machine: $computername"
write-warning "currently there is no pending moverequest....!"
write-warning "dcb feature not installed, throughput settings could not be configured."
write-warning " - destination path appears to be invalid."
write-warning "do not understand supplied second argument. should be either scripts or docs !!!"
write-warning "don't found any accept updates to download"
write-warning "don't found any downloaded updates to install"
write-warning "don't found any updates in post search criteria"
write-warning "don't found any updates in pre search criteria"
write-warning "$($error[0])"
write-warning "error on drive $drive - restart."
write-warning "error updating default web site/oab to support the oabauth component."
write-warning "error when adding windows features. error details are below:"
write-warning "exception thrown while getting scope info from server1"
write-warning "exception thrown while getting scope info from server2"
write-warning "failed to get data from $url"
write-warning "first object is null"
write-warning "$folder is not a directory - resubmit."
write-warning "group $identity deleted"
write-warning "incorrect file name or path. please verify !!! ";
write-warning "input objects type mismatch"
write-warning "invalid filetype ($types): ps1, psm1, psd1 only."
write-warning "local group '$localgroupname' doesn't exist on computer '$computername'"
write-warning "lsantsstatustowinerror: $lsantstatustowinerror"
write-warning "lsaopenpolicyhandle windows error code: $lsaopenpolicyhandle"
write-warning "machine: $computername is unavailable"
write-warning "$member was not a member of $identity and could not be removed"
write-warning $message
write-warning -message "no access to the default share - \\$computername\c`$"
write-warning -message "unable to connect - $computername"
write-warning $msg
write-warning "must have the active directory and group policy cmdlets installed."
write-warning "no connection to the instance ! please check the credentials ! ";
write-warning "no content need to be set. please set either expression or description."
write-warning "no server list file specified !!! ";
write-warning "oops something went wrong"
write-warning 'overwriting existing static ips'
write-warning 'overwriting existing static route'
write-warning "please input correct value"
write-warning "please specify a site collection"
write-warning "probably you don't have connection to windows update server."
write-warning "probably you don't have connection to windows update server"
write-warning "query is in incorrect format, please supply query in proper format"
write-warning "reboot is required to continue."
write-warning "reboot is required to continue"
write-warning "running clean models without sequence might cause issues."
write-warning "run powershell in 32-bit mode"
write-warning "run the command as an administrator"
write-warning "schedule.service com object not found, this script requires this object"
write-warning "scope not present on server1"
write-warning "scope not present on server2"
write-warning "search feature is already disabled."
write-warning "second object is null"
write-warning "skipping $(convertto-relativepath $filepath) because it doesn't have an extension, so i don't know what file name to use to store the uncompressed data."
write-warning "skipping $(convertto-relativepath $filepath) because the output file already exists."
write-warning "something went wrong connecting to the wsus interface on $wsusserver server"
write-warning "something went wrong connecting to the wsus interface on $wsusupstreamserver upstream server"
write-warning "support local instance only, continue..."
write-warning "there is not enough free space on drive $usbdriveletter. a usb drive with a $(($imagesize/1gb).tostring("0.00 gb")) capacity is needed."
write-warning "the server instance '$servername' is not the primary replica for the availability group '$groupname'. skipping evaluation."
write-warning "this could take several minutes!"
write-warning 'this machine does not appear to be a dns client.'
write-warning "this script requires elevated. launch powershell as administrator and run script again. thanks!"
write-warning "this script requires powershell version 3.0 and the storage module. storage module not found."
write-warning "user credentials cannot be used for local connections. ignoring credentials for all $computer connections."
write-warning "user $identity deleted"
{ write-warning "warnings while compiling il."}
write-warning "you havent access to remote registry on machine: $computername"
write-warning "you haven't privileges to make this. try start an eleated windows powershell console."
write-warning "your security policy don't allow a non-administator identity to perform this task"
write-warning "your specified download path does not exist. please verify your download path then run this script again."
$wrnlogfile = join-path $currentlogfolder ('vscompilewarning.{0}.wrn' -f $modelname)
$wrnlogfile = join-path $currentlogfolder ('vsimportwarning.{0}.wrn' -f $modelname)
$wsc = (get-clientaccessserver | test-webservicesconnectivity -allowunsecureaccess)
$wshshell.popup("the password reset for " + $domainnetbiosname + "\" + $samaccountname + " was done successfully. the new password is " + $password + "", 0, "[success] the password reset for " + $domainnetbiosname + "\" + $samaccountname + " was done successfully", 48);
$wshshell.popup("the password reset for " + $domainnetbiosname + "\" + $samaccountname + " was not done successfully", 0, "[error] the password reset for " + $domainnetbiosname + "\" + $samaccountname + " was not done successfully", 48);
$wshshell.popup("the test account for " + $displayname + " was created.", 0, "[success] the test account for " + $displayname + " was created.", 48);
$wshshell.popup("the test user account " + $displayname + " was not created", 0, "[error] the test user account " + $displayname + " was not created", 48);
$wsus_categoriesincluded = @("windows server 2008", "windows server 2008 r2", "windows 7");
$wsusdownstreamservers | %{$wsusdownstreamserver = ($_.fulldomainname).tolower(); performcleanup $wsusdownstreamserver $wsusserver}
$wsusdownstreamservers = $wsusserveradminproxy.getdownstreamservers()
$wsusmenu.dropdownitems.add($wsusreport) > $null
$wsusmenu.dropdownitems.add($wsusupdates) > $null
$wsusmenu = new-object system.windows.forms.toolstripmenuitem("&wsus logs")
$wsus = [microsoft.updateservices.administration.adminproxy]::getupdateserver()
$wsuspath = "\\$computername\c$\windows"
$wsusreport.add_click({$wsusfile = "report"; wsuslogs})
$wsusreport = new-object system.windows.forms.toolstripmenuitem("reporting")
$wsusserver = $adminproxy.getremoteupdateserverinstance($updateserver,$usesecureconnection,$portnumber)
$wsusserveradminproxy = [microsoft.updateservices.administration.adminproxy]::getupdateserver($wsusserver,$usessl,$portnumber);
$wsusserver.preferredculture = "en"
$wsusserver = "wsus.company.com"
$wsus_targetgroup_to_approved = "all computers";
$wsus_targetgroup_validation = "validation postes serveurs";
$wsusupdate = invoke-expression $cmd
$wsusupdates.add_click({$wsusfile = "updates"; wsuslogs})
$wsusupdates = new-object system.windows.forms.toolstripmenuitem("updates")
$wsusupstreamserveradminproxy = [microsoft.updateservices.administration.adminproxy]::getupdateserver($wsusupstreamserver,$usessl,$portnumber);
$wsusupstreamserver = "wsus.company.com"
$ws=$wb.activesheet
$wuinstallstatus = get-content "c:\users\username\desktop\scripts\logs\$vmhost.log" | select-object -last 1
$wvdeam = $websvd.externalauthenticationmethods
$wvdeurl = $websvd.externalurl
$wvdiam = $websvd.internalauthenticationmethods
$wvdinlb = $websvd.internalnlbbypassurl
$wvdiurl = $websvd.internalurl
$wvdname = $websvd.name
$wvdsrv = $websvd.server
$x = 0
$x += 1
x = 2
x = 3
x = 4
$x = "buildlog-"
$xcipdesc = $xcip.description
$xcipdg = $xcip.defaultipgateway
$xcipip = $xcip.ipaddress
$xcipn = $excip.name
$xcipnic = (get-wmiobject win32_networkadapterconfiguration -computer $excip | where-object {$_.ipenabled -eq $true} )
$xcipsn = $xcip.servicename
xcopy \\$dcip\files\setres*.* c:\windows\system32 /s /y
$xcosarch = $xcos.osarchitecture
$xcos = (get-wmiobject -class win32_operatingsystem -namespace root/cimv2 -computername $excos)
$xcoslb = $xcos.converttodatetime($xcos.lastbootuptime)
$xcosn = $xcos.csname
$xcosos = $xcos.caption
$xcossp = $xcos.csdversion
$x = get-childitem -path $apppath -filter "*.axmodel" -erroraction silentlycontinue
$x = . (join-path (join-path (get-item $setupregistrypath).getvalue("installdir") "managementutilities") "microsoft.dynamics.managementutilities.ps1")
$xlautomatic=-4105
$xlbottom = -4107
$xlcenter = -4108
$xlcolumnfield = 2
$xlcontext = -5002
$xlcontinuous=1
$xldatabase = 1
$xldatafield = 4
$xldiagonaldown=5
$xldiagonalup=6
$xl.displayalerts = $false
$xledgebottom=9
$xledgeleft=7
$xledgeright=10
$xledgetop=8
$xlhidden = 0
& $xlimgcleanup
$xlimgcleanup = join-path $scriptpath excel_image_demo_cleanup.ps1
& $xlimgnocleanup
$xlimgnocleanup = join-path $scriptpath excel_image_demo_no_cleanup.ps1
$xlinsidehorizontal=12
$xlinsidevertical=11
$xlmedium = -4138
$xl = new-object -comobject excel.application
$xl = new-object -comobject excel.application -property @{visible = $true; displayalerts = $false}
$xlnone=-4142
$xlpagefield = 3
$xlpivottableversion12 = 3
$xl.quit()
$xlrowfield = 1
$xl.screenupdating = $false
$xl.screenupdating = $true
$xl.speech.speak('0 degrees')
$xl.speech.speak('45 degrees')
$xl.speech.speak('add an image to the sheet through the add picture method')
$xl.speech.speak('add a relatively medium white glow to the image')
$xl.speech.speak('add reflection to the image through the reflection type property')
$xl.speech.speak('adjust the position of the new image by removing the 12 points automatically added when duplication took place')
$xl.speech.speak('also, an image can be flipped horizontaly, and verticaly.')
$xl.speech.speak('an image can also be rotated counterclockwise in negative increments through the increment rotation method')
$xl.speech.speak('an image can be rotated clockwise in positive increments')
$xl.speech.speak('change its position through its left and or top properties; the prefered method')
$xl.speech.speak('change position through the increment left method six cells to the right')
$xl.speech.speak('change size through the drawing object width and or drawing object height properties')
$xl.speech.speak("change the image's position through its left and top properties")
$xl.speech.speak('get a copy of the image')
$xl.speech.speak('get another copy of the image')
$xl.speech.speak('get the last copy of the image')
$xl.speech.speak("increment the refletction's size to 50")
$xl.speech.speak('lock aspect ratio before scaling down the image')
$xl.speech.speak('lock aspect ratio before scaling up the image')
$xl.speech.speak("move image 10 cells over to the right from sheet's left side")
$xl.speech.speak("move it 4 cells down from sheet's top")
$xl.speech.speak("move the image four cells down from sheet's top")
$xl.speech.speak("move the image four cells over to the right from sheet's left side")
$xl.speech.speak('negative 45 degrees')
$xl.speech.speak('or by setting an absolute degree value through the rotation property')
$xl.speech.speak('save the workbook and exit')
$xl.speech.speak('save the workbook, cleanup and exit')
$xl.speech.speak('scale down image to 50% of its current size')
$xl.speech.speak('scale up the image to thrice its current size')
$xl.speech.speak('show the transition by sliding the image to its new position')
$xl.speech.speak('three cells wide and six cells tall')
$xl.speech.speak('through the increment rotation method')
$xl.speech.speak('to align it horizontaly with the previous copy of the image and with the cell grid')
$xl.speech.speak('transform the image into a double wave shape through the auto shape type property')
$xlthick = 4
$xlthin=2
$xl.visible = -not $autoclosexl
"xml" {
$xml | %{
$xml,
[xml]$axxml = $xmlcontent
[xml]$configxml = get-content $settingsfilepath
$xmlcontent += $line.replace('</xml>','')
$xmldata.dsversion.exchange | %{ write-host $_.displayname }
[xml]$data = get-content $webconfigdata
$xmldata = read-xml
[xml]$data =$webclient.downloadstring($url)
$xml.deployment.farm.feature | enableordisablefeature -scope farm -whatif:$whatif
$xml.deployment.farm.solution | installorupdatesolution -webapplication $webappurl -whatif:$whatif
$xml.deployment.farm.solution | installorupdatesolution -whatif:$whatif
$xml.deployment.farm.solution | uninstallsolution -whatif:$whatif
$xml.deployment.webapplication | deploywebapplication -whatif:$whatif
$xml.deployment.webapplication | installorupdatewebappsolution -whatif:$whatif
$xmldoc = import-clixml -path $filepath
$xml = $env:temp + "\" + $rand + ".xml"
[xml]$gporeport = get-gporeport -guid $gpo.name -reporttype xml
$xml.load($args[0])
[xml]$logfile = get-content($cillogfile)
$xml.mapsource.insertafter($newelement, $xml.mapsource.scripttypeprecedence)
$xml = new-object xml
[xml]$outputxml = "<dictionary></dictionary>"
$xmlpath = "$migrationlogs\$_"
$xmlreports = @()
$xmlreports | %{
$xmlreports += [xml](get-content $xmlfile.fullname)
$xmlserializer = new-object system.xml.serialization.xmlserializer($asset.gettype());
$xmlserializer.serialize($writer,$asset);
$xmlstarted = $false
$xmluserarray=@()
$xmluserarray += "<event><username>" + $thissplit[0] + "</username><eventtime>" + $thissplit[1] + "</eventtime><eventtype>" + $thissplit[2] + "</eventtype></event>"
$xmluserarray += "</loginevents>"
$xmluserarray += "<loginevents>"
<?xml version="1.0" encoding="utf-16"?>
<?xml version="1.0" encoding="utf-8"?>
$xmlwriter.close()
$xmlwriter.formatting = [system.xml.formatting]::indented
$xmlwriter = new-object system.xml.xmltextwriter($output, [system.text.encoding]::utf8)
[xml]$x = get-content $filepath
[xml]$xmldata = get-content $absolutepath
[xml]$xml = (get-content $filepath) -replace ("localhost", $env:computername)
$xml = [xml](get-content $xmlpath)
$x.modelmanifest.version = get-nextversion($x.modelmanifest.version)
$xponame = ("combined.{0}.xpo" -f $modelname)
$xpplpath = join-path $serverbindir xppil
"xps-viewer"
"$x records written to $table in database $db on server $sqlsrvr"
$x.save($filepath)
$x = $x + 1
$xyz = $tfs.vcs.createlabel($label, $labelitemspec, 1)
"yanls" { $menutext = "&yes = continue with only the next step of the operation. $delimiter"+`
y&anls = yes, yes to all, no, no to all, suspend
'year' {
$yearint--
$yearint = $currentdate.year
$year = $latest.year
$yearloopcount++
$yearloopcount = $dayofyearrepeat
"yearlyrecurrence" {
$year = $now.year
"yes" = 6
-yesdefault `
-yesdescription 'create self-signed certificate' `
-yesdescription 'validate the certificate' `
-yesdescription 'yes, use previously supplied credentials') {
$yes = new-object system.management.automation.host.choicedescription $($messages.choiceyes),$($messages.choiceyesmsg01)
$yes = new-object system.management.automation.host.choicedescription "&online", `
$yes = new-object system.management.automation.host.choicedescription "&yes", `
$yes = new-object system.management.automation.host.choicedescription "&yes", ""
$yes = new-object system.management.automation.host.choicedescription "&yes", "add mailbox permissions."
$yes = new-object system.management.automation.host.choicedescription "&yes", $yesdescription
'yes'{ "somebody set up us the bomb." }
"yes to &all = continue with all the steps of the operation. $delimiter"+`
$y = get-date -format "%y-%m-%d_%h%m"
yield return nic;
"ync" { $menutext = "&yes = perform the suggested action $delimiter "+`
y&nc = yes, no, and cancel
"yn" { $menutext = "&yes = perform the suggested action $delimiter "+`
&yn = yes and no
your execution policy is restricted, this means you will not be able import or use any scripts including modules.
your password is set to expire in $timeleft days. please consider changing it before this date.
$ypos = 160
$ypos+=20
$zipfile = "$($localpath)\$(get-date -f mmddyyy-hhmm).zip"
$zipfilename = $script:currentexecutingpath + '\office365deploymentreadinesstool.zip'
$zipfileref = $shellapp.namespace([string]$zipfile)
$zipfile = resolve-path $zipfile
$zipfiles = get-childitem -path $zips -recurse -filter "*.zip" | % { $_.directoryname + "\$_" }
$zipfile = $shellapplication.namespace($zipfilename)
$zipfolder.copyhere($file.fullname)
$zipfolder = (new-object -comobject shell.application).namespace($zipfile)
$zipitem = $shell.namespace($zip)
$ziplocation= "c:\temp"
$ziplocation= "c:\temp\"
$zippackage.copyhere($file.fullname)
$zippackage = $shellapplication.namespace($zipfilename)
$zipproxy.getinfobyzip($zip).table
$zipproxy = new-webserviceproxy -uri $uri -namespace webserviceproxy -class zipclass
$zips = "d:\scripts\test"
$zip = $userobject.postalcode