acltype=$acltype;
write-host -foregroundcolor yellow "the mailbox for" $_.displayname `
$iface = get-netadapter $wnvnic -cimsession $hosts[2]
-nodescription 'do not create certificate')) {
$script:adfsaccountpassword = $credentials.password
$wikifile = $false
$filename = $folder + "\" +$usr2.samaccountname + ".txt"
$_.cluster.staticaddress,
foreach($b in ($startaddress.split(".")[1]..$endaddress.split(".")[1])) {
$a = $a + "table{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;}"
$namespace = "root\cimv2"
[string[]] $computername=$env:computername
if (ismember $user "domain users" -eq $true)
$vw_props =
$tsttop.size.height = 32
$policylastapplied = get-date -format g
$lastchgd = $name.modified
$contactitem.firstname = $contactitem.displayname;
where-object {$_.publisher -or $_.uninstallstring -or $_.displayversion -or $_.displayname} |
$dbs = get-mailboxdatabase -status
if(test-connection -computername $computer -quiet)
public uint32 flags;
$maindnsname = new-object -comobject 'x509enrollment.calternativename'
new-zip $ziplocation"$computer netlogon $year-$month-$day h$hour m$minute s$second.zip"
$percentwarning = 15;
update-compilerinfo
"select containernodeid from sms_objectcontainernode where name = '$($item.collectionfolder)' and objecttype = '$objecttype'"
17) configure iis ssl and authentication
$result = export-axmodel -model $modelname -key $signkey -file $modelfile -server $sqlserver -database $sqldatabase -outvariable out -verbose
function getdatabasestoredprocedures
$accessusers += $user
$body += "if you are unable to change your password, please contact the help desk at ext
"setting reboot logon flag: $userid "
$filepath = "c:\scripts\exportad.xlsx"
$searcher.filter = "(objectcategory=group)"
$transactionlogs = get-childitem -path $_.logfolderpath -filter "*.log" | ?{ ((get-date).addhours(-$hours) - $_.lastwritetime) -gt 1 }
$amsearchbase = "ou=disabled accounts,ou=amer,ou=corpusers,dc=company,dc=com"
move-vmstorage -vm $vm -destinationstoragepath $path
$body = "<ul><li><a href='srvinfo.html'>server info</a></li></ul>";
if($fileinfo -ne $null)
$pwserr = $pws.error
$csuser = get-csuser -identity $csuserid
valuefrompipelinebypropertyname=$true
$recurrencerangestart,$interval,$dayoftheweek)
$searchbase = (get-addomain).distinguishedname,
write-error "there was an error onlining the cluster name resource"
netqospolicy -name smb `
</tr>"
if($bit -eq "0")
$site2dn = "ou=site2,dc=yourdomain,dc=com"
mixercontrol = (volumestructs.mixer)marshal.ptrtostructure(linecontrols.pamxctrl, typeof(volumestructs.mixer));
$wb.saveas($workbookpath)
objexpando.innertext = strhide
$syncsc = $sync.scenario
$proc.startinfo.filename = $env:comspec
$btn10.usevisualstylebackcolor = $true
public intptr rootdirectory;
$primdns = $newsearchorder[0]
public static win32window currentwindow
$errormsg = $messages.outputfilewithwrongextenstion
if (($vmoldpath.startswith("\\")) -and $vmoldpath -match $vm.vmname) {
$nliwidthlabel.name = "nliwidthlabel"
$openopenfiledialog.checkfileexists = $true
function createlayerresult($layerkey, $hasindex, $filtercount, $indexedcount)
set-aduser -instance $user -server $server
$dodgymapiconnectivity = $false
if($featurestate -match "disable")
write-host "retrieving and comparing hashes."
$verifiedfeaturenames = $verifiedfeaturenames -join ","
else{$uld = ""}
$tocs = $toc.scenario
public const int token_adjust_privileges = 0x00000020;
$computername
$aseam = $asyncvd.externalauthenticationmethods
function get-qsdomainsuffixes {
$xlinsidehorizontal=12
if ($line.length -gt 0)
$reterror = $true
if($objservice.isdefaultauservice -eq $true)
<disallowstartifonbatteries>true</disallowstartifonbatteries>
$procver = $proc.caption
$detailecp+= "</tr>"
$wikifilename = $wikifilename.replace(".ps1","")
$tcontacts += $tcontact.uri
$output+="<td>$($dygroup.isvalid)</td>"
$newdtrow.totalmbsize = $totaldbsize
else {$multi = "$multi;$sid"}
public string uninstallstring;
$arbody = $null
$combinednetlogon = @()
"\d{1}"
<th width='20%'><b>check</b></font></th>
foreach ($exclude in $excludearray) {
$fileexit = "c:\config\logs\bootconfig"+$bid+"end.xml"
if($cleanonly -ne $true)
name = $name
process{
$databsize = $mbxdbsize.databasesize
ttl = "0";
"----------------------------------------" + "`n" | out-file $log -append
write-host "downloading $filename`n from $url`n please wait..."
$skip = $true
$result.item('computer') = $identitystring.split('/')[0]
"$shtmlheadingstyle message count</th>$shtmlheadingstyle last error</th>$shtmlheadingstyle last retry time</th>" + `
$currenttime = get-date
[int]$totalmailboxes=0;
$absoluteurl = [microsoft.sharepoint.utilities.spencode]::urlencodeasurl($absoluteurl)
$sw.close()
$search = "xml"
$dagnwin = $dagnetwork.ignorenetwork
<th width='20%'><b>blockedclientversions</b></font></th>
$a = $a + "body{background-color:
. c:\bestpracticesbook\getipdemosinglefunction.ps1
$solutiongacdeployment = !($solution.gacdeployment -eq $false)
[parameter(mandatory=$true, helpmessage="the error message.")]
<div class='$($classheaderasc)'>
out-error "you must specify an existing list of dc's or just ad to get the list of dc's from active directory"
$report += $lineitem
filter addone
} elseif ($customercode.length -gt 3) {
write-host -foregroundcolor blue "==============================================================================="
$lblpc.textalign = 256
add-member -inputobject $update -membertype noteproperty -name size -value $size
$queueinfo = get-queue -server $transportserver -filter {messagecount -gt 0}
$script:count = 0
write-verbose "grab the win32_computersystem class, this holds the rename method"
<th width='20%'><b>witness directory</b></font></th>
$scripter.options.allowsystemobjects = $false
$numberofupdate = 1
function move-oscexoemailmessage
write-verbose "value of leaseexpirytime property did not match"
$nestedgroups = @{}
$detailcert+= "<th width='20%'><b>server name : </b></font><font color='
$varnamespace = $_.'namespace'
$menushow += "$word`t - $phrase"
$contactsfolderpaths = $contactsfolderpath.split("\")
$sqlinstance = new-object "microsoft.sqlserver.management.smo.server" $sqlinstancename;
function remove-localuser
write-terminatingerrorlog "error occured while building." $error[0]
$btn11.usevisualstylebackcolor = $true
$root = $domain.getdirectoryentry()
$detailsetspnd+= "</tr>"
"<body>" + `
$windowsemailaddress = $_.windowsemailaddress.tostring()
private int timeout = 60000;
. $includefile
get-model $model
$script:adfscredentials = new-object system.management.automation.pscredential("$script:adfsdomainname\$script:adfsaccountname", $script:adfsaccountpassword)
$deviceid = $disk.deviceid;
[int] $numberofdays = 30,
csvde -f c:\outempdump.csv -r "(objectclass=organizationalunit)"
$gc = $forest.findglobalcatalog()
$mysrvconn.login = $uname;
if ($group.info -ne $null)
function copyfile ([string]$value, [string]$value1) {
{ $_ -like "width:*" }
$caname="corp-dc1-ca"
$tocres = $toc.result
[double]$ruleport,
$offset= $offset+ $logitem["datastruct"]["cbdoc"] +1
add-content $filename "</head>"
$used = $drives |where-object {$_.name -eq $shareddrive} |select-object -property used
$rpcmc = $rpc.maximumconnections
$wsusdownstreamservers = $wsusserveradminproxy.getdownstreamservers()
<h1>you arrived through the <u><%= ep %></u> entry point</h1>
2 { "notdischarging" }
$targetsolution.solutionfile.saveas($backupsolutionpath)
$inlineattachment.contentid = $filename
if ($csuser -ne $null)
write-verbose "remote registry is running on machine: $computername"
$approvals = $wsusserver.getupdateapprovals($updatescope)
$existinggroupmembers = get-adgroupmember $group | sort-object distinguishedname
write-verbose "try adding $($newuser.samaccountname) to $usergroup.groupdn"
|where-object {(get-date($_.timecreated)) -gt $checkpoint.addhours(-($hours)) -and (get-date($_.timecreated)) -lt $checkpoint}
$xlrowfield = 1
position=2,
if($item.hasindex)
public static extern bool credfree`(`[in`] intptr cred`)`;
if ($clearreq -eq "y")
if ($obj.recipienttype -ne 'usermailbox' -and $obj.recipienttype -ne 'mailcontact')
if ($dodgymailflow -eq $true){$htmlmessagebody += $mailflow}
write-verbose "collect all computer objects from $($adspath)"
$gpobackup = backup-gpo $gpo.displayname -path $backuppath
<br><th width='20%'><b>server name</b></font></th>
'mon' {
if ($hasindex)
$owauseroptions.dictionary.add("signaturetext",$textsignature)
{$_ -lt 1gb}{$itemsize = ($_/1mb).tostring("0.00 mb");break}
<font color=""black"" face=""arial"" size=""3"">
if ($howoldbkp -eq $null)
$pnlfunctionexplorer.dock = 'fill'
$mdcscss = get-mailboxserver | where-object{$_.admindisplayversion.major -eq "14" -and $_.databaseavailabilitygroup -ne $null} | get-mailboxdatabasecopystatus -connectionstatus | ?{$_.activecopy -eq "true"}
write-verbose "go to the url"
$ewsentourage = ""
<td style='text-align:center'>"+$($_."approved by validation") +"</td>`
if ( -not $credential )
$data = import-csv .\users.csv
$oldestdays = new-timespan -start $oldest.oldestitemreceiveddate
function export-eventlogs
$serverpath = $serverregistrypath
read-axclientconfiguration
13 { configure-qswindowsfirewall; write-qscompletionmessage }
marshal.freehglobal(recdparamsptr);
if (($replicaoverheadfactor/100) -gt 1)
$duration = ($sortedlist.keys[$i] - $sortedlist.keys[$i-1])
while (($userrequester -eq $null) -or ($userrequester -notlike "*@*"))
$spallowedinlinedownloadedmimetypes = $spwebapplication.allowedinlinedownloadedmimetypes
$excelpath = "c:\scripts\updateusers.xls"
<th width='10%'><b>replication port</b></font></th>
$propertiestoadd = (
$itemview = new-object microsoft.exchange.webservices.data.itemview($pagesize)
if ($exepolicy -ne "restricted") {
$itomonth=1
$row=1
checkrequiredattribute $property -name "name"
$myformattreeview.width = $myformatlabel.width
$pwsrv = $pwsvd.server
$entrieselement = $controlelement.appendchild($myxml.createelement("tablerowentries"))
clear-host
write-qserror 'tool download failed.'
$logitem["datastruct"]["cbweb"]= [system.bitconverter]::toint16($content,$structoffset)
write-host "[info]`t[$($item.collectiontype)] collection [$($item.collectionname)] moved to folder [$($item.collectionfolder)]" -foregroundcolor green
$colofmembersexpanded
$mcpfs = $mcpf.server
[validaterange(1000,2100)]
$scriptcontents | out-file $scriptpath
restart-computer -computername $vmhost -force
$certar = $cert.accessrules
installupdates
if ((get-service -name sptimerv4).status -eq "running")
$percfreespace=[math]::round(((($objdisk.freespace / 1073741824)/($objdisk.capacity / 1073741824)) * 100),0)
$destination = $shellapp.namespace($dest)
$mail = new-object system.net.mail.mailmessage
for ($j = 0; $j -lt $weekrepeat; $j++)
$exservice,[microsoft.exchange.webservices.data.wellknownfoldername]::searchfolders)
$detaildatabase+="<td width='15%'><font color=$($color4)><b>$($index)</b></font></td>"
$template = get-scvmtemplate -vmmserver $vmmserver -all | ? {$_.name -eq $templatename}
if (!$isadfs)
timecreated = $event.timecreated
write-host "connecting to office 365..." -foregroundcolor "yellow"
$manifest.load($model)
"login: "+$item.login+"<br>"+
$showmenu
foreach ($m in $matches)
"test result:"
$system_drawing_point.y = 380
$c.cells.item($introw, 9).interior.colorindex = 4
$percentcomplete,
$output | add-member -membertype noteproperty -name $effectivepolicyname -value $effectivepolicyid
$adddp.refreshnow = $true
$($detailwsc)
write-host "pc naming matches division 2 kiosk pc's"
$context = new-object system.directoryservices.activedirectory.directorycontext("domain")
public intptr data;
foreach-object {
* studio session. although it will work from powershell, it's not very useful.
$d.borders.item($xledgeleft).color = 1
"yes to &all = continue with all the steps of the operation. $delimiter"+`
$modelmanifest = get-axmodelmanifest -file $model -server $sqlserver -database $sqldatabase -outvariable out -verbose
if (0,2,4,6,8 -contains "$bj"[-1]-48)
"gateway: " + $ip.defaultipgateway
$img3.incrementleft($cellwidth * 6)
$newusertable = $besusertable.clone()
$($detailsetspn)
public void dispose()
check-compilererrors
$ip = get-wmiobject -class win32_networkadapterconfiguration -filter "ipenabled = $true"
$proc_params = $proc.parameters;
($script:adfsdomainname.tolower() -ne $env:userdnsdomain.tolower())) {
write-host "$($menuitems[$i])" -fore $bcolor -back $fcolor
get-date | out-file -filepath $logfile
write-host -foregroundcolor red ("----------------------------------`n")
$counter ++
$update.pstypenames.add('pswindowsupdate.wulist')
invoke-expression -command $firewallportopening
$browserfilehandlingtypetochange = $(throw "the handlingtypetochange parameter is required.")
$serverlist = @(get-content $inputfile)
if ($mailbox.customattribute7.length -eq 8) {
$wsc = (get-clientaccessserver | test-webservicesconnectivity -allowunsecureaccess)
throw "failed to retrieve closest dc for server `"$computername`""
$cmd = new-object system.data.sqlclient.sqlcommand
$replicaoverheadfactor = 120,
$c.cells.item($introw,10).interior.colorindex = 4
username = $message
$contactproperties = @{}
function test-qsrequirement {
$index = 1
foreach ($dir in $dirs) {
macaddress = ''
if($logging -eq 0)
[void]$(new-treenode -treenode $tempvalue -text "viewdefinitions")
$wvdinlb = $websvd.internalnlbbypassurl
$web = $initialwebscope | get-spweb $url
$configdb = get-spdatabase | ? {$_.name -eq $farm.name.tostring()}
[alias("hardwareprofile")]
-status "$percentcomplete% complete" -currentoperation "current mailbox: $currentmbdisplay"
netsh int ipv4 add address name=$switch address=$ipv4address2 mask=$ipv4subnetmask2
$total = 0
[microsoft.exchange.webservices.data.itemid]$messageid,
$serverauthenticationoid.initializefromvalue('1.3.6.1.5.5.7.3.1')
$foundupdatestodownload = $objcollectionupdate.count
foreach ($contactgroup in $contactgroups) {
-virtualdisk @(
$members = $group.member
public static class volumeconstants
connection remains open for writting
$exprstring = '$list1.selecteditems | foreach-object {$_.tag} | foreach-object {$_.processid}'
$errormsg = $messages.cannotfindfile
$item.visible = $false
[byte[]] $b = [system.bitconverter]::getbytes($val)
$cells.item(1,18).font.bold=$true
$camlquery = '<where><and><gt><fieldref name="' + $datecolumninternalname + '" /><value type="datetime" includetimevalue="true">' + $reviewstartdate + '</value></gt><lt><fieldref name="' + $datecolumninternalname + '" /><value type="datetime" includetimevalue="true">' + $reviewenddate + '</value></lt></and></where>'
failed = $failedcount
$dir = read-host "directory to save the csv file"
$password = read-host 'what is the user password?'
public class dhcpclient : idisposable
$a.visible = $true
$form1.clientsize = $system_drawing_size
$wname = 'axbuild_' + $guid
import-module msonline
add-content $report "</html>"
$quote = $false
$computer = connect-commputer -computername $computername
$newpkg.version = $item.packageversion
$search.searchroot = $confpart
if ($layerid -ge $higestlayer)
$pcs = get-qadcomputer $computername | sort-object -property name
$results | select-object folder, totalsize , filecount, subdirs | sort-object totalsize -descending | format-table -auto
[switch]$organization,
$mykey = "mysecret"
function selectitem
write-host "error: feature $featurename is not a webapplication scope feature, aborting!" -foregroundcolor red
$insert = "insert $table values ('$name','$ou','$dn','$pwdls','$os','$sp')"
write-host " done!"
"setting dcfqdn: $dcfqdn "
foreach ($address in $_.emailaddresses){
if(($line -ne $null) -and ($line.trim() -ne ''))
[string]$gateway ="17.24.16.254" ,
set-variable -name binarypath -value "$binarypath\" -scope 1
$mappedvolumes = @()
$repouuid = $fielddata
add-member -inputobject $return -name subnetmask -value $subnetmaskreturn -type noteproperty
"$feet feet equals $($feet*.31) meters"
$dbidentity = $db.identity
$cancelbutton.text = "cancel"
$deleteallitemtoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
$line | add-member -type noteproperty -name "action" -value $action
<td width='51%'height='15' align='center'> <strong> <font color="
if ($fsize -eq '0000') {
"no to a&ll = skip this operation and all subsequent operations. $delimiter"+`
-userprincipalname $_.'userprincipalname' `
$c.cells.item($introw,10) = "n/a"
$ouselection = read-host "which ou"
foreach ($user in $moverequestidentity)
$ipv4dns = $null
write-host "propvalue: $propvalue" $propvalue.gettype()
$cells.item($row,$col).interior.colorindex = 4
function update-repo
$percentcomplete = [math]::round(($loopcount++ / $tardatabases.count * 100),1)
$partitionschemes = getdatabasepartitionschemes $sql_server $db;
$vcsenabled = $row.get_item('vcsenabled')
write-verbose "login to the target for this session since persistentlogintarget doesn't login until reboot"
$mcafeeap = new-object system.windows.forms.toolstripmenuitem("&access protection")
$tag = "$endtime [$script] ended. --> pse $($myinvocation.line) $pwd\$script $parms"
$xl.speech.speak('adjust the position of the new image by removing the 12 points automatically added when duplication took place')
write-progress -activity "repairing client $strcomputer ..." -status "repair running for $i seconds ..."
[system.media.systemsounds]::asterisk.play()
$cer = $resds.calendarexceptions.newcalendarexceptionsrow()
$rules = get-netfirewallportfilter | where-object { ($_.localport -eq 443) -and ($_.protocol -eq 'tcp') } `
function getdescriptionextendedproperty
if($null -eq $pscredman)
$host.runspace.threadoptions = "reusethread"
$departments = $users | select department -unique
$list2.fullrowselect = $true
$lbl2.text += "ram:`t`t" + $mem + "`n"
if ($dbs.count -eq 1)
if ($output -eq "") { $output += $_ } else { $output += ",$_" }
$newmail.appenditemvalue("subject", "$subject") | out-null
credentials = credhandle.getcredentials(count);
$userobjectpasswordlastset = $userobject.passwordlastset
[dllimport("shell32.dll", entrypoint = "
foreach ($file in (get-childitem -path $path -recurse -erroraction stop))
function invoke-tsmedusa {
$color = "
$apppool.processmodel.idletimeout = "0.00:00:00"
$newedittypeform.showintaskbar = $false
)][string[]]$properties=@('samaccountname','sn','l','description'),
$appointment.save($currentcalendarfolder.id,`
"mileage" = "mileage";
$mailfile = "",
'9 internal processing','10 performance counters',
if ($useridfile -ne "")
$xmldata = read-xml
$srv = new-object "microsoft.sqlserver.management.smo.server" $server
[parameter(position=0,mandatory=$true,valuefrompipeline=$true,valuefrompipelinebypropertyname=$true)]
return $a
foreach($casarray in $casarrays)
"publishing project guid = " + $projectuid
using system.net.networkinformation;
11050 {"general failure"}
@($clusternodes) | foreach-object {
$rv = $aos.startservice().returnvalue
$s = "last run successful for url ""$($url)"": $([datetime]::now.tostring('yyyy.dd.mm hh:mm:ss'))"
$output += $sam + " pass: " + $_.password
foreach($subx in $subregkey.getvaluenames())
[string] $folder = "d:\export\";
$newpath = $path + "\import_create_ad_users.csv"
$newlevel=[pc_volumecontrol.volumecontrol]::getvolume()
$detailflow+= "<td width='20%'><font color='
write-debug "show log collection"
$removenull = $total-1
$reportobject = new-object psobject -property @{
if ('"'+$objnewgroup.distinguishedname+'"' -ne ($groups[$k] -replace $source,$destination).tostring())
switch ($viewnode.text)
$pingpcname = $pc.name
$_randomsamplerequested = $true
override protected bool releasehandle()
$combinedcsvfile = "$path\$($prefix)_$(get-date -uformat %y%m%d%h%m%s).csv"
$propobj = $propobj.$propname
$script:scriptname = 'deploy'
$xlinsidevertical=11
$neweditviewform.add_shown({shown-neweditviewform -sender $neweditviewform -eventarg $_})
$cred = get-credential $admin
$sids = $adobject.psbase.properties.item("tokengroups")
$btn4.name = "btn4"
return $findresults.id
$resds = $pwaserviceassembly.readresource($resuid)
[int[]]$ports = @(21,22,23,53,69,71,80,98,110,139,111,389,443,445,1080,1433,2001,2049,3001,3128,5222,6667,6868,7777,7878,8080,1521,3306,3389,5801,5900,5555,5901),
"updating background and setting ie homepages"
[string]$taskrun,
end sub
$datetostringformat = "yyyy'-'mm'-'dd hh':'mm':'ss'z'"
$pwp = $pwsvd.path
$searchfolder = [microsoft.exchange.webservices.data.folder]::bind(`
if ($credentials -eq $null) {
if ($dayofmonth -ne $null) {
$office365credentials = new-object system.management.automation.pscredential $office365adminusername, $secureoffice365password
[dllimport("wtsapi32.dll", setlasterror = true)]
$nliscripttextbox.enabled = $true
$cmd = ".\deployment-v3.ps1 -inputfile '$filepath' -action internaldeploy"
$message = $error[0].tostring()
$timer.stop()
$mailboxdata.columns.add("itemcount",[int]) | out-null
"mailboxes and was enabled for auto-provisioning."
write-host (get-moverequeststatistics -identity $user.identity | select baditemsencountered).baditemsencountered -foregroundcolor red "bad items encountered"
$localsmtpserver = "smtp.company.com"
$cred.targetname = [system.runtime.interopservices.marshal]::stringtocotaskmemuni($targetname)
$modellist = (join-path $folder $list)
trap {"error: $_"; break;}
siteurl= "";
helpmessage='what is the descrition for the choice?')]
if (test-path $fileexit)
$img2.flip($msofliphorizontal)
$sql_server.databases[$dbname].userdefineddatatypes | foreach{ $scrp.script($_)} | out-null;
public intptr attributes`;
updateprogress -status 'stage 2 hyper-v cluster' -percentcomplete 0 -currentoperation ''
$detailcs+= "<th width='20%'><b>enabledaylightsavingtime : </font><font color='
if ($scompname -eq "")
" scriptname : $($scriptname)`r`n"
$htmlstyleparams += "body{background-color:
$j = 2
$nevviewcombobox.location = new-object -typename system.drawing.point(($nevviewlabel.right + $formspacer), $nevviewlabel.top)
public mywebclient(int timeout)
12/$num
adaptersetting -name $hvnode.node2.clusternet.name `
$value = $value.substring(0, ($lussecretdata.length / 2))
"new-netipaddress -interfacealias $switch -ipaddress $ipaddress/$ipv6prefixlength -addressfamily ipv6 -prefixlength 48"
$warnusers = $warnusers + $name
$grp2.tabstop = $false
$adfind = $searcher.findall()
policy_set_default_quota_limits = 0x00000080l,
"as-tcp-port-sharing",
nativecredential ncred `= new nativecredential`(`)`;
$updatecollection += $update
$newresult = sendping($tempaddress)
$domainsid = $domainsid.tostring()
get-info $_
$hashoutput.dayofquarter = $entry.day
and (iii) to indemnify, hold harmless, and defend us and our suppliers from and
throw "cannot obtain the specified host information"
port = $event307xml.event.userdata.documentprinted.param5
$exist_parent = ""
$dc = invoke-command -computername $server -scriptblock {
$item = new-object system.windows.forms.listviewitem($admin.domain)
getdatabaseinfo $sql_server $db;
$bitcount++
$sortedexclusionlist.add($sortval,$_) | out-null
$newrule.filename = $item.filename
write-output "bringing all ips offline"
set-variable -name certificatefriendlyname -scope 'script' -option 'readonly' -value 'ad to aad quickstart adfs certificate'
<script language=vbscript>
$cells.item(1,3)="lastname"
$item.tag = $app
$tempnode = new-treenode -treenode $tempitemnode -text "width: $($tempheader.width)" -tag $($tempheader.width)
combine-xpos $model.directory
$mbxbkslastib = $mbxbk.snapshotlastincrementalbackup
if ($choices.count -eq 1) {
$msg.body = "<html><body><b>review items for $listdisplayname<br /><br /></b>the following document ($documentname) has a review date of $reviewdate.<br /><br />click <a href = '"+ $doclibraryviewurl + $viewfilter +"'>here</a> to review all documents which have a review date on $reviewdate.</body></html>"
$existinguser = get-aduser $script:adfsaccountname
function gethelp()
$totalsize = $_."move-mailbox".taskfooter.totalsize
$outputitem | add-member noteproperty ewsmacmail $ewsmacmail
$_.value["activesyncclients"].getenumerator() | % { $activesyncclients += "$($_.key); "}
[switch]$scanport,
$emailmessage.isdeliveryreceiptrequested = $requestdeliveryreceipt.tobool()
del 'd:\monthly reboot report\result.csv' -force -erroraction silentlycontinue
$sortedlist.add($currentview.title, $currentview.title)
$btn9.text = "&processes"
$overwritegroupmember = $contactgroup.overwrite
valuefrompipelinebypropertyname=$false,
$detailqueue+= "<td width='20%'><font color=$($color)><b>$($queueidentity)</b></font></td>"
$results=$searcher.findall()
namespace microsoft.windowsazure.internal
if ($oabvdir)
$nliwidthlabel.text = "width:"
$minimumpasswordageticks = [math]::abs($currentpasswordpolicyobject."msds-minimumpasswordage")
$temptreenode.tag = $tag
$locales = $languages.split(",")
[validatescript({test-path -path $_ -pathtype leaf})]
$unbindcomponentid
$newdtrow.totalmbs = $totalnumbermb
[switch]$allproperty
$miami = "mydomain.com/miami/users"
if ($pscmdlet.shouldprocess($computername,"enable rdp"))
$totalfailednew = "ok"
$counter = 0
$details_specific.add("allbookinpolicy",$room.allbookinpolicy)
table {
<span class=sectiontitle tabindex=0>logical disk & mountpoint report</span>
move-qadobject -identity $computerdn -newparentcontainer $destinationdn
catch [system.io.filenotfoundexception]
$printlog = new-object -typename psobject -property @{
$exists = "0"
$($detailmcpf)
$labelitemspec += new-object microsoft.teamfoundation.versioncontrol.client.labelitemspec ($itemspec, $versionspec, $false);
$groupmembership += $groupentry
$action="wait"
$title = "add mailbox permissions"
$form1.controls.add($grp1)
$tierdisplayname
else{$progress2.step = 80}
[supportswildcards()]
$web = get-spweb -identity $varweburl
write-host -foregroundcolor yellow "$name is a office communicator user"
[marshalas(unmanagedtype.i4)] int sessionid,
$mactype = $nic.mactype
$domaincontroller = ($env:logonserver).substring(2)
[parameter(position=1,mandatory=$true)]
status = "0";
"proceed with domain join: $vardomainjoin, $corpfqdn"
function require-qswindowsfeature {
finished time : $enddate
$externalfqdn = $topologysettings.topologies.externalfqdn
release-qscomobject $destination
if (-not $testlogpath) {
function convertto-dateobject {
$notconnected += $name
<th width='15%'><b>binding</b></font></th>
$stbar1.text = "applications on " + $computername.toupper() + " (uninstalling $($endapp))"
_progress (98) "completing"
write-warning "can't find registered service microsoft update. use get-wuservicemanager to get registered service."
$command = $command + "/force"
$bid = $bootconfig.bootid
$xmluserarray += "<event><username>" + $thissplit[0] + "</username><eventtime>" + $thissplit[1] + "</eventtime><eventtype>" + $thissplit[2] + "</eventtype></event>"
$obj | add-member -membertype noteproperty -name "line uri" -value ($csuser.lineuri)
foreach($d in ($startaddress.split(".")[3]..$endaddress.split(".")[3])) {
<span class=sectiontitle tabindex=0>exchange servers information</span>
[array]$members = @();
<div class='$($classheadermc)'>
$userprincipalname = $testaccountname.trim()+$domaindnsname
$time=([datetime]'12/20/2011 18:00'-(get-date)).tostring().substring(0,11)
line.cbstruct = marshal.sizeof(line);
if($user.lastlogon -gt $time)
$body = " the file $filename has been attached to this email "
$highestcql = $cqlarray | sort-object {[int] $_} | select-object -last 1
$cname = "cn="+$adsgroup.name
$output = $f + "<br/>" + $b + "<br/>" + $c + "<br/>" + $d + "<br/>" + $e + "<br/>" + $g + "<br/>"
write-host "webpart = ", $webpart
$adoconnection.close()
$port="1433")
"yanls" { $menutext = "&yes = continue with only the next step of the operation. $delimiter"+`
[parameter(mandatory=$false)][switch] $runtests,
if (![string]::isnullorempty($nliscripttextbox.text))
if ($queue.identity -eq $null)
found credentials as:
if (($showself -like "true") -and ($showinherited -like "true"))
public struct mixerdetails
$cells.item(1,19).font.bold=$true
$currentwpconnection = $_
"==$($thisverb)-!$($thiscommand)==" |out-file ".\$($wikifilename).wiki" -append -encoding ascii
$freespacegb = [math]::round($freespace / 1073741824, 2);
if ($ipv4dns){
$tsbclearfilter = new-object system.windows.forms.toolstripbutton
$taskfilter = { $_.'run as user' -like $useraccount }
<add assembly="microsoft.exchange.net, version=14.0.0.0, culture=neutral, publickeytoken=31bf3856ad364e35"/>
$reflist = $spweb.lists.trygetlist($listname)
date = $matches.date
throw ("error: ax compile partial did not complete within {0} minutes" -f $compilealltimeout)
$command = "renamecomputer", "$computer", "/newname:$newname"
$key = new-object -comobject 'x509enrollment.cx509privatekey.1'
$backupfilename = "$($computername)-$($logname)-"+(get-date -format "yyy-mm-dd hh-mm-ss").tostring()+".csv"
return new utf8encoding( encodershouldemitutf8identifier: false,
$($detailows)
$cancreateanniversaryappointment = $true
$verbosemsg = $messages.succeededtoaddpermision
if ($group.isvalid -notlike "true")
if($reportonly) {
write-warning "reboot is required to continue"
"could not retrieve any information from your input. please make sure distribution group name is correct."
" domain test : $vardomainjoin"
} while ($limityear -le $checkdate.adddays(-7).year)
$xml.deployment.farm.solution | installorupdatesolution -whatif:$whatif
$serverlist = "c:\\machine.txt"
if ($monthrepeat -eq -1) {
$vmname,
if($nestedgroup.values.count -gt 0)
$system_drawing_point.y = 83
$socurl = $soc.url
$logitem["datastruct"]["pprev"]= [system.bitconverter]::toint64($content,$structoffset)
dbcreator = [bool]$sqlobject.dbcreator;
foreach ($server in $servers) {
(($object1.$key.gettype()).name -eq "enum") -or
if(test-path $commonxp){remove-item $commonxp}}
$setdomain=
$detailpwsvd+= "<th width='10%'><b>server : <font color='
$targetsite = get-spsite -identity $siteurl -erroraction silentlycontinue
$sj++
$path = "c:\windows\softwaredistribution"
$adworkstation.description = $thisworkstation.username
write-host 'no records found. full results:'
add-content $report "td {"
volumelevel = volumecontrol.lminimum;
$cr = $provider.compileassemblyfromsource($params, $txtcode)
write-host ("calling compilepartial api : {0}" -f (get-date))
$installedversion = $descriptionbts2006r2sp1
ep = "cloud"
export-domainsids
write-verbose "loop through each available datasource"
<th width='20%'><b>maxreceivesize</b></font></th>
if($transcript_enabled -eq $true)
throw "usage: getwmi2 -class <class type> -ns <wmi namespace>"
if($rrstatusgs -notlike $null)
$reportfile
function invokecmdletwithcomputername($cmdlet)
" found existing : this is ok since it was to be created"
k/+blzp/m5wt/5uvk/+blzp/gmxc/3vxivoaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabvtq3qojmu/6gbmf+hm5n/ozuz/6gbmf+hm5n/ozuz/6gbmf+hm5n/ozuz/6gbmf+hm5n/ozuz/6gbmf+hm5n/ozuz/6gb
$all = $db.tables;
write-host "`n`tcreated stored script file used by task scheduler" -foregroundcolor green
param($from,$to,$subject,$body)
write-verbose "creating return object for output"
position=0)]
foreach ($qspart in $arrlog[6].split("&"))
$userid = new-object microsoft.exchange.webservices.data.userid($usersmtpaddress)
$webclient.usedefaultcredentials = $true
$runningdhcp = isrunningdhcp $dc
new-item -path $localpath -itemtype directory -force |out-null
$img2.lockaspectratio = $true
return [intptr]::size -eq 4
$img3.reflection.size = 50
<li><a href='partition-schemes/index.html'>partition scheme</a></li>
$permtype = $databasepermission.permissiontype;
18 { add-hostsentryforadfs; write-qscompletionmessage }
$startpath,
writedata $name $svr $edb $edbsize $whitespace $mbxcount $topmailbox $topmailboxsize $lastbackup $howoldbkp
$remotelocation = "\\$computername\c$\" + $folderlocation.substring(3)
$adrights = [system.directoryservices.activedirectoryrights]::extendedright
-owneremail "$owneremail" `
return $suspect
$excel.workbooks.close()
foreach($hubsend in $hubsends){
$bindinginformation = $binding.bindinginformation.split(':')
" domain controllers:"
$cred_credential = new-object system.management.automation.pscredential($adminuser, $pwd_credential);
function reset-computeraccount
$fqdn = $casarray.fqdn
public int count;
$errormsg = $errormsg -f $csvfile
$tempvalue = $myformatlabel.height
$obj | add-member -membertype noteproperty -name "exchange sip" -value ($getum.sipresourceidentifier)
where-object {$_.passwordstatus -ne "password never expires" -and $_.passwordstatus -ne "expired" -and $_.passwordstatus -ne "user must change password at next logon." -and $_.mail -ne $null} |
$serverrole = $exch.serverrole
if ($ver.version.major -gt 1) {$host.runspace.threadoptions = "reusethread"}
$filelist = @($filelist | where-object {$_.lastwritetime -le $lastwrite})
$mailboxserver = $_.name
$forestdomains = $forest.domains
function install-qsmsolservicesmoduleexplicit {
" config done : boot $bid exiting successfully."
foreach ($d in $procs) {
function export-oscexocontact
$mcafeeagent.add_click({$mcafeefile = "agent"; mcafeelogs})
$ros = gwmi win32_operatingsystem -computername $computername
write-host $('=' * 50)
default {"`tdeleted folder`t$($folderlist[$j].lastwritetime.tostring('yyyy-mm-dd hh:mm:ss'))`t`t`t$tempname" >> $logfile}
$newsubkeys=$newregistrykey.getsubkeynames()
if ($found -eq $true)
$command = $command + "/securepasswordprompt"
$mailto="keith <keith@mydomain.net>"
$xmluserarray += "<loginevents>"
write-host -nonewline $message
$shellapplication = new-object -com shell.application
$output+="<td>$($member.recipienttypedetails)</td>"
<td width='45%'><b>receive connectors</b></font></td><tr>
function compile-build
<th width='20%'><b>shadowredundancyenabled</b></font></th>
switch($cmd) {
if ($i -eq 1)
$hasconnectionpermission = $true
$xml.deployment.farm.feature | enableordisablefeature -scope farm -whatif:$whatif
"photo" {
if ($transactionlogs.gettype().name -ne "fileinfo" -and $transactionlogs.length-1 -gt 11){
"`ndomain name: " + $domain.name
$stbar1 = new-object system.windows.forms.statusbar
if ($sender.isinherited -like "false"){$font="red"}else{$font="'
$checkdate = [datetime]::parseexact("$($quarteryearint)0331",'yyyymmdd',$null)
$currentdomain,"samaccountname=$currentusername")
if(($selectedstatus -ne $null) -and ($selectedstatus -ne ($choices.length -1)))
[float]$freespace = $disk.freespace;
write-host -foregroundcolor blue "waiting on all jobs to reach a completed status. sleeping for 60 seconds."
write-verbose "look for users until we find a blank cell"
write-host "error: failed adding $solutionname to farm, aborting!" -foregroundcolor red
if($webs.count -ge 1 -or $webs.count -eq $null)
$mbxdbtable.rows.find($optimaldb.database).mailboxmoves += $movingmailbox.primarysmtpaddress.tostring()
$wsusserver = "wsus.company.com"
{if ($i -eq 0)
$isvalidationapproved = $true
<th width='20%'><b>interfaces</b></font></th>
<th>date of arrivals</th>`
$syntax = $attributes[$attrname]
write-host "file $destinationfilename already exists, skipping..."
$newcontact.imaddresses.item(`
if ($bitvariable[$bitcount] -eq "1")
$hash=@{}
cred.credentialblob = marshal.ptrtostringuni(ncred.credentialblob, (int)ncred.credentialblobsize / 2);
[string]$hostcomputername, [string]$childpath, [string]$parentpath
$obj | add-member -membertype noteproperty -name "cs display name" -value ($notfound)
$junkresults = [diagnostics.process]::start("$env:systemroot\system32\ipconfig.exe", '/flushdns')
$message = "backed up $($deptgpo.displayname) to $($backuplocation)"
[dllimport("dhcpcsvc.dll", entrypoint = "dhcpundorequestparams", charset = charset.unicode, setlasterror = false)]
$system_drawing_point.y = 147
if ($checkprocess -eq $null)
$printers += $thisprinter
$identity.baseobject.rename($name)
[array]$oa_dbcounters=@();
$localnodepresent = $false
$filemenu.dropdownitems.add($filedomain) > $null
add-content -path $logfile -value "------------------------------------------------" -erroraction stop
<th width='10%'><b>result</b></font></th>
write-terminatingerrorlog('the aos can not be started after {0} minutes.' -f $aosrestarttimeout)
$axbuilderror += "the server bin dir is missing."+[char]10}
$nettypetextbox.text = $($myformattreeview.selectednode.tag)
[void]$group.setinfo()
file {
$spquery.query = ""
write-qstitle 'create an internal dns entry for adfs'
public uint32 optionid;
$itemspec = new-object microsoft.teamfoundation.versioncontrol.client.itemspec ($tfsworkspace, 2)
ipinterfaceproperties props = nic.getipproperties();
$filepcuser.add_click($findpcuser)
function pingtest($passedip)
[intptr]$hlsasstoken = [intptr]::zero
cbref=0;
$detailcert+= "<th width='20%'><b>notafter : </b></font><font color='
$temptreenode
$all += $db.schemas;
$udt_name = $item.name;
$fmatches = ([array]($output | where {$_ -match "true"})).count | %{ if ($_) {$_} else {'0'} }
$btn10.databindings.defaultdatasourceupdatemode = 0
"web page" = "businesshomepage";
$servers = get-adobjects -adspath $adspath
$dnszone = "yourzonename"
namespace volumecontrol.library.win32
if ($csv -eq $true)
$dn = (get-aduser $sam).distinguishedname
$shares = gwmi -class win32_share -computername $computer | select -expandproperty name
$choice2 = new-object system.management.automation.host.choicedescription $c2, $desc2
ptemp = marshal.readintptr(handle, inx * intptr.size);
-2147024894
$form1.keypreview = $true
$verifiedpolicyfeatures = @{}
$body += "<h2 style='font-size:15px;text-decoration:underline'>parameters</h2>$proc_params";
$keys += get-childitem `
$record.ip2 = $ip2
$psise.currentfile.editor.inserttext($templatefunction)
public int cmultipleitems;
write-host "file : $stritem already exists in destination folder"
hfmaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabtsqutfmg9/5kmg/+tj4z/k4+m/5opjp+tj4z/k4+m/5opjp+tj4z/k4+m/5opjp+tj4z/k4+m/5opjp+tj4z/k4+m/5opjp+tj4z/k4+m/5op
if (test-path c:\config\cert) {} else
public intptr comment;
$credential = get-credential -credential $username
$servicename = $null
if(!$all)
$crldsl = $mbxcra.calendarrepairlogdirectorysizelimit
$domain = $absolut.remove(0,$relative.length+1)
[int] $language,
$netcancelbutton.add_click({click-netcancelbutton -sender $netcancelbutton -eventarg $_})
$scriptblock += " -computername $computername"
foreach ($line in $file) {
<html>
$sql.commandtext = $create
$memberobjects = $identity.baseobject.psbase.invoke("members")
$source = $identity
$psise.currentfile.editor.inserttext($commentblock)
import-module .\helper\cloud.psm1 -force -erroraction stop
[system.io.file]::copy($vhd.sharepath,$vmhostparentvhdpath)
lastchangeddate = $lastchangedate
intptr pcredentials = intptr.zero;
write-host "[error]`tmetering rule [$($item.productname)] doesn't exist" -foregroundcolor red
write-host 'configuring local coexistence configuration information...'
$classheaderpwc = "heading10"
foreach ($xcip in $xcipnic){
$mappedvolumes += $lineitem
$sddlchanged = $true
$privatedata = [intptr]::zero
$atdiurl = $autovd.internalurl
$emailsubject = "mailbox migration completed at $datetime."
"computergroupname`tupdatetitle`tupdateguid`tupdatearticleid"
server = $sqlserver
if ($syntax -eq "notsupported")
} elseif ($database) {
$password
-default `
if (6 <= environment.osversion.version.major)
$list2.usecompatiblestateimagebehavior = $false
$htmlstyleparams += $htmlstyleparams + "th{border-width: 1px;padding: 5px;border-style: solid;border-color: black;background-color:thistle}"
$senderbody+="<td><font color=$font>$($sender.isinherited)</font></td>"
$hubi = $hubsend.identity
uint buffersize = 1024;
policy_server_admin = 0x00000400l,
netqospolicy -name livemigration `
$output | export-csv -path $path -notypeinformation
function generateform {
function configure-qswindowsfirewall {
if ($dbcounters[$i].total -lt $balancedcount)
return $printqueue
for ($i = 0; $i -lt $dbs.count; $i++)
new-adgroup directaccessclientswin7 global
6..14 | %{cmd /c if exist "\\$computername\c$\program files (x86)\adobe\reader $_.0\reader\acrord32.exe" psexec \\$computername -d reg add hkcr\software\adobe\acrobat\exe /ve /d "`\`"c:\program files (x86)\adobe\reader $_.0\reader\acrord32.exe`\`"" /f}
if ($trvfunctions.selectednode.tag.startswith('d'))
$webcount = 0
$nliformatlabel.location = new-object -typename system.drawing.point($formspacer, ($nliscriptlabel.bottom + $formspacer))
$mbxdbtable.columns.add("databasename",[string]) | out-null
$earliestlogdate = (get-date).subtract([timespan]"$($days).00:00").date
function cleanup
my-test -myinput "string"
for ($i=0; $i -lt $calendarfolderpaths.count; $i++) {
$queryresult = query-version -category "organizationversion"
($tempevent.replacementstrings[1]).replace([char]8206, " ")`
$spquery.viewattributes = 'scope="recursive"'
add-content $report "<!--"
$signature = @"
$percentcompleted = ($countmoverequest) * 100
start-process
function get-fefunctions
$domainname = [string]($domain.name)
$formspacer = 8
foreach ($binding in $bindings) {
new-alias send-ftpitem add-ftpitem
$dn = $value.replace("/", "\/")
function clear-olkfolder {
$details_general.add("office",$mb.office)
test-qsrequirement -requirement $installresults -message 'cannot install msol powershell without sign-in assistant'
$upnsuffixes = get-qsdomainsuffixes
$psi.redirectstandarderror = $false
$bypasstbl=$bypasstbl0+$bypasstbl1+$bypasstbl2
[microsoft.exchange.webservices.data.imaddresskey]::$contactpropertyname`
else {$passwordage = "<not set>"}
</tr>" }
" created by : $($env:username)`r`n"
-throughputsetting $throughputsetting `
[validaterange(0,92)]
[string]$displayname=(get-date)
$script:adfscredentials = $null
checkdirectory
$message = $messages.securitywarning
[string]$foldername="inbox",
qos = throughputsetting -qos `
$zipproxy.getinfobyzip($zip).table
$timer = new-object timers.timer
$deptgpos = get-gpo -all |where-object {$_.displayname -like "*$($deptcode)*"}
$newparser::parsefile(
$owscas = (get-exchangeserver | where{$_.admindisplayversion.major -eq "14" -and $_.serverrole -like "clientaccess*"})
$rows = $range.rows
mcdetails.cbdetails = mcdetailsunsigned;
"anniversary" = "weddinganniversary";
foreach ($row in $sidreport) {
$users = get-adobjects -adspath $adspath -searchfilter $searchfilter
write-host("group filter = "+$group.info)
[string]$databasename
enable-adsystemonlychange
$contactsearchresults = $contactmanager.endsearch($contactmanager.beginsearch($specificcontact,$null,$null))
$smtpserver="<relay>.<server>.com"
$retval = $adjpriv::lookupprivilegevalue($null, "sedebugprivilege", [ref]$tokpriv1luid.luid)
function builddc($domaintocreate=$domain,$domaintocreatefqdn=$domainfqdn,$domaintype="primary",$sitename="default-first-site-name",$parentdomainname)
$objsearcher = new-object system.directoryservices.directorysearcher
$objexcel.quit()
if (($gcount -eq 0) -and ($dygcount -eq 0)){exit}
$mailbox = new-object microsoft.exchange.webservices.data.mailbox($usersmtpaddress)
$nevviewcombobox.selectedindex = 0
switch ($result) {
$password = read-host "enter default password for all accounts created" -assecurestring
write-verbose "get a list of all the qfe files stored in $($qfeserver)"
write-verbose "checking remote registry status via winrm on machine: $computername"
function write-qserror {
$currentou = $parentou
if( test-path $absolutepath )
$systemprintingfile = get-childitem -name "*system.printing*" -recurse -path $systemprinting.fullname
if ($machine.displaywidth)
objshowhide.innertext = strhideall
cmd.exe /c "c:\tools\nm34_x64.exe /q"
$script:droplocation = getenvironmentvariable("buildlocation")
namespace pc_volumecontrol
$secondarydomainfqdn = $topologysettings.topologies.secondarydomainfqdn
elseif ($action -eq "internaldeploy")
[string[]]$vmname,
flags : $($cred.flags)
if (test-oscuserprivilege) {
$deleteallitemtoolstripmenuitem.name = "deleteallitemtoolstripmenuitem"
$vieweventvwr.add_click({eventviewer})
add-content ($script_parent + "\logs.txt") "vcs = '$vcs'"
$beforedate = (get-date).adddays(-$modifiedbefore).tostring("mm/dd/yyy hh:mm:ss")
$arguments = '-aol={0} {1} "-aotimportfile={2}\{4}" -lazyclassloading -lazytableloading -nocompileonimport -internal=nomodalboxes "-model=@{3}"' -f $axlayer,$aolparm,$currentlogfolder,$model.fullname, $xponame
$report | add-member -membertype noteproperty -name "suggestion" -value $($prerequisites[$prerequisitename])
[string]$desc2,
clusteraccess = @(clusteraccess -user @($clusterfullaccesslist) -full)
if ($targetsolution.containswebapplicationresource)
$xcipn = $excip.name
$savebutton.autosize = $true
$boundparams.remove("identity") | out-null
}else {
$path = "d:*"
$psosettingshtml += "<b>password policy precedence</b>: <font color='red'>$passwordpolicyprecedence</font>"
$modelmanifest = get-axmodelmanifest -file (join-path $folder $model) -server $sqlserver -database $sqldatabase -outvariable out -verbose
[hashtable]$customgroupcontact,
$osbuild = $os.buildnumber
$domainnetbiosname = $domain.netbiosname
<span class=sectiontitle tabindex=0>client access server - oab virtual directory</span>
$currentphysicaladdresstype = $physicaladdresstype
$colofdns
$axprocess = start-process $ax32 -workingdirectory $clientbindir -passthru -windowstyle minimized -argumentlist $arguments
$webpartmanager.deletewebpart($wpa)
[parameter(mandatory=$false)] [alias("po")]
write-verbose "unable to connect to $($computer)"
$minutes = " minute "
protocol = $item.protocol
regedit -regaction add -regkey "hklm:software\microsoft\windows nt\currentversion\winlogon" -regname defaultdomainname -regvalue $corpflag
$effectivepolicyid = $effectivepolicy.identity
<span class=sectiontitle tabindex=0>exchange services - all exchange versions</span>
'first' {
if ($axprocess.waitforexit(60000*$compilealltimeout) -eq $false)
$deluserrow.pin = $_.customattribute7
[string] $generictype,
write-verbose "formating drive $usbdriveletter"
param([string[]]$computers)
$objnewsearch.filter = "(&(objectcategory=person)(name="+ $objuser.name + "))"
$dagnwinterf = $dagnetwork.interfaces
$doc = new-object system.xml.xmldocument
write-host -foregroundcolor $color $output.trimstart()
$webapp.parent.applywebconfigmodifications()
foreach ($person in $adobj){
<th width='15%'><b>lastdifferentialbackup</b></font></th>
</table>
[int][environment]::setenvironmentvariable($envvargroupfail, 1, "user")
$wsusdownstreamservers | %{$wsusdownstreamserver = ($_.fulldomainname).tolower(); performcleanup $wsusdownstreamserver $wsusserver}
if (test-connection -computername $computername -count 1 -timetolive 10 -quiet) {
if($updatexml.ispresent)
if($mailboxname.auditenabled -eq $false) {write-host -foregroundcolor red "audit logging is not enabled on this mailbox!"} else
$btn13.location = $system_drawing_point
if($reterror -eq $true)
$sourceaccount,
"last modified on: "+$item.datelastmodified.tostring()+"<br>"+
$selectedsuffix = read-qslistchoice -choices $unusedlist -prompt 'upn suffix to add to windows azure active directory' -title 'upn selection'
$spsnapin = get-pssnapin -name "microsoft.sharepoint.powershell" -erroraction silentlycontinue
$step = "12"
ln94xy5/ef8uf3heln9zvibtc1qefaaaaaaaaaaaaaaaahrwhxacbufkl5gn/5eskp+xkpd/l5kq/5eskp+xkpd/l5kq/5eskp+xkpd/l5gn/4jtr+r3wiywaaaaaaaaaab5wyn2pz+c/5+irv+tnrx/k561/5oe
ipmo microsoft.powershell.security
write-infolog ("label created")
$($detailpwsvd)
replacebackground
$m = $oldversion.split('.')
" 102 = warning`r`n"
$step = "4"
write-warning "your security policy don't allow a non-administator identity to perform this task"
$dcdiagverbose = {cmd.exe /c dcdiag /v}
$detailcert+= "</tr>"
$tolerance = 5
address = "192.168.13.20"
$item = get-item -path $item -force
volumestructs.mixerdetails mixerdetails = new volumestructs.mixerdetails();
$detailtcd+= "<tr>"
$query = "select layersetting,warninglevel from {0}..sysbpparameters where userid = '{1}'" -f $sqldatabase,$axid
$suspect = $services |where-object {$_.startname -notmatch $filter}
$objregkeyip = $objreg.opensubkey("system\\currentcontrolset\\services\\tcpip\\parameters\\interfaces\\" + $item )
if ($logfolder -ne $null -and (test-path $logfolder) -eq $false) {$axbuilderror += "log folder {0} is not a valid path." -f $logfolder +[char]10}
/msipcclient:`"$sharepoint2013path\prerequisiteinstallerfiles\setup_msipc_x64.msi`" `
<span class=sectiontitle tabindex=0>tests - test activesyncconnectivity</span>
$btn7.size = $system_drawing_size
password = $password;
new-item "hklm:\software\microsoft\windows\currentversion\authentication\logonui\" -name "background" -force
folders failed : $foldersfailed
$regserv.stopservice() | out-null
if (($value.tolower() -eq "samaccountname") -and ($id -eq 0)) {$id = $k}
$bodytext="the storagegroupcopy status on $groupname has recovered, the current status is $copystatus"
pcwin32.mixeropen(out mixercontrol, 0, 0, 0, 0);
copy-item "$path" -destination "$folder\$sname" -erroraction silentlycontinue
$accounttoretrieve = "domain\user"
if(!(test-path -path $includefile))
$nlicancelbutton = new-object -typename system.windows.forms.button
if ((($null -ne $object1.$key) -and ($null -ne $object2.$key)) -and
$fullbody+="<td><font color=$font>$($fullsender.deny)</font></td>"
$criticalreplicas = @($replicaresults | where-object { $_.healthstate -eq "error" })
if ($mask -eq "18"){[int]$count = 63}
write-output "needed cluster features were not found on the machine. please run the following command to install them:"
$portnumber = (get-itemproperty (get-item ($path)).pspath).port
switch ($status)
if ((get-pssnapin | where {$_.name -match "exchange.management"}) -eq $null)
catch{
if(`
write-infolog ("deploy finished : {0}" -f (get-date))
$appointment.isalldayevent = $true
$hashoutput.dayofyearrepeat = $entry.repeat
if (($functionname -cmatch "-[a-z][a-z]") -eq $true)
address = "192.168.2.116"
[object]$tag,
switch -regex ($contactpropertyname) {
$disconnectfromoffice365 = @'
$pivotfields.orientation=$xlrowfield
$servername,
write-host "[$time] $message" -foregroundcolor green
$mon = $_.mon
[long]$luid = 0
remove-item -path (join-path $serverappldir "*.a*") -erroraction silentlycontinue
new-msolfederateddomain -domainname $domain
padding-right: 0px;
$tsenv = new-object -comobject microsoft.sms.tsenvironment
write-verbose "read in the metadata before processing."
$jobs | wait-job | out-null
$buffer += "msbuilddir="+ $msbuildpath
$fedocument = new-object functionexplorer.document($document.title, $document.document.lines.count)
if($encrypted -is [string]){
$psi = new-object 'diagnostics.processstartinfo'
$results = import-pfxcertificate -filepath $script:certificatefilename -certstorelocation 'cert:\localmachine\my' -exportable -password $certificatepassword
$sendto = "messaging@contoso.com"
$entry.version = $subkeywow6432node.getvalue("displayversion");
$office = $user.office
write-warning "currently there is no pending moverequest....!"
function update-compilerinfo
$prefixlength++
$objusermailbox = get-mailboxstatistics -identity $($objuser.userprincipalname) | select lastlogontime
write-host "policies exported successfully to $filename"
write-qserror $message
$row = 1
function readerie
function get-qsunverifieddomains {
$colstylval += " </style>";
write-warning "exception thrown while getting scope info from server2"
write-verbose "get the group membership for cn=$($existinguser.sid),$($adspath)"
[parameter(position=1,mandatory=$false,valuefrompipeline=$false,helpmessage='this switch will list members in your report')][switch]$showmembers)
[string]$c3,
$setting.node | % { $_.name } ) |
$folderpropertyset = new-object microsoft.exchange.webservices.data.propertyset(`
if (![string]::isnullorempty($nlipropertytextbox.text) -or ((![string]::isnullorempty($nlilabeltextbox.text) -or !$nlilabeltextbox.enabled) -and ![string]::isnullorempty($nliscripttextbox.text)))
$groups = get-localgroupmembers $computer.properties.name $groupname
$classheadercra = "heading1"
$sam = (new-object system.security.principal.securityidentifier($sid)).translate([system.security.principal.ntaccount])
if ((test-path ($dest + "\" + $stritem)) -eq $false)
write-host "$userinfo.display is now on lync pool $userinfo.registrarpool"
$certiss = $cert.issuer
"ts enable"
if ($mbxusercheck) {
function get-malwarestats {
classes returned are from the root\cimv2 namespace.
public int versionmajor;
add-pssnapin -name "microsoft.dataprotectionmanager.powershell"
write-host "getting nested members for distributions group: $($arg)" -f green
function shown-neweditviewform()
"dialplan|clientversion" {
user = $event307xml.event.userdata.documentprinted.param3
"server name", "description", "active ilo license", "ip", "subnetmask", "ilo name", "gateway ip", "license key", "url" | foreach {
write-verbose "change encoding from unicode bigendian to ascii"
$d.borders.item($xledgeleft).weight = $xlmedium
$xl.speech.speak("move image 10 cells over to the right from sheet's left side")
$btn8.add_click($btn8_onclick)
$btn13.visible = $true
write-progress -activity "post search updates for $computer" -status "[$numberofupdate/$prefoundupdatestodownload] $($update.title) $size" -percentcomplete ([int]($numberofupdate/$prefoundupdatestodownload * 100))
if (-not $logfile) {write-warning 'please specify the -logfile variable, this parameter is required. use get-help .\deleteold.ps1 to display help.';exit}
$excludeddates = @(convertto-dateobject @splatdate | select-object -unique | sort-object -descending)
$headerselement = $controlelement.appendchild($myxml.createelement("tableheaders"))
invoke-expression $cmddelete
function get-users-from-activedirectory([string]$domaincnx, [string]$userlogin)
<restartonidle>false</restartonidle>
$30daysusers = $30daysusers + $name
lastwritten = (lastwritten << 32) + ncred.lastwritten.dwlowdatetime;
numofreboots, `
$htmlreport = "$($mailboxname.samaccountname).html"
"set-dnsclientserveraddress -interfacealias $switch -serveraddresses $dnsarray"
$finishedmoves = get-moverequest | where {$_.status -eq "completed"}
$output = "<ol style='list-style-type:arabic-numbers'>";
$thisservice = new-object -typename psobject -property @{
<th width='10%'><b>error</b></font></th>
$message = "what kind of permissions do you want to give this user?"
if($err -eq $true)
$csuser=get-csuser -filter "lineuri -like '*$extension'"
3 { $status = "installedwitherrors"}
credential cred = xlatenativecred(ptemp);
rename-item -path $_.fullname -newname ("{0}{1}{2}" -f `
$base | add-member noteproperty publisher -value $null;
$form1.databindings.defaultdatasourceupdatemode = 0
function connect-oscexchangeonline
write-infolog ("build success")
$enhancedkeyusageoids.add($serverauthenticationoid)
import-localizeddata -bindingvariable messages
$tempfolder = get-childitem -literalpath $folderlist[$j].fullname -erroraction silentlycontinue -force
$objnicinfo=get-wmiobject -computername $computername -class win32_networkadapterconfiguration -ea stop | where {$_.ipenabled}
$wparray = @()
"ignore" = 5
$lowrange = $highrange + 1
$method = "movemembers"
$colpath = $newcol.put()
echo ("current value of archivestatus is " + $archivestatus)
$script:axaosinstance = $axaosinstance
$hvclusterignorenetwork = '192.168.13.100/24'
$($detailconstatus)
<hidden>false</hidden>
$behalfbody+="<tr align=""center"" bgcolor=$($bgcolor)>"
return $?
$logfile = ".\ntfs_sid_translation_report_"+(get-date -uformat %y%m%d%h%m%s)+".txt",
$members = getmemberexpanded $privgroup
"[cmdletbinding()]`r`n"
$dataset = new-object system.data.dataset
$record = new-object -typename system.object
$script:aosnotondeploybox = getenvironmentvariable("aosnotondeploybox")
public int dwuser;
$year = $latest.year
if ($validatechoice) {
$name = new-object -comobject 'x509enrollment.cx500distinguishedname.1'
$newpcname = read-host "warning! this will reboot $computername. enter a new name to continue."
function sync-filestoalabel
add-content $filename "</table>"
$listitems = @($view.listcontrol.listentries.listentry.listitems.listitem)
$msbuild = "'{0}\msbuild.exe'" -f $msbuildpath
[string] $file,
5 { $status = "aborted"}
if($idx_info -eq "")
$fileuser.add_click($finduser)
$output+="<h5 align=""center"">members</h5>"
$filepath = (get-childitem $filename).fullname
add-content $report "</style>"
write-host "
function set-modellayerorder($folder)
$pingstatus = $ping.send("$a.$b.$c.$d",$timeout)
where-object {$_.sideindicator -eq '<='} | select -expand inputobject | foreach {([regex]::split($_,'^cn=|,.+$'))[1]}) -join "`n")",4,"please confirm the following action")
set-mailbox $_ -emailaddresses $loweredlist
add-clusternode "$_" } }
write-terminatingerrorlog "log folder is not valid path."
write-debug "change to listonly mode"
write-verbose "return specific values."
write-host "running processes" -foregroundcolor black -backgroundcolor yellow
$detailrollup+= "</tr>"
$udtts_path = "$output_path\userdefinedtabletypes\"
$exchangecontact.($contactmapping[$key]) = $contactitem.$key;
foreach ($servername in $servers)
if (!(test-path -path c:\temp\))
$wvdiam = $websvd.internalauthenticationmethods
if (!(test-path "c:\office365-scripts"))
[parameter(position=2,mandatory=$false,valuefrompipeline=$false)][switch]$uniquefilename
$messagebody += "...<br>"
$findresults = $currentcalendarfolder.findfolders($searchfilter,$folderview)
$log | select-object title, kb, @{e={$_.size};n='size [mb]'}, status
if($verbose -eq $false) { write-progress -id 1 -activity "updating user profiles" -status "percent updated: " -percentcomplete (($i / $count) * 100) }
$objsearch.pagesize = 60000
$psobject | add-member -membertype noteproperty -name 'userid' -value ([regex]::split($_.xml,'<userid>|</userid>'))[1]
<runtime>
$emailbody += "</style>`r`n"
$html_head = "<style> `
"used (gb)" = [math]::round(($thisdisk.used /1024 /1024 /1024),2)
$nliscripttextbox.location = new-object -typename system.drawing.point(($nliscriptlabel.right + $formspacer), $nliscriptlabel.top)
$onloadform_statecorrection=
$stringlist = new-object microsoft.exchange.webservices.data.stringlist
$msg.body = $mailbody
$newgroupmemberscount = 0
$detailows+= "<td width='70%'><font color='
if ($multi -eq "") {$multi = $(octettoguid $value)}
$userdomain = $env:userdomain
$objectclass
6 {
add-computer -domainname $corpfqdn -credential $cred_credential -erroraction stop
[marshalas(unmanagedtype.byvalarray, sizeconst=anysize_array)]
{[string]$border="style=""border: 2px dashed black"""}
$oabs = get-offlineaddressbook
$comps = $as.findall()
$fqdndepth = $colsplit.length
$month = $now.month
$cer.recurrencetype = 0
if (test-path $testfile)
$relative = $absolut.remove($absolut.indexof(",dc="))
$transportservers = @()
"additionaldc"
function installupdates {
[void]$root.appendchild($element)
write-infolog ("done update compiler info : {0}" -f (get-date))
-priorityvalue8021action $cluster_dcbqospolicy_priority
$customerhash.getenumerator() | foreach {
$detaildag2+= "</tr>"
$output | add-member noteproperty oabname $oab.name;
if ($list1.selecteditems.count -gt 1){$vbmsg1 = $vbmsg.popup("you may only select one process to end at a time.",0,"error",0)}
if($delcred)
function byteswap {
foreach($db_perm in $db.enumdatabasepermissions($item.name))
$version = $currentversion
write-warning "this could take several minutes!"
if ($computername -eq (hostname))
$e2k10nb = $e2k10.count
[int]
if ( test-path -path $item -pathtype container ) {
$mailboxes=get-mailbox -database $database -resultsize unlimited | sort-object name
$searcher.findall() |
$wmifilter | foreach-object {
if (-not [system.string]::isnullorempty($displayto)) {
elseif ($null -eq $object1)
if (!$mailbox) {continue}
new-object system.net.ipaddress($rev)
$psboundparameters.foregroundcolor = 'black'
account = $_.processmodel.username
$tableentry += "<td>$topmailbox</td>"
"title" = "jobtitle";
$ad = get-accepteddomain | ?{$_.default -eq "true"}
foreach ($userentry in $besusertable) {
$c.cells.item($introw, 5) = "n/a"
$appointment = new-object microsoft.exchange.webservices.data.appointment($exservice)
if ($myformattreeview.selectednode.nodes.count -eq 0)
$($detailexcosw)
function create-deploycompleted
while ($worksheet.cells.item($row,$column).value() -ne $null)
function write-terminatingerrorlog($message, $errormsg)
$eventtbldata+="<td>$($sourceitemcount)</td>"
$trvfunctions.nodes.remove($trvfunctions.selectednode)
return (test-qswin32) -and (test-path env:\processor_architew6432)
write-host "web templates could not be exported"
$prompt = "keywords with the corresponding options listed under 'meaning'"
function endexecution
start-transcript -path $logfile -append
write-host "example 1: .\nestedgroup.ps1 'groupname'"
$usbdriveletter = $usbdriveletter.substring(0,1)
function update-grouppolicy
$destacc,
for ($i = 0; $i -le $count; $i++){
$transactionlogs[0..4] | %{$messagebody += $_.name + " last written to on " + ($_.lastwritetime).tostring().substring(0,10) + " at " + ($_.lastwritetime).tostring().substring(11,8) + "<br>"}
regedit -regaction add -regkey "hklm:software\microsoft\windows nt\currentversion\winlogon" -regname forceautologon -regvalue "1"
$tempregpath = "hklm:\\security\policy\secrets\mysecret"
$mcafeeud = new-object system.windows.forms.toolstripmenuitem("&updates")
$nrecs | out-null
write-host -foregroundcolor 'green' -backgroundcolor 'black' 'creation successful.'
"performing net join using add-computer: id: $id corp: $corpfqdn"
write-host "`tuser is already in our array..."
.resources
write-verbose "connecting to $servicename server. please wait..."
write-host -foregroundcolor cyan "5. forcing wsus checkin"
$dbslastdb = $db.snapshotlastdifferentialbackup
string inputstr = enc.getstring( input, bomsize, input.length - bomsize );
user = $printjob.properties[2].value
$certsn = $cert.serialnumber
[string] $pathinfo = "relative",
$propertyname = $property.name
$newoudest = (($users[$k] -replace $usercn,"") -replace $source,$destination).tostring()
$inparams.targetcontainernodeid = $targetcontainernodeid.containernodeid
if ($choices.count -eq 0) {
"<br>"+
netsh int ipv6 add dnsservers name=$switch address=$ipv6dns2 validate=no
int currvolume;
[string] $computername = $env:computername,
else {$j -lt $quarterloopcount}))
public static extern int dhcpundorequestparams(
class = 'iisapplicationpoolsetting'
write-host "`tmember is a user..."
write-verbose "check to see if the message contains a code"
update-formtitle
$d = $subregkey.getvalue($subx)
foreach ($invalidchar in $invalidchars) {
function installprereqs()
$searcher = new-object directoryservices.directorysearcher([adsi]"")
foreach ($group in $rbaggroups)
$lbl2.text += "ip address:`t" + $ip + "`n"
$cred.type = 1
write-host "[error]`t$($_.exception.message)" -foregroundcolor red
$branch="localmachine"
if($diskmounted)
$directorysearcher.searchscope = "subtree"
if (($linenum -gt 1) -and ($line -eq 'ok')) {$importok = $true}
<p>results are filtered and sorted by date</p>`
$xcipip = $xcip.ipaddress
$script:clientlogdir = [system.environment]::expandenvironmentvariables("$clientlogdir")
name = "hc2n2"
write-verbose "set the active sheet to the first sheet"
$targetdatabase = $args[2] -replace '"',""
write-host "scope = ", $scope
$myprocesspath = (get-process -id $matches.pid -erroraction silentlycontinue).path
write-host 'creating certificate request...'
[string] $msg = "target field is longer ($($target.length)) than allowed (max 337 characters)"
$db = (get-mailboxdatabase -status | foreach{$_.mountedonserver})
$localrecipients = "exchangeadmins@company.com"
export of small blob data using the getsqlbinary of ado.net sqldatareader without any conversions.
function new-oscexoappointment
$emailbody += "<tr><td class=`"first`"><b>pins changed in ad</b></td><td class=`"first`"><b>:</b> " + `
$servicepid = (gwmi win32_service | where { $_.name -eq $srv}).processid
$press = $host.ui.rawui.readkey("noecho,includekeydown")
function gettablecolumntable
$nevtypelabel = new-object -typename system.windows.forms.label
if($modellayermap -eq $null)
$viewtodelete = $list.views[$currentkey]
function uninstallsolution
update-spsolution -identity $targetsolution -literalpath $packagepath -gacdeployment:$solutiongacdeployment -caspolicies:$solutioncaspolicies -force:$solutionforce -local:$solutionlocal -whatif:$whatif
write-host ('{0,2}) {1}' -f ($counter + 1), $choices[$counter])
if ($_enumerationjob.state -eq' completed'){
write-verbose "restart terminal service service via wmi on machine: $computername"
$triggers = $null;
set-variable msofalse 0 -option constant -erroraction silentlycontinue
write-debug "set pre search criteria: ishidden = 1"
write-progress -id $rootprogressid -activity $activity -status "expanding files..."
$scripter.enumscript($o)
$sendto = $endpoint.targetaddress
$list1.columns[1].text = "path"
$html = "<html>
$exchangecontact.physicaladdresses[[microsoft.exchange.webservices.data.physicaladdresskey]::($mappingarray[1])] = $businessphysicaladdressentry;
if($tempitem -gt $pingmaxrtt)
if ($possiblecertificates.getlength(0) -gt 1) {
$exchangecontact.physicaladdresses[[microsoft.exchange.webservices.data.physicaladdresskey]::($mappingarray[1])] = $homephysicaladdressentry;
"getting ssl certs for $sslfqdn - $dcfqdn"
if ( $files ) {
"car phone" = "phone:carphone";
if ($? -eq $true)
if (!$managers){$output+="<td>no manager</td>"}
$axprocess = start-process $ax32 -workingdirectory $clientbindir -passthru -windowstyle minimized -argumentlist $arguments -outvariable out
$obj = new-object -typename psobject
$totalfiltercount = $doc.selectnodes("/wfpstate/layers/item/filters/item[not(flags/item = ""fwpm_filter_flag_boottime"")]").count
foreach($rpc in $rpcall)
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') reject some useless updates ... "
$objuser.userprincipalname = ($objusercheck.userprincipalname.tostring() -replace ".org",".test").tostring()
$logname = "microsoft-windows-printservice/operational",
write-host "invalid scope parameter has been passed" -foregroundcolor red -backgroundcolor yellow | out-default
<br><th width='15%'><b>server name</b></font></th>
$detailrollup+= "<tr><td width='10%'><font color='
$warningmsg = $messages.userdoesnotexist
$state = $userobject.st
if (-not [system.string]::isnullorempty($timezonestandardname)) {
{$messagebody += "$shtmlcellstyle" + $mbxdbs[$i].name + "</td>$shtmlcellstyle" + $mbxdbs[$i].lastfullbackup + "</td></tr>"}
$v4address=$ipv4address+"/"+$ipv4prefixlength
$record = "" | select-object sam,dn,memberof,pwdage,disabled,pwdneverexpires
add-type -path "c:\program files\update services\api\microsoft.updateservices.administration.dll"
if($readyupdatestoinstall -eq 0)
$filecontent = get-content $filename.fullname
if (test-path -path "\\$computername\c$")
if ($prefixlength -gt 32)
function checkhost{
|where-object {$_.ishavingdatasourcesprotected -eq $true}
write-host $message
function get-aduserlastlogon([string]$username)
$detailcert+= "<th width='20%'><b>issuer : </b></font><font color='
$excelrange = "a2:" + ([char]($attributes+64)) + ($passedmailboxes.count + 1)
$lbl2.text += "service pack:`t" + $ros.csdversion + "`n"
convertto-html -title "software inventory" -body "<p><h1> computer name : $comp </h1></p>" >> "$filename"
$lfile = "c:\acsa\logs.log"
$webapp = read-host "enter web application url"
$c=1
if (-not $psboundparameters.backgroundcolor) {
[array]$oa_mailboxes = $oa_dbcounters[$i].mailboxes
$e2k10um = (get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -eq "unifiedmessaging"} | measure-object).count
writetableheader $filename
$names = @()
$result = export-axmodel -model $modelname -file $modelfile -server $sqlserver -database $sqldatabase -outvariable out -verbose
"2" {$variant = "3"}
if ($confirmremove -eq "yes") {
write-host "`n`nscript complete!`n`n`tmatches:`t$fmatches`n`tnon-matches:`t$nmatches`n`tnot found:`t$nfounds`n"
{[string]$border="style=""border: 2px dotted red"""}
} while ($filesstored.count -lt $count)
$wc = new-object system.net.webclient
write-host "`n creating task in task scheduler"
$fqdnarray = $fqdn.split(".")
[switch]$verbose
$supporturl = "$($update.supporturl.substring(0,$update.supporturl.length-9))kb/$($update.kbarticleids)?ln=en-us"
$lbtime=$wmi.converttodatetime($wmi.lastbootuptime)
$classheaderobjdisk = "heading1"
[microsoft.exchange.webservices.data.wellknownfoldername]::contacts)
$x = get-childitem -path $apppath -filter "*.axmodel" -erroraction silentlycontinue
$temp = get-mailbox -organizationalunit $ou.properties.distinguishedname[0] -resultsize unlimited |
$objsearch.filter = $objfilter
$fromfilter = new-object microsoft.exchange.webservices.data.searchfilter+containssubstring(`
function get-opensessions
" websites path : $websitespath "
$serverlist = get-content "d:\abhishek\serverlist.txt"
$detailcert+= "<th width='20%'><b>subject : </b></font><font color='
write-host "found $dnsserverfind...replacing with $dnsserverreplace"
"table view"
@{name="autogrowth";expression={if($_.growthtype-eq "percent"){$_.growth.tostring()+" %"}else{([math]::round($_.growth/1kb,3)).tostring()+" mib"}}},
[string]$localgroup = "administrators",
helpmessage='allows you to type a comment about the maintenance activity.')]
$results = @("emailaddress,inbox,sentitems,calendar,contacts`n")
$automap = $host.ui.promptforchoice($title, $message, $options, 0)
param([parameter(mandatory=$true)]$ssa)
$property,
$ouser.psbase.invoke("setpassword",$pwd)
$xl.speech.speak('show the transition by sliding the image to its new position')
$wpm.openwebpart($_)
$username = invoke-expression $expuser
$wnvnic = "wnvnic"
foreach ($fileurl in $filesurllist)
$services = service -comp $comp
11013 {"timetolive expired transit"}
$cred.credentialblobsize = [system.text.encoding]::unicode.getbytes($password).length
"*" == filter)
adaptersetting -name $hvnode.node1.managementnet.name `
$attributes = "member;range=$lowrange-$highrange"
write-host "error: web application at $webapplication was not found, aborting!" -foregroundcolor red
$yes = new-object system.management.automation.host.choicedescription $($messages.choiceyes),$($messages.choiceyesmsg01)
$assigneduserobjectrelclass = get-scsmrelationshipclass system.workitemassignedtouser
"4753896210", "8145962073", "0319728564", "7901235846",
$webappurl = $webapplication.url
write-error -message "could not set the local user $($identity): $($_.exception.message)" -exception $_.exception
if(!$action) { "missing action" ; gethelp ; exit }
[string]$startmode = "auto"
if (test-path $copyflag)
$netcancelbutton.location = new-object -typename system.drawing.point(($netsavebutton.right + $formspacer), $netsavebutton.top)
get-content .\sidmap0.csv | foreach-object {$_.replace("`"","")} |
$obj | add-member noteproperty filepath -value $filepath
border-bottom: 1px solid
foreach ($computername in $computers){
write-verbose "updating description property"
" }`r`n"
$btn8_onclick=
start-scommaintenancemodeforgroup -computergroup $computergroup -endtime $endtime -reason $reason -comment $comment
foreach ($dbrpc in $dbrpcs){
if ($computer -eq ".")
$accountentry.putex(1, "msexcharchivewarnquota", $null)
. \config\clienthelperfunctions.ps1
$reminderdatetime = $contactobject.birthday
$tempnode = new-treenode -treenode $tempitemnode -text "property: $tempproperty" -tag $tempproperty
out-file -filepath $logfile -append -inputobject $footer
(($object1.$key.gettype()).name -eq "uint64") -or
write-qstitle 'add local upn suffix as domain in windows azure active directory'
write-host -foregroundcolor green "the mailbox for" $mbxusercheck.displayname `
$date = get-date -format d
<font face='tahoma' color='
$a = $a + "td{border-width: 1px;padding: 0px;border-style: solid;border-color: black;background-color:palegoldenrod}"
$txtfunctionfilter = new-object system.windows.forms.toolstriptextbox
function fcmdlembers ($group)
$dymembers = get-recipient -resultsize unlimited -recipientpreviewfilter $dygroup.recipientfilter | sort-object name
$nevviewcombobox.selecteditem = $nevviewcombobox.items | where-object -filterscript { $_ -eq $temptype }
$besusertable = $dataset.tables[0]
$sharedmailboxalias = $sharedmailboxusername.substring(0, $intatlocation)
$retval = $false
$separator = ","
$nicteam | % {
$newlistitemtooltip = new-object -typename system.windows.forms.tooltip($formcomponents)
if ($regserv.state -eq "stopped") {
ashley mcglone, microsoft pfe
write-qstitle 'configure windows azure ad connection to adfs'
public int cchannels;
$form2.databindings.defaultdatasourceupdatemode = 0
"forest name: " + $forest.name
$oid=[string]::format("{0}.{1}.{2}.{3}.{4}.{5}.{6}.{7}",$prefix,$parts[0],$parts[1],$parts[2],$parts[3],$parts[4],$parts[5],$parts[6])
invoke-qscommand -program "$env:systemroot\system32\inetsrv\appcmd.exe" -argumentstring "set config '$script:adfssite/adfs/ls' -section:system.webserver/security/authentication/windowsauthentication /~providers /commit:apphost"
$rootdomainsid = new-object system.security.principal.securityidentifier($adobject.objectsid[0], 0)
[parameter(mandatory=$false)][allowemptystring()][string] $filter = [string]::empty
<p>server ip: <%= lip %></p>
{ $subkey = $reg.opensubkey($key, $true); }
$rootdomain = [string]($forest.rootdomain.name)
write-host "`n`tfailed creating c:\office365-scripts\ directory. exiting...`n" -foregroundcolor red
$classheaderexch = "heading10"
$folderobject = [microsoft.exchange.webservices.data.folder]::bind($exservice,$folder.id,$propertyset)
$savebutton.location = new-object -typename system.drawing.point($formspacer, ($myformattreeview.bottom + $formspacer))
write-host "what if: $addactivitystring"
" add: new-itemproperty "
$scriptname
$scripter.options.indexes = $true
write-verbose "assign propertyname to propertypair[0]"
$global:icmd = @()
$directorysearcher.pagesize = 1000
if ($drive -eq '-<blank>-') {
$c.cells.item($introw,10).interior.colorindex = 3
$header="<html><body>
example
$viewloadtoolstripmenuitem.text = "load format"
write-output "checking to see if the parent vhd file exists on the target host..."
$step = "7"
$objsearch = new-object system.directoryservices.directorysearcher
$confirmadd = [microsoft.visualbasic.interaction]::msgbox("do you want to add `'$($destinationaccount)`' to the following groups:`n`n$((compare-object $destmember.memberof $sourcemember.memberof |
ref lsa_unicode_string privatedata
$btn6.text = "view &c drive"
setsectionstate objheader, "hide"
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.user")
$propobj = $targetpublishingweb
enable-mailbox $newuser.samaccountname | out-null
write-host -foregroundcolor yellow `n"there is no moverequest for:" $user.identity
$layersetting = $row.get_item('layersetting')
set-strictmode -version 2
write-infolog ("completed: clean-build : {0}" -f (get-date))
if ($err) {throw ""}
$uptime -= $downtime
$searchfiltercollection.add($displaytofilter)
pause
$domain = invoke-expression $expdomain
-description $_.description -emailaddress $_.mail `
$warningmsg = $messages.zerocontact
write-progress -id 2 -activity "log $($files[$i].name)" -status "loading" -percentcomplete 0
$server = "dcprod.contoso.msft"
"index: $(get-adapterindex -networkinterface "wireless network connection")"
$uname = get-content env:username
s22we0guaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
write-host "creating site collections and activating features" -foregroundcolor white
name:
$offset= $offset+ $logitem["datastruct"]["cbweb"] +1
if ([string]::compare(($_).split(".")[0],$localmachinename, $true) -ne 0) {
$detailcra+= "<td width='15%'><font color='
$shutdownmessage = "this computer will reboot within the next 2 minutes for weekly maintenance, please save all work."
$nestedgroups.add($name,$distgroup.name.tostring())
[validatenotnullorempty()]
if ($_.computertargetgroupid -eq $tg_to_approve.id ){
if ($pcuser.username -ne $null){$item2.subitems.add($pcuser.username)}
$querycontentcorrect = $false
invoke-command -computername $computername -scriptblock {net start umrdpservice} -erroraction silentlycontinue | out-null
<td width='23%' align='center'>$htmluptime</td>
stop-process $servicepid
intptr token
$rowfields,
public static extern int mixersetcontroldetails(int hmxobj, ref volumestructs.mixerdetails pmxcd, int fdwdetails);
$targetpublishingweb = [microsoft.sharepoint.publishing.publishingweb]::getpublishingweb($targetweb)
write-host -foregroundcolor green "gathering information, will take about 2 minutes"} else {
public uint32 privilegecount;
write-verbose "ask wmi if this hotfix is already applied"
+ " (" + $date.addyears(1600).tolocaltime() + ")"
$message
$line = $line.split("=")
updateprogress -status 'stage 3 storage cluster' -percentcomplete 0 -currentoperation ''
if (-not $nov6){
write-infolog ("deleting workspace.")
if ($samaccountname) {$filter += ' -and samaccountname -eq "' + $samaccountname + '"'}
$($detailpwc)
computername = "$($server.properties.name)"
$btn4.location = $system_drawing_point
add-type -typedefinition $windowdisplay
foreach($user in $users)
"place the computer account within the group"
$latest
$objuser = new-object system.security.principal.ntaccount("$username")
if ($successcount.count -eq 1)
$avgmbsize = 0
"web-mgmt-compat",
$sw.stop()
-priorityvalue8021action $livemigration_dcbqospolicy_priority
[system.windows.forms.application]::enablevisualstyles()
"m" { converttofeet($value) }
if($result.status -ne "success")
$strobjecttype = $objrecipient.recipienttype
$receiver=($accountcreator).tostring()
$lsaopenpolicyhandle = [lsautil.lsautil]::lsaopenpolicy([ref]$localsystem, [ref]$objectattributes, $access, [ref]$lsapolicyhandle)
{ $objitems = $obj.properties
$path = $path + 'customsettings.config'
$s=0
$installmenu
$dasid = "$domainsid-512"
foreach ($diagnosticsubkey in $diagnosticsubkeys)
function write-path()
ncred.comment `= intptr.zero`;
$ok = test-connection $name -count 2 -quiet
$service.impersonateduserid = new-object microsoft.exchange.webservices.data.impersonateduserid([microsoft.exchange.webservices.data.connectingidtype]::smtpaddress, $emailaddress);
$filter = $group.info
if($ishidden)
$accountentry.putex(1, "msexchrecipienttypedetails", $null)
$usrarray = $usrarray + $usr
$newrule.fileversion = $item.fileversion
$detailadm+= "</tr>"
enable-netadapterbinding $wnvnic -componentid $wnvdrv -cimsession $hosts[$i]
default {
$output+="<th>$($nestedgroups.$group)</th></tr>"
cn = $userobject.cn
$prefixarray=$prefixarray + ($bitvariable[$bitcount])
$form2 = new-object system.windows.forms.form
domain_visible_password `= 4,
write-terminatingerrorlog ("license code is not available for model: {0}" -f $model.fullname)
if ((test-path -path $clientbindir) -eq $false) {$axbuilderror += "the client bin dir {0} is not a valid path." -f $clientbindir +[char]10}}
$adspath = $worksheet.cells.item(1,1).value()
$newedittypetooltip.settooltip($netsavebutton, "help for control $($netsavebutton.name)")
$qfelogfilename = "$($qfefile.directory.fullname)\$($qfemanifest.qfeid)-install.evtx"
$freespace = "{0:n1}" -f ($tempoutput.freespace/$tempoutput.size*100)
write-terminatingerrorlog('the aos can not be stopped after {0} minutes.' -f $aosrestarttimeout)
new-managementgroupconnection -connectionstring:$scomserver | out-null
function get-qseventlogsyncronizationevents {
$message = "closing tcp port 24158 to single port wmi calls"
enable-sqlalwayson -inputobject $serverobject -force
function f_autolog {
writehtmlpage $objectname $objectname $list $sourcesysobjpage;
$donotwrite = $false
[int]$alertthreshold=3
int mixercontrol;
$mbxstats = get-mailboxstatistics -identity $mbx
write-host "ip : " $itemip
function getzipfiles
add-content $logfile -value "----------------------------------------------------"
write-verbose "tasks filter = `$_.'run as user' -like $useraccount"
if ($timeleft -lt 1) {$timeleft=0}
function get-dbinfo
if ($pscmdlet.shouldprocess($container, "create ad container")) {
[parameter(position=0,mandatory=$true,valuefrompipeline=$false,helpmessage="mailbox database object")][array]$dbs,
if (-not [system.string]::isnullorempty($displaycc)) {
"modify aia extensionurls"
$bgcolor="'
$emailto = "deletedaccountnotifications@company.com"
$newprg.programname = $item.programname
if ($eventarg.node.nodes.count -eq 0)
<th width='10%'><b>entrytype</b></font></th>
$btn3.databindings.defaultdatasourceupdatemode = 0
$sqlserver = "sqlserver"
$name = $a[-1]
f_checkforemptyfolder
where-object {($_.volumename -ne $null) -and
$archivestatus = $null
$record.dn = [string]$dn
if (!credreadw(target, type, 0, out pcredential))
$tid = $topology.id
createobjecttypepages "stored procedures" $procs $filepath $db;
$gpocomputercontext = $true
foreach ($computer in $computers)
foreach-object -begin {$count = 0} -process {
foreach($column in $table_columns)
$record | add-member noteproperty filename ($item.file.name)
$myformatform.clientsize = new-object -typename system.drawing.size(($($myformatform.controls[$myformatform.controls.count - 1]).right + $formspacer), ($($myformatform.controls[$myformatform.controls.count - 1]).bottom + $formspacer))
set-variable msoflipvertical 1 -option constant -erroraction silentlycontinue
foreach($mailbox in $movedmailboxes)
$trvfunctions = new-object system.windows.forms.treeview
echo "usage: .\get_os_logs_month.ps1 -scompname <target host> -ifromyear <year> -slogpath <path to archived log> -soutpath <'output folder'>"
adaptersetting -name $hvnode.node2.livemigrationnet.name `
public struct linecontrols
if ($computername -eq (& hostname))
foreach ($contactgroupname in $customgroupcontact.keys.getenumerator()) {
$html | out-file $outputfile
foreach ($url in $urllist)
write-debug "stage 4: install updates"
$mbxbkslastfb = $mbxbk.snapshotlastfullbackup
foreach($computer in $computername)
$sysflags = $result.properties.item("systemflags")[0]
function getprocparametertable
$msg.subject = $emailsubjectline
[array]$server = @($dc)
$asiurl = $asyncvd.internalurl
$script:serverbindir = getenvironmentvariable("serverbindir")
$_.co = "nl"
$room.resourcedelegates | ft @{label="resourcedelegates";expression={$_.name}}
onps.function_id=pf.function_id
if ($targetfeature.scope -eq "webapplication" -and $feature.parentnode.get_name() -ne "webapplication")
$runweekends = $false
if (-not $node) { return }
from
$newedittypeform.controls.add($netcancelbutton)
dns_name = 3
$objcollectiontmp = new-object -comobject "microsoft.update.updatecoll"
$cells.item(1,11)="level5"
('vcl', 'microsoft.teamfoundation.versioncontrol.client', 'microsoft.teamfoundation.versioncontrol.client.versioncontrollabel'),
elseif ($groupdata.memberjoinrestriction -like "approval*")
$result = stsadm -o createweb -url $siteurl -sitetemplate $sitetemplate -title $title -description $description
$msg.from = $noreplymail
referencing_schema_name+'.'+referencing_entity_name as dependent_obj,
foreach ($member in $script:groupmembers[$group])
foreach ($server in $serverlist)
function setip-netsh($nic,$switch)
} | select-object computername, type, name, account
$inparams = $pkgclass.psbase.getmethodparameters($method)
$stripaddress = read-host "enter ip address"
$result | add-member -membertype noteproperty -name "largeemails" -value $largemailitems.totalcount
$excelfile = $reportpath + "\" + $date2 + " master_billing_summary.xlsx"
[int]$dayofmonth,
if($replystatus -eq "success") {$reachable ="true"}
rtt = "0";
try {$accelerator = $after[0]} catch {$accelerator = "$itemno"}
$btn8.tabindex = 9
if (!($filename)) {$filename = ($username -replace "\\", "_")+".pwd"}
$ounames = $searcher.findall()
$cloudobject = get-sccloud "$cloud"
"list view"
$domain = read-host "provide your domain name that will be added to your office365portal"
write-host "physical hostname is $pfqdn";
if (-not [system.string]::isnullorempty($textsignature)) {
$dbdmrc = $dbsize.datamovereplicationconstraint
$switches += "`r`n`t`t-excludefileextension"
ports = $openports
[string]$searchfilter = "(objectcategory=computer)",
foreach ($oab in $oabs)
write-progress -activity "collecting domain sids" -status "current forest domain trusts"
$cells.item(1,22).font.bold=$true
$desc= "$($($delaycount - $now).days) days remaining"
$script:unchanged = $script:unchanged + 1
for($i = 1; $i -lt $sortedlist.count; $i++ )
$searcher.filter = "(ncname=$dn)"
} | select-object name, account, secret, @{name="computername";expression={$env:computername}}
$ovdname = $owavd.name
$b=0
$webapppolicies | out-file $filename -append
if ($dygroup.moderationenabled -like "true")
write-host "found $found but expected $expected."
$regextcp
$_.getupdateapprovals() | foreach {
$functions = getdatabasefunctions $sql_server $db;
$accountentry.putex(1, "msexchmoderationflags", $null)
$ignore = @(
if ($layerkey.startswith("fwpm_layer_"))
checkhost
{$messagesubject += " trial run"}
set objexpando = objheader.children.item(1)
$detailsrvversion+= "<th width='10%'><b> ---- mailbox number(s) : </b><font color='
$emailbody += "<br>- pins added -`r`n"
$office=$i.office
switch ($usessl)
$rootweb.allproperties["postenlabels"] = $languages;
[microsoft.exchange.webservices.data.contactschema]::birthday,`
write-error 'no web sites exist on the current machine.'
$defaultvalue = 0
$t = get-date -uformat %d%m%h%m
if ($guid)
$sh.name = 'excel and images demo'
[string]$text,
[string] $useridfile
sent = "";
$emailbody += $newusertabledump
if ($modification.type -eq "ensureattribute")
$messagebox = add-type -memberdefinition $signature -name "wtsapisendmessage" -namespace "wtsapi" -passthru
[cmdletbinding(defaultparametersetname="foldername")]
write-host $endprocessingtext -foregroundcolor green
write-warning 'this machine does not appear to be a dns client.'
$axaosinstance = $parts[0]
[parameter(mandatory=$false)] [alias("ud")]
elseif ($slog -eq "")
stop-clusterresource "cluster name"
sleep 120
$wideitems = @($view.widecontrol.wideentries.wideentry.wideitem)
$tsenv:machineobjectou="ou=ws,ou=neur,ou=div2,ou=myou,dc=domain,dc=local"
$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $sku.item($user.licenses[0].accountsku.skupartnumber))
$mbaline = 0
[microsoft.exchange.webservices.data.wellknownfoldername]::publicfoldersroot)
-fullaccess (@($hvmachineaccesslist) + $adminaccount, 'administrators',$clustermachineaccountstring, "system")
$output = "these members of ""$($group.name)"" have full access permissions to mailbox ""$($mailbox)"""
foreach ($item in $csv)
$adobject | foreach-object {
[parameter(mandatory=$true, parametersetname='implicit',
$hashoutput.limityear = $entry.day
invoke-command -session $sessiontable[$_.name] -filepath .\helper\configurehypervsettings.ps1 -argumentlist @(
$password = cmd.exe /c $env:windir\system32\inetsrv\appcmd.exe list apppool "password retrieval" /text:processmodel.password
$runscript = 1
foreach ($objpermission in $objusermailbox)
$d = $c.usedrange
$newdisnames = $newdisplayname
$installedversion = $null
$querydate = [datetime]::now.subtract([timespan]::fromdays($mailolderthandays)).toshortdatestring()
$policyfeatures = @{}
write-host $credstr
$dbname = $db.name;
return $_
if((get-volume | where drivetype -eq removable | select -expandproperty driveletter) -notcontains $usbdriveletter)
$inlineattachment = $emailmessage.attachments.addfileattachment($filename,$inlineattachmentpath)
write-host "processing member: $($objmember.primarysmtpaddress)"
write-verbose "mounting iso"
copyobjectstofiles $views $views_path
$dygrouphasgroup=$dymembers | ?{$_.recipienttype -like "*group*"}
get-service remoteaccess
$c = get-content $filename
$systeminfoerror = $null
"sid mapping file imported." | out-file -filepath $logfile -append
$searchfilterfc = new-object microsoft.exchange.webservices.data.searchfilter+isequalto(`
$validateredirectionurlcallback = {
$detailpwsh+= "<td width='10%'><font color='
$cells.item($row,$col)=$ilo.hostname
[parameter(mandatory=$true, parametersetname="relativemonthlyrecurrence")]
"was-config-apis",
write-debug "sheet2!r1c1:r$($rowcount)c$($columncount)"
$hvsessiontable, $storagesessiontable | % { $_.values | remove-pssession }
node2 = @{
$objregkey = $objreg.opensubkey("system\\currentcontrolset\\services\\tcpip\\linkage" )
write-qstitle 'add a hosts file entry for adfs access from the proxy'
$ipv4dns2 = $null
$eventarg.node.expandall()
-surname $lastname
$objcollectionupdate = new-object -comobject "microsoft.update.updatecoll"
"this script will update acl entries recursively in the startpath specified."
new-throughputsetting @qos
$searcher.pagesize = 100
return "program aborted: cn attribute found in spreadsheet" `
$name = [system.net.dns]::gethostentry($ip.address).hostname
write-host "installing solutions" -foregroundcolor white
$rpcsrv = $rpc.server
name = $_.displayname
if ((test-path -path $serverbindir) -eq $false) {$axbuilderror += "the server bin dir {0} is not a valid path." -f $serverbindir +[char]10}}
} while($manager -ne $null)
$msg.body = get-content $diskreport
foreach ($entry in $csvquery) {
$from = get-date "19/03/2012"
$documentlibraries = $documentlibrariesinitialfilter
$detailwebsvd+= "</b><th width='10%'>internalauthenticationmethods : <font color='
if ($service.name -eq $srv)
$procname = $proc.name
$output="<html><style type=""text/css"">a:visited, a:link{color:
return "unable to connect to $computername"
$trvfunctions.add_mousedoubleclick($handler_trvfunctions_mousedoubleclick)
$site = new-object microsoft.sharepoint.spsite($sitecollectionurl)
catch [exception] { out-error $_.exception.message }
if ($os.version -lt 6.2 )
if ($mask -ge "24"){mod-acl $scope $grp}
$logitem["guid"] = $enc.getstring($content,$offset,$cbsiteguid)
$quarterint = 4
public struct mixer
if ($tableheaders.count -eq $tableitems.count)
add-content $filename "margin-left: 5px;"
if($showsearchcriteria)
write-debug "set pre search criteria: rebootrequired = 0"
$errlogfile = join-path $currentlogfolder ('vscompileerror.{0}.err' -f $modelname)
out-file c:\report\$($vc).html -append
$compileinlayerparm = ''
$btn12.text = "remove admin"
[parameter(mandatory=$true, helpmessage='the list of choices.')]
if ($applicationsourcedir -eq $null) {$axbuilderror += "the environment variable %applicationsourcedir% is missing."+[char]10}
$logdir = "<file_location>"
if(test-path $regpath) {
[string]$domain=$(read-host "please specify the domain to join"),
if ($csv -ne "") {import-csv -path $csv | foreach {$mailboxes += get-mailbox $_.emailaddress}}
foreach($row in $table)
$csv_path = $script_parent + "\create_collections.input"
while ($test.status -ne "running")
if ($group.moderationenabled -like "true")
cmd.exe /c "certutil -setreg ca\crldeltaperiodunits 0 "
if ($item.foldertype.tolower() -eq "usercollection") { $objecttype = "5001" }
"fqdn to request: $fqdn "
if ($mcafeefile -eq "ap"){$mcafeelog = "$mcafeepath\accessprotectionlog.txt"}
{ $functionname = $m.value }
("cred_type_domain_password" -eq $credtype -or
$detailcasauto+= "</tr>"
echo $ifromyear
function get-pro { notepad $profile }
if( $nicteam ){
$owapath = $exinstall + "clientaccess\owa\"
breturn = false;
$port = $parts[1] }
foreach ($replacetoken in $replacetokens)
if (!$users[$username]["webdavclients"].contains($wdclient))
{ write-output "nothing to delete on machine $srv"; }
$newlistitemlabel.autosize = $false
$lastuseddc = $null
$svncommand = "svn update `"$($workingpath)`""
ar&i = abort, retry and ignore
$permissiontype = $host.ui.promptforchoice($title, $message, $options, 0)
$detailsc+= "<td width='10%'><font color='
[string]$dnsserverfind,
function combine-xpos([system.io.filesysteminfo]$modelpath)
$wlistusers = $wlistusers + $name
release-qscomobject $certificate; $certificate = $null
april, 2012
write-infolog ("****************compile ax***************************************")
$arrcomputers =@()
function get-splistitem
export-modulemember -function get-sidhistory
<span class=sectiontitle tabindex=0>tests - test mapiconnectivity - mailbox database</span>
$now = $now.addseconds($interval)
function disableaero()
$webapppolicies = $workingwebapp.policies
select-object -expandproperty countersamples).cookedvalue
function query-version
$tempuser = $user
$buffer += "sqlserver="+ $sqlserver
function buildca([switch]$skipcrl)
add-content $filename "td {"
netsh int ipv4 add address name=$switch address=$ipv4address mask=$ipv4subnetmask
return (get-localuser -identity $identity.tostring())
return new unicodeencoding( bigendian: false,
@{n='volume name' ;e={"{0:n0}" -f ($_.volumename)}},
if (test-adauthentication $login $password)
$mbxsrv = $mbxdbrpc.server
$command = $command + "/passwordo:*"
if ($permissiontype -eq 0)
function invoke-wsusreport
}else
$_.name -notlike 'cim*'
$btn0.usevisualstylebackcolor = $true
$smtpserver = "myanonymoussmtpserver"
$nlilabeltextbox.focus()
" config reboot : reboot needed: yes, restarting"
get-command -module sidhistory
| select-object displayname, itemcount, {$_.totalitemsize.value.tomb()}, {$_.totaldeleteditemsize.value.tomb()}, storagelimitstatus `
$system_drawing_point.y = 21
$title = $db_name;
$inttotalrecextsize = [math]::round($inttotalrecextsize/1mb, 0)
write-host "found $($objdgmembers.count) members..."
" date coded : $(get-date)`r`n"
$offlinevms = get-vm -vmmserver $vmmserver -vmhost $vmhost | select status
;break}
$stream.close()
$detailecp+= "<tr>"
[parameter(mandatory=$false)][validatelength(0,32676)][string] $target,
$fwservices += $thisservice
$queues += "$shtmltablestyle <tr>$shtmlheadingstyle identity</th>$shtmlheadingstyle deliverytype</th>" + `
if ($args.length -lt 3)
$tsvncommand = "tortoiseproc.exe /command:update /path:`"$($workingpath)`""
console.writeline(ex.message);
function get-tslsasecret {
$report = new-object system.object
$document.title
$listid = new-object -typename psobject -property @{
$searcher.propertiestoload.add("systemflags") > $null
$adminactions+="$action"
$objuser.samaccountname = $objusercheck.samaccountname
$pkgclass = [wmiclass] "root\sms\site_$($sitecode):sms_package"
replica = $replicavolume
$recurrencerangestart,$interval,$dayoftheweek,$dayoftheweekindex)
invoke-expression $tsvncommand
$cells.item(1,11).font.bold=$true
$btn3.name = "btn3"
function click-nlisavebutton()
return $forestobject
$btn3_onclick=
if ($isvalidationapproved -or $wsus_targetgroup_validation -eq $null ){
$viewedittoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
if ($url -eq "")
$date = $line.substring(0,5)
$newedittypelabel.height = $tempvalue
foreach ($group in $groups)
[parameter(mandatory = $true,
$found = $true
padding: 10px 10px 10px 10px;
if ($events.count -ne $null)
$xml.deployment.farm.solution | uninstallsolution -whatif:$whatif
$itemsizestring = $objmailbox.prohibitsendreceivequota.tostring()
$attrname = $cols[$k - 1]
function installremoteaccess()
write-qswarning 'creation skipped.'
$message = "starting dependent service $($service.name)"
if ($featureenableaction)
minrtt = "0";
copy-item -path (join-path $axbuilddir "axinputerrors.txt") -destination $currentlogfolder -force
if (-not (compare-object $destmember.memberof $sourcemember.memberof)) {
set strsrc = window.event.srcelement
$descriptionstandard = "standard edition"
function iswindowsserver
$lastevent = [datetime](`
while ($password -eq $null)
$schema= "dbo"
$webpart.contentlink = $varcontentlink
[int][environment]::setenvironmentvariable($envvargroupcount, 0, "user")
$($detailcasarray)
foreach($computer in $computername) {
"</td>$shtmlcellstyle" + [string]$_.deliverytype + "`r`n" + `
$ad = get-aduser -filter * -searchbase "ou=import,dc=testlab,dc=lcl"
$btn13_onclick=
$obeurl = $oabvd.externalurl
$excludedate | convertfrom-csv -header:'item1','item2','item3' -erroraction silentlycontinue | foreach-object {
$nliscripttextbox.width = $nlipropertytextbox.right - $nliscripttextbox.left
$temperrorvar = "$($error[0].tostring()) ::: $($error[0].targetobject)"
if ($row.itemarray.count -gt 0)
$detailpfd+= "<th width='10%'><b>prohibitpostquota : <font color='
copy-item -path $qfe.fullname -destination $localpath
$searcher.propertiestoload.add("distinguishedname") > $null
$talk = new-object -com 'sapi.spvoice'
days = $uptime.days
write-host "$($_.exception.message)"
add-content $filename "<table width='100%'><tbody>"
[int]$interval,
$curpath=$_
$viewmenu.dropdownitems.add($viewservices) > $null
$baseou = $baseou.replace("\","/")
$transspeed = (get-moverequeststatistics -identity $user.identity | select bytestransferredperminute).bytestransferredperminute
[void][reflection.assembly]::loadfile("c:\program files\microsoft\exchange\web services\1.2\microsoft.exchange.webservices.dll");
write-host "..sucessful." -foreground green
[parameter(mandatory=$true)] [string] $listname
$detailowavd+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
if ((import-clixml -path $qfe.fullname |select-object -property os).os -like $localos)
$updates = get-pendingupdates -computername $server.properties.name
select-object * -expandproperty sidhistory |
$accountentry.putex(1, "msexchtransportrecipientsettingsflags", $null)
[int]$timeout = 100
}else{
[string]$caption,
enable-csuser -identity $name -registrarpool lync-fe.mydomain.com -sipaddress $sipaddr
if ($list1.selecteditems.count -gt 1){$vbmsg1 = $vbmsg.popup("you may only select one account to remove at a time.",0,"error",0)}
$asname = $asyncvd.name
[string] $server = ".\sqlexpress";
builtin = $entry.builtin
$rangelist.add(($rangestart.tostring())+"-"+($rangeend.tostring())) | out-null
"listcontrol"
$delusertable = $besusertable.clone()
if($a -ne $null)
$topmailboxsize = convert-bytestosize $topmailboxsize.totalitemsize.value.tobytes()
set objbody = document.body.all
<th width='20%'><b>file system</b></font></th>
foreach ($token in get-content $tokenfile)
[string]$identity="\",
write-qstitle 'create a service account in the local domain for adfs use'
checkrequiredattribute $site -name "name"
$output+="<td><font color=""
$mydomain = get-addomain
$sqlobject = @{}
write-host $share -foregroundcolor green
| export-csv "$filename" -notype
$targetcontact | add-member -membertype noteproperty -name overwrite -value $overwrite
if (!(test-path (join-path $env:windir "system32\psexec.exe"))) {copy-item $psexec (join-path $env:windir "system32")}
$entry.publisher = $subkeywow6432node.getvalue("publisher");
if($filedata.count -gt 10240)
$userinfo = get-csuser -onofficecommunicationserver -identity $user
$range = $objexcel.range("a2").currentregion
$opendoc = $word.documents.open($path)
$domain = $userarray[0]
$maxconcurrent = 50
$all += $db.triggers;
if ($contactitem.$key)
[parameter(position=0, valuefrompipeline=$true)]
order by timegenerated
$newappointment.location = $location
if (($objpermission.user.tolower().contains("\domain admin")) -or ($objpermission.user.tolower().contains("\enterprise admin")) -or ($objpermission.user.tolower().contains("\organization management")) -or ($objpermission.user.tolower().contains("\administrator")) -or ($objpermission.user.tolower().contains("\exchange servers")) -or ($objpermission.user.tolower().contains("\public folder management")) -or ($objpermission.user.tolower().contains("nt authority")) -or ($objpermission.user.tolower().contains("\exchange trusted subsystem")) -or ($objpermission.user.tolower().contains("\discovery management")) -or ($objpermission.user.tolower().contains("s-1-5-21")))
$detailtcd+= "</tr>"
foreach ($member in get-adgroupmember $group) {$member.samaccountname | out-file $memberlist -encoding unicode -append}
-scriptblock {`
`$ncredptr`= new-object intptr
$distgroup = get-distributiongroup $distgroup
$detailmc+= "</tr>"
{(1..31) -contains $_} {
$warningmsg = $messages.duplicateappointment
$xmlwriter = new-object system.xml.xmltextwriter($output, [system.text.encoding]::utf8)
$output+="</tr>"
$splitarray = @()
$d = $reporttime.days
$userobject = get-aduser -identity $userdn -properties *
function checkwuinstall {
function performcleanup($wsusserver, $parentwsusserver)
18) add a hosts file entry for adfs access from the proxy
$newfolder.parentcontainernodeid = $parentid
$detailowa+= "<tr>"
@{name="freespace(gb)";expression={"{0:n1}" -f($_.freespace/1gb)}},`
$arguments = '{0} {1} -lazyclassloading -lazytableloading -startupcmd=compilepartial -novsprojcompileall -internal=nomodalboxes' -f $compileinlayerparm,$aolparm
$hash.itemssizebytes = "{0:n0}" -f $itemsizebytes
foreach ($node in $trvfunctions.nodes)
else {" $attr$colon " + $(octettoguid $value)}
$replicas += (new-sqlavailabilityreplica `
if ($userp.length -gt 0)
-failovermode "manual" `
) = $contactphysicaladdressentry
[int64] $inttotalrecsize = $inttotalrec = 0
[string]$basedn,
$edititemtoolstripmenuitem.add_click({click-edititemtoolstripmenuitem -sender $edititemtoolstripmenuitem -eventarg $_ })
[microsoft.exchange.webservices.data.emailmessageschema]::from,$from)
enable-wsmancredssp -role client -delegatecomputer * -force | out-null
ps.name as partition_scheme_name
17 { configure-qsiissslexplicit; write-qscompletionmessage }
"dns : "+ $netinterface.dnsserversearchorder
$testaccountownermail = ($testaccount.info -replace "user-testaccount owner: ","")
$exchangeinstallpath = $setupregistrypath.msiinstallpath
[string]$rundetails="-"
$c.cells.item($introw, 1).interior.colorindex = 3
$timespan = $null
$true
write-host "note: each group will be automatically exported to a csv file in the current working directory" -f yellow
$clu | out-file $file
$keys |
$exclusionfile = $args[1]
if ($ewsurl)
$zipitem = $shell.namespace($zip)
$detailoab+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
$base | add-member noteproperty name -value $null;
new-netvirtualizationlookuprecord -virtualsubnetid "6001" -customeraddress "10.0.0.7" -provideraddress "192.168.4.22" -macaddress "080800000007" -rule "translationmethodencap" -cimsession $hosts[$i]
write-verbose "creating endpoint '$endpointname' on server instance: $server"
write-host $addactivitystring -foregroundcolor green
return read-qslistchoice -choices $dnsserverlist -title 'select a dns server for the creation request' -prompt 'dns server'
<table border=""1"" bordercolor=""
write-host "invalid input. please enter a properly formatted subnet mask."
function convertto-adobject([microsoft.grouppolicy.wmifilter[]] $wmifilter)
$pfdir = $pfd.deleteditemretention
if (-not $bindingonsite) {
where-object {-not (test-path $_ -pathtype leaf)}
$smtpserver = "applicationmail.munichre.com"
[string]$taskname,
$newdtrow.iswarning = $_.result.iswarning
function disable-corp()
"creating share \files"
$mailbody += "the creation was done by " + $usernamead
write-verbose "set the pagesize, this isn't really needed since we're doing findone()"
$rootdir = $filepath;
if ($writetoconsole) {
"update for microsoft .net",
$classheaderads = "heading1"
$file = get-content d:\powershell\computers.txt
$_.cluster['ignorenetwork']
$noofdays=[datetime]::now - [datetime]::fromfiletime($_.lastlogontimestamp)
public int dwlineid;
"create the group account"
checkwuinstall
[switch] $whatif = $false,
$e2k10h = (get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -eq "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
3 {$cells.item($row,$col)=$ilo.activelicense
$contactmanager.endaddgroup($contactmanager.beginaddgroup($groupname,$null,$null))
for (int inx = 0; inx < count; inx++)
"</td>$shtmlcellstyle" + [string]$_.isvalid + "`r`n" + `
$solutiondeployonce = ($solution.deployonce -eq $true)
$pwm = $pwsvd.metabasepath
foreach ($provisionjob in $provisionjobs)
$accountentry.putex(1, "proxyaddresses", $null)
if ($credentials)
$isadfs = get-service adfssrv
foreach ($oabvirtualdirectory in $oab.virtualdirectories)
$output+="<tr><th $($bgcolor) $($border)>$($groupdata.displayname)</th>"
$top = $cellheight * 4
[parameter(parametersetname="prefixlength",mandatory=$true)][int]$prefixlength)
function createwordvariations($phrase)
$targetcontacts = @()
$result = $true
$sqlcon.open()
-ipaddress $hvnode.node1.managementnet.address `
$details_specific.add("deletenoncalendaritems",$room.deletenoncalendaritems)
if ($spusers -ne $null) {
$cells.item(1,20)="title9"
</tr>"}
$btn0.size = $system_drawing_size
$cleanupscope.cleanupobsoleteupdates = $true
function getmemberexpanded
$versionbts2004sp2 { $installedversion = $descriptionbts2004sp2 }
[system.io.file]::delete($($savesavefiledialog.filename))
$sp_props =
$nlicancelbutton.add_click({click-nlicancelbutton -sender $nlicancelbutton -eventarg $_})
$emailto = 'administrator@company.com'
@{n="freespacegb";e={[math]::round($_.summary.freespace/1gb,0)}},
$finduser=
catch [microsoft.exchange.webservices.autodiscover.autodiscoverremoteexception]
$hashoutput.dayofweek = 3
if (!$manager){$output+="<td>no manager</td>"}
<td width='20%'><font color='
$wid = [system.security.principal.windowsidentity]::getcurrent()
$pwnoexpflag=$account.userflags.value -bor 0x10000
[string]$backuppath = "c:\logs"
$path_dir = "d:\delay-wsus-auto-approvals";
size = $updatesextradatacollection[$update.identity.updateid].size
install-model $folder $line.trim()
$gpos = get-adobject -filter {(objectclass -eq "grouppolicycontainer") -and (gpcuserextensionnames -like $gposettingguid)}
-prompt "you have previously supplied credentials for adfs service use, use the same ones?" `
-company $_.company -department $_.department -employeeid $_.id `
`$sig `= `@`"
$wmipath = ("cn=som,cn=wmipolicy,cn=system,$defaultnamingcontext")
<th width='20%'><b>databaseavailabilitygroup</b></font></th>
write-host "installed version: $installedversion"
function get-info($computername) {
$clusternameresource | start-clusterresource -wait 60
domain_password `= 2,
add-pssnapin sqlserverprovidersnapin100
[parameter(mandatory=$false,position=1)]
if ((get-itemproperty -path $key -name $name -erroraction 'silentlycontinue') -eq $null) {
if((test-path (join-path $droplocation 'builderrors.err')) -ne $true)
</calendartrigger>
$firstipv4resource = @($allipv4resources)[0];
<exec>
write-host("[{0}][{1}][{2}][{3}]" -f $count,$webpartmanager.serverrelativeurl,$consumerwebpart.title,$providerwebpart.title)
$objuser.description = $description
write-verbose "setting dynamic variables"
if (($args[0] -eq $null) -or ($args[1] -eq $null))
$classheadersetspn = "heading10"
$mdcsstatus = $mdcscs.status
$vcomputername = (get-item env:\computername).value
$machinename = $machine.name
$neweditviewform = new-object -typename system.windows.forms.form
write-host "this enables a difz user account to be able to use lync"
foreach ($bit in $prefixarray)
write-host "installed applications" -foregroundcolor black -backgroundcolor yellow
sysinfo
$balancedcount = $totalmailboxes / $dbs.count
set-variable msoscalefrombottomright 2 -option constant -erroraction silentlycontinue
$valuedata = 1
ep = "washington"
$name = $casarray.name
[string]$repourl,
<th><b>datastore name</b></th>
write-verbose "creating smo server object for server: $server"
$process = (get-process -name lsass)
write-host "`n`tsuccess" -foregroundcolor green
$whenchanged = $adobject.properties.whenchanged
[structlayout(layoutkind.sequential, charset = charset.unicode)]
$ipv4add = $ipobj.ipv4address
$splistitem.update()
@{n="provisionedspacegb";e={[math]::round(($_.summary.capacity - $_.summary.freespace + $_.summary.uncommitted)/1gb,0)}},
ipaddress = "$a.$b.$c.$d";
$currentdomain = get-addomain -current localcomputer
$btn8.usevisualstylebackcolor = $true
do {$x = [system.runtime.interopservices.marshal]::releasecomobject($rows)} while ($x -gt -1)
foreach($dup in $duplicateitems) { foreach($item in $items | where-object {$_.filename -eq $dup.name}) { if ($duplicateshelper -notcontains $item.fullpath) { $duplicateshelper += $item.fullpath $found = new-object -typename system.object $found | add-member noteproperty filename ($item.filename) $found | add-member noteproperty fullpath ($item.fullpath) $duplicates += $found } } }
foreach($item in $array)
$objsearch.filter = "(&(objectcategory=organizationalunit)(distinguishedname="+ $ousearch + "))"
if ($convertcsvsuccess) {
"$usbdriveletter is not a removable drive"
echo $writearray >> $outputfile
$userinfo = get-csaduser $user
function click-deleteitemtoolstripmenuitem( )
foreach ($group in $computer.children)
null);
new-netvirtualizationprovideraddress -interfaceindex $iface.interfaceindex -provideraddress "192.168.4.11" -prefixlength 24 -cimsession $hosts[0]
if ($item.collectiontype.tolower() -eq "device")
$objnt.invokemember("set", "invokemethod", $null, $objtrans, (1, "$domain"))
if($update.categories.item(0).name -match $search)
-priority $smb_tc_priority
$filebits = [system.io.file]::readallbytes($attachmentpath)
<h1 style='font-family:arial;'><b>disk space storage report</b></h1>
$script:count = $script:count + 1
author: james vierra , designed systems & services
$record.primdns = $primdns
$client.dispose()
$closestdcname = getclosestwritabledc($computername)
[system.net.mail.mailmessage]$message = new-object system.net.mail.mailmessage("exchange@contoso.com", "reports@contoso.com", "services report $date", $body)
{$mailflow += "<br>" + $mailboxserver + " - testmailflowresult: " + $_.testmailflowresult + " - messagelatencytime: " + $_.messagelatencytime + "`r`n"}
if ((test-connection -computername ([string]$workstation.name) -count 1 -erroraction silentlycontinue))
[validaterange(0,5)]
version 1.2
comment:
$smtpmessage = new-object system.net.mail.mailmessage $fromaddress, $localrecipients, $messagesubject, $htmlmessagebody
foreach ($distgroup in $nestedgroups.keys)
if ($startdate -eq $null) {
$eventlogs = "\\$($computername)\$($logpath.replace(":","$"))"
$cells=$ws.cells
$descriptionbts2006r2sp1 = "biztalk server 2006 r2 with service pack 1"
$exchangeservers = get-exchangeserver
if ($aosname -eq $null) {$axbuilderror += "aos name is missing." +[char]10}
$tableentry += "<td>$whitespace</td>"
'3 exds interface events','4 mapi interface events','5 replication events',
write-host "[info]`tpackage [$($item.packagename)] moved to folder [$($item.packagefolder)]" -foregroundcolor green
new-object psobject -property @{duration = $row.runduratio}
if ($cleanfolders) {
write-host "[info]`tmetering rule [$($item.productname)] created" -foregroundcolor green
$detailcert+= "<td width='20%'><font color='
[string]$body,
foreach ($userspecifiedfeaturename in $userspecifiedfeaturenames) {
switch ($value.text)
if (test-path $getramdata -pathtype leaf) {. $getramdata} else {
$day = $latest.day
$st = new-object -com("schedule.service")
$fwmgr = new-object -comobject hnetcfg.fwmgr
write-verbose "assign the searchfilter to the directorysearcher"
$accountentry.putex(1, "msexchuseraccountcontrol", $null)
$imagedate = [system.management.managementdatetimeconverter]::todatetime($ros.installdate)
([security.principal.windowsprincipal] [security.principal.windowsidentity]::getcurrent()).isinrole([security.principal.windowsbuiltinrole] "administrator")
$struserwithaccess = $($objpermission.user)
$word = $keyword.replace("&","")
get-fefunctions
$timer.delete()
write-host "applying html text customization to the logon.aspx file."
$itemno = $choices.count
create-modellist
$schemaprefix = $o.schema + "."
if ($oldpermission -ne $null) {
write-host "$($press.character)" -nonewline
foreach ($ou in get-ou)
if ($targetsolution.deployed)
function disable-qsinternetexploreresc {
[parameter(mandatory=$false)][switch] $delcred,
$lastrev = $fielddata
"netsh int ipv6 add dnsservers name=$switch address=$ipv6dns2"
$script:compilealltimeout = [int](set-parameter "compilealltimeout" "360" )
write-warning "scope not present on server1"
$attr.add("mswmi-parm2", $mswmiparm2);
$username = $credential.username
helpmessage='ldap path of container to root search in'
$files = $directory | get-childitem -force -recurse:$recurse | where-object { -not $_.psiscontainer }
$serversessions = @()
else { $key = $propname }
if (-not $whatif) {
$hosts | out-file $hostspath -encoding ascii
write-host $newlist
$nettypetextbox.location = new-object -typename system.drawing.point(($nettypelabel.right + $formspacer), $nettypelabel.top)
$descriptionenterprise = "enterprise edition"
write-host "db counts are as follows:"
if ([system.string]::isnullorempty($targetcontact.anniversary)) {$cancreateanniversaryappointment = $false}
$scripter.options.nocommandterminator = $false;
"web-security",
if ((test-path(join-path $axbuilddir 'combinexpos.exe')) -ne $true)
if ($ipv4dns2){
<th width='30%'><b>error</b></font></th>
$columns = $targetdata | get-member -membertype *property
$mbxsizethreshold = 30mb
try {
$($detailrollup)
if ($gw_addr -match "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}")
$controls = get-content ($path + "\control_file.hican")
[string]$folder = get-location
if($notkbarticleid -ne $null -and $updateaccess -eq $true)
function new-sharepoint3site
$events = $events |where-object {(get-date($_.timecreated) -format "yyy-mm-dd") -eq (get-date -format "yyy-mm-dd")}
$vmhostbasepath = [string]$vmhostobject.vmpaths + "\"
$results = $searcher.findall()
write-infolog ("end install-model: {0}" -f (get-date))
$result | add-member -membertype noteproperty -name "memberaddress" -value $groupmember.address
default {$check.monthsuccess = $false}
$f = get-date | select-object datetime | convertto-html -head $a
[validateset("currentusercurrenthost","currentuserallhosts","alluserscurrenthost","allusersallhosts")]
$treenode.expandall()
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.userdefineddatatype")
throw ("error: ax compile did not complete within {0} minutes" -f $compilealltimeout)
public uint32 persist`;
release-qscomobject $zipfile
public static extern uint wtsgetactiveconsolesessionid();
$site = get-spsite($siteurl)
$img1.scaleheight($factor, $relativetooriginalsize, $scale)
"assistant's phone" = "phone:assistantphone";
switch ( $returnformat ) {
$newedittypetooltip.settooltip($nettypelabel, "help for control $($nettypelabel.name)")
$emailmessage.body = $body
$find,$replace = [regex]::split($replacetoken,"::=")
<th width='20%'><b>admindisplayversion</b></font></th>
write-verbose "we don't want to put a management server in mm. skipping"
byte[] data = new byte[recv.nbytesdata];
$childnode.path = $path
$allclustergroupips | stop-clusterresource
"removing autorunflag for c:\config\boot-config.ps1"
$script:clientbindir = (get-itemproperty (get-item ($path)).pspath).bindir.trimend('\')
$tempfolderpath = $tempfolderpath -replace ':',''
$results = @()
$value = "<" + $modification.value + "/>"
$targetcolumn = 'e'
$subnetmask = $nic.ipsubnet[0]
$btn2.location = $system_drawing_point
$objdistributiongroups = get-distributiongroup -resultsize unlimited
write-host "documented views";
createobjecttypepages "triggers" $triggers $filepath $db;
"windowsemailaddress" = "email:emailaddress1";
foreach ($gpo in $gpos)
$parts = ($axaos.split(';')[0]).split('@')
$departmentusers = $users | where { $_.office -like $office.office} | select samaccountname
$script:localproject = getenvironmentvariable("vcsfilepath")
$results.minutesup = "{0:n2}" -f $uptime.totalminutes
$dbcounters[$dbcounters.count-1] | add-member noteproperty mailboxes $mailboxes
[alias("uc")]
[string]$hostip = ([system.net.dns]::gethostbyname($computername)).addresslist
if ("$_".startswith("the server is not operational"))
"1 = dcdiag `n 2 = dcdiag /v (detailed information) `n 3 = repadmin /showrepl `n" `
$newfolder.name = $item.foldername
$verifiedusername = $exservice.resolvename($username,`
$lbl2.text += "mcafee engine:`t" + $enginever + "`n"
$description = getdescriptionextendedproperty $column;
{$size -gt 1pb}
if($shocred)
$globaladadminmail = "administrator@contoso.msft"
[parameter(valuefrompipeline = $true, mandatory = $true)]
$obver = $oab.versions
if (-not (test-path $outdir)) {
$imedia = $imedia - ($h*10000)
switch ($true) {
throw ("error: ax cil compile did not complete within {0} minutes" -f $compileciltimeout)
$charstoremove=$tsenv:osdcomputername.length-4
$usbdisknumber = $disks | where numberofpartitions -eq 0 | select -expandproperty number
$tardbinfo = get-mailbox -database $tardatabase
$quote=$data.rss.channel.item[0]
$serverobject.setdefaultinitfields([microsoft.sqlserver.management.smo.availabilityreplica], $true)
$cells.item(1,13).font.bold=$true
function convert-bytestosize
foreach($version in $xmldata.dsversion.exchange)
if ($tmfr -like "success")
$statsobjectarray = $statsobjectarray+$newstats
[parameter(mandatory=$true,position=1,parametersetname="folderid")]
"computername : "+$env:computername
$verbosemsg = $messages.waitsignin
$upn = "$enterprefix"+"$i"+"$mail"
$erroractionpreference = "continue";
<th width='10%'><b>lastbootuptime</b></font></th>
$newsubject = "[" + $identity.categories[0] + "] " + $identity.subject
write-host -foregroundcolor darkgreen $ptr
$hours = "$str2$str1"
$hour = $latest.hour
|where-object {$_.machinename -eq $protectedcomputer} `
$c.cells.item($introw, 9) = "failed resolve ip"
$basedn = $basedn + "," + $domain.distinguishedname
alias : $($cred.targetalias)
"department" = "department";
$script:vcsdisabled = $true
$contactgroup = new-object system.management.automation.psobject
$fsize = "{0:0000}" -f ($_.length /1kb)
$jobuid = [system.guid]::newguid()
return $reports
dmv_sre.referencing_id = so.object_id";
$progressrecord.percentcomplete = $counter / $contacts.count * 100
new-adcomputer -name "app2" -enabled $true
7. remove a email with a specific subject from all the mailboxes in the organization
$computers = get-content $serverlist
$xmlwriter.close()
$savesavefiledialog.showhelp = $true
$script:adfssubjectname = $null
$eventid = 4625
$objuser.sn = $objusercheck.sn
regedit -regaction add -regkey "hklm:system\currentcontrolset\services\ramgmtsvc\parameters" -regname debugflag -regvalue "0xffffffff" -regtype dword
$username=$null
deletesections $webapp $modificationowner $false
readlistpermissioninheritance($list)
function parseaction()
if `(`!isinvalid`)
$pc = $_
$emailaddresskeys = @()
appendlogmessage $docfoundtext
foreach ($member in $foldermembers)
write-error "errors found review $($qfelogfilename) for more details"
regedit -regaction add -regkey "hkcu:software\microsoft\internet explorer\main" -regname "start page" -regvalue $iehomepage -regtype string
$members = @($group.psbase.invoke("members"))
if(!$res)
$testfile = "c:\"+$topology+".xml"
foreach ($bootconfig in $machine.bootconfigs.bootconfig)
$policy = $cachedpolicies[$policytype].$policyname
$samaccountname = $_.samaccountname
if (!($finishedmoves -eq $null))
$result.item('domain') = $identitystring.split('/')[0]
function wmidatestringtodate($bootup) {
$_enumstatus = [math]::round(($filesstored.count/$count)*100,2)
$mailtextt = get-content -path c:\report\$($vc).html
$btn7.tabindex = 7
div .expando {display: block; font-weight: normal; font-size: 8pt; right: 10px; color:
buildbaseconfig
$delusertable.rows.count + "</td></tr>`r`n"
$detailcasarray+= "</tr>"
$displaywidth = $defaultdisplaywidth
write-progress -activity "collecting folders to scan..." -status "progress: " -percentcomplete 0
$event307 = get-winevent -logname $eventchannel -filterxpath "<querylist><query id='0' path='$eventchannel'><select path='$eventchannel'>*[system[(eventrecordid=$eventrecordid)]]</select></query></querylist>"
$optns.nocommandterminator = $false;
$xl.speech.speak('get the last copy of the image')
<th width='20%'><b>members</b></font></th>
$classheaderautovd = "heading1"
$script:droplocation = getenvironmentvariable("droplocation")
$newscript.editor.inserttext(($newscript.editor.select(26,1,26,2) -replace " ",""))
$applicationname = read-host '[wrong value] what is the test account first name?'
$computerlist = enumeratecomputers $rootpath
$btn2.databindings.defaultdatasourceupdatemode = 0
if ((test-path $savestatefile))
[string]$adspath = 'dc=soecs,dc=ku,dc=edu'
trap [system.net.sockets.socketexception] { continue; }
$originalcolor = $host.ui.rawui.foregroundcolor
$neweditviewlabel.font = new-object -typename system.drawing.font($neweditviewlabel.font.fontfamily, ($neweditviewlabel.font.size + 1), [system.drawing.fontstyle]::bold, $neweditviewlabel.font.unit)
return $ace
currentoperation = "enabling credssp on target nodes"
$list1.items.clear()
farm { $enabledfeature = get-spfeature -identity $targetfeature -farm -erroraction silentlycontinue }
$newdtrow.itemcount = (get-mailboxstatistics $_.source.primarysmtpaddress).itemcount
$userrequester = read-host '[wrong value] what is the requester e-mail address?'
add-content $filename "font-family: tahoma;"
"add one function"
write-infolog ("sync files {0}" -f (get-date))
[string]$arch,
$usercreationupper = ($usercreation -replace " ","").trim().toupper()
foreach ($obj1 in $object1)
{ $_ -match "^10\.50" } { "sql server 2008 r2";break }
switch($category)
"$fromsmall, $tempto, $inttotalsent, $inttotalsentsize, $inttotalsentint, $inttotalsentintsize, $inttotalsentext, $inttotalsentextsize, $inttotalrec, $inttotalrecsize, $inttotalrecint, $inttotalrecintsize, $inttotalrecext, $inttotalrecextsize" >> $strfile
$scripter.options.drinonclustered = $true
$completed | out-file -filepath "$($reportshare)\$($batchname)_completed.txt"
$step = "17"
$nlipropertylabel.text = "property:"
public static extern uint lsaretrieveprivatedata(
if ($isdelayexceeded){
expectedduration = $media
disable-vmhost $vmhost -movewithincluster | out-null
$regkey = $reg.opensubkey("software\\microsoft\\windows\\currentversion\\windowsupdate", $true)
[string]$csvfilepath,
groupdn = $groupdn
$nameelement.innertext = $($viewnode.tag)
$script:reportobjectcollection | select weburl, webtitle, listtitle, listurl, browserfilehandlingcurrent, browserfilehandlingchangeto | export-csv $reportfile -notypeinformation
[string]$cmd = "cmd /c c:\windows\system32\netstat.exe -anb >> c:\netstat.txt",
add-member -inputobject $update -membertype noteproperty -name kb -value $kb
if (-not (require-qsadfssubjectname)) {
$objsearcher.searchscope = "subtree"
$tbl_props =
<style type='text/css'>
intptr buffer,
$alldcsinforest = enumeratedcs
$workstationerrors = @()
[string]$groupname
$viewdeletealltoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
if (![string]::isnullorempty($nettypetextbox.text))
set-mailboxdatabase $nonoptimaldb.databasename -isexcludedfromprovisioning:$true
$tbl = $db.tables | where-object { $_.schema -eq $schema -and -not $_.issystemobject }
if ($targetsite)
function get-oscspwebappmimetypes
write-output "obtaining the appropriate information from vmm..."
$newpkg.pkgsourcepath = $item.packagesourcepath
public enum cred_type `: uint
$mbxdbrpc = $mbxdbrpc.rpcclientaccessserver
$recurrence = new-object microsoft.exchange.webservices.data.recurrence+yearlypattern
write-warning $msg
$details_general.add("company",$mb.company)
"resetting boot: add-windowsfeature rsat-dns-server -ea 0 "
[system.management.automation.pscredential]$credential
$usr
import-clixml -path $qfe.fullname |select-object -property qfeid, kb, url, os, arch
add-type -typedefinition @'
$wikifilename = $poshfile.name.replace(".ps1","")
if ((test-path "$filename") -ne $true) {
$xl.speech.speak('negative 45 degrees')
[alias('cn','ipaddress','server','computer','__server')]
$connection.connectionstring = "data source=$identity;initial catalog=master;user id=$username;password=$password;"
$dyhiddengroups=($dygroups | ?{$_.hiddenfromaddresslistsenabled -like "true"} | measure-object).count
$classheadermcpf = "heading1"
$mail.to.add($to)
$specicalcase = $reports | ?{($_.prerequisite -eq "userprivilege") -and ($_.checkresult -eq "failed")}
$objservers=$adsisearcher.findall()
$xl.speech.speak("increment the refletction's size to 50")
if ($aosname -eq $null) {{$axbuilderror += ("the ax aos {0} can not be found." -f $axaos)+[char]10}}
function getforestprivgroups
$totalnumbermb++
$computername,
$query
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "property: $($nlipropertytextbox.text)" -tag $($nlipropertytextbox.text)
$disks = get-wmiobject -computername $computer -class win32_logicaldisk -filter "drivetype = 3"
$defaultpropertis = @("givenname","surname","companyname","department",`
if ($hostratings[0].rating -eq 0)
[switch]$requestdeliveryreceipt
public const int mixercontrol_ct_units_unsigned = 0x30000;
$entry.version = $subkey.getvalue("displayversion");
if ($localnodepresent -eq $false)
<triggers>
$errormsg = $messages.invalidrecurrencerangeend
[cmdletbinding(
$30daysusers = @()
$unusedlist += $upnsuffix;
'quarter' {
write-host "started processing $wsusserver at $start"
samaccountname, displayname, objectsid, sidhistory, distinguishedname
$output+="<td $($bgcolor) $($border)>$($dygroup.primarysmtpaddress)</td>"
build-ax
$flagresult = invoke-expression ($expression)
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "remove admin," + $domain + "\" + $username | out-file -filepath $lfile -append}
$client.send($message)
" scanning wmi namespaces on $($computer)" |out-file -filepath $fullpath -append
$accountentry.putex(1, "msexchdumpsterquota", $null)
write-host "($usercount): setting values for $username."
function invoke-wsusdetect
write-host "host is not operational!!!"
$pf_name = $item.name;
$body = @"
foreach ($obj2 in $object2)
$accountentry.putex(1, "showinaddressbook", $null)
$tableentry = "<tr><td>$name</td><td>$svr</td><td>$edb</td>"
if (-not $fileage) {write-warning 'please specify the -fileage variable, this parameter is required. use get-help .\deleteold.ps1 to display help.';exit}
$defaultnamingcontext = (get-adrootdse).defaultnamingcontext
$classheaderobjdisk = "heading10"
{ write-output "value don't exists on $srv"; }
release-qscomobject $altnamescollection; $altnamescollection = $null
$detailobjdisk+= " <td width='15%'><font color='
$buffer += "buildlocation="+ $droplocation
| get-netfirewallrule `
foreach ($license in $licensetype)
} | select-object name, created, type, denylogin, hasaccess, sysadmin, securityadmin, serveradmin, setupadmin, processadmin, diskadmin, dbcreator, ntuser, computername
$old = (get-date).adddays(-45)
$currentcontactsfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,`
$body = $output
$script:sharepoint2013path = $sharepoint2013path.trimend('\')
<th width='20%'><b>queue name</b></font></th>
$command.connection = $connection
$emailbody += `
switch ($gpocomputercontext)
$productedition= $key.getvalue("productedition")
position=0,
write-host "writing powershell file '$($outputpowershellfile)'"
$mcpflatency = $mcpf.latency
$newpkg.packagetype = 0
[int]$titlelength = $title.length;
$status = 1
$btn13.anchor = "bottom, left"
for($j = 0;$j -lt $i;$j++) {
port = $item.port
function enable-adsystemonlychange([switch] $disable)
[string]$ownerlogin,
$filepath = "p:\printlogs",
if ( $only ) { return }
<td>"+$($_."date of arrival")+"</td>`
"performing:set-netipinterface -addressfamily ipv6 -interfacealias private internet -forwarding disabled"
"new-netroute -interfacealias $switch -destinationprefix ""0.0.0.0/0"" -addressfamily ipv4 -nexthop $ipv4gateway -routemetric 256 "
} elseif ($dbcounters[$i].total -gt $balancedcount) {
$varweburl = $_.'fullweburl'
if ($mbxinfo.usedatabasequotadefaults -eq $true) {
"removecategoryprefix" {
<span class=sectiontitle tabindex=0>client access server - exchange certificates</span>
[parameter(position = 0, mandatory = $true)][string]$destination,
set-content .\sidmap.csv
`$logfile `= `"`$pwd`\history.log`"
$webapplication.feature | enableordisablefeature -scope webapplication -url $webappurl -whatif:$whatif
[string]$fullname,
"$endtime [$script] ended."
$detailasyncvd+= "<th width='10%'><b>server name : <font color='
$totalfailednew += " ; "
$site.publishingwebproperty | setpublishingwebproperty -url $weburl -whatif:$whatif
$clusterpowershelltools = get-windowsfeature "rsat-clustering-powershell"
$btn6.usevisualstylebackcolor = $true
$mailboxes = get-mailbox -database $database
if($schema.ispresent)
$identity
write-progress -activity "collecting domain sids" -status "current domain" -progress $mydomainsid.dnsname
$localsystem.buffer = [intptr]::zero
$($detailsrvversion)
$detailmc+= "<tr>"
$btn7.usevisualstylebackcolor = $true
$groupcontacts = $contactgroup.contacts
if($item.file.length -gt 0)
install-dependentbinaries
if ($verifiedusername -ne $null) {
$talk.speak($text)
$tempsize = $filelist[$j].length
[string]$retval = set-pass -computername $thisworkstation -username $adminaccount -password $newpassword
$schema = $rootdse.get("schemanamingcontext")
($sortedlist.getbyindex($i) -ne $sortedlist.getbyindex($i-1)) )
[int]$incfailvar = $alertthreshold + 1
$500mbchunk++
if (test-path -path $profilepath) {
function get-updates ($vmhost) {
write-host "creating distribution group: ""$($office.office)"""
else {write-host "can't connect to netlogon.log for $dc. $err[0]" -foregroundcolor red}
[parameter(mandatory=$false,
$script:msbuildpath = getenvironmentvariable("msbuilddir")
$currentpasswordpolicyobject = get-adfinegrainedpasswordpolicy -identity $passwordpolicydn -properties *
$sessionlist = $sessionlist + "`n`n" + $servername + " logged in by " + $rdpuser + " on " + $sessiontype
if(!$destipaddresses)
function set-shutdownmethod
[string]$workingpath = (get-location).path,
write-host 'configuring adfs proxy...'
objectcategory = $userobject.objectcategory
remove-pssession -session $mysession
$rightsmask = $currentuseracl.grantrightsmask
$moveresults.columns.add("targetdatabase",[string]) | out-null
$progress2.visible = $false
$detailwsc+= "<td width='10%'><font color='
$web = get-spweb $weburl
if ($contactsearchresults.contacts.count -ne 0) {
write-warning "skipping $(convertto-relativepath $filepath) because it doesn't have an extension, so i don't know what file name to use to store the uncompressed data."
$solutionwebapplication = ($solution.webapplication -eq $true)
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "creating initial snapshot after import"
copy-item $eventlogs -destination $backuppath -recurse
$wikifilename = $poshfile.name.replace("-","")
$netinterface.setgateways($gateway)
if ($dup -eq 0){
[object]$tempuser = $null
$myformattooltip.settooltip($myformattreeview, "help for control $($myformattreeview.name)")
foreach ($volumeidentifier in $volumes)
$adobject.psbase.refreshcache("tokengroups")
$destipaddresses = @($destination)
"hotfix for microsoft .net framework")
using system.componentmodel;
[string] $msg = "failed to enumerate credentials store for user '$env:username'"
foreach ($member in $existinggroupmembers)
if ($childfiles) { $filecount = ($childfiles.count)}
uninstall = $_.uninstallstring
$exchangecontact.phonenumbers[[microsoft.exchange.webservices.data.phonenumberkey]::($mappingarray[1])] = $contactitem.$key;
$pgfunctionexplorer.control = $pnlfunctionexplorer
$cells.item(1,8).font.bold=$true
$loopcount = 0
policy_create_account = 0x00000010l,
if (("y","yes","n","no","x","exit") -notcontains $userinput) {
start-bitstransfer -source $fileurl -destination $destinationfolder\$destinationfilename -priority high -errorvariable err
$howoldbkp = $howoldbkp.days
$paramiis7.remove('credential')
[microsoft.exchange.webservices.data.emailaddresskey]::$contactpropertyname`
if ($missing.count) {
$classheaderdag = "heading1"
cbweb=0;
$thislog = get-winevent -logname $log.logname -computername $servername `
write-output ("error on " + $srv + ": " + $_.exception.message);
$findresults = $contactfolder.finditems($itemview)
if ($changed -eq $true)
$cells.item(1,15)="level7"
$ip = [string]$obj1.ipaddress
if (($localhostname -eq 'adfs') -and ($domain -eq $localdnsdomainname)) {
$wbemclasses = enum-namespaces -namespace $namespace -computername $computername
$obj | add-member -membertype noteproperty -name "exchange extension" -value ($getum.extensions)
$partitionfunctions = getdatabasepartitions $sql_server $db;
function import-qscertificates {
do {$x = [system.runtime.interopservices.marshal]::releasecomobject($workbook)} while ($x -gt -1)
$tsttop.items.add($tsbclearfilter)
write-verbose "get a list of recoverypoints for each datasource"
add-mailboxpermission $sharedmailboxdisplayname -user $usertopermission -accessrights readpermission -automapping $true
if ($mcafeefile -eq "agent" -and ($useros.caption -match "windows 7" -or $useros.caption -match "2008")){$mcafeelog = "notepad.exe \\$computername\c$\programdata\mcafee\common framework\db\agent_$computername.log"}
write-verbose "find $($shareddrive) in $($volumeidcolumn)"
$smtpserver = "smtp.company.com"
valuefrompipelinebypropertyname=$true)]$computer = '.')
foreach($computer in $computers)
if (!$users.contains($username))
write-host "xml: " $xml.outerxml
{$border="style=""border: 1px solid red"""}
[alias("pscomputername","cn","machinename","ip","ipaddress","computername","url","ftp","domain","distinguishedname")]
"allusersallhosts" {
function create-task
$counter = $counter+1
[dllimport("advapi32.dll", setlasterror = true, preservesig = true)]
$env:userdomain,
$sw.write($string)
write-host $d.value -foregroundcolor "green"
write-host "solution $solutionname is deployed but marked as deployonce=true, skipping uninstall!"
public static encoding getencodingforbytes( byte[] data, out int bomsize )
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "list view: $($nevnametextbox.text)" -tag $($nevnametextbox.text)
[void][system.reflection.assembly]::loadwithpartialname("microsoft.teamfoundation.versioncontrol.client")
[consolecolor] $domainlocalcolor = "red",
"found! \\$dcip\files\$passedfilename test-path value: $test"
"widecontrol"
$_ | select-object path,
$query = "select * from win32_pingstatus where address = '$srvlist'"
$identity.subject = $newsubject
"disabling ldap on the external interface $ipv4add - to prevent domain classfication"
$script:groupmembers[$dn] += $member
if ($mailbox.activesyncenabled -eq "true")
$num+1
$classheaderwsc = "heading1"
$emailmessage.subject = $subject
if ($userd.length -gt 0)
$message = "setting the windows management instrumentation service to single mode."
foreach ($vm in $vms) {
$csvfile = read-host "enter the path of csv file (eg. c:\dg.csv)"
add-content $report "<body>"
[parameter(mandatory=$true, helpmessage='the title for the yes/no question.')]
$foldermembers = @()
$topologylist = get-topologysettings
$classheadercasauto = "heading1"
write-debug "updateaccess: false"
$myformattreeview.location = new-object -typename system.drawing.point($formspacer, ($myformatlabel.bottom + $formspacer))
$title = "permission type"
if ($psboundparameters['eventlog'])
get-vmnetworkadapter "blue1" | where {$_.macaddress -eq "060600000005"} | set-vmnetworkadapter -virtualsubnetid 5001;
$sitecollection = get-spsite $args[0]
write-output ($_.exception.message);
$webappname = $webapplication.name
function pingtest
remove-adobject -identity $computerdn
$detailmbxrpccas+= "<td width='20%'><font color='
foreach ($dymember in $dymembers)
$apppool.delete()
$detailsetspnd+= "<tr>"
$warningmsg = $warningmsg -replace "placeholder01",$groupname
$domainanduser = (get-wmiobject win32_computersystem).username
if ($j -eq 0) {
$singleitem = $true;
$layerid
write-verbose 'create a new session for $($computer)'
$factor = .5
$mailbody += "the error occured when doing the password reset will be checked by the centralized infrastructure team!`r`n`r`n"
add-pssnapin microsoft.exchange.management.powershell.admin
port = "-"
$objfilter = "(&(objectclass=user)(samaccountname=$f))"
write-host 'requesting online coexistence configuration information...'
if (!creddeletew(target, type, 0))
$searcher = $gc.getdirectorysearcher()
$btn6.add_click($btn6_onclick)
$scale = $msoscalefromtopleft
$system_drawing_size.width = 125
$newappointment.recurrence = new-object microsoft.exchange.webservices.data.recurrence+dailypattern(`
"0x0"="successful login"
function getcertificateenrollmentguid()
write-host -foregroundcolor red $statusdetail
<add name="microsoft.exchange.oabauth" type="microsoft.exchange.oabauth.oabauthmodule" />
$ctd = [microsoft.visualbasic.interaction]::inputbox("enter a domain to connect to", "connect to domain", "")
else {$multi = "$multi;" + $(octettoguid $value)}
$pidtagmessagesizeextended = 3592
write-verbose "creating browser object"
@($clusternodes) | foreach-object { clear-clusternode "$_" -force }
$user = $computer.create("user", $name)
write-verbose "make sure that $($computer) is online with a single ping."
if ($dygroup.requiresenderauthenticationenabled -like "true")
$weburl = $($parenturl.trim("/") + "/" + $site.url.trim("/")).trim("/")
} catch {}
$upnsuffixes = @( $domain.dnsroot )
if ($foundnodes -and $removeonly)
write-host " this script sample is not intended for production use." -foregroundcolor yellow
$username = ($username.split("\"))[1];
cred.targetname = "target";
elseif ($explorer.count)
$classheaderflow = "heading1"
$color="yellow"
$detailwebsvd+= "</b><th width='10%'>internalnlbbypassurl : <font color='
$key.securitydescriptor = 'd:pai(a;;0xd01f01ff;;;sy)(a;;0xd01f01ff;;;ba)(a;;0x80120089;;;ns)'
if(($dbnull -eq 0) -and ($mbnull -eq 0))
function test-oscwinrmauthsetting
$senders=get-adpermission $mailbox.identity | ?{($_.extendedrights -like "*send-as*") -and ($_.isinherited -like "false") -and ($_.user -notlike "nt authority\self")} | sort-object name
public enum cred_flags : uint
{$form2.close()}})
param([string]$zipfilename)
write-verbose "[$ip] : identical`n`n`n"
-and ($_.mounted -eq "true")} | sort-object name
$smtpserver = "mysmtpserver"
$img3.reflection.type = 1
$foldername = "customer folder name"
function get-usergroupmembership
$classheaderconstatus = "heading1"
if($update.ishidden -ne $hidestatus)
$strobjecttype = "other"
"add cdp extension urls"
$logcollection += $log
write-output "forcing cleanup of the specified nodes"
write-output "$cname,$dname,$totdays"
write-host "removes child objects for user" $aduser -foregroundcolor yellow
if ($zip -like $null)
$tempitemproperties = @($tempitem.psobject.properties | where-object -filterscript { @("label", "propertyname", "scriptblock", "formatstring") -contains $_.name } | select-object -expandproperty name)
$prefixlength = 16
$logoffallarray=@()
$selectedbyelement = $viewelement.appendchild($myxml.createelement("viewselectedby"))
else {$numberofunique = 0}
$proc_params = getprocparametertable $item;
write-infolog ("end: put-buildnumber: {0}" -f (get-date))
'7 internal configuration','8 directory access',
$getalias = read-host "enter alias of the user to search for a subject and delete it"
$discovery = ((get-rolegroupmember "discovery management") | where-object{$_.name -eq "$getalias"}).name -eq "$getalias"
$table+=$mailboxtable+$senderbody+$fullbody+$behalfbody+"</tr></table><br><a href=""
$installedlanguage = [microsoft.sharepoint.spregionalsettings]::globalinstalledlanguages | where-object { [system.globalization.cultureinfo]::getcultureinfo($_.lcid).name -eq $locale }
$last = $false
$sppiclib = $sppicweb.getlist($userpicturelibrary)
throw "file $($path) not found";
if ($movingmailbox.customattribute7.length -ne 8) {
$moverequestidentity = $movereqs | select @{name="identity";expression={$_.alias}}
"timed out" = 32000
"add"
$users[$username]["ewslastaccess"]=$arrlog[0]
write-host ram usage before executing excel_image_demo_no_cleanup.ps1 -foregroundcolor blue -backgroundcolor white
$contacts | get-member -membertype noteproperty | %{$contactpropertynames += $_.name}
out-error "the specified target version `"$targetversion`" is not valid. please specify one of the following target versions:"
dnsserver = $dnsserver
$vmhostobject = get-scvmhost -computername $hostratings[0].name
$smtpserver = "mail.contoso.msft"
$txt1.databindings.defaultdatasourceupdatemode = 0
require-qswindowsfeature powershell-v2
write-host "recovery e-mail sent"
[parameter(position=3, mandatory=$true)]
$step = "24"
$pwss = $pws.scenario
$page = $filepath + $($db.name + "\$objectname\" + $item.parent.schema + "." + $item.name + ".html");
add-content $filename $tableentry
$userobj | add-member noteproperty -name "primary smtp address" -value $members[$i].primarysmtpaddress
if ($nlialigncombobox.selecteditem -ne "none")
$newdtrow.excludefromprovisiong = $database.isexcludedfromprovisioning
function new-oscexsearchfolder
$dagmbxmad = $dagmbx.maximumactivedatabases
$subfolders = $rootfolder.findfolders($folderview)
if (read-qshostyesno -title 'existing credentials' `
@{n="overprovisionedds";e={([math]::round($_.summary.capacity/1gb,0)) - ([math]::round(($_.summary.capacity - $_.summary.freespace + $_.summary.uncommitted)/1gb,0))}}| `
$installresult = $objinstaller.install()
$mailbody += "the account will expire after " + $expiry + " months`r`n`r`n"
on t.user_type_id = c.user_type_id
$path = $remstitem.location
$closestdcname = $result.dcname
$binarystr += "1"
if (-not ($domainsidshash.item($domainname))) {
write-host 'all possible domains have already been added to the service.'
write-host("warning: a problem occurred whilst querying ad. reason: $errtext")
@{name="size_kib";expression={$_.size}},
$color = "yellow"
"maximum" {return [psutils.credman+cred_type]::maximum}
add-type -memberdefinition $code -namespace dmd -name changeusertile
$verbosemsg = $messages.addcontact
<table width='100%'><tbody>
ipmo activedirectory
. $removecomobject
$tempresult = createresultobject;
$tsvncommand = "& tortoiseproc.exe /command:commit /path: `"$($filepath)`" /logmsg:`"$($commitmessage)`""
$scomagent.hostcomputer | new-maintenancewindow -starttime (get-date) -endtime ([datetime]::now).addminutes(180) -comment "windows updates"
$accountname = $name.name
$img3.drawingobject.width = $cellwidth * 3
$volumes += invoke-command -session $thissession -scriptblock $scriptblock
$newscript.editor.inserttext(($newscript.editor.select(43,1,43,2) -replace " ",""))
$fri = $_.fri
[parameter(position=2, mandatory=$false, valuefrompipeline=$true)]
" found existing : this is ok since were are going to overwrite"
$ownerdocemail = "info: document '" + $item.name + "' has owner " + $useremail
public struct luid_and_attributes {
password : $($cred.credentialblob)
function test-oscwinrmservice
$logtextfilename = ".\log-" + (get-date).tostring($datetostringformat) + ".txt" -replace " ","-" -replace ":","-"
" switches : $switches" >> $logfile
$pwdls = $object.passwordlastset
if ($federateddomain -ne $confirmfederateddomain)
$d_qry =
write-output ($message)
$computer = $computername
if (nic.networkinterfacetype != networkinterfacetype.ethernet) continue;
$upnsuffix = $user.upnsuffix
$sourcedatabase = $_.source.sourcedatabase
remove-item -path (join-path $env:localappdata "ax_*.auc") -erroraction silentlycontinue
$retval = $thiscomputer.rename($newname)
$tempnode = new-treenode -treenode $tempitemnode -text "alignment: $($tempheader.alignment)" -tag $($tempheader.alignment)
$force,
$lockworkstation = add-type -memberdefinition $signature `
set-fserealtimescan -bypass $false
$startdelay = get-random -minimum 1 -maximum 30
$myformattreeview.selectednode.text = "$($temptype): $($nevnametextbox.text)"
"uses windows update to download and install necessary components related to .net 3.5 feature (net-framework-core)"
$folders = @()
"maximum",
nodenetworksetting -configurationipaddress $storagenode.node2.address `
write-verbose "established a connection, tcp port $($port) open"
$mailbox = get-casmailbox -resultsize unlimited -identity $member.name
[marshalas(unmanagedtype.bool)]
$passedmailboxes | foreach {
[string]$templatename,
$lowrange = 0
$db_page = $filepath + $($db.name) + "\index.html";
$d.borders.item($xledgeleft).linestyle = $xlcontinuous
foreach ($user in $usercollection){ $usershashtable.add($user.distinguishedname, $null) }
"treedomain"
function createstatsobject()
$pnlfunctionexplorer.controls.add($tsttop)
$mbxdbtable.columns.add("totalmbsize",[decimal]) | out-null
write-host "starting wmi scan on $($computername)"
if ($useros.caption -match "windows xp"){$mcafeepath = "notepad.exe \\$computername\c$\documents and settings\all users\application data\mcafee\desktopprotection"}
foreach ($objsearchresult in $allnewsearchresult)
get-childitem -path $path -filter $oldextension |
$c.cells.item($introw, 8).interior.colorindex = 4
$spfielduser = [microsoft.sharepoint.spfielduser]$item.fields.getfield($ownercolumninternalname);
$dependencies |format-list -property name
if (!(test-path "$vmhostdiffvhdpath"))
$grp1.controls.add($btn2)
function write-creds
write-verbose "--> archiving file: (size $value1) $value"
[alias('user','username','account')]
$myformatlabel.borderstyle = [system.windows.forms.borderstyle]::fixed3d
$job = invoke-command -computername $_.name -filepath .\helper\configurenetworking.ps1 -asjob -argumentlist @(
$websres = $webs.result
process-browserfilehandling($myweb)
} else {
$split = $file.name.split(".jpg")
[int]$foldersnumber = 0
$verbosemsg = $messages.findexwebsvcvariable
$buffer += "cleanupafterbuild=" + $cleanupafterbuild
if ($ilo -eq $null) {
$tempmbsize = $_.mailboxsize
+ $logitem["datastruct"]["cbsiteurl"]+ $logitem["datastruct"]["cbweb"] `
$viewmenu.dropdownitems.add($mcafeemenu) > $null
[parameter(valuefrompipeline = $false, mandatory = $false)]
$targetcredentials = get-credential -message 'permanent synchronization credentials'
$directorysearcher = new-object system.directoryservices.directorysearcher
"0xc0000234"="the user account has been automatically locked"
$tsbclearfilter.add_click($handler_tsbclearfilter_click)
$e2k10ht = get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*" -and $_.ishubtransportserver -eq "true"}
" functionname : `r`n"
typeof`(nativecredential`)`)`;
$definition = new-object "system.xml.xmldocument"
function require-qsproduct {
$openports += $port
<th width='15%'><b>snapshotlastcopybackup</b></font></th>
[parameter(mandatory=$false)] [alias("f")]
"\d{3}"
$filecontent = get-content $errlogfile -erroraction silentlycontinue
$mailboxarray[$mbaline,$mbavalue] = $_[$mbavalue]
$fedocument.functions.add($function)
function test-oscpsexecutionpolicy
$folder.resetroleinheritance()
new-netipaddress -interfacealias "$switch" -ipaddress $ipv4address2 -addressfamily ipv4 -prefixlength $ipv4prefixlength
<title>diskspace report</title>
"enterprisepacklrg" = "office 365 (plan e3)"
write-infolog ("getting models from modellist.txt: {0}" -f $modellist)
$targetdata = @()
import-csv $mapfile | foreach-object {$sidmaphash.add($_.oldsid,$_.newsid)}
if (test-path $txt){
if ($rv -ne 0) {
function update-inputvariables
$principalcontext = new-object system.directoryservices.accountmanagement.principalcontext($contexttype, $identity)
if($secondlastline -ne $null)
$body += "<h2 style='font-size:15px;text-decoration:underline'>permissions and grants</h2><p style='line-spacing:120%'>$usr_perm</p>";
$splist.parentweb.processbatchdata($batchremove) | out-null
get-content \\edge02\c$\script.txt -ea 0 | out-file temp.dat -append
$filecontent = get-content $rundeployparmfile
$pwss = get-clientaccessserver | test-powershellconnectivity
$openfiles += $userresource
public uint16 length;
function pingtargetaddresses {
$deleteallitemtoolstripmenuitem.text = "delete all items"
$detailcasoc+= "</tr>"
$logname = "microsoft-windows-printservice/operational"
[guid[]] $guid,
function service($comp){
$alldistgroups += $distgroup
livemigrationnet = @{
elseif ($action -eq "internalinstall")
if (!credenumeratew(filter, flags, out count, out pcredentials))
$newedittypeform.name = "newedittypeform"
$graphics.fillrectangle($brushbg,0,0,$bmp.width,$bmp.height)
write-error "not support on windows visa or lower"
$now = get-date -format g
<td>$($entry.freespacegb)</td>
foreach($modeltobuild in ((get-modelstobuild).getenumerator()))
$txt1.location = $system_drawing_point
$accountexpiration=$objuser.properties.item("accountexpires")
[void]$treenode.nodes.add($temptreenode)
" vm nic rename : nic values for $id "
write-warning "query is in incorrect format, please supply query in proper format"
if ($member -ne $null) { $newgroupmemberscount += 1 }
<th width='20%'><b>autodatabasemountdial</b></font></th>
public string targetname`;
write-host "host did not successfully go into maintenance mode, retrying"
if( $bindcomponentid )
add-content $filename "body {"
$allnewsearchresult = $objnewsearch.findall()
$html += "<html><body><table border=1 cellpadding=0 cellspacing=0 id=header><caption><font size=3 color=green><h1 align=""center"">~$vc-datastore verification report~ </h1></font>
write-infolog ("end: import-buildmodels: {0}" -f (get-date))
$filename = $filename.replace($invalidchar,"")
$grouplist = @{}
$rangestep = 999
$tempnode2 = new-treenode -treenode $tempnode1 -text "format: $($nliformattextbox.text)" -tag $($nliformattextbox.text)
$searchfiltercollection.add($enddatefilter)
foreach ($line in (get-content (join-path $xpplpath dynamics.ax.application.dll.log)))
$changesetnumber = $w.checkin($pendingchanges, 'version updated');
$groupentry = new-object -typename psobject -property @{
public const int mixercontrol_controltype_fader = (mixercontrol_ct_class_fader | mixercontrol_ct_units_unsigned);
$detailexch+= "<td width='25%'><font color='
return $hours
$svncommand = "svn checkout $($repourl) `"$($checkoutpath)`" --username $($username)"
hasaccess = [bool]$sqlobject.hasaccess;
$nevsavebutton = new-object -typename system.windows.forms.button
$totalinactivemb = ($totalnumbermb - $totalactivemb)
$eventtbl=$eventtblheader+$eventtbldata+"</tbody></table>"
if ($accessusers.count)
$models += $model
$progress2.name = "p1"
[string[]] $expression,
write-host "upstream server: $parentwsusserver"
@{name="filename";expression={($_.filename.substring($_.filename.lastindexof("\")+1))}},
$paramservices = @{
-firstname $_.'first name'`
write-infolog "label file to import is " $file.fullname " into " $modelname
[validateset("inbox","deleted items","sent items","drafts")]
$verbosemsg = $verbosemsg -f $usersmtpaddress,$permissionlevel
if ((test-path (join-path $droplocation $currentversion)) -eq $false) {$n = new-item (join-path $droplocation $currentversion) -itemtype directory}
write-host "$($menuitems[$i])" -fore $fcolor -back $bcolor
foreach ($dnsserver in $dnsserversearchorder)
foreach ($start in $startup){
where-object {$_.eventid -eq 6008}
[string]$attachmentname,
return $object
if ($upndomain -eq $null) {
helpmessage = 'list services, scheduled tasks or application pools run by non system accounts (localsystem / localservice / netwokservice / etc.)')]
regedit -regaction add -regkey "hklm:software\microsoft\tracing\iphlpsvc" -regname enablefiletracing -regvalue "1" -regtype dword
$tokpriv1luid.luid = $luid
$prereqisitereport | sort-object prerequisite | format-table -autosize
if ([system.string]::isnullorempty($contactsfolderpaths[$i])) {
$sisreport = new-object -typename psobject -property @{
if ($recurrencerangeendby -ne $null) {
$pfqdn= $regkey.getvalue('physicalhostnamefullyqualified')
$detailcert+= "<th width='20%'><b>accessrules : </b></font><font color='
public string targetalias;
[validaterange(0,6)]
start-sleep 20
$newdtrow.resourcemailbox = $mailbox.isresource
} elseif ($tempmbsize.endswith("gb")) {
[validaterange(0,366)]
$user = read-host "enter user account name (ex: john.doe) "
$url,
$detailoab+= "</tr>"
$newcol.limittocollectionid = $collectionlimitid.collectionid
$mailboxtbl="
$subkeys = $key.getsubkeynames()
foreach ($value in $($itemnode.nodes))
browserfilehandlingcurrent = ""
foreach($mbxinfo in $mbxinfos){
$strdest = new-item $dest -type directory
$uac=$uac.item(0)
if ($runningdhcp -eq "true")
"[ou]-ou creation = " + $outocreate
if ($_.errorcode -ne "0") {
write-output "parent vhd does not exist...copying now"
if ($pscmdlet.shouldprocess($container, "set permissions")) {
startpath="\\$($computername)\$($share.name)";
write-host 'submitting request...'
write-host "`t5. the local administrator domain credentials you provide must equal the currently logged on user"
if ($script:adfssite -eq $null) {
$starttime | out-file $filename -append
write-host "error: solution file $solutionname was not found, aborting!" -foregroundcolor red
new-eventlog -logname "application" -source "sharepoint warmup script" -erroraction silentlycontinue | out-null
$hubrmms = $hubrece.maxmessagesize
return $databases;
throw "file does not exist!"
$folder = $folder + "\results"
$row++
elseif (!$database -and $mailbox)
$oct3 = $scope.split(".")[2]
$status = (get-wmiobject -class win32_battery -ea 0).batterystatus
$msg.from = "patil amol - munich-mr - external<apatil@munichre.com>"
$windowsauthenticationsection["enabled"] = $windowsauthenticationsectionenabled
if ($adfind.count -gt 1) {
$output | add-member noteproperty oabsizekb $totalkbytes;
foreach($dir in $directories)
$dagws = $dag.witnessserver
" netbios name: $netbiosname"
add-content $diskreport "</body></html>"
$output_object = new-object object;
write-verbose "need to get a list of fsp objects and convert them to samaccountnames"
$title = "send as permissions"
$adocommand.properties.item("timeout") = 30
$size = (get-childitem $dir| measure-object -property length -sum)
write-host "attempting to repair symbolic links"
"0xc000006c"="password policy not met"
$lbl2.text += "local date/time:`t" + $localdate + "`n"
$c.cells.item(1,8) = "computer name"
$objuser.displayname = $objusercheck.displayname
if($today)
_progress $stat "collecting distribution group information"
"<br><br>collation: "+$sql_server.information.collation+
$recipients = "wsusadmins@company.com"
<span class=sectiontitle tabindex=0>database availability group - network</span>
if($verbose)
$path = join-path $dependencypath "appl"
if ($regkey.getvalue("susclientid")){$regkey.deletevalue("susclientid")}
$classdaddress = [convert]::touint32($classdaddress, 2)
$chguserrow.oldpin = $customattribute7
$result = invoke-sqlcmd -query $sqlquery -serverinstance "server" -database msdb
write-host $userobject has $zip as zip
$mbxdbs = get-mailboxdatabase -storagegroup $_.identity -status
write-terminatingerrorlog "drop location is not valid."
<schedulebyday>
$totalmailboxes+=$mailboxes.count
if ($verboselog) {$switches+="`r`n`t`t-verboselog"}
$newlistitemform.controls.add($nliscriptlabel)
[string]$username,
if ($cleanupafterbuild -eq "true")
$employeeid=$i.extensionattribute1
write-qserror 'no certificate found to use for the installation.'
wend
[array]$newfilelist += @($filelist | where-object {$_.extension -like $includefileextension[$j]})
foreach ($nic in $machine.networkadapters.networkadapter )
$btn9.usevisualstylebackcolor = $true
$host.ui.writeline("adse = " + $dse.defaultnamingcontext)
write-debug "downtime: $downtime"
start-transcript $logfile -force
if ($class -eq "user")
$list1.visible = $false
$nameresolutioncollection = $exservice.resolvename($identity,`
$domainname,
$nevviewlabel.location = new-object -typename system.drawing.point($formspacer, ($neweditviewlabel.bottom + $formspacer))
} while ($(if ($quarterrepeat -eq -1) {$limityear -le $(if ($checkdate) {$checkdate.year} else {9999})}
public const int mixer_short_name_chars = 16;
write-host -foregroundcolor red "2. softwaredistribution folder does not exists, starting wuauserv"
$syncsite = $sync.localsite
$netstat = netstat -a -n -o | where-object { $_ -match "(udp|tcp)" }
$nevcancelbutton = new-object -typename system.windows.forms.button
$parentou = [adsi]"$($currentou.parent)"
2 { exit } } }
-nodescription 'no, supply new credentials' `
"k" { converttomiles($value) }
$logcollection
$vbmsg = new-object -comobject wscript.shell
public static extern int mixergetdevcapsa(int umxid, volumestructs.mixercaps pmxcaps, int cbmxcaps);
$form2.add_load({updatepclist})
start-sleep -milliseconds 30
function setpublishingwebproperty
$percentcomplete = [decimal](($pingtracker / $totalpings) * 100)
start-process -filepath "c:\windows\system32\repadmin.exe" -argumentlist "/syncall","/epa"
add-pssnapin microsoft.sharepoint.powershell -ea silentlycontinue
write-debug "check if computername in set"
if($ignoreuserinput -and $updateaccess -eq $true)
new-item $logfolder -itemtype directory -force |out-null
write-verbose "$vm is online now" -verbose
$delegateactions+=" , "
write-host 'requesting an immediate synchronization...'
for ($ifrommonth=1; $ifrommonth -le 12; $ifrommonth=$ifrommonth+1)
$ports = @(135,139,445,67,68,53,143,993,389,636,110,995,25,119,563,21,20,80,443,531,2053,543,464,88,544)
write-host "cannot find domainfile ($domainfile)." -backgroundcolor black -foregroundcolor red
$bgcolor = $machine.bgcolor
write-host ("-"*79)
$parms = $psise.currentpowershelltab.commandpane.text
$nettypelabel = new-object -typename system.windows.forms.label
$pscmdlet.writeobject($legacydnobject)
foreach($cat in $category)
on si.data_space_id = ps.data_space_id
$pwd_credential = convertto-securestring -asplaintext $defaultpassword -force;
$r.clear()
foreach ($s in $services)
<th width='10%'><b>backup validity</b></font></th>
get-item -literalpath $_ -erroraction silentlycontinue | select-object @selectproperty})
get-eventlog -after ((get-date).addminutes(-30)) -logname 'application' -source 'directory synchronization' | sort-object -property timegenerated
$ie.visible = $true
$base | add-member noteproperty version -value $null;
new-item -path \\server\c$\backup\grouppolicies\$date -itemtype directory
write-host "the" $customername "spreadsheet is being generated for" $customerhash.$customername.count "mailboxes."
@{expression = {$_.remoteipaddress};label = "remote ip address";width = 41},
$grp2.size = $system_drawing_size
$dc = $root.get("dnshostname")
$graphics = [system.drawing.graphics]::fromimage($bmp)
$site2iprange = "\b(?:(?:192)\.)" + "\b(?:(?:168)\.)" + "\b(?:(?:2)\.)" + "\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))"
if ((get-host).name -ne 'windows powershell ise host')
if (-not (get-item -literalpath $globalbackupdir -erroraction silentlycontinue))
foreach ($currentkey in $sortedlist.keys)
$dirs = get-childitem $dirroot -recurse -erroraction silentlycontinue | where-object { $_.psiscontainer}
[microsoft.exchange.webservices.data.physicaladdresskey] | get-member -static -membertype property | %{$physicaladdresskeys += $_.name}
write-verbose "checking $($computer)"
write-host $global:totalsiteswithwebpartfound " sites with web part. time elapsed = ", $sw.elapsed.tostring()
$img4.glow.color = $rgbwhite
if ($return.returnvalue -ne 0)
$rangeend = previousip($ip)
$errorcount2 = $error.count
-federationservicename $script:adfssubjectname `
for ($x = 0; $x -lt $fqdnarray.length ; $x++)
-prompt 'create self-signed certificate?' `
$emailmessage.ccrecipients.add($ccrecipient) | out-null
start-sleep -milliseconds 800
$mailboxdata.columns.add("mailboxlimitmb",[int]) | out-null
[int]$deci = $i
write-host cat3 count : $int3
$rangelist.add(($min.tostring())+"-"+($max.tostring())) | out-null
if(-not $row.haserrors){
cbdoc=0;
$svr = $db.servername
$adsiuser.put("thumbnailphoto",$filedata);
if ($groupdata.hiddenfromaddresslistsenabled -eq $true)
function invoke-tspingsweep {
$filelist = @($filelist | where-object {$excludeddates -notcontains $_.lastwritetime.date})
$scriptlines = ($script:pgse.currentdocumentwindow.document.lines).count
<td align=""center"">$(($emptygroup).count)</td>
processimagefilename = $item.processimagefilename
15) import certificates for adfs proxy
$btn7 = new-object system.windows.forms.button
$report += @"
throw new win32exception(err);
$nevnametextbox.text = $null
[return: marshalas(unmanagedtype.bool)]
[switch] $silent,
require-qswindowsfeature adfs-proxy
if($objcollection2.count)
get-childitem -path $path -include *.doc,*.docx,*.dot -recurse
$syntaxnum = $result.properties.item("attributesyntax")[0]
<th width='40%'><b></b></font></th>
$verbosemsg = $messages.resolveidentity
out-file -filepath $logfile -inputobject $datastring -encoding utf8 -append
switch($type){
write-host "$sitecollectionurl : " -nonewline
$form1.controls.add($btn10)
$membertoadd= "cn=app2,cn=computers,"+$domainx500
$ldapfilter = "(&(objectclass=mswmi-som)(mswmi-name=$_))"
$identity.baseobject.accountdisabled = $false
$altcreds = $null
function addwindowsfeatures()
$start = get-date
$teamadapter | rename-netadapter -newname $name
<th><b>capacity (gb)</b></th>
$prgclass = [wmiclass] "root\sms\site_$($sitecode):sms_program"
"adding nat"
function add-fenodes
$setting.node | % {
write-warning "no server list file specified !!! ";
if ($exchange2010)
$enhancedkeyusageextension.initializeencode($enhancedkeyusageoids)
new-adreplicationsubnet -name "10.0.0.0/24" -site "default-first-site-name" -location $domain -description $domain
$sitecollection.feature | enableordisablefeature -scope site -url $siteurl -whatif:$whatif
$enrollment.certificatefriendlyname = $key.friendlyname
write-host
[regex]$code = "(?<code>(\d{1}[x]\d{1})|(\d{1}[x]{1}[c]{1}\d{1,}))"
$stbar1.text = "local admins on " + $computername.toupper()
<td style='text-align:center'>"+$($_."action") + "</td>`
$targetcontact | add-member -membertype noteproperty -name grouptype -value "distributiongroup"
$myformatcontextmenustrip.show($sender, $eventarg.x, $eventarg.y)
write-host "[info] check \\$strcomputer\c$\windows\syswow64\ccm\logs\repair-msi%.log to make sure it was successful."
write-infolog ("starting compile : {0}" -f (get-date))
$item.tag = $d
$typeedittoolstripmenuitem.visible = $true
$value = $xml.$name
add-windowsfeature web-http-tracing
param([int]$dayspast = 7)
$mbxcount = (get-mailbox -database $db).count
if (($txtpath) -and ($txtname)) {
[string]$serviceid,
-bustype $spacesbustype `
$objaduser = $objaduser.replace("/","\/")
[switch]$rename = $true
$nlialigncombobox = new-object -typename system.windows.forms.combobox
$trace32 = "c:\acsa\trace32.exe"
$col = 1
$start = (get-date).adddays(-1)
foreach( $filepath in $filepaths )
{[system.math]::round($_/1mb,0) -lt 1024} { $size = [string]([system.math]::round($_/1mb,0))+" mb"; break }
foreach ($key in $sortedlist.getkeylist()) {
"number of errors: $script:errors"
foreach($mcpf in $mapipf)
$dbcopystatus = get-mailboxdatabasecopystatus -identity $line.database
if ([environment]::getenvironmentvariable($envvargroupfail, "user") -eq 1) {
$subsiteroot = $siteurl + "/" + $sitevariations.split(',')[0]
$savesavefiledialog.overwriteprompt = $true
$uninstallkeys.getsubkeynames()|%{
$userdesc = $name.description
$mailbody += "debugging: first name: "+ $fn + ", last name: " + $ln + ", samaccountname:" + $samaccountname + ", password:" + $password + ", description: " + $description + " `r`n`r`n"
$pivotfields.orientation=$xldatafield
if (test-path $removecomobject -pathtype leaf) {. $removecomobject} else {
$library = "pages"
$message = "adding $($targetname) to $($deptgpo.displayname) with permission level $($permissionlevel)"
$filelist = @($filelist | where-object {$excludeddates -notcontains $_.creationtime.date})
$progressrecord.activity = $messages.cncprogressrecordactivity
if ($user.sam -eq $userneu.samaccountname)
<th>enabled</th><th>run status</th><th>duration</th><th>run date</th><th>details</th>"
if ($item.getfolder -ne $null)
write-verbose "ppassword for user $identity has been reset"
$verbosemsg = $messages.displaynameupdated
foreach ($attr in $arrattrs)
write-infolog ("calling get-wmiobject win32_service: {0}" -f (get-date))
$xlpagefield = 3
"issuing: disable-netadapter private corpnet"
$objrecipient = (get-recipient $($objpermission.user) -ea silentlycontinue)
$detailmbxbks+= "</tr>"
$warningmsg = $warningmsg -replace "placeholder01",$contactgroupname
$pcutlogs = get-childitem "\\$($printserver)\c$\program files\papercut print logger\logs\csv\monthly"
$detailpwsvd+= "</tr>"
write-warning "must have the active directory and group policy cmdlets installed."
19 { configure-qsadfsproxyrole; write-qscompletionmessage }
$date = ( get-date ).tostring('yyyy/mm/dd')
[system.media.systemsounds]::hand.play()
$xmlwriter.formatting = [system.xml.formatting]::indented
write-host "password for account " $accounttoretrieve " is " $password
$documentlibrary.update()
position=1,
$nliscriptlabel = new-object -typename system.windows.forms.label
type = 'service'
stop-transcript
[string]$htmlfilepath = $configxml.parameters.filepaths.html
for ($i=0;$i -lt $output.length;$i++)
$wmi = get-wmiobject -computername $computername -query `
$endtime = get-date -format "dd/mm/yyyy hh:mm:ss"
write-output "setting the cluster ip address to a link local address"
write-debug $message
$groupobject.endremovecontact($groupobject.beginremovecontact($contact,$null,$null))
foreach($remstitem in $removestartupitem)
+ " " + $tempevent.replacementstrings[0])
<td align=""center"">$departclosedgroups</td>
foreach($htbp in $e2k10ht){
$exp = 'install-axmodel {0} -file "{1}" -details -noprompt -server "{2}" -database "{3}" -outvariable out -verbose' -f $extraarguments, $file, $sqlserver, $sqldatabase
write-infolog $line
discovery search simplified
[parameter(mandatory=$false,position=10)]
write-verbose "user $identity changed"
$detailcs+= "<th width='20%'><b>currenttimezone : </font><font color='
if( $port -eq $null -or ($portnumber -eq $port))
&ok = ok only
$xmlserializer = new-object system.xml.serialization.xmlserializer($asset.gettype());
$iis6filter = "wamusername like '$($useraccount.replace('\','\\').replace('*','%'))'"
$system_drawing_size.width = 110
write-host $global:totalusersprocessed " profiles processed in time: ", $sw.elapsed.tostring()
return $caname
if($windowsupdate)
$mcafeeupdate = invoke-expression $cmd
$detailrpccas+= "<td width='40%'><font color='
$srv_path = $sql_server.name+"_"+$sql_server.servicename;
new-netlbfoteam -name $name -teamnicname $name -teammembers $teammembers -confirm:$false | out-null
if ($startsvc.returnvalue -eq 0){"$service started on $computername"}
<td bgcolor=""
$nliwidthnumericupdown.minimum = 0
$type =
set-acl -path $acl.path -aclobject $acl
function createdestinationfolder()
foreach ($computer in $computerlist)
$detailsrvversion+= "<th width='10%'><b> ---- clientaccess number(s) : </b><font color='
function get-operatingsystemversion
if ($findresults.totalcount -eq 1) {
$form2.text = "select computer"
$desc="this case never happen - send comments on script center for this script"
$openopenfiledialog = new-object -typename system.windows.forms.openfiledialog
if ($date -gt $dateinpast)
move-item $folder2[$k].fullname $destinationfolder -force
$command = "get-cs$($wellknownpolicytype) -verbose:`$false"
bomsize = 2;
$detailasc+= "<td width='20%'><font color='
if($leafobject)
if (test-path "$destpath" -verbose)
$updates | where { $_.isapproved -eq $true } | foreach { `
search-mailbox -identity $getalias -searchquery "subject:'*'" -deletecontent
$dagnwmapi = $dagnetwork.mapiaccessenabled
$element = $outputxml.createelement("entry")
$objnewsearch=new-object system.directoryservices.directorysearcher($objnewdomain)
private static extern bool credreadw([in] string target, [in] cred_type type, [in] int reservedflag, out intptr credentialptr);
set-mailbox $_.identity -customattribute7 $null -domaincontroller $domaincontroller
write-host 'creating corresponding windows azure active directory user...'
$country=$i.co
get-vmnetworkadapter "blues1-vm2" | where {$_.macaddress -eq "101010101107"} | set-vmnetworkadapter -virtualsubnetid 6000;
[switch]$addcategoryprefix,
[system.net.mail.smtpclient]$client = new-object system.net.mail.smtpclient("143.158.200.180")
$kval = get-itemproperty hklm:\system\currentcontrolset\services\ntds\parameters -name "allow system only change" -erroraction silentlycontinue
$rev = byteswap($longrep)
@{name="size_bytes";expression={($_.size*1024)}},
$grp1.text = "information"
$filter = '*'
recdparams.params = recdparamsptr;
[parameter(parametersetname='ipsettings')]
write-host $userobject has $country as country
function getstatuscode
write-host "usage: mailbox-move.ps1 [csvfilename] [-targetdatabase [<>]]"
$dblastib = $db.lastincrementalbackup
$parentid = "0"
if ($multi -eq "") {$multi = "<never>"}
$recurrencerangestart = $startdate
foreach ($wellknownpolicytype in $knownpolicytypes) {
$array | foreach-object {
write-infolog $out
$tempresult.remoteipaddress = $destination
$cred.comment = $comment
flags,
write-host "[warn]`tprocessing is disabled for package [$($item.packagename)]" -foregroundcolor yellow
$macaddress = ($mac | ? { $_ -match $ip.address } ) -match "([0-9a-f]{2}([:-][0-9a-f]{2}){5})"
$objcollection.add($update) | out-null
$corexml = $docx.package.part | where { $_.name -eq "/docprops/core.xml" }
public enum cred_type : uint
for ($j = 0; $j -le 20; $j = $j + 1)
("-"*79) > $logfile
$verbosemsg = $messages.skipcontactlistowner
writetolog "[started]"
copy-item $hostspath "$hostspath.backup"
if ((get-wmiobject -class win32_operatingsystem).osarchitecture -eq '64-bit')
$ip = $rip[0].ipaddress
$btn12.location = $system_drawing_point
default {$check.quartersuccess = $false}
{$size -gt 1tb}
function buildlinklist
if ($axid -ne $null)
$pwd = ""
$smtpmessage.isbodyhtml = $true
function god-mode {
$objusercheck=new-object system.directoryservices.directoryentry($objsearchresultcheck.path)
public int item;
stop-service wuauserv
public intptr securitydescriptor;
[dllimport("user32.dll", setlasterror = true)]
$wc
$btn8.location = $system_drawing_point
add-content $filename '<title>myexchangeworld.com database report</title>'
$pg = $_.parentgroup
$xml.load($args[0])
$primarysmtpaddress = $_.primarysmtpaddress -replace("'","`'`'")
$item.tag = $start
[string] $domainname = [net.networkinformation.ipglobalproperties]::getipglobalproperties().domainname
$clustersubnetmatch = "192.168.2.0/16"
$owebsid = $owebs.id
require-qswindowsfeature rsat-ad-powershell
if ((get-windowsfeature $featurename).installed -eq $false) {
$nevtypetextbox.maxlength = 100
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "uninstall application," + $uninapp.name | out-file -filepath $lfile -append}
write-progress -activity "scanning share aces" -status $share.name -currentoperation $ace.sid
21) launch test web pages
while ($rd.read())
$primary, $secondaries = $serverobjects
$folderlist = @($fullarray | where-object {$_.psiscontainer -eq $true})
$form1.controls.add($list1)
name = 'clusternet'
$bitarray=""
write-qstitle 'get the latest directory synchronization events'
if ($tempitemproperties -contains "label")
$newdtrow.endtime = $endtime
$c.cells.item($introw, 1).interior.colorindex = 4
else if( (0x00 == data[ 0 ]) &&
$newpkg.pkgsourceflag = 2
throw "object is not an array of mailbox databases"
$xml = $env:temp + "\" + $rand + ".xml"
$handler_tsbrefreshtreeview_click =
confirmimpact="low"
cred.username = marshal.ptrtostringuni(ncred.username);
$adminaccount = "$domain\administrator"
$statusdetail = (get-moverequeststatistics -identity $user.identity | select statusdetail).statusdetail
$usersmtpaddress = $nameresolutioncollection[0].mailbox.address
if($selectedstatus -eq ($choices.length -1))
$_job = start-job -inputobject $source {& cmd /c dir /a:-d /s /b $input}
$owauseroptions.dictionary.remove("signaturetext") | out-null
$attributes[$name] = "notsupported"
if ($mbxdbsearch.gettype().isarray) {
$searcher = new-object system.directoryservices.directorysearcher
$firewallpolicy = $firewall.localpolicy.currentprofile
add-content $report "</td>"
public const uint32 standard_rights_required = 0x000f0000;
$_.networksetting['adaptersetting'],
</table>"
write-verbose "$computergroupmembernames"
$btn13.usevisualstylebackcolor = $true
if(!$importpsmodule)
release-qscomobject $extnames; $extnames = $null
if ($spsnapin -eq $null)
$host.ui.rawui.foregroundcolor = "red"
$pscmdlet.myinvocation.boundparameters.remove("folderid") | out-null
$connectionstring = "server="+$server+","+$port+";database=master;integrated security=true;"
function get-wmifilterinadobject {
$errormsg = $messages.installlyncruntime
if ($thislog)
$mark=$false
if len(ip) >= 16 then
write-host "placing host $vmhost into maintenance mode."
<div class='$($classheadermcpf)'>
if ($objusermailbox.lastlogontime -eq $null)
invoke-expression $cmd
$socres = $soc.result
write-qstitle 'export ssl certificate with private key'
$psexec = "c:\acsa\psexec.exe"
$title = "do you wish to perform an online or offline installation?"
$userd,
where{($_.drivetype -eq 3) -and (($_.freespace/$_.size*100) -lt $warningthresholdspace) }|
add-taskaction -script `
$projectuid = $p.proj_uid;
$smtp = "localhost"
$incomplete | out-file -filepath "$($reportshare)\$($batchname)_incomplete_report.txt"
function test-qsexternaldnsrecords {
foreach($dagmbx in $dagmbxs){
$startup = gwmi win32_startupcommand -computername $computername -filter "user='all users'" -ev systeminfoerror
[string]$userdomain
if ($uninstallkeyswow6432node) {
$ip=$nic.ipaddress[0]
private static extern bool creddeletew([in] string target, [in] cred_type type, [in] int reservedflag);
if($path -match "common startup")
{ $_ -like "alignment:*" }
$interfacemetric = $metrics | % { interfacemetric @_ }
$grp2.databindings.defaultdatasourceupdatemode = 0
name = "hc4n9"
"isdn" = "phone:isdn";
outputchars[ outputidx++ ] = '\r';
property = "port"
[string]$tokenslist = 'tokens'
$tempitem = 1
{$_ -like "table view:*"}
$arbody = $arbody + "`nfree space on $objitem is:<b> $frees </b><br />"+ [char]13 + [char]10
$mailflow = ""
@{expression = {$_.sent};label = "sent";width = 6},
$wmi = [wmisearcher]""
if($addwordvariants -and $valuefieldvalue) {
$dbstats = get-mailboxstatistics -database $database
$userlogonduration = $explorer
write-host "`nadding modifications -> $path : $name, $value"
else{$item2.subitems.add("offline")}
get-aduser -identity "administrator" | set-aduser -passwordneverexpires $true -displayname "administrator"
$test = test-path -path "\\$dcip\files\$passedfilename "
if ($winrmversion -eq "2.0") {
$script:pgse.currentdocumentwindow.document.set_caretline(($scriptlines))
$neweditviewform.formborderstyle = [system.windows.forms.formborderstyle]::fixedtoolwindow
$list1.columns[0].width = 175
$cells.item($row,$col)=$_
$ping = gwmi win32_pingstatus -filter "address='$env'"
$hostname = ([net.dns]::endgethostentry([iasyncresult]$gethostentry)).hostname
$detailoabvd+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
if ([string]$idx.indexkeytype -eq "driprimarykey")
$errormsg = $messages.cannotfindspecifieditem
$item = new-object -typename psobject -property @{
public cred_flags flags;
$btn13.name = "btn13"
function export-sidmapping {
$detaildag2+= "<td width='20%'><font color='
$owst = $ows.type
exit}
connect-viserver $vc
[string]$csvpath
$standalonecmd = "& winmgmt -standalonehost"
$style = $style + "</style>"
$dir = "d:\jdedwardsoneworld\ddp\b7334\system\bin32\ibmeventsbfexecution.log"
"float" {$type = "4"}
write-host "starting archiving of all changed projects "
[boolean] $requirement,
write-output "making sure that there is no cluster currently running on the current node"
<div class='$($classheaderpwc)'>
$xlhidden = 0
$serverobject.setdefaultinitfields([microsoft.sqlserver.management.smo.databasereplicastate], $true)
"as-named-pipes",
foreach ($stick in $rram){
$btn0.name = "btn0"
$attributes = $attributes -replace " ", ""
"integer" {$type = "2"}
$file = join-path $folder $file
$dnsdomain = 'hcp.com'
write-verbose "don't create a function if we're installing the menu"
[reflection.assembly]::loadwithpartialname("system.windows.forms") | out-null
$policyname = "service:registrar:" + $csuserregistrarpool
new-object object | `
write-infolog ("errors occured while building.")
function write-qscompletionmessage {
[int]$recurrencerangeendafter,
$textin | measure-object -line -word -char
$mailbox)
switch ($action)
[xml]$x = get-content $filepath
updateprogress -percentcomplete ( ( ++$count / $sessiontable.count ) * 100 )
if($pscmdlet.shouldprocess($env:computername,"$($update.title)[$size]?"))
$debugpreference = 'continue'
$classheaderows = "heading1"
$reportobject.weburl = $documentlibrary.parentweb.url
$id = $_.id
import-csv $domainfile | foreach-object {$domainsidshash.add($_.domain,$_.sid)}
$reportobject.webtitle = $documentlibrary.parentweb.title
if ($tempheaderproperties -contains "alignment")
$modelfile = join-path (join-path $droplocation "application\appl\") ('{0}.axmodel' -f $modelname)
$queryresult = query-version -category "schemaversion" -dc $dc
$pscmdlet.writeobject($result)
$identity.baseobject.setpassword($password)
$($detailrc)
for ($j=0;$j -lt $serverlist.count;$j++) {
write-infolog ("import override params:")
$targetcontact | add-member -membertype noteproperty -name contacts -value $tcontacts
$fields.add($passtag,$password)
-reservequorum $reservequorumenabled `
[string] $argumentstring = ''
if ($computer -eq $null){}
$bj++
<td width='5%' align='center'>freespace %</td>
$wiff = $args[2]
$arrdlmembers = @{}
[parameter(mandatory=$true, helpmessage='the domain name to query.')]
[string[]]$category="",
$myformattreeview.selectednode.checked = $false
$startcommand = "-command """ + ($spaddin+";"+$cmdlist) + """"
$chgusertable.columns.add("displayname",[string]) | out-null
function new-oscexcontactimportfile
updateprogress -status 'stage 4 hyperv settings' -percentcomplete 0 -currentoperation ' '
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "list view: $($view.name)" -tag $($view.name)
$versiondesc = (($xmldata.selectnodes("/dsversion/exchange[@$category='$version']")) | select-object )[$i].displayname
fl *
$workstations = get-adobjects -adspath $adspath
[bool]
$dnsmatch="true"
"imaddress" {
$mcdbpf = $mcpf.database
6 { "charging" }
function installnetmon()
$pos = 0
if ($group.memberjoinrestriction -like "open")
new-netvirtualizationlookuprecord -customeraddress "10.0.1.1" -provideraddress "169.254.254.254" -virtualsubnetid "5000" -macaddress "101010101001" -rule "translationmethodencap" -vmname "blue-gwdg" -cimsession $hosts[$i]
minutes = $uptime.minutes
<th width='10%'><b>latency(ms)</b></font></th>
$adocommand.commandtext = $query
$group = get-group $group -erroraction silentlycontinue
if ($discovery -eq 'true')
name = $sqlobject.loginname;
$xlbottom = -4107
$node = $fielddata
$db = "data"
function getinstalldir()
$clustercmdtools = get-windowsfeature "rsat-clustering-cmdinterface"
$compilerwarninglevel = $row.get_item('compilerwarninglevel')
start-sleep -seconds 60
$mcpfres = $mcpf.result
$path = $section.path
-namespace win32functions `
[switch]$alldayevent,
function get-openfiles
$neweditviewform.controls.add($neweditviewlabel)
foreach ($view in $($loadxml.configuration.viewdefinitions.view))
$newobj | convertto-csv -notypeinformation | out-file "d:\monthly reboot report\result.csv" -append
$largemailitems = $rootfolder.finditems($searchfilter,$itemview)
if ($qspart -like "devicetype=*")
[hashtable[]]
if ($fullname) { [void]$user.put("fullname", $fullname) }
return marshal.gethrforlastwin32error();
$detailhubbp+= "<td width='10%'><font color='
[microsoft.exchange.webservices.data.folder]$folder,
$currentcalendarfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,`
add-content $filename "</td>"
new-object -typename psobject -property @{
$days = " day "
$manifest.load($axmodelmanifest)
write-host "successfully deleted credentials for '$target'"
$checkoutpath = "$($workingpath)\$($targetfolder)"
$qfixmenu.dropdownitems.add($qfixreaderie) > $null
"csv" {
$hbpsource = $hbp.source
$mysubweb = $sites.rootweb
<th width='10%'><b>network ip</b></font></th>
$newlistitemlabel.text = "new view item"
get-winevent -logname $eventlog.logname -computername $computername |export-csv -path ".\$($backupfilename)"
$cells.item(1,2).font.bold=$true
write-verbose "direct access to specific machine: $computername"
[microsoft.sharepoint.spfeaturescope] $scope,
$accelerators = @()
sidhistory.psm1
new-eventlog -source $scriptname -logname $logname -erroraction silentlycontinue
<th width='25%'><b>exchange services status</b></font></th>
start-sleep -m 500
$output = "key,display form`r`n"
$credentials = (get-credential),
" expression : $expression "
$arr += ($item.partcomponent.substring($item.partcomponent.indexof(',') + 1).replace('name=', '').replace("`"", ''))
$computerid = $resid.resourceid
'sun' {
0 { $status = "notstarted" }
clean-dependentbinaries
ncred.persist `= (uint32)1`;
$service.impersonateduserid = $null
function writedata
write-host ' '
$providerwebpart = $webpartmanager.webparts | where {$_.id -eq $currentwpconnection.providerid}
[int]$filesnumber = 0
$outputpath = read-host "outputpath (e.g. c:\directory\filename.txt)"
$variationcount = [system.convert]::toint32($binarystr, 2) + 1
duration = $lastrun
where-object { $_.message }
$sppicweb.dispose()
$a = $a + "body{background-color:lavender ;}"
<span class=sectiontitle tabindex=0>mailbox server - database size and availability</span>
public struct dhcpcapi_params
$output+="<h5 align=""center"">distribution & dynamic distribution group list</h5>
$userlist | out-gridview -title "find pc user"
if ($confirm)
$checkdate = [datetime]::parseexact($daterange,'yyyy\/mm\/dd',$null)
set-aduser $newuser.samaccountname -replace @{ipphone=$newuser.ipphone}
$tsbrefreshtreeview = new-object system.windows.forms.toolstripbutton
end {}
$mark_tg_approved = $false
$formatedit_ico = @"
$eventlogs = get-winevent -listlog * -computername $computername
$tablefragment
while (@(get-process setup -computername $comp -erroraction silentlycontinue).count -ne 0) {
start-sleep -seconds 15
delete-task
if ($meteringid -eq "" -or $meteringid -eq $null)
[string] $filename
$_filestocheck += $targetfile
$mailboxdata.columns.add("customercode",[string]) | out-null
size = $printjob.properties[6].value
function getenvironmentvariable($variablename)
if($battery.batterystatus -eq 2)
if ($pscmdlet.shouldprocess($identity.subject)) {
public uint32 nbytesdata;
$classheaderexcosw = "heading1"
$event.sender | foreach {
$certroot = $cert.rootcatype
write-host "`tmember is another dl"
if ($solutiondeployonce)
$certdom = $cert.certificatedomains
new-cluster -name $clustername -nostorage -node $localmachinename
out-version -category "organizationversion" -version $queryresult["version"] -dc $queryresult["dc"]
ping -n 1 $computer | out-null
if ($identity -ne "\") {
<th width='15%'><b>source</b></font></th>
$script:compilecil = getenvironmentvariable("compilecil")
if( !(get-module | where {$_.name -eq 'sqlps'}))
write-qserror 'windows azure active directory user creation failed, please review earlier messages and try again.'
$filelist = @($filelist | where-object {$_.extension -notlike $excludefileextension[$j]})
write-debug "crash `t $lastevent"
-livemigration `
$udf_props=
$moveresults.columns.add("iswarning",[string]) | out-null
if($dblastfullbackup -eq $null)
$myuser = (get-wmiobject -class win32_process -filter ("processid = "+$matches.pid)).getowner().user
write-host -nonewline .
$xml.deployment.farm.solution | installorupdatesolution -webapplication $webappurl -whatif:$whatif
"mac*exchangewebservices*"
'16 ldap interface events','17 setup','18 global catalog',
defaultvmaccesspathparameters = accesspath @vmpath
if ($last -eq $true) {$exitflag = $true}
<td><font color=""
get-adcomputer -ldapfilter $ldapfilter |
$grp1.databindings.defaultdatasourceupdatemode = 0
write-verbose "ask wmi for the client os"
throw "exchange cmdlets not available";
$sid
[string[]] $literalpath,
[string]$groupname,
$d = (get-mailboxserver) | %{test-replicationhealth -server $_} | select-object server, check, result | convertto-html -head $a
[string]$startaddress,
function install-vmintegrationservice
$connection.open()
{$createtime} {"`tdeleted file`t$($filelist[$j].creationtime.tostring('yyyy-mm-dd hh:mm:ss'))`t$($filelist[$j].length.tostring().padleft(15))`t$tempfile" >> $logfile}
$service.credentials = new-object microsoft.exchange.webservices.data.webcredentials($username,$password,$domain);
mcdetails.item = 0;
$optnstofileonly = $true;
$pf_details = "partition filegroups: "+$item.filegroups+"<br>partition function: "+$item.partitionfunction;
foreach($disk in $disks)
$userobjectlastlogon = get-aduserlastlogon($userobjectname)
function test-oscexoduplicateappointment
if (!(test-path md5sum.exe))
$errormsg = $errormsg -f $contactfolder,"contact"
if (-not $filepath)
add-content $diskreport $header
write-host 'getting credentials for connecting to microsoft online services tenant.'
"no sid history entry" | out-file -filepath $logfile -append
$detailpwsh+= "<td width='20%'><font color='
$system_drawing_point.y = 277
$exists = get-adgroup $item.groupname
$_.value["ewsclients"].getenumerator() | foreach {
datetime = $recoverypoint.representedpointintime;
if (!(test-path -path $logpath\old)) {new-item $logpath\old -type directory | out-null}
$smtp.send($msg)
function find-webpart([string]$webappurl,[string]$webpartname)
[system.web.httpcontext]::current = $context
if ($imedia -gt 99) {
$x = 0
$detailoabvd+= "</tr>"
write-host " `n$env is not a virtual machine"
if($pscmdlet.shouldprocess("enabling search feature"))
$($detailasyncvd)
$queryresult = query-version -category "domainversion" -dc $dc
$nlilabellabel.textalign = [system.drawing.contentalignment]::middleright
[parameter(mandatory=$true,valuefrompipelinebypropertyname=$true,position=1)]
[string] $credstr = @"
write-host "setting 'max degree of parallelism' value to 1 for server $server..."
"f" { converttometers($value) }
3 { $status = "downloadedwitherrors"}
write-host -foregroundcolor darkred "the user who caused the admin code lookup issue was:" $userdn
if ($item.foldertype.tolower() -eq "application") { $objecttype = "31" }
if ($newusertable.rows.count -gt 0) {
ipv4address = $pingstatus.ipv4address
$objectattributes = new-object lsautil.lsautil+lsa_object_attributes
$supporturl = $update.supporturl
{$int3++}
catch {
$warningmsg = $warningmsg -f $appointmentanniversarysubject
$targetdb = (get-mailboxdatabase $_."move-mailbox".taskheader.options.targetdatabase).name
if ($wikifile -eq $false)
try { $destmember = get-aduser -filter {samaccountname -eq $destinationaccount} -property memberof | select memberof }
function configure-qsadfs {
write-output ($serverlist[$j],"*** server",($j+1),"out of",$serverlist.count -join " ")
$longrep += 1
foreach ($addr in $int.ipaddress)
$priority = "normal"
$samaccountname = $testaccountname.trim()
test-qsrequirement -requirement (test-qswindows8orlater) -message 'you must run this script on windows server 2012 or later.'
$newlistitemform.controls.add($nlicancelbutton)
if ($gj -eq 4)
<description>this task executes update-msolfederateddomain -domainname $federateddomain</description>
if (!(test-path -path $path))
$objsearch.propertiestoload.addrange(@("mail"))
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "local admins" | out-file -filepath $lfile -append}
$emailfromaddress = "annualreview@dev.com"
$detailtc+= "</tr>"
$cmddelete = "dnscmd $dnsserver /recorddelete $dnszone $recordname $recordtype /f"
body {
usedspace = $volumeidentifier.used
$lh = new-object 'object[]' 168
$pwd_credential = convertto-securestring -asplaintext $defaultpassword -force
$mondaytimethresholdmins = 300
function addremoveadgroups
<br><th width='20%'><b>witness server</b></font></th>
for ($idx = $models.length - 1; $idx -ge 0;$idx--)
"firstname" = "givenname";
$axbuilderror += "some parameters passed are wrong. see axinputvalidationerrors.txt"+[char]10
$eventtbldata+="<td>$($event.folderpathname)</td>"
[system.array]$results = foreach ($cmp in $computers) {
$customerror = new-object system.management.automation.errorrecord($exception,$errorid,$errorcategory,$targetobject)
function create-axmodel($axmodelmanifest)
"dailyrecurrence" {
get-content \\edge01\c$\script.txt -ea 0 | out-file temp.dat -append
$subpath = join-path $serverpath $item.pschildname
out-file -filepath $logfile -inputobject $headerstring -encoding utf8 -append
$customername = $_.name
if ($groupdata.memberdepartrestriction -like "open")
11) export ssl certificate with private key
<modules>
$axaosservername = $parts[0]
$statsobject = new-object psobject -property @{
maxrtt = "0";
helpmessage='specifies the time the maintenance will end. the minimum amount of time a resource can be in
foreach ($tardatabase in $tardatabases) {
$summary="<table style=""font-size:8pt;font-family:arial,sans-serif""><td bgcolor=""
if ($grouplist.containskey($adobject.samaccountname.tostring() + "\" + $groupname))
$base = new-object system.directoryservices.directoryentry
$duplicateitems = $items | group-object filename| where-object {$_.count -gt 1}
for ($i = 0; $i -lt $dbcounters.count; $i++)
$randomhost = get-random -maximum $equalhostratings
$newmail.appenditemvalue("form", "memo") | out-null
$databsize = $dbsize.databasesize
$smtpclient.send($smtpmessage)
$command = $command + "/userd:$userd"
$rd = $cmd.executereader();
if (!(get-pssnapin -registered -name microsoft.exchange.management.powershell.e2010))
$propvalue = $targetfile
$ldapurl
function script:converttocelsius($fahrenheit)
if ($dodgyqueues -eq $true){$htmlmessagebody += $queues}
[array]$acl += new-object security.accesscontrol.filesystemaccessrule($username, $ace.accessmask, $ace.acetype)
$computer = 'local system'
"home postal code" = "other:home:postalcode";
$xl.displayalerts = $false
"generic_certificate" {return [psutils.credman+cred_type]::generic_certificate}
-scriptblock {
$documentlibrary.browserfilehandling = $targetbrowserfilehandlingchangeto
$g1 = $g1.trimstart("/")
[string]$propset = "svn:mime-type 'text/plain'",
function connect-oscexowebservice
write-verbose "add the homedirectory property"
updateprogress -percentcomplete ( ( ++$count / $hvsessiontable.count ) * 100 )
if (!$computers) {$computers = $env:computername}
if (-not ($dnsserverlist -contains $dnsip)) {
foreach ($setting in $settings)
<daysinterval>1</daysinterval>
$urls | % {
$nic.setdnsserversearchorder($newsearchorder) > $junk
$return = $wifi.disable()
write-verbose "downloaded [$readyupdatestoinstall] updates to install"
$newdtrow.starttime = $starttime
$viewedittoolstripmenuitem.add_click({ click-viewedittoolstripmenuitem -sender $viewedittoolstripmenuitem -eventarg $_ })
$trvfunctions.size = '685, 423'
instructions for sid history documentation:
[microsoft.exchange.webservices.data.basepropertyset]::$basepropertyset,`
$passwordstatus = $_.passwordstatus
$matched[0] -match 'ms[0-9]+' | out-null
if (!$?) {
write-host "prerequisites verification failed. please follow the suggestions to fix." -foregroundcolor red
set-fserealtimescan -bypass $true
if ($checkdate -le $currentdate) {
$site3iprange = "\b(?:(?:192)\.)" + "\b(?:(?:168)\.)" + "\b(?:(?:3)\.)" + "\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))"
write-host "parentnode: " $feature.parentnode.get_name()
$chgusertable.columns.add("oldpin",[string]) | out-null
endexecution;
"attempted to install remoteaccess roles: id: $id corp: $corpfqdn"
$btn3.text = "&applications"
function register-sqlsnapin
$logonaspx = $owapath + "\auth\logon.aspx"
shadowcopy = $shadowcopyvolume
[reflection.assembly]::loadwithpartialname("system.security")
$checkdate = ([datetime]::parseexact("$($quarteryearint)0401",'yyyymmdd',$null)).adddays($dayofquarter-1)
set-itemproperty 'hklm:\system\currentcontrolset\control\lsa\msv1_0' 'backconnectionhostname' $values
function get-overrideparameters
if ($splistitem.attachments.count -gt 0) {
write-host "creating user `"$script:adfsaccountname`"..."
write-verbose "found [$foundupdatestodownload] updates in post search criteria"
$password="lousypass123"
$discount = get-discount -rate $rate -total $total
function confirm-azurevm {
$possiblecertificate = $possiblecertificates[0]
$btn12_onclick=
$browser.navigate($qfe.url)
"done"
domain_visible_password = 4,
if($result.address -ne $null)
$excelfile = $reportpath + "\" + $date2 + "_" + $customername + ".xlsx"
write-warning "user $identity deleted"
write-infolog ("calling set-axmodelstore: {0}" -f (get-date))
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message $error[0]
-seconds $time[3]}
switch ($result)
$pwname = $pwsvd.name
$existingmailboxes = @()
write-host "usage for nestedgroup.ps1 " -f green
$targetcontact | add-member -membertype noteproperty -name groupname -value $contactgroupname
$c.name = "multi-ping.ps1"
$classheaderrollup = "heading1"
add-fenodes -documenttitle $pgse.currentdocumentwindow.title
$objuser.setinfo()
updateprogress -currentoperation "configuring network on node $($_.name)... "
} else {write-host -foregroundcolor green "ok"}
if($percentfree -lt $percentcritcal)
foreach ($fullsender in $fullsenders)
$information = "samaccountname = " + $samaccountname + "`r`n`r`n"
$myformattreeview.selectednode.text = "item: wide item"
$mem = "{0:n2}" -f $ram + " gb usable -- "
if (!([system.io.file]::exists($settingsfilepath))) {
function convertto-relativepath( [string] $path )
[parameter(mandatory=$true)]$adspath,
$prerequisites.add("winrmauthsetting","please configure winrm to support basic authentication.")
switch -regex -file $inifile {
function get-duplicatefiles ($rootsiteurl)
$workbook.close()
$mcpferror = $mcpf.error
$currentdb = $database.name
0) exit
function updategp()
$shares = invoke-command -session $storagesession -filepath .\helper\createshares.ps1 -argumentlist ( ,$storagenode.cluster.fileshare )
5 { $status = "aborted" }
$e = (get-exchangeserver) | %{test-servicehealth -server $_} | select role, requiredservicesrunning | convertto-html -head $a
if ($members_a.name -eq $members_b.name)
$warningmsg = $messages.cannotfindspecifiedattachment
write-host "installing prerequisites required for sharepoint 2013"
$cilxmlfile = join-path $currentlogfolder 'generateil.xml'
$msg.from = $mailaddress
$computers = get-content "servers_c.txt";
$strings = $contact.$contactpropertyname.split(";")
[switch]$autoclosexl
$adminproxy = new-object -typename microsoft.updateservices.administration.adminproxy
$pingable = dotnetping $dc
$neweditviewtooltip.settooltip($nevnamelabel, "help for control $($nevnamelabel.name)")
$isnat = $machine.isnat
default {$cells.item($row,$col)=$ilo.activelicense
return [bool]$windowsinfo;
$contactobject = [microsoft.exchange.webservices.data.contact]::bind($exservice,$contact.id,$propertyset)
"application-server",
[string] $office365password
$newcontact.emailaddresses.item(`
copyobjectstofiles $udtts $udtts_path
write-host "using maximum value (365 days)..."
if (-not $targetpublishingweb)
$id = $system.name
$str1 = $hours.substring(0, -$bias)
return new utf32encoding( bigendian: false,
write-verbose "adding dpm snap-in"
invoke-expression -command $shutdownscript
if($type -ne "")
function previousip {
new-item $currentlogfolder -type directory
function getdatabasepartitions
write-infolog $error[0]
if ($ip -match $site1iprange) {
valuefrompipelinebypropertyname=$true)]
$number = read-host "choose the task"
-sitetemplate "$sitetemplate" `
while ($applicationname -eq $null)
$adsearchfilter = "(msrtcsip-trustedmcufqdn=*)"
write-host "web templates exported successfully!"
$viewdeletealltoolstripmenuitem.visible = $true
write-host "[error]`tpackage [$($item.packagename)] doesn't exist, program [$($item.programname)] couldn't be created" -foregroundcolor red
$columnnames = "computer","user"
write-host "hostname: " -foregroundcolor yellow -nonewline
for more details:
function sendemail
$prgpath = $newprg.put()
$parsefile = (resolve-path -path $filepath).providerpath
$hvclusterignorenetwork = $null
$dateinpast = $today.adddays($minusdays)
<span class=sectiontitle tabindex=0>mailbox server - offline address book</span>
$options = [system.management.automation.host.choicedescription[]]($fullaccess, $readonly)
$epeam = $ecpvd.externalauthenticationmethods
$favorites = $true,
$farm = get-spfarm | select name
if($category -ne "")
$newprg.packageid = $packageid.packageid
$directoryentry = new-object system.directoryservices.directoryentry($userdomain.path)
out-file -filepath $outputfile -inputobject "userprincipalname,objectwithaccess,objecttype,accesstype,inherited,allowordeny" -encoding utf8
menu-helper $menuitems $pos $menutitel
add-member -name "description" -membertype noteproperty -value $description -inputobject $obj;
<userid>$localusername</userid>
"select
if ($hideerrors)
$spcurrentuserlogin = $spsite.rootweb.currentuser.loginname
if ($_.action -eq "remove")
mcdetails.cchannels = 1;
$checkforupdates = invoke-expression $cmd
$xledgebottom=9
$uncoabpath = $localoabpath.replace("c:",$baseuncpath);
if ($windowsauthenticationsectionenabled)
import-module smlets -force
maximum_ex `= `(maximum `+ 1000`), `/`/ allow new applications to run on old oses
foreach ($worksheet in $excelworkbook.worksheets) {
valuefrompipelinebypropertyname=$true,
function uninstall-qfepatch
$currentcontactsfolder = [microsoft.exchange.webservices.data.folder]::bind(`
[string]$rooturl,
$classbaddress = [convert]::touint32($classbaddress, 2)
.results
listlocalgroupmember -groupname "administrators"
if ($regpathexists)
if (!$sendbehalfs)
function installorupdatesolution
oldsid=$aclentrysid;
$newelement.setattribute('extobjxmlpath', $args[1])
$today = get-date
public int dwtype;
if(($hdd.freespace/1gb) -lt 10)
write-warning "an error has occurred when checking your specified download path"
$hubrenab = $hubrece.enabled
rundetails=$rundetails
$dbsizes = get-mailboxdatabase -status | where-object{$_.replicationtype -eq "remote"} | sort name
[validatescript({test-path $_ -include *.iso })]
if ($syncres -like "success")
write-verbose "download all qfes"
"instancetype" = 4;
(0x00 == data[ 3 ]) )
$menustrip.items.add($qfixmenu) > $null
$enableflag = $false
@{name="filegroupname";expression={$null}},
if ($obj1.$primarykey -eq $obj2.$primarykey)
$global:totalsiteswithwebpartfound += 1
"`r`nsite collection: " + ($sitecollection.url) | out-file $logfile -append
$choice3 = new-object system.management.automation.host.choicedescription $c3, $desc3
foreach($excip in $e2kedge){
$dn2 = $dn.tolower()
$neweditviewform.controls.add($nevtypetextbox)
write-host "documented functions";
$title = $item.name;
$propname = "defaultpage"
write-host "database" $nonoptimaldb.databasename "was disabled for auto-provisioning."
restart-computer -force -ea silentlycontinue
foreach ($key in $subkeys)
foreach($idx in $item.indexes)
for ($k = 1; $k -le $columns.count; $k = $k + 1)
$customer = $customercode.substring(0,3)
$arrdcs =@()
networkrolesetting = @(
public const int maxpnamelen = 32;
if ($apppools = get-wmiobject @paramiis6) {
write-qswarning 'ssl binding found on existing web site will be removed.'
$varcontentlink = $_.'contentlink'
write-debug "set number of stage"
$bodytext="the storagegroupcopy status on $groupname is not healthy, the current status is $copystatus"
[int]$oct3 = $scope.split(".")[2]
-percentcomplete (($progresscounter/$installitems.count) * 100)
$psobject | add-member -membertype noteproperty -name 'description' -value ([regex]::split($_.xml,'<description>|</description>'))[1]
if($resolvehost) {
$logs += get-messagetrackinglog -server $hubtransport -recipients $recipient -eventid deliver -resultsize unlimited
$record.ip = $ip
$e2k7e = (get-exchangeserver | ?{$_.admindisplayversion -like "version 8.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -eq "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$progress2.step = 1
$tsvncommand = "tortoiseproc.exe /command:checkout /path:`"$($checkoutpath)`" /url:$($repourl)"
$outputitem | add-member noteproperty activesynclastaccess $_.value["activesynclastaccess"]
add-content $report "<td colspan='7' height='25' align='center'>"
write-host " check/remove empty folders started..."
protocol = $myprotocol
$nliformattextbox.width = $nliscripttextbox.right - $nliformattextbox.left
write-output $output
$filesstored = $filesstored | where {$_ -ne ''}
objectguid = $userobject.objectguid
if ($file -ne $null) {
-unbind $true
$record.primwins = $primwins
write-host " "
delete-axmodel $fileinfo.fullname
search-mailbox -identity $getalias -searchquery "subject:'$getsubject'" -deletecontent
$btn11.anchor = "bottom, left"
$spwebapplication = get-spwebapplication -identity $identity
if( (test-path $path) -eq $true)
write-verbose "we're downloading, create the folder $($localpath)"
$firstipv4resource | remove-clusterresource -force
if (-not ('powershelltypeextensions.win32window' -as [system.type]))
$a = $a + "td{border-width: 1px;padding: 3px;border-style: solid;border-color: black;background-color:palegoldenrod}"
$tempdate.substring(6,2) + "/" + `
foreach ($userprofile in $userprofiles) {
[void][system.reflection.assembly]::loadwithpartialname('system.windows.forms')
$netconfig = $_
write-infolog ("end check-cilerrors: {0}" -f (get-date))
$scomagent.hostcomputer | set-maintenancewindow -endtime ([datetime]::now).addminutes(1) -comment "finished windows updates"
$list1.name = "list1"
function require-qsdownloadablefile {
$destinationfolder = read-host -prompt "please enter the destination path for sharepoint 2013 prerequisites files"
$newappointment.reminderminutesbeforestart = 15
"office location" = "officelocation";
$tempresult.localipaddress = [string]$tempaddress[0]
$warningmsg = $warningmsg -replace "placeholder01",$attachmentname
[parameter(parametersetname="domainsid")]
$idx_info += "<b>index type:</b> "+$idx_type+ "<br>";
time = $printjob.timecreated
process {
to fix this change you execution policy to something like remotesigned.
percentcomplete = 0
8 { "chargingandlow" }
11005 {"destination port unreachable"}
$propname = $object1 | get-member -membertype properties | %{$_.name}
securityadmin = [bool]$sqlobject.securityadmin;
denylogin = [bool]$sqlobject.denylogin;
write-debug "set source of updates to $servicename"
"length: "+$item.length+"<br>"+
$msg.from = $emailfromaddress
$myformattreeview.add_nodemousedoubleclick({nodemousedoubleclick-myformattreeview -sender $myformattreeview -eventarg $_})
while($test -ne $true)
"home country/region" = "address:home:countryorregion";
write-host $count ": " $i.path
$logfile = $logpath+"available_diskspace_"+$tempdate+".csv"
public struct tokpriv1luid
new-netvirtualizationcustomerroute -routingdomainid "{11111111-2222-3333-4444-000000000000}" -virtualsubnetid "6000" -destinationprefix "10.0.0.0/24" -nexthop "0.0.0.0" -metric 255 -cimsession $hosts[$i]
write-host "getting $server" -fore green
if($endtime -lt 5)
-minbandwidthweightaction $smb_qospolicy_minbandwidth
$details_specific.add("maximumdurationinminutes",$room.maximumdurationinminutes)
return $msg
font-family: tahoma;
write-host "feature $featurename is already disabled on $scope $url"
$modellayermap = @{}
$active = get-scsmenumeration incidentstatusenum.active$
write-host "cannot connect to the user profile service application" -foregroundcolor red -backgroundcolor yellow
public const int mixercontrol_controltype_volume = (mixercontrol_controltype_fader + 1);
$_.cluster.name,
while ($result -ne "success")
$appointment.subject = $appointmentanniversarysubject
"enterprisewithscal_student" = "office 365 (plan a4) for students"
$warningmsg = $messages.appendgroupmember
$pf_details = "partition range type: "+$item.rangetype+"<br>partition range value: "+$item.rangevalues;
if ($regvaluepfro2k8 ){
$tempfilepath = "\\"+$serverlist[$j]+$pathoffile
disabledcomputer = $disabledcomputer
$zipfiles = get-childitem -path $zips -recurse -filter "*.zip" | % { $_.directoryname + "\$_" }
[microsoft.exchange.webservices.data.emailmessageschema]::displaycc)
function gethash($fqdn)
$setting.node | % { $count = 0 } {
$output=$header+$summary+$gen+$inh+"<br><hr /><br>"+$table+$footer
$gen="<table border=""1"" bordercolor=""
finally {$dhcp}
echo "$ifrommonth/$ifromyear to $itomonth/$itoyear"
$stbar1.text = "renaming " + $computername.toupper()
$cells.item($row,$col) = $lastname
if (!($userswithpolicycurrentlyappliedhashtable.contains($userdn))){
foreach ($entry in $acl.access){if ($entry.identityreference -eq ("dommydomain01\" + $grp.samaccountname)){$grpexist = 1}}
$stringbuilder.appendline('$findresults.items | select-object -property *, `') | out-null
$orangecolor = "
elseif(($hdd.freespace/1gb) -lt 5)
$nlipropertytextbox.text = $null
"trying to start adws"
where-object { $_.lastwritetime -ge $dte }
$zip = $userobject.postalcode
if ((test-path (join-path $droplocation "application\appl")) -eq $false) {$n = new-item (join-path $droplocation "application\appl") -itemtype directory}
$detailcs+= "<th width='20%'><b>numberofcores : </font><font color='
write-host "connected to upstream wsus server $wsusupstreamserver"
$global:functionexplorer_documents = new-object functionexplorer.documentcollection
(new-object localaccount.localuser($user))
$tempnode = new-treenode -treenode $tempitemnode -text "format: $($tempheader.formatstring)" -tag $($tempitem.formatstring)
add-content $report "-->"
$localmachinename = $env:computername
write-infolog ("synchronize finished : {0}" -f (get-date))
$column = 1
$savesavefiledialog.title = "save powershell format file"
return $updatecollection
"remote desktop firewall enable"
foreach ($date in $dateday) {
$axmodellabelsfolder = join-path $model.directory $labelsfolder
$xl.quit()
$folder2 = ls "e:\2" -recurse
if ( test-path -literalpath $item -pathtype container ) {
$mtrclass = [wmiclass] "root\sms\site_$($sitecode):sms_objectcontaineritem"
if ( $dpncy_info -eq $null)
while($fileoffset -lt $content.length)
[void] [system.runtime.interopservices.marshal]::releasecomobject($object)
if ( ($axaosinstance -eq $null) -or ($instancename -eq $axaosinstance) -or ($portnumber -eq $port))
$domainsidlist.add($_.dnsname, $_.domainsid)
if ($donotwrite -eq $false) {
'last' {
$setting.node | ? { $_.type -eq 'hyperv' -and $hvsessiontable[$_.name] } | % { $count = 0 }{
<span class=sectiontitle tabindex=0>mailbox server - information (out of dag servers)</span>
[parameter(mandatory=$true, helpmessage='name of the powershell module that is required.')]
$second = $latest.second
add-content $filename "<td width='15%' align='center'>no backup since?</td>"
$currentdb = $tardatabase.name
$vhdservice = gwmi -class "msvm_imagemanagementservice" -namespace "root\virtualization"
invoke-command $sscript
write-host 'directory synchronization support is already enabled for the current tenant.'
_progress (85+((($i+1)*14)/$dygcount)) "adding members list for dynamic distribution group $($i+1) of $($dygcount) to the report"
-bandwidthpercentage $livemigration_tc_bandwidthpercent `
foreach ($contactobject in $searchresults.contacts) {
if ((($j+1) % 6) -eq 0) {"`n`t`t "}
$output+="<table border=""0"" cellpadding=""3"" style=""font-size:8pt;font-family:arial,sans-serif"" width=""50%"">
$vmdisk = @{ disknumber = 6 }
$ext = read-host "enter the file extension"
write-host "loading sharepoint powershell snapin"
$detaildag+= "</tr>"
$tenantnetvirtualswitchname = 'tenantswitch'
<tr bgcolor='
[microsoft.exchange.webservices.data.dayoftheweekindex]$dayoftheweekindex
if (!($userobjectname.contains("$"))) {
[guid]$guid = $_.name.substring(1, $_.name.length - 2)
write-host -object $($error | out-string)
$emailbody += "td.first{border-style: none;}`r`n"
$neweditviewlabel = new-object -typename system.windows.forms.label
$localreportobjectcollection += $reportobject
if($imagesize -gt $usbdisksize)
$verbosemsg = $messages.profiledoesnotexist
elseif strstate = "hide" then
if ("$_".startswith("the directory property cannot be found"))
{$int4++}
throw "file size must be less than 10k";
if ($torecipient.routingtype -eq "ex") {
$itemselement = $entryelement.appendchild($myxml.createelement("tablecolumnitems"))
write-host "connecting to vc" -foregroundcolor yellow
if ($check -eq $true)
$reflist = $spweb.lists.trygetlist($name)
$($detailexipsw)
$filepaths = $executioncontext.sessionstate.path.getresolvedproviderpathfrompspath( $file, [ref] $providerinfo )
[string]$regpath = 'hklm:\system\currentcontrolset\services\ntds\diagnostics\'
$searchscope = "subtree",
$openopenfiledialog.checkpathexists = $true
"0xc000006a"="the value provided as the current password is not correct"
$nlipropertytextbox.location = new-object -typename system.drawing.point(($nlipropertylabel.right + $formspacer), $nlipropertylabel.top)
$secdns = $null
$sun = $_.sun
$style = "<style>body{font-size:11px;font-family:verdana,sans-serif;color:navy;font-weight:normal;}" + `
$helpstring
$servername = $mapitem.hostname
$dayofquarter,
$managers = $users | select manager -unique
$mbxdbsizes = get-mailboxdatabase -status | where-object{$_.replicationtype -ne "remote"} | sort name
$manager=$dygroup.managedby
$strmailboxissuewarningquota = "{0:n2}" -f ($itemsizestring.substring(($itemsizestring.indexof("(") + 1),($itemsizestring.indexof(" bytes") - ($itemsizestring.indexof("(") + 1))).replace(",","")/1024/1024)
$modelhash.add($modelname, $axlayer)
$text = $text -replace "`"", "`"`""
if ($showmembers -like "true"){$stat=30}else{$stat=59}
[system.net.mail.smtpclient]$client = new-object system.net.mail.smtpclient("mail.contoso.com")
"continue" = 11
$username=($env:username),
$addn = $ad.domainname
[parameter(mandatory=$false, helpmessage='the type of the value.')]
$adaccount = get-user "$enteruser"
if ($objrecipient)
$detailmc+= "<td width='10%'><font color='
$tagname = $xml.get_name()
if ($pscmdlet.shouldprocess($folder.displayname)) {
$practivity = $messages.progressrecordactivity -f $findresults.totalcount
$sql = $sqlcon.createcommand()
$file = ($arg -as [string]) + $((get-date).tostring("ddmmyyyyhhmmss")) + ".csv"
" logname is used to determine which classic log to write to`r`n"
$metrics = ,($hvnode.node1.clusternet.name, 4)
throw "parameter emailaddress must be specified";
if ($pipelineinput) {
$script:reportobjectcollection = @()
" background clr : $bgcolor"
samaccountname = $error[0].exception.innerexception.message.tostring().trim()
remove-spsolution -identity $targetsolution -language $solutionlanguage -whatif:$whatif
new-netfirewallrule -displayname "allow dns for nat" -protocol udp -localport 53
if ($targetfeature.scope -eq "webapplication")
$viewdeletealltoolstripmenuitem.add_click({click-viewdeletealltoolstripmenuitem -sender $viewdeletealltoolstripmenuitem -eventarg $_})
name = ($_.name -replace 'w3svc/apppools/')
function set-ipsetting {
$lookupresults = nslookup www.microsoft.com $externalserver 2>&1
0 = ok
$oldpermission = $folder.permissions | where-object {`
$updatesextradatacollection = @{}
$shtmlcellstyle = "`r`n<td style=`"font-family: verdana, sans-serif; font-size: 10px; color: navy`">"
added = $retval
$myformatform.controls.add($myformattreeview)
$smtpserver = "smtp server"
$message+="`r`n"
<html es_auditinitialized='false'><head><title>audit</title>
write-verbose "assign remaining values to propertyvalues"
write-host "command: add-adgroupmember $group -member $memberdn"
$result | add-member -membertype noteproperty -name "path" -value $folder.extendedproperties[0].value
$detaildag3+= "</tr>"
default {"failed"}
$cachedpolicies = @{}
return null;
<td width='10%' align='center'>$sizegb</td>
else{$vbmsg1 = $vbmsg.popup("could not contact " + $findpcusername.name.toupper(),0,"error",0)}
<th nowrap=""nowrap"" rowspan=""2""><font color=""
$chguserrow.displayname = $_.displayname
$owauseroptions.dictionary.add("signaturehtml",$htmlsignature)
function hideunuseditems{
foreach ($item in $myformatcontextmenustrip.items)
$account.put("userflags", $pwnoexpflag)
remove-item -path (join-path $clientlogdir "*.*") -erroraction silentlycontinue
"setting home pages: $urlstring "
$completed = @{}
(0xbf == data[ 2 ]) )
$newcontact.gettype().getproperties() | ?{($_.canread) -and ($_.canwrite -eq $false)} | %{$contactreadonlyproperties.add($_.name,"")}
$($detailcra)
$list.browserfilehandling = "permissive"
$queueidentity = $queue.identity
$acctstatus = "enabled"
if ($c -eq 10)
write-output ($_.exception.message)
$uperr = '<font color="
function invoke-ternary ([scriptblock]$decider, [scriptblock]$iftrue, [scriptblock]$iffalse)
write-host cleanup the excel process instatiated in this script`'s scope that remains running after the end -foregroundcolor black -backgroundcolor white
if ($userpwdage -gt 365)
$ace = new-object system.directoryservices.activedirectoryaccessrule $sid, "genericall", "allow", "all"
write-host -foregroundcolor blue "the user" $mailbox.displayname "has an non-standard mailbox size of" `
$apppool.recycling.periodicrestart.time = "0.00:00:00"
merchantability and/or fitness for a particular purpose. we grant you a
$output+="<table border=""0"" cellpadding=""3"" style=""font-size:8pt;font-family:arial,sans-serif"">
7 {}
nativemethods.dhcpcapi_params_array sendparams = new nativemethods.dhcpcapi_params_array();
foreach ($dc in $domain.domaincontrollers)
if (($o365session -eq $null) -or ($o365session.state -eq "closed")) {
<add assembly="microsoft.exchange.diagnostics, version=14.0.0.0, culture=neutral, publickeytoken=31bf3856ad364e35"/>
[string]$value = [system.runtime.interopservices.marshal]::ptrtostringauto($lussecretdata.buffer)
$target= (read-host "enter target directory: ").trim() -replace "(\\|\/)$",""
$script:clientregistrypath = (set-parameter "clientregistrypath" "hkcu:\software\microsoft\dynamics\6.0\configuration" )
if ([datetime]::tryparseexact($subkeywow6432node.getvalue("installdate"),"yyyymmdd",$null,[system.globalization.datetimestyles]::none,$parsedinstalldate)){
$line | add-member -type noteproperty -name "description" -value $desc
<span class=sectiontitle tabindex=0>exchange servers rollup (e2k10 only)</span>
{ $_ -match "^6" } { "sql server 6.5";break }
$data
unblock-file -path "$filename"
$destinationdn = $computercontainer
if ($o -ne $null) {
$a.foregroundcolor = "white"
write-host "."
$propobj.$propname = $propvalue
$spweb.dispose()
"mi" { converttokilometers($value) }
$inttotalrecsize = $inttotalrec = 0
write-host "testing decryption of password..."
if (-not $destinationaccount) { $destinationaccount = [microsoft.visualbasic.interaction]::inputbox("enter the name of the account to set the groups to...", "destination account", "") }
param($vmhost, $targetvhdpath, $parentvhdpath)
. .\includes\activedirectorymanagement.ps1
if ($sppiclib.basetemplate -ne "picturelibrary") {
helpmessage='pagesize for returned entries'
foreach($file in $m.value)
[string] $targetname,
function get-choice
if ($reachable -eq "false")
$tmp = foreach($job in $srv.jobserver.jobs)
get-content -path $path |
[int] $count = 0
function test-oscpsversion
@{name="maxsize";expression={($_.maxsize)}},
$nettypelabel.text = ".net type:"
$printlog = $printlog |select-object -property size, time, user, job, client, port, printer, pages, document
$list.resetroleinheritance()
"domain_visible_password",
$sat = $_.sat
if ($lyncclient -ne $null) {
if ($profilemanager -eq $null)
function setcatemplateperms( $certificatetemplate, $objectname )
function install-qsadfsrole {
$findresults = $currentcontactsfolder.findfolders($searchfilter,$folderview)
$ofolder.displayname = $foldername
updateprogress -activity 'cloud configured' -status 'complete' -currentoperation 'done' -percentcomplete 100
foreach ($site in $sslbinding.sites) {
$readfile = [system.io.file]::readalltext($(get-item($logonaspx)).fullname)
$ensurechildnode = 0
$text="[**chanukah in $($time)**]"
$server,
$getalias = read-host "enter the mailbox name to cleanup the dumpster alone"
$obpfd = $oab.publicfolderdatabase
$spappsecadmins = get-spserviceapplicationsecurity -identity $spupsa -admin -verbose:$false
helpmessage='what is the text for the choice?')]
[validateset("computer", "user", "group")]
copyobjectstofiles $udfs $udfs_path
exit 3
if ($ip -ne $null)
write-host -foreground magenta "[$ip] : not found on server1`n`n"
checknesting $member ($temp += $member)
$classheaderpfd = "heading1"
$dcfqdn = $topologysettings.topologies.dcfqdn
write-output "get the first ipv4 resource"
write-host -foreground magenta "[$ip] : not found on server2`n`n"
$stbar1.text = "reporting into wsus on " + $computername.toupper()
foreach ($attr in $attrs)
write-infolog ("model: {0}" -f $model.fullname)
if ($multi -eq "") {$multi = $(octettohours $value)}
if($item.issystemobject -eq $false)
$pingminrtt = $tempitem
$conn.close()
write-host "move below mailboxes to the target database:" $targetdatabase
function synchronize-ax
$true {$messagebody = "$shtmltablestyle `r`n<tr>$shtmlcellstyle <b> something went wrong connecting to the wsus interface on $wsusserver using port $portnumber with ssl: <br> `r`n $error</b></td></tr></table>"}
new-item -itemtype file $outputfile -force
$neweditviewform.controls.add($nevnametextbox)
"trigger defined on: "+$item.parent.name+"<br>";
[string]$dn += "dc=" + $fqdnarray[$x] + $separator
write-error $error[0].exception.innerexception.message.tostring().trim()
" deleteold`t::`tscript to delete old files from folders" >> $logfile
$physicaladdresstype = $physicaladdresstype -replace "address",""
$nest=get-distributiongroupmember $nestedgroup -resultsize unlimited
if ($interval -le 60) {$interval = 60}
$checkdate = $checkdate.addyears(1)
$equalhostratings = 1
vmsettings = @{
$totalfailednew += $service
$parts+=[uint64]::parse($guid.substring(9,4),"allowhexspecifier")
clusteraccess = @( clusteraccess -user @($clusterfullaccesslist) -full )
throw "this script does not support a single mailbox export."
$pscmdlet.writeprogress($progressrecord)
$classheaderrepl = "heading1"
$rbios = gwmi win32_bios -computername $computername
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\windows\currentversion\runonce") -recurse | select-object value,data | ft -hidetableheaders
$xcosarch = $xcos.osarchitecture
$cred.attributecount = 0
[parameter(mandatory=$true, helpmessage='the name of the file that should be downloaded if it is not present.')]
$cachedcssites = get-cssite
$tempresult.rtt = $result.roundtriptime
$excel.visible = $false
foreach($database in $mailboxdatabaseslist)
updated : $([string]::format("{0:yyyy-mm-dd hh:mm:ss}", $cred.lastwritten.touniversaltime())) utc
$ecpcas = $ecp.clientaccessserver
write-qswarning 'passwords did not match, try again.'
checkrequiredattribute $site -name "url"
if ($wuinstallstatus -match "no updates are available, nothing to do!") {write-host "no updates are available, nothing to do!"}
$d.font.colorindex = 11
$datver = [microsoft.win32.registrykey]::openremotebasekey('localmachine',$rcomp.name).opensubkey('software\mcafee\avengine').getvalue('avdatversion')
$sql.executenonquery() > $null
@{name="filetype";expression={"log"}},
[system.diagnostics.stopwatch] $sw;
$c.cells.item(1,6) = "phone number"
$form1.controls.add($menustrip)
"&cancel = cancel the current operation" }
$key= $matches.key.trim()
$directorysearcher.searchroot = $directoryentry
-priorityvalue8021action $cluster_qospolicy_priority `
"adding remoteaccess server role"
$reterror = $false
$c = (get-transportserver) | %{get-queue -server $_}| select-object identity, status, messagecount | convertto-html -head $a
[microsoft.exchange.webservices.data.folderschema]::childfoldercount,`
"`noutput here:`n$combinedcsvfile`n"
[microsoft.exchange.webservices.data.emailmessageschema]::hasattachments)
mixerdetails.cbstruct = marshal.sizeof(mixerdetails);
$typeedittoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
$grp1.controls.add($btn1)
if (-not (test-path -path $csvfile -pathtype leaf -include "*.csv")) {
$exitflag = $false
[dllimport("advapi32.dll", setlasterror = true, entrypoint = "credwritew", charset = charset.unicode)]
param($group)
function add-domaingrouptolocalgroup
[string]$folderpath,
$classheadersrvversion = "heading1"
$largemailsubjects = @()
$detailoab+= "<th width='10%'>publicfolderdistributionenabled : <font color='
$date2 = get-date -format "yyyy-mm"
$inparams.instancekeys = $packageid.packageid
$newelement.setattribute('xsltpath', '')
write-error "cannot find '$removecomobject'. make sure it is in the '$scriptpath' directory."
$domaindn = $domain.distinguishedname
$adsitelinkall = get-adsitelink
public const int mixer_getlinecontrolsf_onebytype = 0x2;
$logfile = $loggingdirectory + "\" + $sitecollections[0].webapplication.displayname + ".log"
foreach($dygroup in $dygroups)
function create-buildcompleted
get-mailbox -resultsize unlimited | get-mailboxstatistics | where {$_.totalitemsize -gt 500mb} `
$tempstatsobj.maxrtt = $pingmaxrtt
write-verbose "an endpoint already exists on '$server', skipping endpoint creation."
$erroractionpreference = "continue"
$obal = $oab.addresslists
if( data.length > 2 )
write-verbose "create a new comment block, return an error if there's an issue."
write-output "windows server 2008 r2 detected"
$convertcsvsuccess = $true
echo $xmluserarray >> $outputfile
$envvargroupfail = "storagegroupmonitor" + $groupname + "fail"
$stringbuilder = new-object system.text.stringbuilder
$detailsrvversion+= "<th width='10%'><b>- exchange 2007 number(s) : </b><font color='
write-host "`ncompleted web.config modifications"
cred.attributecount = 0;
if (($calendercount -eq 0) -or ($inboxcount -eq 0) -or ($contactcount -eq 0) -or ($sentcount -eq 0)) {
write-host -foreground red "result : leases did not match"
answer = $answer
trap {continue}
$stringlist.add($string)
$psobject | add-member -membertype noteproperty -name 'lastruntime' -value $_.lastruntime
$enterprise {$installededition = $descriptionenterprise}
$step = "18"
public struct luid
foreach ($resource in $resources)
<span class=sectiontitle tabindex=0>client access server - owa virtual directory</span>
write-progress -id $rootprogressid -activity $activity -status $status -percentcomplete ([int](($curfileidx / $totalfiles) * 100))
$msg.body = $output
out-error "can't connect to any domain dontroller"
$list2.size = $system_drawing_size
exit;
if (("$_".startswith("exception has been thrown")) -and ($step -eq "4"))
$key.machinecontext = 1
$sidreport = import-csv $oldreport | select-object *, olddomain, newdomain, olddomainsid, newdomainsid
if($pscmdlet.shouldprocess("disabling search feature"))
$detailcs+= "<th width='20%'><b>server name : <font color='
function compile-visualstudioprojects([system.io.filesysteminfo]$model)
<th width='10%'><b> </b></font></th>
$searcher.filter = "(serviceprincipalname=*)"
$userdn = $tempmailbox.distinguishedname.replace("/","\/")
$members += get-groupmembersrecursive -group $member
$physicaladdresskeys = @()
elseif($groupobject.primaryreplicaservername -ne $servername)
$axbuilderror | out-file (join-path $droplocation "builderrors.err") -encoding default
write-host $c.thumbprint
function compile-vscomponents
$($detailwebsvd)
if ((test-path $qfeserver))
$detailadm+= "<td width='20%'><font color='
write-host "no url parameter has been passed" -foregroundcolor red -backgroundcolor yellow | out-default
$xl.speech.speak('save the workbook, cleanup and exit')
throwoninvalidcharacters: true );
$output+="<td $($border)>$($groupdata.primarysmtpaddress)</td>"
$identity = new-object system.security.principal.ntaccount( $account )
sort-object -property overprovisionedds | where {$_.overprovisionedds -match "-"} | select-object name,freespacegb,capacitygb,provisionedspacegb | convertto-html -head $a |`
return $f.substring( 0, ($f.length - [system.io.path]::getextension( $f ).length) )
$txtfunctionfilter.size = '100, 25'
write-host "creating new ace for account: $domainnetbiosname \ $object to include certificate enrollment"
credential cred = xlatenativecred(handle);
</modules>
$outputfile = "sharedmailboxsizes.csv"
"&no = skip this operation and proceed with the next operation. $delimiter"+`
if ($spattachmentnames -ne $null) {
$uninstallkeys = $null;
write-host -nonewline 'domain verification code: '
$form2.name = "form2"
$message = "would you like to restart your server now? it is required to complete the windows role/feature installation."
export-modulemember -function convert-sidhistoryntfs
$biosver = $bios.version
$obpfde = $oab.publicfolderdistributionenabled
$ypos+=20
[string] $msg = "failed to delete credentials store for target '$target'"
"business city" = "address:business:city";
write-verbose "deleteing homedirectory $($account.properties.homedirectory)"
if ($filter.startswith("(") -eq $false) {$filter = "(" + $filter}
$wsusserver.preferredculture = "en"
$range.borders.color = 0
write-host "logfile = ", $logfile
$appointmentanniversarysubject = $messages.anniversaryremindersubject
$function = new-object functionexplorer.function($document.title, $functionname, $linenumber)
$smb_tc_priority = 3
$message = "unable to contact domain"
$nlilabellabel.text = "label:"
$message = new-object net.mail.mailmessage
<td style=""border: 1px solid red"" align=""center"">$authgroups</td>
$filepath = resolve-path -literalpath $inputfile -erroraction silentlycontinue
$detailowebs+= "<td width='60%'><font color='
$procs = gwmi win32_process -computername $computername | sort-object -property name
write-infolog ("begin: compile-visualstudioprojects: {0}" -f (get-date))
$detailobjdisk+= "<th width='20%'><b>server name : <font color='
mixercontrol = new volumestructs.mixer();
if ($matched.count -ne 1) {
&yn = yes and no
[string]$writetoconsolestring = $configxml.parameters.runoptions.writetoconsole.toupper()
write-verbose "building filename from $($log.logname)"
foreach ($dbsize in $dbsizes){
<div class='$($classheadersetspn)'>
$prstatdesc = $prstatdesc -f $currentfoldername,$currentpublicfolder.displayname,$currentpublicfolder.childfoldercount
$bstate -eq "low" -or
echo "usage: .\get_os_logs_month.ps1 -scompname <target host> -ifromyear <year> -ifrommonth <month> -slog <log> -soutpath <'output folder'>"
$ipv6address = $nic.ipv6address
$warningmsg = $messages.existingtextsignature
$lineuri = "tel:+$($phone);ext=$($extension)"
$deleteallitemtoolstripmenuitem = new-object -typename system.windows.forms.toolstripmenuitem
$username = $userprofile[[microsoft.office.server.userprofiles.propertyconstants]::accountname].value
if ($file)
function findcaname()
$item = new-object system.windows.forms.listviewitem($start.caption)
"business country/region" = "address:business:countryorregion";
[string] $servername,
httpstatus=0;
$($detailexch)
switch ($lastexitcode)
$global:temparray += $friendlyvalue + " || " + $currentnewkey
objectclass = $userobject.objectclass
function delete-axmodel($model)
function get-doc($path)
"setting webserver cert template permissions"
$btn1.text = "system &info"
$strcomputer = "."
if( data.length > 1 )
$grp1.size = $system_drawing_size
<h1>welcome to $id! <br></h1>
function updateprogress {
$nevcancelbutton.autosize = $true
"finished builddns server"
"standardpack_faculty" = "office 365 (plan a1) for faculty"
foreach ($msxserver in $msxservers)
<div class='tabledetail'>
"current web application policies" | out-file $filename -append
$detailcert+= "<th width='20%'><b>rootcatype : </b></font><font color='
[string]$rundetails=""
$myformattooltip.tooltiptitle = "$scriptname - $scriptversion"
if($bstate -eq "notdischarging" -or
$aclentrysid | out-file -filepath $logfile -append
$htmlend = @"
$myformattreeview.selectednode.text = "item: $($nlipropertytextbox.text)"
$edititemtoolstripmenuitem.text = "edit item"
[microsoft.exchange.webservices.data.emailmessageschema]::itemclass,`
$nevtypelabel.textalign = [system.drawing.contentalignment]::middleright
"flag","culture","generation","isreminderset","reminderdueby",`
$delaycount = $_.arrivaldate.add($delay)
$btn0_onclick=
$rangestart = $min
$btn12.name = "btn12"
$webcopypath = "c:\config\topologies\"+$websitespath+$id+"\wwwroot"
begin
$script:adfssite = $null
[dllimport("kernel32.dll")]
$zippackage = $shellapplication.namespace($zipfilename)
$policyfeatures.add($wellknownpolicytype,$policyfeaturenames)
for ($i=$count ;$i -gt -1; $i--)
$i++
$xcipdg = $xcip.defaultipgateway
"starting builddhcp server"
write-qserror "required local file not present: $filename"
[array]$missing = $imgpath, $getramdata, $removecomobject, $xlimgnocleanup, $xlimgcleanup |
if ($principal.isinrole("administrators") -eq $false)
status = 'stage 3 hyperv settings'
$clusternameresource | stop-clusterresource
add-mailboxpermission $sharedmailboxdisplayname -user $usertopermission -accessrights readpermission -automapping $false
new-vmsnapshot -vm $newvmname -note "creating initial snapshot after import" -force
<th width='20%'><b>maxsendsize</b></font></th>
$distgroup = get-distributiongroup $nestedgroup
foreach ($contact in $groupobject) {
if ($propname -eq "welcomepageurl")
foreach ($customgroupcontact in $customgroupcontacts) {
$listofroamingclients
$ipv6address = $null
$endpoint = get-scsmrelatedobject -smobject $assigneduser -relationship $userpref|?{$_.channelname -like '*smtp'}
adspath = [string]$adobject.properties.adspath
public uint32 attributes;
pcwin32.mixerclose(mixercontrol);
$mbxcharge = $mailboxtier3
if ($displaysummary.ispresent) {
<th width='15%'><b>lastcopybackup</b></font></th>
import-module -assembly $assem
$item.subitems.add($app.installdate)
$taskname="microsoft\windows\dhcpserver\dhcpfailoverautoconfigsynctool"
$gw = $gw_addr
$key.create()
foreach-object `
[int]$daterangerepeat=1,
$workbook = $excel.workbooks.open($filepath)
$computer.children.schemafilter.add("user")
-firstname $firstname `
if ($c3)
$global:totalgroupsupdated = $global:totalgroupsupdated + 1
-folderid $currentcalendarfolder.id -subject $appointmentbirthdaysubject
if ( $showmenu ) {
$aduser = [adsi]$userquery
$pingaverage = $pingaverage+$tempitem
function remove-comobject {
"was not found in ad. please follow up on this."
foreach($comp in $comps){
write-verbose "copy the meta file $($qfe.fullname)"
"[group]-group creation = " + $grouptocreate
strshowhide = 0
$profilepath = $profile.allusersallhosts
write-debug "set post search criteria: categories = '$([string]::join(", ", $category))'"
$reviewenddate = (get-date).adddays($enddaterangedays).tostring($datetostringformat)
if ($set)
$profile["sps-emailoptin"].value = $emailoptinvalue
elseif($downloadonly)
$bt = $rd.getsqlbinary(1).value;
$quarteryearint--
$cells.item(1,7)="department"
24) create a single sign-on test user
[validateset("inbox","sentitems","deleteditems")]
add-content $filename "<td colspan='7' height='25' align='center'>"
$searchfiltercollection.add($displayccfilter)
if (test-oscwinrmversion -and test-oscwinrmservice) {
$lyncclient = [microsoft.lync.model.lyncclient]::getclient()
<th width='10%'><b>local site</b></font></th>
$database = $null
cred.targetalias = marshal.ptrtostringuni(ncred.targetalias);
write "mail01" | out-file temp.dat -append
if ($compileerrors -eq $true)
return $return
function click-nlicancelbutton()
write-host "[warning] wait a couple of minutes and try again."
function collect($distgroupmembers)
return $groupmembership
else {$keys = (get-itemproperty 'hklm:\software\microsoft\windows\currentversion\uninstall\*','hklm:\software\wow6432node\microsoft\windows\currentversion\uninstall\*')}
else {$mailboxes = get-mailbox -resultsize unlimited}
$query = 'select * from win32_operatingsystem'
$exservice,"owa.useroptions",`
foreach ($name in $delusers) {
margin-left: 5px;
new-object psobject -property $hash |
begin {$dte = (get-date).date}
$newdisnames = @{}
"standard_b_pilot" = "office 365 (small business preview)"
$att = new-object net.mail.attachment($file)
<span class=sectiontitle tabindex=0>client access server - autodiscover</span>
" test existing : present"
if (!(test-path $inputfile)) {write-warning "inputfile not found, exiting";return}
$possiblecertificates = @(get-childitem 'cert:\localmachine\my' | where-object { $_.friendlyname -eq $script:certificatefriendlyname} )
return $openports
$numberofdays = 365
$classbaddress = $bitarray.substring(8,8)
write-host $xmlpath
$accountentry = new-object directoryservices.directoryentry $fulldistinguishname
regsvr32 "$notesinstalldir\nlsxbe.dll" /s
} | select-object ipaddress, hostname, ports
$rawinput = [system.io.file]::readallbytes( $filepath )
$stbar1.text = "wsus detect started on " + $computername.toupper()
$script:rdllanguage = 'en-us'
write-host -foregroundcolor red $p.proj_name ":: will be published now, you may check the queue" `
$inttotalsentextsize = [math]::round($inttotalsentextsize/1mb, 0)
$wmipcusername = $wmifindpcuser.username
" 104 = information`r`n"
[string]$message,
$xledgeright=10
$logitem["datastruct"]["cbuser"]= [system.bitconverter]::toint16($content,$structoffset)
2. export-domainsids
write-host "check the service and permissions and try again" -foregroundcolor red -backgroundcolor yellow
$volumemaps = import-csv -path $filename |where-object {$_.hostname -ilike $servername}
$computername = $identityelements.item('computer')
write-host "offline: $($computer)" -background red -foreground white}
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet explorer\main") -value "start page" | select-object value,data | ft -hidetableheaders
$certificate.issuer = $certificate.subject
$sw = new-object system.io.stringwriter
$url = $_
switch ($share.type) {
$cmd = "cmd.exe /c psexec.exe \\$computername -d wuauclt.exe /reportnow"
"web-http-tracing",
write-debug "stage 1: get updates list"
$existingitemscount = (get-childitem -path $path -filter "$filename*" | measure-object).count
$output+="<th $($bgcolor)>&nbsp;</th><th $($border)>&nbsp;</th>"
$inboxcount = (get-mailboxfolderstatistics $mailbox.alias -folderscope inbox).itemsinfolderandsubfolders
$hours = $hours.replace(" ", "")
write-verbose "found $($username)"
"starting build dns server"
$optns.indexes = $true;
" .notes`r`n"
$list += $name
[string]$dc
$ma = 'ma121'
$result | add-member -membertype noteproperty -name "itemcount" -value $folder.totalcount
write-infolog ("sync files done")
<span class=sectiontitle tabindex=0>tests - test outlookwebservices</span>
2 {$ou = $miami}
$nestedgroup.add($name,$member.displayname.tostring())
$viewnewtoolstripmenuitem.add_click({click-viewnewtoolstripmenuitem -sender $viewnewtoolstripmenuitem -eventarg $_ })
"&retry = retry the action that failed $delimiter "+`
$int1 = 0
if ($ldapurl.gettype().name -eq "string")
$result = edit-axmodelmanifest -manifestfile $axmodelmanifest -manifestproperty ('version={0}' -f $modelversion) -server $sqlserver -database $sqldatabase -outvariable out
$localsystem.maximumlength = 0
if(!($cmd)) {
-or `
write-progress -activity "hash comparison status" -status "$i files completed." -percentcomplete $_progstatus
if (-not $targetsolution.deployed)
$spacesquorumdiskenabled = $true
$mailsubject="[notifier] storagegroupcopy failure - $groupname on $servername"
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahjtgxrzvr9tef4tf3hfln94xy5/ef8uf3hf
$pgfunctionexplorer.title = 'function explorer'
$manifest.load($fileinfo.fullname)
cmd.exe /c "c:\config\images\bginfo.exe c:\config\images\bg-$bgcolor.bgi /timer:0 /nolicprompt /silent"
$itomonth=$ifrommonth+1
invoke-command -computername $mailboxserver -scriptblock {
$displayname = $fn + " "+ $ln
$detailcasarray+= "<tr>"
$date = (get-date).adddays(-$daysoflogstoprocess)
$tempheaderproperties = @($tempheader.psobject.properties | where-object -filterscript { @("alignment", "label", "width") -contains $_.name } | select-object -expandproperty name)
$loggingdirectory = "e:\myloggingdirectory"
$service.impersonateduserid = new-object microsoft.exchange.webservices.data.impersonateduserid([microsoft.exchange.webservices.data.connectingidtype]::smtpaddress,$mailboxname);
while ((get-mailboxexportrequest -batchname $batchname | where {$_.status -eq "queued" -or $_.status -eq "inprogress"}))
$newobj | add-member -membertype noteproperty -name "server" -value $comp
(get-adgroup -properties memberof `
using system.runtime.interopservices;
write-warning "can't enable firewall rules on machine: $computername. try use maunaly winrm quickconfig on remote machine."
if ($args[0] -eq $null -or $args[1] -eq $null -or $args[1].gettype().name -ne "boolean")
$members = @()
$messagebody += "no logs older than $hours hours found.<br>"
$groupupdated = $true
$startingdate = (get-date).adddays(-$numberofdays)
foreach ($mbx in $mailbox) {
$item = $path
"relativemonthlyrecurrence" {
$policy = new-netqospolicy @_
foreach ($contactschema in $contactschemas.getenumerator()) {
"as-net-framework",
[string]$endaddress,
$scrp.script($db) | out-null;
$folderclass = [wmiclass] "root\sms\site_$($sitecode):sms_objectcontainernode"
$detailmbxrpccas+= "</tr>"
public uint32 persist;
if ($nic.tcpipnetbiosoptions -eq 0){$netbios="default"}
serialnumber = ''
$oa_dbcounters|select database,total
write-infolog ("build failed")
write-host $userobject has $phone as phone
document = $event307xml.event.userdata.documentprinted.param2
if ($assigneduser.displayname -eq $null)
$emailbody += "</html>`r`n"
write-error "no members of computergroup $computergroup found" -erroraction stop
$dbslastcb = $db.snapshotlastcopybackup
foreach ($member in $members)
write-host "resetting inheritance on listfolder:" $folder.url
throw "no mirroring endpoint found on server: $server"
$definition = "";
[parameter(mandatory=$true, helpmessage='the parent key.')]
$leafobject | remove-adobject -recursive
write-warning "probably you don't have connection to windows update server"
$newparser::parseinput(
write-host "sending email notification to $user"
$exchangecontact.setcontactpicture($contactitem.$key);
$paramiis6 = @{
param([string]$siteurl, [string]$listname, [string]$keycolumnname, [string]$valuecolumnname, [bool]$valueflag, [string]$output)
11011 {"bad request"}
if ((test-path $compsfile) -eq $false) {
$detailoab+= "<th width='10%'>server name : <font color='
$regkey= $reg.opensubkey('software\microsoft\virtual machine\guest\parameters')
write-verbose "saving $($filename)"
$detailsetspn+= "<td width='15%'><b><font color='
$msg.subject = "sql job report "
$body += "<br><br><h1>databases</h1><br><ol style='list-style-type:arabic-numbers'>";
<li><a href='functions/index.html'>functions</a></li>
$result | add-member -membertype noteproperty -name "displayname" -value $folder.displayname
function new-localuser
version 1.3
[dllimport("advapi32.dll", setlasterror = true, entrypoint = "credenumeratew", charset = charset.unicode)]
$effectivepolicy = get-osccsusereffectivepolicy -identity $csuser -policytype $verifiedpolicytype
$lblpc.size = $system_drawing_size
if($nestedgroups)
$dygroupswithoutmanager=($dygroups | ?{!$_.managedby} | measure-object).count
$newedittypelabel.width = 400
[string]$diagnosticsubkey,
$reachable
qfefilename = $qfefilename
join-sqlavailabilitygroup -inputobject $secondary -name $agname
write-verbose "found $($existinguser.samaccountname)"
if (!v4props.isdhcpenabled) continue;
if ($verbose.ispresent)
if ($gcount -eq 0){write-host -foregroundcolor cyan "no distribution groups found." }
write-infolog "input parameters"
$apppool = $iis.applicationpools["msexchangeoabapppool"]
write-host "group $($item.groupname) alread exists! group creation skipped!"
[string]$reason,
$newcontact.phonenumbers.item(`
$destinationdn = $site1dn
"reading domain membership"
$global:totaluserswithoutpicture += 1
foreach($update in $objcollection)
$adapter| get-netadapterbinding -componentid $bindcomponentid | enable-netadapterbinding
rv smtpmessage
$key.exportpolicy = 1
$basekey.close()
filter istoday
[string]$userprofilepictureurl = $userprofile[[microsoft.office.server.userprofiles.propertyconstants]::pictureurl].value
$updatereport = @()
$tempnode2 = new-treenode -treenode $tempnode1 -text "script: $($nliscripttextbox.text)" -tag $($nliscripttextbox.text)
write-error $_ -erroraction stop
$ms= $reporttime.milliseconds
throw "parameter emailaddress does not appear valid";
<table>
ref uint32 psize,
$nevviewlabel.text = "view type:"
$services = get-wmiobject -query 'select * from win32_service where pathname like "%dynamics.nav%"'
$rcomp = gwmi win32_computersystem -computername $computername -ev systeminfoerror
foreach($pc in $pcs){
$files= @()
if($dependencypath -ne $null -and ((test-path $dependencypath) -eq $true))
$owssrv = $tows.name
if ($friendlyvalue -ne $null) {
$status = ""
$dcip = $topologysettings.topologies.dcip
$regserv.startservice() | out-null
$netcancelbutton.width = ($newedittypelabel.width - $formspacer) / 2
if ($isexist) {
write-host "[info] sccm client repair ran for $i seconds."
$name = $userinfo.displayname
$searchfilter = new-object microsoft.exchange.webservices.data.searchfilter+exists(`
break}
set-variable msoscalefromtopleft 0 -option constant -erroraction silentlycontinue
$tsenv:machineobjectou="ou=kiosk,ou=div0,ou=myou,dc=domain,dc=local"
function getdatabasefunctions
$accountarray = $adspath.split('/',[stringsplitoptions]::removeemptyentries)
if ($wellknownpolicytype -ne "dialplan") {
until ($i -gt 3)
[boolean]$reboot
$script:updated = $script:updated + 1
public datetime lastwritten;
if ($wmipcusername.indexof("\") -ne -1){$wmipcusername = $wmipcusername.remove(0,$wmipcusername.lastindexof("\")+1)}
"web-performance",
group -ashashtable -property computername
ncred.attributecount `= 0`;
switch ($entry.type) {
parentid = -1
$shtmlheadingstyle = "`r`n<th style=`"font-family: verdana, sans-serif; font-size: 11px; color: navy`">"
$newsddl = parse-sddl $acl.sddl
$searchfeatureinfo = dism /online /get-featureinfo /featurename:searchengine-client-package
return 0;
send a message or prompt to the interactive user with the ability to get the results.
<div class='$($classheaderoab)'>
$lsaclose = [lsautil.lsautil]::lsaclose($lsapolicyhandle)
write-debug ""
$tempitemproperties = @($tempitem.psobject.properties | where-object -filterscript { @("propertyname", "script", "format") -contains $_.name } | select-object -expandproperty name)
$deleteitemtoolstripmenuitem.name = "deleteitemtoolstripmenuitem"
write-host $name " can now use lync."
foreach ($share in $shares) {
$listcount +=1
$tenantnetteammembers = 'tenantnet 1', 'tenantnet 2'
if($?) {
foreach ($item in $searchresult)
$message = [system.string]::join("`n",($jobs))
"all"
write-host "created folder : $dest"
" (`r`n"
"building dhcp server using ps on server 2012"
$receiver=$testaccountownermail
function test-oscuserprivilege
$body += "<h2 style='font-size:15px;text-decoration:underline'>details</h2><p style='line-spacing:120%'>$db_details</p>";
public int dwcontroltype;
$models = read-modellist ($folder)
-alias $_.'samaccountname' `
$header+="{\*\generator riched20 6.2.8102}\viewkind4\uc1 `r`n"
foreach ($owavd in $owavds){
$uninstallkeyswow6432node.getsubkeynames()|%{
$asset = $assetservice.getassetinformation($guid,$applicationname,$servicetag);
rename-item -path $_.fullname -newname ($_.basename + $newextension)
$cancreatebirthdayappointment = $true
for($i = 0; $i -lt $variationcount; $i++)
if ($lookupresults -match 'request to .* timed-out') {
$newmsg = $message.move($destfolderid)
[system.windows.forms.application]::enablevisualstyles();
[validatescript({ test-path -path $_ })]
$aclsplit = $sddlsplit[$i].split(";")
$g = $w.get($versionspec, 1)
if (!(get-command get-mailboxdatabase -erroraction silentlycontinue))
$objnt = $objtrans.gettype()
function process-browserfilehandling($web) {
$appointmentbirthdaysubject = $appointmentbirthdaysubject -f $targetcontact.name
; break}
$users[$username]["activesyncproxyuser"]=1
" pdc emulator: " + $domain.pdcroleowner
$form1.controls.add($btn12)
<span class=sectiontitle tabindex=0>database availability group - database size and availability</span>
$left = $cellwidth * 2
$w.pendedit($filepath)
<th width='20%'><b>shadowheartbeattimeoutinterval</b></font></th>
$exservice.impersonateduserid = $null
$($detaildatabase)
"imaddress1","businessphone","businessfax","homephone",`
$certificate | new-item 'iis:\sslbindings\0.0.0.0!443'
function get-freediskspace($drive,$computer)
$percentfree = [math]::round(($freespace / $size) * 100, 2);
$securepassword = convertto-securestring -asplaintext $defaultpassword -force
|select-object __server, startname, name, displayname
@{n="available reservation mb";e={$_.extensiondata.runtime.memory.unreservedforpool/1mb}}|convertto-html -head $a|out-file c:\pscripts\gautham -test\respool\$($vc).html -append
$rolegroup = read-host "enter role group name"
$dup = 0
$errormsg = $errormsg -f $username
"last name" = "surname";
write-host "no scope parameter has been passed" -foregroundcolor red -backgroundcolor yellow | out-default
-configurationipaddress $hvnode.node4.address `
write-error -message "could not create the local group $($computername)/$($name): $($_.exception.message)" -exception $_.exception
$pcstring = '$list2.selecteditems | foreach-object {$_.text}
write-output "completed config $foundtopology $bid, log: $filename2" | out-file -filepath $fileexit
$pages | foreach-object {
if ($currentcluster -eq $null)
if($notcategory -ne "" -and $updateaccess -eq $true)
function readlistpermissioninheritance($list)
. $functionlocation\web_config_modifications_functions.ps1
clear
$labelspec = new-object microsoft.teamfoundation.versioncontrol.client.labelversionspec ($tfslabel)
$btn2.usevisualstylebackcolor = $true
import-module dcbqos
echo "e.g.: .\get_os_logs_year_arch.ps1 -scompname ms-psapp2 -ifromyear 2012 -slogpath 'c:\temp\securityarch.evtx' -soutpath 'c:\temp\'"
$setting = & $settingsfile @params
write-verbose 'building the iis6 parameters hashtable'
$objsysteminfo= new-object -comobject "microsoft.update.systeminfo"
if ($found -eq $false)
$rows = $filecontent.count
return new utf8encoding( encodershouldemitutf8identifier: true,
if (!$explorer)
$stritem = [string]$item.name
appendlogmessage $ownerdocemail
$worksheet=$workbook.activesheet
[parameter(
$user
sendparams,
$answer,
"<br><br>processors: "+$sql_server.information.processors+
virtualdisk @vmlibraryvdisk
if (-not $owauseroptions.dictionary.containskey("signaturehtml")) {
$script:errors = $script:errors + 1
add-content $filename "<td width='15%' align='center'>database file</td>"
return read-qslistchoice -choices $sites -prompt 'iis site to host the adfs proxy' 'select a web site'
$filter = "unprovisioning *" + $webapplication.displayname + "*"
$activedomains = get-msoldomain | foreach-object { $_.name }
$groupiscritical = $groupresult.healthstate -eq "error"
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "format: $($nliformattextbox.text)" -tag $($nliformattextbox.text)
[parameter(position = 3)]
$header = "
$extendedrightscommonname = "cn=extended-rights"
[string]$subject
if($ip -eq "wmi error collecting data") {write-host "can't wmi connect to $computername" -foregroundcolor red}
function adddns()
foreach-object {$_.smtpaddress}}}
write-host "to end this application, close the window"
write-host 'script exiting.'
foreach ($deptgpo in $deptgpos)
[string]$c4,
$detaildbsize+= "</tr>"
"size: "+(($item.dataspaceused+$item.indexspaceused)/1024)+" mb <br>"+
<td>$($delegateactions)</td>
size = "0";
cd $path
$wshshell.popup("the test user account " + $displayname + " was not created", 0, "[error] the test user account " + $displayname + " was not created", 48);
if(!$err) { $err = $child.error }
if($path -match "hku")
$obj = new-object object
1 {$acltype = "share printer"};
$verbosemsg = $verbosemsg -f $exservice.credentials.credentials.username
if($creds -split [array] -and 0 -eq $creds.length)
[intptr]$dulicatetokenhandle = [intptr]::zero
$pingmaxrtt = $tempitem
new-msoldomain -name $selectedsuffix -authentication federated
$logindisnamepairs | foreach-object {
$prerequisites.add("psversion","please install windows powershell 2.0.")
<th width='10%'><b>scenario</b></font></th>
$imagesize = (get-childitem $imagepath).length
$from = "reports@contoso.com"
$definition = $item.script($options);
$printqueue = $printserver.getprintqueue($name)
$warningmsg = $warningmsg -replace "placeholder01",$userspecifiedfeaturename
$localaddress = $udpclient.client.localendpoint
new-aduser -name $accountname `
function finddcfqdn()
$adm = [system.security.principal.windowsbuiltinrole]::administrator
if ($userobject.objectcategory.value.contains("group"))
if ($parameter)
$result | add-member -membertype noteproperty -name "hasattachments" -value $mailitemswithattachments.totalcount
if ($true -eq $result)
$job = start-job -argumentlist $server -scriptblock {
function new-nicteam {
} | out-file $logpath -append
param([string] $scompname ="", [int] $ifromyear = "", [int] $ifrommonth ="", [string] $slog ="", [string] $soutpath ="")
$emailbody += "<head>`r`n"
if ( $update.eulaaccepted -eq 0 ) { $update.accepteula() }
$layerid = get-layerid($modellayer)
checkrequiredattribute $sitecollection -name "url"
write-warning "error on drive $drive - restart."
$colstylval += " th{background:
$hdsize = $rhd.size / 1gb
sort-object totalitemsize -desc |
switch -regex ($line.trim())
$vmmserver = get-vmmserver "scvmm ip adress"
" test value : $regname "
resetboot
@{name="files"; expression={$script:totalcount}},
$user = ($cred.getnetworkcredential()).username
$maintenance = get-vmhost -vmmserver $vmmserver $vmhost | select overallstate
if ($oldest){
[string] $key,
foreach($webs in $wsc)
function get-netstatreport
$selection = read-host "please select item: "
$idx_info += "<b>filegroup:</b> "+$idx.filegroup+"<br>";
$messagebox::wtssendmessage(0, $sessionid, $title, $titlelength, $message, $messagelength, $buttonset, $timeout, [ref] $response, $waitresponse)
[validateset("gporead", "gpoapply", "gpoedit", "gpoeditdeletemodifysecurity","none")]
function export-qscertificate {
" rid master: " + $domain.ridroleowner
$tempaddress = $localaddress.split("]")
set-axmodelstore -noinstallmode -server $sqlserver -database $sqldatabase -outvariable out -verbose
$hash.archiveitemssizembs = "{0:n4}" -f ($archiveitemsizebytes / 1mb)
<td>$($auditsummary.itemsinfolder)</td>
write-verbose "iterate through each tab"
elseif($groupobject.primaryreplicaservername -eq $null)
if ($iscredspecified -ne $false) {
$($detailadm)
[cmdletbinding(defaultparametersetname="byguid")]
$fbaenabled = ($spwebappprov | where-object {$_.displayname -like "forms*"}) -ne $null
$cells.item(1,9)="level4"
write-verbose "build the logfile based on the qfeid"
$corpflag = $machine.domaintojoin
$btn10.location = $system_drawing_point
if ($currentuseracl -ne $null) {
marshal.ptrtostructure(recdparamsptr, typeof(nativemethods.dhcpcapi_params));
$c.cells.item($introw, 2).interior.colorindex = 3
$stbar1.text = "local admins on " + $computername.toupper() + " (refreshing...)"
$service = "wuauserv"
if ($update.supporturl -like "*support.microsoft.com*")
$pcutreport = @()
write-host "[error]`tfolder [$($item.targetfolder)] doesn't exist, metering rule [$($item.productname)] couldn't be moved" -foregroundcolor red
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + ",qfix-wsusdetect" | out-file -filepath $lfile -append}
$csvfile = import-csv $csvpath
param([string]$servicetag = $(get-wmiobject -class "win32_bios").serialnumber);
$existingmailboxes
$serverobject.setdefaultinitfields([microsoft.sqlserver.management.smo.availabilitygroup], $true)
$values += $script:adfssubjectname
$env = $args[0]
$aclentrysid = $null
$stringbuilder.appendline("@{name='$physicaladdresskey';expression={`$_.phonenumbers['$physicaladdresskey']}}, ``") | out-null
switch ($pscmdlet.parametersetname) {
[array]$adproperties= "name", "whenchanged", "whencreated"
$oabapplication = $iis.sites["default web site"].applications["/oab"]
<td width='12%' height='15' align='center'> <strong> <font color="
"<br><br>recovery model: "+$database.recoverymodel+
$searchresults = $contactmanager.endsearch($contactmanager.beginsearch($groupcontacts,$null,$null))
write-infolog ("current aos state : {0}" -f ($aos.state))
$csv = import-csv -delimiter ";" -path "$pwd\useraccounts.csv"
" convert -a m -v 10 converts 10 meters to feet."
$exporttofile | out-file $logfile -append -encoding utf8
write-host 'attempting to add dns record...'
$addcsv | foreach-object {
$lastchangedate = $fielddata
if ($oldvalue -ne "")
$body += "<h2 style='font-size:15px;text-decoration:underline'>indexes</h2><p style='line-spacing:120%'>$vw_idx</p>";
[string]$computername = (& hostname),
$btn11.add_click($btn11_onclick)
$message = "do you want the shared mailbox to automatically appear in the users outlook/owa?"
write-verbose "user $identity enabled"
meter = @{
[microsoft.exchange.webservices.data.emailmessageschema]::datetimereceived,`
$parts+=[uint64]::parse($guid.substring(19,4),"allowhexspecifier")
write-infolog (" ")
"submit request for $sslfqdn - dc: $dcfqdn - ca: $caname "
$scheck="ok"
$vmhost = $vmhostobject.name
$prefixlength,
$script:compileerrors = $false
if ($movereqs = get-moverequest | where {($_.status -notlike "completed") -and ($_.status -ne $null)})
if ($record){$colofrecords += $record}
function get-rdploginevents
return $false
$struserdetails = "$struserprincipalname,$strlastlogontime"
$neweditviewform.showintaskbar = $false
$script:groupmembers.add($dn, @())
write-infolog ("begin: stop-aos method : {0}" -f (get-date))
$accountentry.putex(1, "msexchbypassaudit", $null)
public double estimatedsizemb;
[microsoft.visualbasic.interaction]::inputbox("no difference between $sourceaccount & $destinationaccount groupmembership found. $destinationaccount will not be added to any additional groups.",0,"exit message");return
" -msol username: $username" | out-file $logpath -append
olddomainsid=$aclentrysid.substring(0,$aclentrysid.lastindexof("-"));
$mbxdb = $mbxdbrpc.name
if ($dbstat.disconnectdate -eq $null) {
$sqldatabase = "besmgmt"
kbarticleids = "$($update.kbarticleids)"
$stringbuilder.appendline("@{name='$imaddresskey';expression={`$_.imaddresses['$imaddresskey']}}, ``") | out-null
$tbl_props += "partition scheme: "+$item.partitionscheme+"<br>";
return "<h3>no updates</h3>"
get-wmiobject win32_logicaldisk -credential $cre -computername $args -filter "drivetype=3" |
if(-not $servicename)
$query = "select name, status from win32_service where (name = 'dhcpserver') and (state = 'running')"
$regcon.close()
return "single instance storage is not available on this computer"
if ((test-path -path $clientbindir) -eq $false) {$axbuilderror += "the client bin dir is missing."+[char]10}}
write-verbose "diskmounted equals $diskmounted"
if(-not(!$lists))
$detailexch+= "<td width='30%'><font color='
$_progstatus = [math]::round(($i/$count)*100,2)
$tbl_props += "filegroup: "+$item.filegroup+"<br>";
class = 'win32_service'
write-host -foregroundcolor red "3. *** deleted ***"
$speak = new-object -com 'sapi.spvoice'
if ($attachment -ne "") {
$versiondesc = $versiondesc + " or " + ((($xmldata.selectnodes("/dsversion/exchange[@$category='$version']")) | select-object )[$i].displayname).replace("exchange ", "")
<th width='20%'><b>sourcetransportservers</b></font></th>
$userprofiles = $profilemgr.getenumerator()
$searcher.filter = $filter
$script:files++
$logitem["siteurl"] = $enc.getstring($content,$offset,$logitem["datastruct"]["cbsiteurl"] )
$useasdefault = $default
if($args -ne $null)
$x += 1
internal static partial class nativemethods
$btn7.add_click($btn7_onclick)
$reset = set-itemproperty -path $key -propertytype $propertytype -name $name -value $value
$app.displayname = $key.getvalue("displayname")
cred.type = ncred.type;
if (-not [system.string]::isnullorempty($from)) {
"web template id: " + $web.webtemplateid | out-file $logfile -append
write-host "installing msi $msifilename`n please wait..."
remove-item $modelfile -erroraction silentlycontinue
$proc.startinfo.windowstyle = "hidden"
$myformatlabel.location = new-object -typename system.drawing.point($formspacer, $formspacer)
$attrs = $attributes.keys
<th nowrap=""nowrap"" colspan=""3""><font color=""
$form1.text = "arposh admin tool $version - connected to $((get-qadrootdse).dnshostname)"
get-addresslist | where {$_.name -ne ".contoso" } | where {$_.name -ne "contoso" } | set-addresslist -includedrecipients contacts -forceupgrade:$true
echo $writearray
$i = 1
"select containernodeid from sms_objectcontainernode where name = '$($item.packagefolder)' and objecttype = '$objecttype'"
$($detailmc)
foreach ($policy in $policies) {
if($modellayermap -ne $null)
$classheaderowebs = "heading1"
{selectitem}})
$expuser = '$list1.selecteditems | foreach-object {$_.tag} | foreach-object {$_.name}'
return $false;
write-error -message "path not found: $regpath" -category objectnotfound
[system.management.managementdatetimeconverter]::todatetime($bootup)
$outputitem | add-member noteproperty ewslastaccess $_.value["ewslastaccess"]
for ($k = 0; $k -le 20; $k = $k + 1)
foreach ($pwsvd in $pwsvds){
"2604371895", "1426053789", "5038647192", "3267408951",
$retval = new-object -typename psobject -property @{
if ($showmembers -like "true")
1. import-module sidhistory
$no = new-object system.management.automation.host.choicedescription $($messages.choiceno),$($messages.choicenomsg01)
foreach ($dc in $alldcsinforest)
$adobject = get-wmifilterinadobject -guid $guid
" .example`r`n"
function click-itemnewtoolstripmenuitem()
$ipv6dns = $null
$searchfiltercollection = new-object microsoft.exchange.webservices.data.searchfilter+searchfiltercollection(`
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "script: $($nliscripttextbox.text)" -tag $($nliscripttextbox.text)
write-verbose "modifying remote registry by ip on machine: $computername"
$computeruptime = new-object -typename psobject -property @{
$localnodepresent = $true } }
$findresults = $currentcontactsfolder.finditems($itemview)
[microsoft.exchange.webservices.data.contactschema]::birthday)
[string]$desc4,
test-qsrequirement -requirement (install-qsmsolservicesmodule) -message 'required module did not install, so script cannot continue.'
$workbook.saveas($saveas)
$lastname=$i.sn
$convertcsvsuccess = $false
$graphics.dispose()
<registrationinfo>
$acl
$updates_filtered = @()
"<br><br>default filegroup: "+$database.defaultfilegroup+
foreach ($printserver in $printservers)
"called cleanup script $((get-date).tostring())" >>c:\fso\mylogging.txt
return $partitionschemes;
$mail.from= $from
$replsummary = {cmd.exe /c repadmin /replsummary}
$passwordage=((get-date) - $pwdlastset).days
if ( $_.isapproved -eq $false ){
$domainsuffix = "*."+$domain
$svncommand = "svn info `"$($workingpath)`""
$attachment = $emailmessage.attachments.addfileattachment($attachmentpath)
} -end { $quorumdisknumber }
preparedquorumdiskenabled = $preparedquorumdiskenabled
$myprotocol = $matches.protocol
$tcontacts = $tcontacts -join ";"
foreach ($string in $strings) {
write-host "connection information:"
cmd.exe /c "netsh int ipv4 add route prefix=0.0.0.0/0 interface=""$switch"" nexthop=$ipv4gateway "
2 {
$mailboxes = get-mailbox -server $server -resultsize unlimited
$object1 | get-member -membertype properties | %{$count=0} {$count += 1}
[string] $nodescription,
$sql_server.setdefaultinitfields([microsoft.sqlserver.management.smo.table], "issystemobject");
$btn8 = new-object system.windows.forms.button
$output+="<tr><th>$($duplicatemember.displayname)</th><th>$($duplicatemember.recipienttype)</th><th>$($duplicatemember.groupname)</th></tr>"
$fs.close();
$svncommand = "svn delete `"$($filepath)`" --force"
<td>$($entry.name)</td>
updateprogress -percentcomplete 10
new-item -path $($filepath + $db.name) -itemtype directory -force | out-null;
while($true)
$ip = $splitline[-1]
$systemprinting = get-childitem "$($env:systemroot)\assembly\gac_64\system.printing"
aaaaaaaaaaaaaaaaaacqduaqmofl/+zp6p9yr5p/ntc7/3k3mv9dm3x/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf8+mxh/pplx/z6zcf9yr5p/7ono/5qb
from the use or distribution of the sample code.
[string[]]$computername = $env:computername
param ([string]$types = 'ps1',
if(test-path -literalpath $exclusionfile)
$($detailmbxi)
total: {0:n0} mb
add-content $filename ""
<th width='20%'><b>testmailflowresult</b></font></th>
"customgroup" {
$sourcesysobjpage = $page;
if ([system.environment]::getenvironmentvariable($variablename) -ne $null)
$cols = $objs | convertto-html -head $colstyl -property name, datatype, default, identity, inprimarykey, isforeignkey, description ;
november, 2011
--></mce:style><style _mce_bogus='1'><!--
$guid = [guid]$octet
if($env){checkhost}
$daysincurrentquarter = 31+30+31
remove-adobject $_ -confirm:$false
dir tsenv: | ft -auto | out-file $vardumpfile
$command = [scriptblock]::create("iscsicli persistentlogintarget $iscsi_target t $iscsi_portal $iscsi_port $iscsi_initiator $iscsiportid.port * $iscsi_mpio * * * * * * * * * 0")
write-verbose "found $($existinguser.properties.name)"
$newdtrow.speedinkbps = ($speed/1024)
setspn -l $usr | out-file $filename
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.partitionfunction")
$obj | add-member -membertype noteproperty -name "other fax" -value ($notfound)
$emailmessage.sendandsavecopy()
$result = send-tsmessagebox -title "system updated" -message "system requires a reboot. would you like to the reboot system now?" `
$windowsauthenticationsectionenabled = $config.getsection("system.webserver/security/authentication/windowsauthentication", "default web site/oab")["enabled"];
install-adfsfarm -certificatethumbprint $certificate.thumbprint `
$cmdselection = read-host "which cmd"
$host.ui.writeline("import-module grouppolicy")
$cluster_qospolicy_minbandwidth = 100
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "changed the vm name to $($newvmname) and wrote a note"
$verbosemsg = $messages.getowauseroptions
[string]$fqdn = [system.directoryservices.activedirectory.domain]::getcurrentdomain()
[microsoft.exchange.webservices.data.emailmessageschema]::subject,`
$pingsuccess = 0
$starttime = get-date;
$maclass = get-scsmclass -name system.workitem.activity.manualactivity$
$width = $cellwidth * 2
foreach ($autovd in $autovds){
elseif($autoselectonly)
echo $soutputfile
if($vmbus.status -eq 'running')
fixes:
write-debug "accept eula"
$verbosemsg = $verbosemsg -replace "placeholder01",$mimetypeitem
$servicecontext = get-spservicecontext($site)
whencreated = [string]$whencreated
" netsh int ipv4 add dnsservers name=$switch address=$ipv4dns2 "
if(-not (test-path($zipfilename)))
$oabvdir=$iis.sites["default web site"].applications["/"].virtualdirectories["/oab"]
"{0} {1}" -f $paddingtext, $domain | write-host
mixerdetails.cchannels = 1;
ensurebinarypath
new-eventlog -source $scriptname -logname 'windows powershell' -erroraction silentlycontinue
$smtpserver = "mailserver.company.com"
write-host "data sets collected : $counter"
$uninstallkeyswow6432node = $null;
while ( -not ( test-connection -quiet -computername $address -delay 1 ) ){
"transcripts are easier to read in wordpad."
public const int mixercontrol_ct_class_fader = 0x50000000;
if ($basedn)
$img4.glow.radius = 5
$psise.currentpowershelltab.files.add($file.fullname)
11007 {"bad option"}
$datarow = "
showinadvancedviewonly = $userobject.showinadvancedviewonly
[alias("template")]
function get-oscexosearchfolder
<h4 align=""center"">generated $((get-date).tostring())</h4>
}elseif( test-path $dclist )
$emailbody += "<tr><td class=`"first`"><b>pins added to ad</b></td><td class=`"first`"><b>:</b> " + `
$uniquekeyvalue.add($keyfieldvalue, $keyfieldvalue)
if ($transcript_enabled -eq $true)
$usercollection = get-aduser -searchbase $targetoudn -filter *
$errormsg = $errormsg -f $attchment
write-verbose "open the $($worksheetname) worksheet"
$btn3.location = $system_drawing_point
$pingaverage = $pingaverage/$pingsuccess
$projsvcurl = $pwaurl + "/_vti_bin/psi/project.asmx?wsdl"
if (($viewmenu = $pgse.menus['menubar.go']) -and (-not ($clearconsolemenuitem = $viewmenu.items['gocommand.functionexplorer'])))
write-verbose "connect to $$(zipfile) so we can copy files to it"
write-host -foregroundcolor red $path2 " deleted"
listtitle = ""
$nevtypetextbox.location = new-object -typename system.drawing.point(($nevtypelabel.right + $formspacer), $nevtypelabel.top)
$axbuilderror | out-file (join-path "$currentlogfolder" "axinputvalidationerrors.txt") -encoding default
$pgse.commands.item("editcommand.collapseoutlining").addshortcut([windows.forms.keys]::control -bor [windows.forms.keys]::subtract)
foreach ($int in $ints)
if((get-module -name activedirectory) -eq $null)
$errormsg = $messages.requiresrecipient
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
$getalias = read-host "enter alias of the user to add mailbox import export permissions"
write-debug "start time: $startingdate"
if ($count -eq 0) {$last = $true}
write-qstitle 'check dns records for txt entries for unverified domains'
-givenname $firstname `
helpdesk@<cotendo>.com
write-verbose "getting properties from $([string]$workstation.name)"
add-type -memberdefinition $sig -namespace "advapi32" -name 'util'
$mailboxservers = @()
$lastname = $replace.substring(0,4)
$atdiam = $autovd.internalauthenticationmethods
$detailsdb+= "<td width='15%'><font color='
[string]$thisworkstation = $workstation.properties.name
$parsefile,
$arrdcs += "$serverdnshostname"
$trvfunctions.nodes.remove($trvfunctions.selectednode.parent)
foreach ($tcontact in $contactsearchresult.contacts) {
function check-batterystate
function gettriggerdetailstable
console.writeline("testing credread() again");
if($val -and $val.length -eq 4) {
if($result -ne $null)
<system.web>
setupadmin = [bool]$sqlobject.setupadmin;
$buffer += "tfsworkspace="+ $tfsworkspace
if (-not ($possiblecertificate.subject.contains("cn=$script:adfssubjectname"))) {
$ofolder = new-object microsoft.exchange.webservices.data.folder($service)
[parameter(mandatory=$true, valuefrompipelinebypropertyname=$true, position=0, parametersetname="getall")]
$sitename = $sitecollection.name
$biosdesc = $bios.description
$classheadercs = "heading10"
$btn8.size = $system_drawing_size
$detailows+= " <td width='15%'><font color='
if($username) {
$emailmessage += "$($failcount.count) was unreachable due to power or network issues.`n"
$logitem["doc"] = $enc.getstring($content,$offset,$logitem["datastruct"]["cbdoc"] )
[switch]$debuger
<td width='5%' align='center'>drive</td>
invoke-command -computername $hosts[0] -credential $cred {
break
$dbname = read-host "enter database name"
$destinationaccount
$result = [microsoft.visualbasic.interaction]::msgbox("all your base are belong to us! you are on the way to destruction. you have no chance to survive make your time",'yesnocancel,question',"how are you gentleman")
$useremail = user.email
$guid = [system.guid]::newguid()
function click-viewloadtoolstripmenuitem()
-minbandwidthweightaction $livemigration_qospolicy_minbandwidth
[string]$inputfile,
$lastlogontimestamp=$objuser.properties.item("lastlogontimestamp")
<span class=sectiontitle tabindex=0>tests - test mapiconnectivity - public folder database</span>
if ($provisionjobs)
credential cred = new credential();
$_.gettype().getfield("encodindg","nonpublic,instance").setvalue($_, [text.encoding]::ascii)
$item = get-item -literalpath $item -force
if ($identity -eq "\") { return $currentpublicfolder }
$installresult = install-windowsfeature $featurename
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "system info" | out-file -filepath $lfile -append}
[parameter(parametersetname='unbind')]
write-host "`t4. this tool must be executed directly on a internal, writable federation server"
$stream = $file.openread()
$gotodefinitioncommand.addshortcut('f12')
new-item -itemtype directory $destfolder -erroraction silentlycontinue
write-warning "running clean models without sequence might cause issues."
$($detaildb)
for($i = 0; $i -lt $words.length; $i++)
$pwd_dnsdelegationcredential = convertto-securestring -asplaintext $defaultpassword -force;
write-debug "stage 0: prepare environment"
configure-qsiisauthentication
$currentsite.allwebs | foreach-object {
return "success"
23 { convert-qsmsoldomain; write-qscompletionmessage }
function get-nonstandardserviceaccounts
$lookup = "nslookup $($client) |select-string 'name:'"
$mbxdbtable.columns.add("activestdmbs",[int]) | out-null
select -expand inputobject | foreach {add-adgroupmember "$_" $destinationaccount}
$c.cells.item(1,5) = "last name"
if ($i -eq ($fqdndepth - 1)) {$separator=""}
$newlistitemtooltip.settooltip($nliscriptlabel, "help for control $($nliscriptlabel.name)")
" : -propertytype $regtype"
$script:importtimeout = [int](set-parameter "importtimeout" "60" )
write-host "configuring wnv on", $hosts[$i] -foregroundcolor yellow
set-csuser -identity $newuser.samaccountname -enterprisevoiceenabled $true -lineuri $lineuri
$newlistitemform.controls.add($nliwidthnumericupdown)
$lyncserverfqdn = $adsearchresults[0].properties."msrtcsip-trustedmcufqdn"
<th width='5%'><b>id</b></font></th>
message "`ndetails`n"
$total = $tableheaders.count - 1
$targetdatabase = $_.target.targetdatabase
$detailtc+= "<tr>"
$cmd = "cmd.exe /c psexec.exe \\$computername -d wuauclt.exe /detectnow"
$account = $service.startname
"total: $total"
$results.percentuptime = "{0:p4}" -f ($uptime.totalminutes/$minutesinperiod)
[localaccount.localgroup]$identity
write-progress -id 1 -activity "report for mailboxes" -status $status -percentcomplete ($percentcomplete)
adfs server options (part 1)
if (-not ($pgfunctionexplorer = $pgse.toolwindows['functionexplorer']))
where-object {$_.sideindicator -eq '=>'} | select -expand inputobject | foreach {([regex]::split($_,'^cn=|,.+$'))[1]}) -join "`n")",4,"please confirm the following action")
write-verbose "display only qfes where the client os matches the os property of the qfe"
$cp = get-fastsearchmetadatacrawledproperty -name $crawledpropertyname
$img4.glow.transparency = .3
$global:temparray =@()
" display height : $displayheight"
$coldomainnames = @()
if ($showmembers -like "true"){$stat=20}else{$stat=45}
$neweditviewlabel.width = 400
$getuser=get-user -filter "phone -like '*$extension'"
<span class=sectiontitle tabindex=0>database availability group - databases backup status</span>
-and $_.isdeclined -eq $false `
write-host "[info] sccm client repair process ran successfully on $strcomputer."
$script:currentversion = $version
$replicas = @()
[microsoft.exchange.webservices.data.contactschema]::displayname,`
$paramsetname = $pscmdlet.parametersetname
switch($credtype)
retry:
function read-qslistchoice {
<th width='10%'><b>p.a.m.</b></font></th>
$classheaderwsc = "heading10"
if($computername -match "=")
if ($serverbindir -ne $null) {
$currentlist = $_
mkdir $copyto | out-null
if (-not $legacydns.contains($ccrecipient.address)) {
on
$scripter.options.schemaqualify = $true
new-mailbox -name $sharedmailboxdisplayname -alias $sharedmailboxalias -shared -primarysmtpaddress $sharedmailboxusername
writehtmlpage $title $title $body $page;
$exchangecontact.save($contactsfolder.id);
$nliwidthnumericupdown = new-object -typename system.windows.forms.numericupdown
$netsavebutton.name = "netsavebutton"
$commandtext = "sp_configure 'max degree of parallelism', 1;reconfigure with override"
[string]$rundetails+="<br><br>"+ $job.enumhistory().rows[1].message
$xl.speech.speak('an image can also be rotated counterclockwise in negative increments through the increment rotation method')
write-debug "startup `t $($sortedlist.keys[$i])"
if ($ipv4address2){
<div class=heading0_expanded>
add-content $report "margin-top: 5px;"
'virtualmachine name'= $vm
add-pssnapin microsoft.exchange.management.powershell.e2010 -erroraction silentlycontinue
[string]$adminaccount,
$adapters = ([system.net.networkinformation.networkinterface])::getallnetworkinterfaces()
invoke-command -computername $computername -scriptblock {net stop termservice} -erroraction silentlycontinue | out-null
[parameter(valuefrompipeline=$true,
$crwc = $mbxcra.calendarrepairworkcycle
if ($gcount -ne 0)
write-progress -activity "copying install bits to flash drive" `
[switch]$autoreboot,
$ocurrculture = get-culture
$ver = $_.name
write-host "collecting logs from $dc : $count of $numberofdcs dcs" -foregroundcolor green
$key.close()
{$queueinfo | % {$dodgyqueues = $true
$btn12.visible = $false
$eventarg.node.collapes()
$result = new-object psobject -property @{folder = (split-path $dir.pspath -noqualifier)
$longrep = ip2longrev($ip)
username = $username;
new-task -computername $computername -credential:$credential |
$list2.view = [system.windows.forms.view]"details"
"the domain is " + $domain
"finished builddhcp server"
$psobject | add-member -membertype noteproperty -name 'nextruntime' -value $_.nextruntime
write-host -foregroundcolor yellow "working on job $jobcount with the array start of $mbxmovearraystart and the array end of $mbxmovearrayend."
$checkdate = ([datetime]::parseexact("$($yearint)0101",'yyyymmdd',$null)).adddays($dayofyear-1)
"business street" = "address:business:street";
elseif ($soutpath -eq "")
$delusertabledump = $delusertable | convertto-html -fragment @{label="display name";expression={$_.displayname}},`
if ($c.cells.item($introw, 3).value2 -eq $env:username)
$mcafeeods.add_click({$mcafeefile = "ods"; mcafeelogs})
$scompname=$env:computername
char[] outputchars;
foreach ($qspart in $arrlog[5].split("&"))
$hubmrel = $hubtc.maxrecipientenvelopelimit
[int]$weekrepeat=1,
$myformatform.startposition = [system.windows.forms.formstartposition]::centerscreen
$newobj | add-member -membertype noteproperty -name "autoservices" -value $services
input {
$controlelement = $viewelement.appendchild($myxml.createelement("listcontrol"))
if ($hasbirthday) {
"[group]-no changes were done on = " + ($groups[$k] -replace $source,$destination).tostring()
$filename_log = "delay-wsus-auto-approvals.log"
function buildbaseconfig()
$objecttype = "2"
$verbosemsg = $verbosemsg -f $username
$tsbrefreshtreeview.tooltiptext = "refreshed the function treeview"
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet explorer\main") -value "search bar" | select-object value,data | ft -hidetableheaders
new-variable -name versiondefinition -value "get-exschemaversions.xml" -scope script
$newdtrow.durationinsec = $timespan.totalseconds
add-tasktrigger -in (new-timespan -seconds 30) |
foreach ($testflag in $arrflags)
$scriptblock = {get-psdrive -psprovider filesystem |select-object -property name, @{label='used';expression={$_.used /1gb}}}
add-pssnapin quest.activeroles.admanagement
$emailbody += "<body>`r`n"
adaptersetting -name $hvnode.node2.clusternet.name -unbind $true
"string"
$countmoverequest+=1
$detailcasarray+= "<td width='25%'><font color='
_progress (40) "collecting member information for distribution group"
if (-not $listonly) {
function get-localgroupmembership
$gotodefinitioncommand = new-object -typename quest.powergui.sdk.itemcommand('editcommand','gotodefinition')
write-verbose "copying $($file.fullname) to $($zipfile)"
add-dnsserverresourcerecorda -computername $serveraddress -zonename $domain -name 'adfs' -ipv4address $ipaddress
$region = "am region"
$errorlevel=@{0="success";1="warning";2="error"}
switch ($domaintype)
$loginattempt = new-object -typename psobject -property @{
marshal.freehglobal(buffer);
</ol>";
add-pssnapin quest.activeroles.admanagement -erroraction silentlycontinue
$bstate -eq "critical" -or
write-host "shared mailbox created: $sharedmailboxusername" -foregroundcolor "green"
$myformattreeview.selectednode.checked = $true
foreach($result in $results)
if([string]$rrstatusic -eq "")
$script:compileinlayer = $layername
$servicefilter = "(not startname like '%localsystem') and (not startname like '%localservice') and (not startname like '%networkservice') and (not startname like 'nt authority%')"
cbrefqs=0;
10 { process-qscertificate; write-qscompletionmessage }
if ($unverifieddomains.count -eq 0) {
if ($writetoconsolestring -eq "true"){ $writetoconsole = $true }
write-output $($menuitems[$pos])
$record.reachable = $pingable
while (!$username) {$username = (read-host "`n msol username (user`@domain)").toupper()}
if ($product -eq $null) {
helpmessage='which choice is the default?')]
$featurestate = $searchfeatureinfo | select-string "state"
remove-item $outputfile
$count=$script:documentlibrarytitlestotarget.count;
write-host "version: " $objitem.version
if ($qfeserver -eq $null)
for ($idx = 0; $idx -lt $m.count; $idx++) {$version+='{0}.' -f $m.get($idx)}
elseif ($clearreq -eq "n")
$departopengroups=($alldistgroups | ?{$_.memberdepartrestriction -like "open"} | measure-object).count
trap{"error assigning logonhours to $dn - $_"; continue;}
$logitem["datastruct"]["cbuas"]= [system.bitconverter]::toint16($content,$structoffset)
$true {$global:messagebody += "`r`n<tr>$shtmlcellstyle $wsusserver</td>$shtmlcellstyle $parentwsusserver</td>$stemp <b> something went wrong connecting to the wsus interface on $wsusserver using port $portnumber with ssl: <br> `r`n $error</b></td></tr>"}
$detailexipsw+= "<tr>"
function get-sharepoint3sites
id = $spfolder.id
$bodyel ="<tr> <td> " + $sqlservers+ " </td>"
[alias("regkey")]
sleep 60
$appointment.subject = $appointmentbirthdaysubject
cmd.exe /c "certutil -setreg ca\crlperiod ""years"" "
$owner1 = read-host "enter primary site collection admin"
foreach ($objitem in get-storagegroupcopystatus)
[int]$endtime,
[dllimport("advapi32.dll", setlasterror=true)]
send-mailmessage -to $emailto -from $emailfrom -subject $subject -body $body -attachments $attachment -smtpserver $smtpserver
$detailcs+= "<th width='20%'><b>roles : </font><font color='
$classheadertc = "heading1"
write-infolog ("creating output directories : {0}" -f (get-date))
$tempitemnode.checked = $false
get-regvalue -hive localmachine -key software\microsoft\windows\currentversion\uninstall -computername $computername -value displayname -recurse | where-object {$_.data -notlike "*ccc*" -and $_.data -notlike "*windows*" -and $_.data -notlike "*apple*" -and $_.data -notlike "*microsoft*"} | select-object data | ft
0 {restart-computer;}
[parameter(mandatory=$true, helpmessage='the user prompt for the choice.')]
"the sharepoint spweb url provided does not exist."
"was not found in the bes database, so its pin " $customattribute7 "was blanked in ad."
<th width='20%'><b>partnerid</b></font></th>
require-qsmodule activedirectory
$functionexplorercommand.addshortcut('ctrl+4')
$errormsg = $errormsg -f $csvfilepath
$desttaskfolder = $findresults.folders
[string]$from,
catch { $destmember = $null}
$menustrip.items.add($viewmenu) > $null
$myformatlabel.autosize = $false
write-progress -activity "generating powershell file '$($outputpowershellfile)' to balance dbs" -completed -status "completed"
$programid = gwmi -namespace "root\sms\site_$sitecode" -query `
add-content $filename "<td width='10%' align='center'>whitespace(mb)</td>"
$domains = get-qscustomdomains | foreach-object { $_.name }
$nevviewlabel.name = "nevviewlabel"
newdomainsid=$sidmaphash.($ace.sid).substring(0,$sidmaphash.($ace.sid).lastindexof("-"));
"sites:"
$imagelist.images.add("redx", [system.drawing.image]::fromfile("$psscriptroot\resources\redx.ico"))
$webapplication | out-file $filename -append
$nliwidthnumericupdown.value = 0
$excel.quit()
{ write-output "value updated on machine $srv"; }
$classheadermc = "heading1"
$c.cells.item($introw, 6) = "n/a"
if (ismember $computer "deploy" -eq $true)
[microsoft.exchange.webservices.data.emailmessageschema]::torecipients,`
$dup = 1
add-content -path $logfile -value "spreadsheet: $excelpath"
$testaccountname = read-host 'what is the test account samaccountname?'
$confnc = $root.get("configurationnamingcontext")
$user = read-host "enter user account name (ex: john.doe): "
ref tokpriv1luid newst, int len, intptr prev, intptr relen);
$groupmembership = @()
if ($member -eq $user)
if($models -ne $null)
if ($_ -like "*copy*access*denied*") { throw "access to the vhd share path on the vmm library server is denied. try executing the cmdlet with credentials" }
invoke-command -computer $strcomputer { get-process -name ccmrepair* | stop-process -force }
font-size: 11px;
new-netvirtualizationcustomerroute -routingdomainid "{11111111-2222-3333-4444-000000000000}" -virtualsubnetid "5000" -destinationprefix "10.0.1.0/24" -nexthop "0.0.0.0" -metric 255 -cimsession $hosts[$i]
$viewitems = new-treenode -treenode $tempnode1 -text "table view items"
$serverobjects = @()
$binarypath = "d:"
require-qsmodule netsecurity
if ($members.count -eq 0) {
export of small blob data with ado.net
foreach ($memberobject in $memberobjects)
foreach ($torecipient in $to) {
"domainversion"
if (!(test-path $filename)) {write-output "file not found $filename, exiting script";return}
return ""
$pass = [text.encoding]::utf8.getbytes($passphrase)
if($signkey -ne $null)
add-content $filename "<!--"
write-debug "set post search criteria: title = '$title'"
$wsuspath = "\\$computername\c$\windows"
if ((get-wmiobject win32_operatingsystem -computername $computername).osarchitecture -notlike '64-bit') {$keys= (get-itemproperty 'hklm:\software\microsoft\windows\currentversion\uninstall\*')}
$nliformattextbox.location = new-object -typename system.drawing.point(($nliformatlabel.right + $formspacer), $nliformatlabel.top)
$failcount += $thiscode
$userobj | add-member noteproperty -name "alias" -value $members[$i].alias
$btn1.add_click($btn1_onclick)
if ((validate-inputvariables) -eq $null)
$prefixendindex = $identity.subject.indexof("] ") + 2
$credentials,
update-fedata
setrebootflag
cbytes=0;
if ($identity.baseobject.psbase.invoke("ismember", $member.baseobject.path))
$errorflag = $false
[string]$exportfolder
[string] $inifile
$command = $command + "/passwordd:$passwordd"
filter largefiles($size)
$cmd = ""
$confirmpreference="none"
$modellist = @()
if ($prevvalue -is [bool])
$qfefilename = "$($qfefile.directory.fullname)\$($qfemanifest.qfefilename)"
if($dc.length -eq 0)
if ($useimpersonation) {
$accountentry.putex(1, "msexchmailboxauditenable", $null)
write-host 'installation complete.'
write-debug "(hdd) $lwthdd (usb) $lwtusb $_"
$checkdate = [datetime]::parseexact($date,'yyyy\/mm\/dd',$null)
-computername $computer -filter "name = '$drive'"
write-verbose 'this formula is located at h2 on the spreadsheet (=if(e2>0,(e2*f2*i2) + (1600/1024),0))'
write-qstitle 'retrieve verification information for domains in windows azure active directory'
write-infolog ("done enable-vcs: {0}" -f (get-date))
$step = "15"
$message = "the system has access to ac so no battery is being discharged. however, the battery is not necessarily charging."
function get-ipaddress {
write-host -foreground green "result : all the leases matched"
<td align=""center"">$dygroupswithoutmanager</td>
cmd.exe /c "net share files=c:\files"
$tempnode1.checked = $false
$neweditviewform.dialogresult = [system.windows.forms.dialogresult]::ok
$imagefile = "$env:temp\aduser.jpg"
$libraryname = "$($poshfile.name.substring(0,$poshfile.name.length-4))"
write-infolog ("calling new-axmodel: {0}" -f (get-date))
return $retval
[string]$newvmname
$message = [microsoft.exchange.webservices.data.emailmessage]::bind($exservice,$messageid)
update-sidmapping
$jobs += $thisjob
foreach ($recoverypoint in $recoverypoints)
out-error "can't find the versiondefinition xml at path: $absolutepath`n`nplease run the script with the parameter -updatexml first."
function get-qscustomdomains {
-ipaddress $hvnode.node3.address `
$response = new-object system.web.httpresponse $sw
$user = $null
node = $node
$ziplocation= "c:\temp"
-bandwidthpercentage $smb_tc_bandwidthpercent `
$pscmdlet.throwterminatingerror($customerror)
"web-digest-auth",
$adworkstation.macaddress = $thisworkstation.macaddress
$script:adfssubjectdomainname = $null
function launch-qsietestpages {
$type = 0
createobjecttypepages "db-users" $dbusers $filepath $db;
$bindingonsite = $false
$subject = "report monitor - $edate"
$commonname = $displayname
$step = "27"
write-host "the script took" $elapsedtime.hours "hours," $elapsedtime.minutes "minutes, and" $elapsedtime.seconds `
<div class='$($classheaderecpvd)'>
write-progress -activity "[3/$numberofstage] downloading updates" -status "[$numberofupdate/$acceptupdatestodownload] $($update.title) $size" -percentcomplete ([int]($numberofupdate/$acceptupdatestodownload * 100))
"find csv report of security translation here:"
if ($noconfirm){
-and $_.updateclassificationtitle -notmatch "service packs" `
if (( $chksysobject -eq $true ) -and ( $nonpfps -eq $true ))
$modellayermap = @{ $modellayermap.name = $modellayermap.value}
[switch]$export
$objcollectionchoose = new-object -comobject "microsoft.update.updatecoll"
if ($possiblecertificate.notbefore -gt (get-date)) {
$comments = $labelcomments -f $currentversion
<head><title>welcome to $id! ($corpsite)</title>
$error.removeat($error.count-1)
clusters = $clusters
bool bwait);
function createlistentries ($url, $listname, $keyfieldname, $valuefieldname, $addwordvariants)
$range.borders.weight = 2
$item = $literalpath
2. for instructions use get-help -full to read about each function:
function get-aolcode([string]$layer)
</principals>
"{0} uptime: {1,3} days {2,2} hours {3,2} minutes {4,2} seconds" -f $args[0],$uptime.days,$uptime.hours,$uptime.minutes,$uptime.seconds
$progress2.value = 20
if ($verboselog) {
$e2knb = $e2k.count
if ($syntax -eq "string")
$newlistitemform.controls.add($nliwidthlabel)
"enterprisewithscal" = "office 365 (plan e4)"
if ($rightsmask -eq "fullcontrol") {
"is a new bes user, and is being set with the pin of" $userentry.pin "`b."
if ($emailmsg.from.routingtype -eq "ex") {
$currentpublicfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,`
write-error "at least one expression method is required to create a wmi filter."
(gwmi win32_networkadapter | where {$_.netconnectionid -eq $networkinterface}).interfaceindex
if ($clientbindir -eq $null) {
$expireafter = 30 * [int]$expiry
new-item -itemtype directory -path ($usbdestination + ($dir.fullname.substring(2))) | out-null
$addcsv = import-csv -path c:\powershell\powershell-csv-demo-part-2-removing.csv
$pcutloglocation = "c$\program files (x86)\papercut print logger\logs\csv\monthly"
$logname = "application"
$tempnode = new-treenode -treenode $tempitemnode -text "format: $($tempitem.formatstring)" -tag $($tempitem.formatstring)
[string]$textsignature,
[byte[]] $b = $ip.getaddressbytes()
$reachable = "false"
$range = 1..25,
"0xc0000071"="the user account's password has expired"
public intptr username`;
ignorenetwork = $hvclusterignorenetwork
[switch]$ishidden,
</task>
if ($groupobject.type -eq "customgroup") {
$cells.item($row,$col)=$ilo.licensekey
if (-not $featureidentity)
$thissession = new-pssession -computername $computername -credential $credentials
$bakfile = join-path $backupshare "$db.bak"
public const uint error_more_data = 124;
$sessions = $server.psbase.invoke("sessions")
[parameter(mandatory=$false,position=0)][int64]$size
$newrule = $ruleclass.psbase.createinstance()
foreach ($thislogin in $loginallarray) {
</registrationinfo>
write-error "cluster does not exist"
[datetime]$recurrencerangeendby,
$percentcomplete = [system.math]::round($percentcomplete, 2)
$targetcontacts += $targetcontact
[parameter(position=2,mandatory=$false,valuefrompipeline=$false,helpmessage='this switch will list nt authority\self permission as well')][switch]$showself,
[void][microsoft.visualbasic.interaction]::msgbox("script successfully executed",0,"exit message")
$subject = "active server sessions report - " + $today
"web-stat-compression",
if ($openopenfiledialog.showdialog() -eq [system.windows.forms.dialogresult]::ok)
write-verbose "closing $($worksheetname)"
$folderlist = @($filelist | foreach-object {
function get-model([system.io.filesysteminfo]$model)
$total = $null
$mcdb = $mc.database
$imagelist.imagesize = new-object system.drawing.size(16, 16)
write-verbose "create a new blank tab for the script"
16) add the adfs proxy role to this server
$socerror = $soc.error
catch { }
$warningmsg = $messages.cannotfindspecifieduserlogin
return $tables;
begin { "index
policy_create_secret = 0x00000020l,
$viewnewtoolstripmenuitem.name = "viewnewtoolstripmenuitem"
$socket.connect($ip.address, $port)
public static int creddelete(string target, cred_type type)
$menustrip = new-object system.windows.forms.menustrip
-samaccountname $_.'samaccountname' `
nativecredential ncred = (nativecredential)marshal.ptrtostructure(pcred, typeof(nativecredential));
write-host "url: $siteurl"
$catest = $topologysettings.topologies.caname
function read-qshostcredentials {
elseif ($member.recipienttypedetails -like "*group*")
$computer = connect-commputer -computername $identityelements.item('computer')
$itemview = new-object microsoft.exchange.webservices.data.itemview(100)
$logfile = join-path $currentlogfolder ('vsimport.{0}.log' -f $modelname)
$bstate -eq "fullycharged")
write-host $extractdir
$nevtypetextbox.width = $neweditviewlabel.right - $nevtypetextbox.left
$query = "select compilerwarninglevel,debuginfo,id from {0}..userinfo where networkalias = '{1}'" -f $sqldatabase,$env:username
$btn2.text = "&local admins"
$app.displayversion = $key.getvalue("displayversion")
function configure-qsiisssl {
$viewmenu.dropdownitems.add($wsusmenu) > $null
$match = $_.path | select-string -pattern 'id=\"\{(?<id>[\-|a-f|0-9]+)\}\"' | select-object -expand matches | foreach-object { $_.groups[1] }
$existinguser = $users |where-object {$_.samaccountname -like "*$($existinguser)"}
$mbxinfoadv = $mbxinfo.admindisplayversion
if ($useros.caption -match "windows 7"){$mcafeepath = "notepad.exe \\$computername\c$\programdata\mcafee\desktopprotection"}
$psobject | add-member -membertype noteproperty -name 'numberofmissedruns' -value $_.numberofmissedruns
$stbar1.text = "running reset wsus client id on " + $computername.toupper()
foreach ($database in $databases) {
"web-net-ext",
$search.filter = "(objectcategory=msexchorganizationcontainer)"
if (select-string -path $logonaspx -pattern "pop-up") {
function set-oscexocalendarfolderpermission
foreach ($arg in $args)
$detailsrvversion+= "<th width='10%'><b>- exchange 2010 number(s) : </b><font color='
$end = get-date
[switch] $politecheck
$count = $folderlist.count
case 1
write-verbose "do the search"
$newlistitemform.controls.add($nlisavebutton)
public const uint32 token_read = (standard_rights_read | token_query);
{ write-terminatingerrorlog ("wrong local project setting: {0}" -f $localproject)}
$introw = $introw + 1
$list2.gridlines = $true
{$pfdbs | %{$messagebody += "<tr>$shtmlcellstyle" + $_.name + "</td>$shtmlcellstyle" + $_.lastfullbackup + "</td></tr>"}}
function new-wikipage
$complist = get-content $compsfile
foreach ($unverifieddomain in $unverifieddomains) {
if($writetofile -eq $true){add-content -path $outputpath -value "amount of webs updated:$($webcount)"; add-content -path $outputpath -value "amount of lists updated: $($listcount)"}
function deletesections($webapp, $owner, $removeonly)
$objnewsearch.filter = "(&(objectcategory=group)(name="+ $objgroup.name + "))"
if ($fbaenabled) {
foreach ($mailboxserver in $mailboxservers) {
$accountentry.putex(1, "msexchmailboxauditlogagelimit", $null)
remove-job $jobname -ea silentlycontinue -force
foreach ($item in $objectarray)
$msg.to.add($to)
$ua_dbcounters|select database,total
$site = get-spsite -limit 1
else {" $attr$colon <no value>"}
md "$($env:windir)\system32\oobe\info\backgrounds" -force
cmd.exe /c "netsh routing ip nat set int name=""private internet"" mode=full"
start-onlinecoexistencesync
secret = $value;
$servicename = "windows update"
<td width='10%' align='center'>used capacity(gb)</td>
$message+="your user id is $accountname\par`r`n"
write-verbose "ending get-qotd"
$usbdriveletter = $usbdriveletter.toupper()
$credential = get-credential -credential $setting.adminaccount -erroraction stop
$savefilename = join-path $env:temp $filename
$smtpmessage = new-object system.net.mail.mailmessage $fromaddress, $remoterecipients, $messagesubject, $htmlmessagebody
$path = 'msft_somfilter.domain="' + $gpdomain.domainname + '",id="' + $_.name + '"'
$servicename = $serviceid
function reset-susclientid
function configureiehomepages($passurl)
$properties = $groupmember.gettype().getproperties()
function set-ipaddress {
$btn10.visible = $false
$mailboxcounter ++
continue
"abort" = 3
$server = "$_"
public intptr credentialblob;
add-type $code
[system.reflection.assembly]::loadwithpartialname('microsoft.visualbasic') | out-null
add-content $filename "<table width='100%'>"
sys.all_objects so
$arbody = $arbody + "`n<font color='red'>the service <b>$i</b> is not running! </font><br />" + [char]13 + [char]10
if (($poshfile.name.indexofany("-")) -gt -1)
add-content $filename "<td width='10%' align='center'>server</td>"
write-verbose $message
"pager" = "phone:pager";
$keyfname = $keyfieldname[$name]
deploy-ax
foreach($exchangeserver in $exchangeserverlist)
$bypassenabled=get-mailboxauditbypassassociation -resultsize unlimited | ?{$_.auditbypassenabled -eq $true}
write-infolog ("begin: import-buildmodels: {0}" -f (get-date))
$udt_props =
$retval = $?
compile-ax
document.documentelement.setattribute "es_auditinitialized", "true"
$mypid = $matches.pid
if ($settings -ne $null)
& $xlimgnocleanup
write-verbose "set private field which holds default encoding to ascii"
$hosts = $hosts | foreach {
if (($recurrencerangeendafter -ne 0) -and ($recurrencerangeendby -ne $null)) {
add-managementroleentry "$orgname\$managementrole\remove-inboxrule"
[parameter(mandatory=$true, helpmessage='the description of what "no" means.')]
select-object -first 1
out-file -filepath $outputfile -inputobject $struserdetails -encoding utf8 -append
[flags]
if (-not $sitelanguage) { $sitelanguage = [microsoft.sharepoint.spregionalsettings]::globalserverlanguage.lcid }
"enterprise")][string] $credpersist
"primary phone" = "phone:primaryphone";
if ($enabledfeature)
elseif ($ip -match $site2iprange) {
defaultparametersetname = 'file'
$hosts = $hosts + "`n$ipaddress adfs.$domain"
job = $printjob.properties[0].value
[parameter(valuefrompipelinebypropertyname=$true)]
6. remove a email with a specific subject from one mailbox
where-object { $_.length -ge $size }
$documenturl
$log | add-member -membertype noteproperty -name status -value $status
filter = $iis6filter
updateprogress -currentoperation "configuring node $($_.name)... "
$tempdate.substring(0,4)
$wuinstallstatus = get-content "c:\users\username\desktop\scripts\logs\$vmhost.log" | select-object -last 1
$versions = gci "\\$pc\c$\windows\microsoft.net\framework" v* | select name
if ( $applicationdir -eq $null -or (test-path $applicationdir) -eq $false)
$expropdefpathname,$path)
$nlilabellabel.width = 80
get-view -viewtype datastore | where-object {$_.name -notmatch "pag"} | `
$objs = $objs + $obj;
foreach ($tempnode in $myformattreeview.selectednode.nodes)
stsadm -o addpath -url $rooturl + "/" + $sitepath -type wildcardinclusion
$msg.subject = "[important] the account "+ $domainnetbiosname + "\" + $testaccount.samaccountname + " will expire in few days and will be automatically removed after the expiry."
remove-item -force $file
elseif( $throughputsetting['qosenabled'] )
$ntsresult = [lsautil.lsautil]::lsaretrieveprivatedata($lsapolicyhandle, [ref]$secretname, [ref]$privatedata)
$storedprocs_path = "$output_path\storedprocedure\"
$siteowneralias = $env:userdomain + "\" + $env:username
remove-variable mailboxarray
$_.cluster['clusteraccess'],
recdparams.nparams = 1;
1 = ok/cancel
if ($showerrors -and $hideerrors) {throw "invalid switch parameter combination"}
foreach ($psfile in $psise.currentpowershelltab.files)
using( gzipstream gzstream = new gzipstream( inputstream, mode ) )
foreach ($item in $arritem) {
-ipaddress $hvnode.node2.clusternet.address `
return $cols;
write-verbose "import the meta data file that matches $($qfeid)"
param($helpdata)
$objuser.description = $objusercheck.description
"$shtmlheadingstyle sg log path</th>$shtmlheadingstyle lingering log files</th>$shtmlheadingstyle database</th>" + `
$subscope = $oct1 + "." + $oct2 + "." + $oct + ".0"
throw "the differencing disk for $vm already exists. check to make sure $vm has not previously been created"
if ($policytype -ne "dialplan") {
$contactmapping=@{
$loweredlist = @()
$rpath = $fielddata
$newappointment.save([microsoft.exchange.webservices.data.wellknownfoldername]::calendar,`
success = $error[0].exception.innerexception.message.tostring().trim()
$script:builddirectory = getenvironmentvariable("builddirectory")
$root = [adsi]''
$scriptblock = $executioncontext.invokecommand.newscriptblock($qfe.test)
write-qstitle 'import certificates for adfs proxy'
$verbosemsg = $messages.contactexists
sub showsection(objheader) : setsectionstate objheader, "show": end sub
public struct lsa_unicode_string
$hubtc = get-transportconfig
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') start"
if([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.partitionfunction")
quorumdisknumber = $quorumdisknumber
$solution,
invoke-command -computername $computername -scriptblock {net stop umrdpservice} -erroraction silentlycontinue | out-null
$detailobjdisk+= "<td width='15%'><font color='
$dayofyear,
write-output $sr.readtoend()
$d.borders.item($xledgeright).linestyle = $xlcontinuous
$systemprintingfile = "$($systemprinting.fullname)\$($systemprintingfile)"
for ($j=0;$j -lt $includepath.count;$j++) {
"resetting boot: add-windowsfeature dns -includeallsubfeature -ea 0 "
$switches += "`r`n`t`t`t"
$listids = $list.items | where-object {$_.title -eq $lookupvalue} |select-object -property title, id
$cells.item(1,5).font.bold=$true
-displayname $_.'display name' `
<div class='$($classheaderowa)'>
$alignelement = $itemelement.appendchild($myxml.createelement("alignment"))
<th width='10%'><b>maxmessagesize</b></font></th>
`$username `= `$cred.username`;
$colmachines = $topologysettings.machines
if ($spuser.displayname -ne $newdisnames[$speclogin]) {
write-host "web:" $list.parentweburl "- list:" $list.title " - inheritance broken on listitem:" $item.url
if ($item.length -gt 0)
$message = 'you need to run this from an elevated prompt'
add-content -path $logfile -value $("program aborted: " + (get-date).tostring())
$newdtrow.activelrgmbs = $totalactivelrgmbs
$csv = @()
" `$scriptname = `$myinvocation.mycommand.tostring()`r`n"
$procs = gwmi win32_process -computername $computername -ev systeminfoerror | sort-object -property name
$domain = $topologysettings.topologies.domain
$tempresult = new-item -path $regkey -erroraction silentlycontinue
$splist = $spweb.lists.trygetlist($listname)
$temp = $machine.domainjoin
$mcafeeud.add_click({$mcafeefile = "ud"; mcafeelogs})
intptr.zero,
$certthumb = $cert.thumbprint
get-help $poshfile.fullname -full |out-file ".\$($wikifilename).wiki" -append -encoding ascii
if ($percfreespace -lt "20")
$warningmsg = $warningmsg -f $speclogin
$tempnode = new-treenode -treenode $tempitemnode -text "property: $($tempitem.propertyname)" -tag $($tempitem.propertyname)
$ewsmacmail=$ewsclient
$u++
$dyauthgroups=($dygroups | ?{$_.requiresenderauthenticationenabled -like "true"} | measure-object).count
write-verbose "resetting variables"
$netqosflowcontrolpriority,
if ($timeofobject.days -eq 0 -and $timeofobject.hours -eq 0){$timecomparison = $timecomparison.replace('0 hours ','')}
$nlisavebutton.width = ($newlistitemlabel.width - $formspacer) / 2
-yesdescription 'yes, use previously supplied credentials') {
$secretname.maximumlength = [uint16](($mykey.length + 1) * [system.text.unicodeencoding]::charsize)
if ($record -ne $null -and (($record.field[7]).get_innertext()) -eq "0")
$groupupdated = $false
if (-not $value -or -not $value.trim())
$hashoutput.dayofweek = 2
if ($modules.name -contains "hyperv")
$throughputsetting = @{
$form1.controls.add($lbl2)
[int]$filesfailed = 0
$optns = new-object ('microsoft.sqlserver.management.smo.scriptingoptions');
details = pcwin32.mixergetlineinfoa(i, ref line, volumeconstants.mixer_getlineinfof_componenttype);
$delaycount = $_.creationdate.add($delay)
if (!(test-path $newfolder)) {
$prereqisitereport = get-oscexoprerequisitereport
"&ignore = ignore the error and continue" }
$objsearch=new-object system.directoryservices.directorysearcher($objdomain)
if (!$userlist){$vbmsg1 = $vbmsg.popup("no users were found matching your query.",0,"error",0)}
convertto-wmifilter $adobject | write-output
$defaultdisplaywidth = $topologysettings.config.displaywidth
if ($count -gt 1) { $key = $propname[$i] }
for($i =1; $i -lt $split.length; $i++) {$iesecondary += $split[$i] +"`0"}
install-adcscertificationauthority -catype enterpriserootca -force
$rebootcounter++
"new-netipaddress -interfacealias $switch -ipaddress $ipv4address -addressfamily ipv4 -prefixlength 24"
$kb = ""
$domain = "contoso.msft"
$detailtc+= "<td width='20%'><font color='
[hashtable]
$objperm = $objectpermission.permissionstate;
if (!($_rnddone -contains $_rnd)) {break;}
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') building report ... "
foreach ($cert in $certs) {
$functionexplorercommand.text = 'functionexplorer'
$zips = "d:\scripts\test"
$lbl2.text += "operating system:`t" + $ros.caption + "`n"
$btn2.name = "btn2"
$colofmembersexpanded = @()
1 {
@{expression = {$_.size};label = "size(bytes)";width = 12},
if ($line -eq 'the full cil generation from x++ is done.')
if ($registry){
$item.subitems.add($d.executablepath)
$newappointment.end = $enddate
$currentcalendarfolder = [microsoft.exchange.webservices.data.folder]::bind(`
if ($reportshare)
public static extern int dhcprequestparams(
$size = [system.math]::round($update.maxdownloadsize/1mb,0)
write-host "-----------------------"
if (-not (require-qslocalfile $script:certificatefilename)) {
if ($username -and $password)
$grouplist.add($adobject.samaccountname.tostring() `
$scriptcontents = @"
if ($targetcontainernodeid -ne "" -and $targetcontainernodeid -ne $null)
workingcopy = $workingroot
foreach ($fg in $db.filegroups)
return $error[0].exception
foreach ($sec in $secinfo)
write-error $_
$prerequisites.add("psexecutionpolicy","please change windows powershell execution policy from restricted to remotedsigned.")
if($buildmodelstarted -eq $true)
foreach($property in $database.properties)
$file = "$filename"
$computername = $env:computername
if($needsreboot)
send-mailmessage -to admin@domain.com -subject "$srv is stopped on $computer" -from admin@domain.com -body "the $srv service was found stopped" -smtpserver smtp.domain.com
$btn1.usevisualstylebackcolor = $true
$myformatform = new-object -typename system.windows.forms.form
copy-item -path $value -destination $newfolder -force
write-verbose "change the dot to a hostname"
if ($mac) {" vm nic rename : mac: $mac - $switch"}
if ($item.folderparent -eq "root")
if($documentlibrary.browserfilehandling -eq $targetbrowserfilehandlingtochange) {
return $creds
$users = export-clixml -path $savestatefile
"deleting any prior certificate requests $fqdn - $dcfqdn"
foreach ($nonoptimaldb in $nonoptimaldbs) {
if ($filestored.count -eq 0)
return new utf32encoding( bigendian: true,
$currentweekdayint = $currentdate.dayofweek.value__
$adapterdnsservers = $adapter.getipproperties().dnsaddresses
return $folderid
$newlistitemlabel.location = new-object -typename system.drawing.point($formspacer, $formspacer)
$m = 0
$progress2.tabindex = 0
8 {
$oabapplication.applicationpoolname = "msexchangeoabapppool"
$dblist = get-mailboxdatabase -status | where {$_.recovery -eq $false -and $_.replicationtype -eq "remote"} | sort server
$neweditviewlabel.borderstyle = [system.windows.forms.borderstyle]::fixed3d
$form1.controls.add($txt1)
"$($sidmaphash.($aclentrysid)) new sid" | out-file -filepath $logfile -append
if ($findpcusername){
if(!$members)
* note: the main() function is primarily for debugging and testing in a visual
get-help $functionname -full |out-file ".\$($wikifilename).wiki" -append -encoding ascii
write-host "circular nested group: $parent"
if($item.ispartitioned -eq "true")
" : -value $regvalue -force"
$showself=$showself.ispresent
$browser.visible = $true
write-host "amount of lists updated:"$listcount
<th width='10%'><b>latency</b></font></th>
if($downloadresult.resultcode -eq 2)
if($rc -ne -1)
if ($targetsolution -and $targetsolution.containswebapplicationresource -and $webapplication)
ideltime = $session.gettype().invokemember("idletime","getproperty",$null,$session,$null)
soft-inventory $comp | select computername, name, publisher, installdate, estimatedsize, version, wow6432node | sort-object @{expression={$_.installdate};ascending=$true}`
<th width='15%'><b>workcyclecheckpoint</b></font></th>
$distgroup = $adistgroup = get-distributiongroup $name -erroraction "silentlycontinue"
write-error -message "could not get local group members of group $($identity): $($_.exception.message)" -exception $_.exception
-prompt 'the certificate already exists. validate the existing certificate?' `
$defaulttestaccountsou = "ou=test_accounts,dc=contoso,dc=msft"
if`(`$success`)`{
$inttotalsentsize = $inttotalsent = 0
$worksheet = $excel.worksheets.item($worksheetname)
$entryelement = $entrieselement.appendchild($myxml.createelement("tablerowentry"))
if ($allproperty) {
write-host "documented schemata";
$nlialignlabel.location = new-object -typename system.drawing.point($formspacer, ($nliwidthlabel.bottom + $formspacer))
$neweditviewtooltip.settooltip($nevcancelbutton, "help for control $($nevcancelbutton.name)")
<th width='10%'><b>port</b></font></th>
write-verbose "creating excel object"
$nlipropertytextbox.text = $tempnode.tag
$record.sam = [string]$sam
$options.driall = $true;
$list.views.delete($viewtodelete.id)
$mbxbkidentity = $mbxbk.identity
$list1.fullrowselect = $true
mac = $mac
$f=0
cmd.exe /c "certutil -setreg ca\validityperiodunits 5 "
write-warning "don't found any updates in pre search criteria"
$headerelement = $headerselement.appendchild($myxml.createelement("tablecolumnheader"))
$certssltemplate | out-file c:\config\cert\cert-ssl.inf
[parameter(parametersetname='explicit',
ipport = $event.properties[20].value
$pwce = $pwsvd.certificateauthentication
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + ",qfix-gpupdate" | out-file -filepath $lfile -append}
foreach ($script in (get-childitem c:\config\*.psm1 -recurse))
checkhoststatus
$senderbody+="<td><font color=""
$edate = get-date
$config = $iis.getapplicationhostconfiguration();
if($secondlastline.contains('errors:') -and $secondlastline.split(':')[0].trim() -eq 'errors' -and $secondlastline.split(':')[1].trim() -ne 0)
$ptrobjdn = "dc=" + $ptr + ",cn=microsoftdns,dc=dnszones,dc=mydomain,dc=net"
$mcafeeagent = new-object system.windows.forms.toolstripmenuitem("a&gent")
$psboundparameters.backgroundcolor = 'white'
{(1..366) -contains $_} {
$script:combinetimeout = [int](set-parameter "combinetimeout" "60" )
$script:port = $port
$structoffset = $fileoffset
if ($apppool)
$colcomputers = get-content machinelist.txt
function disable-localuser
[string]$foldername
<col width=50px>
-exceptionstring $errormsg `
write-output "$sourcefile,$_hashresult" | out-file $results -append
$sortedexclusionlist = new-object system.collections.sortedlist
<th width='20%'><b>maximumactivedatabases</b></font></th>
$spattachmentnames = @()
$record.dcname = $dc
$addactivitystring = "adding '$userdn' to policy: '$passwordpolicyname'"
$path = "c:\program files (x86)\microsoft\powershell psi cmdlets for project server 2010\projectpsicmdlets.dll"
"`tfailed folder`t$temperrorvar" >> $logfile
$queues += "</table>"
$udpclient.close()
return _docompression( input, compressionmode.compress );
if (!$mailbox){$mbnull=0}
import-module smlets
write-terminatingerrorlog ("aos cannot be stopped. got error code {0}" -f $rv)
$app.installdate = $tempdate
if(($member.recipienttypedetails -like "*group*") -and ($member.recipienttypedetails -notlike "*dynamic*"))
<stoponidleend>true</stoponidleend>
$cells.item($row,2).interior.colorindex = 3
write-infolog ("end: delete-modelbyfilename : {0}" -f (get-date))
if ($osbuildnumber -lt 7600)
write-host "process id: " -foregroundcolor yellow -nonewline
$xl.speech.speak('scale down image to 50% of its current size')
new-netvirtualizationcustomerroute -routingdomainid "{11111111-2222-3333-4444-000000006001}" -virtualsubnetid "6001" -destinationprefix "10.0.0.0/24" -nexthop "0.0.0.0" -metric 255 -cimsession $hosts[$i]
$totaldbsize = 0
$objservicemanager = new-object -comobject "microsoft.update.servicemanager"
version 1.4
if ($groups -ne $null)
setsectionstate objheader, "toggle"
$csvline = "user name,login id,organization,email address,policy last applied,policy name"
thead{}
public static extern uint lsafreememory(
param ($domainfqdn)
return $hostip
if ($contactitem.firstname -and $contactitem.lastname)
function get-fwapplications
$offset=300
$e2k10e = (get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -eq "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
write-verbose "strip arp data down to just a mac"
$iesecondary += "`0"
if ($c1 -match "&")
$script:currentlogfolder = (join-path $logfolder $date)
$adminactions+=" , "
write-host "* $menutitel *" -fore $fcolor -back $bcolor
if ($clearconsolemenuitem = $viewmenu.items['editcommand.gotodefinition'])
function rename-computer {
$idx_type = $idx_cat+ " primary key";
$samepackage = $true
foreach ($xmlfile in get-childitem $logpath -filter move*.xml ) {
if ($possiblecertificate.notafter -lt (get-date)) {
$existinguser = $null
<table cellspacing=0 cellpadding=0>
$result = $repl.result
$spquery.rowlimit = 100
$expropfoldersize = new-object microsoft.exchange.webservices.data.extendedpropertydefinition(`
$adobject.put($propertyname,$propertyvalue)
$null
$typeelement.innertext = $($viewnode.nodes[0].tag)
node -name $hvnode.node1.name -type hyperv -cluster $cluster.hyperv -hypervsetting $hypervsetting -fileservername $fileservername `
$myprocessname = (get-process -id $matches.pid -erroraction silentlycontinue).processname
function convert-qsmsoldomain {
write-host "please assign the variable `$global:subversionclient in your `$profile, to either svn or tortoise."
"match on string : $control in file : $match" | out-file $output -append
function nextip {
$heading = "demonstration mode: the available menu shortcuts are shown as"
$objcollectionchoose.add($update) | out-null
$mailtext= $mailtext + $mailtextt
$btn4 = new-object system.windows.forms.button
$columnnames = "name","path"
$reports = @()
$fullbody+="</tr>"
<actions context="author">
$lbl2.name = "lbl2"
ensureloggingdirectory
foreach ($name in $disabledusers) {
$ofolder.save([microsoft.exchange.webservices.data.wellknownfoldername]::msgfolderroot)
if ($logfile.substring($logfile.length-1,1) -eq "\") {
$drives += invoke-command -session $thissession -scriptblock $scriptblock
copy-item c:\config\images\$image -destination c:\inetpub\wwwroot\$image -force
$dygcount=($dygroups | measure-object).count
[switch]$schema,
$line | add-member -type noteproperty -name "product" -value $_.producttitles
[consolecolor] $universalcolor = "cyan"
param (
add-windowsfeature gpmc
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "table view: $($view.name)" -tag $($view.name)
$e2k7h = (get-exchangeserver | ?{$_.admindisplayversion -like "version 8.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -eq "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
legal disclaimer
$nettypelabel.autosize = $true
[string]$identity
[switch]$help
"0xc0000072"="the user account is currently disabled"
"maximum_ex")][string] $credtype
"netsh int ipv6 add route ::/0 $switch $ipv6gateway "
$userpwdage = $user.pwdage
$boundparams = $pscmdlet.myinvocation.boundparameters
public uint32 type;
$sites = get-childitem 'iis:\sites'
$command = new-object system.data.sqlclient.sqlcommand
if ($members -eq $null)
$recordtype = $record.type
if ($iscredspecified) { $paramiis6.add('credential',$credential) }
[parameter(position=0,mandatory=$false,valuefrompipeline=$false)][string]$mailbox,
$mailboxsize = $mailboxsize * 1024 * 1024 * 1024
[string]$hardwareprofilename,
$userarray = $domuser.split("\")
[string]$filename,
function require-qsregistrykey {
if (($results -like $tempfind) -and ($results -notlike ""))
+ $logitem["datastruct"]["cbdoc"] + $logitem["datastruct"]["cbuser"] `
$identity = $_.source.identity
"select * from sms_systemresourcelist where rolename = 'sms distribution point' and nalpath not like '%pxe%'"
write-host "hostname is $tsenv:osdcomputername and contains"$tsenv:osdcomputername.length"characters. the last 4: ("$tsenv:osdcomputername.remove(0,$charstoremove)") will be used to determine whether pc is a kiosk or not"
until ($percentcomplete -ge 100)
if ($value -gt 120000000000000000)
disable-netadapter "private homenet" -ea 0
$str1 = $hours.substring(0, $len - $bias)
[string]$category,
param ($sql_server, $database);
$adsisearcher.searchscope="subtree"
write-host -foregroundcolor cyan "users created, view the log at $logpath"
"{0} - {1}" -f $quote.description,$quote.title
$axbuilderror
write-host "$q`n" -foregroundcolor yellow
[string] $keyname
"business phone" = "phone:businessphone";
$searchresults = $contactmanager.endsearch($contactmanager.beginsearch($customgroupcontact,$null,$null))
write-host "the script has completed and your csv file has been saved as" $csv". data has been collected on items that are" $mailolderthandays "days or older. this resulted in a collection of items sent on or before" $querydate"." -foreground yellow
$menutext = @"
"absolut"{
$r.iv = (new-object security.cryptography.sha1managed).computehash( [text.encoding]::utf8.getbytes($init) )[0..15]
write-debug "send update to download collection"
arch = $arch.trim()
$eventtbldata+="<td>$($event.operationresult)</td>"
$secondarydomain = $topologysettings.topologies.secondarydomain
$messagebody = $shtmltableheading + $messagebody + "</table>"
" setting reboot flag "
<idlesettings>
$checkm = ([array]($output | where {$_ -match "manual check"})).count | %{ if ($_) {$_} else {'0'} }
$modellayermap = $modellayermap.getenumerator() | sort-object name
write-host '=================================================='
startprocess
$d.borders.item($xlinsidehorizontal).linestyle = $xlcontinuous
register-dnsclient
write-output $e > $logfile
if (test-connection $computername -quiet -count 1)
[parameter(mandatory=$false,position=5)]
$objname = $objectpermission.objectname;
$sourceacc,
elseif ($name.info -ne "whitelist"-and $name.modified -le $warndate) {
$usergroup = "managers",
require-qswindowsfeature net-framework-core
remove-item -literalpath $globalbackupdir
$groups = dsquery group $source -limit 0
[system.threading.thread]::currentthread.currentculture = $ocurrculture
public static extern int mixeropen(out int phmx, int umxid, int dwcallback, int dwinstance, int fdwopen);
if ($machine.domaintojoin)
$computername = $result.properties.item("name")
$shell.namespace($dest).copyhere($item)
$base | add-member noteproperty installdate -value $null;
foreach ($group in $user1.memberof)
$searchfolder = new-object microsoft.exchange.webservices.data.searchfolder($exservice)
write-verbose "checking $computer's availability"
$mesage = "............."
$vardomainjoin = invoke-expression "$temp"
param ($item, $db);
function download-xml
$myformattreeview.selectednode.nodes.item("types").nodes.item(0).tag = $nevtypetextbox.text
do { ipconfig /flushdns | out-null } while ( -not (test-connection -quiet -computername $address -delay 1) )
$record.netbios = $netbios
</head>
$wsusupstreamserver = "wsus.company.com"
foreach($id in $categoryids)
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') approving updates ... "
$date = (get-date).tostring()
$usr_perm = getusrrights $item $db;
$display = $serverlist[$j]+" *** server "+$i+" out of "+$serverlist.count
$range.interior.colorindex = 37
$result = @()
$searchfiltercollection.add($searchfilter)
$webdavclients=$null
add-pssnapin -name microsoft.exchange.management.powershell.setup -ea silentlycontinue
$ownercolumninternalname = "document_x0020_owner"
add-content -path $logfile -value "number of users updated: $script:updated"
write-host $title
"select collectionid from sms_collection where name = '$($item.collectionlimit)'"
$false {$cred.flags = [psutils.credman+cred_flags]::none}
write-host -foregroundcolor cyan "1. stopping wuauserv service..."
$tue = $_.tue
$deluserrow.emailaddress = $_.primarysmtpaddress
if ($contactfolder -ne "\") {
$detaildatabase+="<td width='15%'><font color='
$objsearch.pagesize = 15000
'microsoft .net framework ngen v4.0.30319_x86',
"install cert for $fqdn"
"copying setres to c:\files"
$mapiconnectivity = ""
-ipaddress $storagenode.node1.address `
$myformatform.font = new-object -typename system.drawing.font("tahoma", 10, [system.drawing.fontstyle]::regular, [system.drawing.graphicsunit]::point)
$webscas = $webs.clientaccessserver
$file = ".\domainsids.csv"
<th width='15%'><b>isvalid</b></font></th>
write-verbose "user $name created on computer $computername"
if ($credential -eq $null)
add-mailboxpermission $sharedmailboxdisplayname -user $usertopermission -accessrights fullaccess -automapping $true
$nevtypelabel.text = ".net type:"
" wmiscan tool executed - $(get-date)" |out-file -filepath $fullpath -append
[byte]
function removev6($passedip)
$list1.gridlines = $true
if (!$mbxdatabase){
$col++
write-host "`t6. the microsoft online services module for windows powershell must be installed on the internal ad fs server"
$scope = $null
[system.threading.thread]::sleep(1500)
if ($useremail) {
10) process ssl certificate for adfs
if ($logintarget -eq $true)
if (-not -$nov6)
foreach ($subweb in $web.webs)
$event2013 = get-winevent -logname system |where-object {$_.id -eq 2013}
foreach ($torecipient in $emailmsg.torecipients) {
$numberofdays = 30
$localgroupname = $grouptocheck
$chgusertable.rows.add($chguserrow)
$xl.speech.speak('through the increment rotation method')
<th width='20%'><b>databasecopyautoactivationpolicy</b></font></th>
if ($find -like "*data sources*")
while ($jobcount -le $jobsplit) {
$mcafeeoas = new-object system.windows.forms.toolstripmenuitem("&on access scan")
$testmailflowtargetaddress = "<an_external-email-address>@domain.com"
$functions = $sql_server.databases[$db_name].userdefinedfunctions | where-object {$_.issystemobject -eq $false};
'url'
_progress ($stat+((($i+1)*20)/$dygcount)) "writing summary for dynamic distribution group $($i+1) of $($dygcount)"
$detailasyncvd+= "<th width='10%'><b>internalauthenticationmethods : <font color='
$branch {$installededition = $descriptionbranch}
foreach ($objsearchresultcheck in $allsearchresult)
$system_drawing_point.y = 20
if($fileinfo.name -eq 'model.xml')
copy-item $webconfigpath $backuppath
$groupobject = $computerobject.psbase.children.find("$($localgroup)")
$e2k7nb = $e2k7.count
$nameelement = $viewelement.appendchild($myxml.createelement("name"))
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "width: $($nliwidthnumericupdown.value)" -tag $($nliwidthnumericupdown.value)
function creatediffdiskonhost
[cmdletbinding(defaultparametersetname="displayname")]
write-host "[error]`t[$($item.foldertype)] folder [$($item.foldername)] already exists with id [$($folderid.containernodeid)]" -foregroundcolor red
{$createtime} {"`tlistonly`t$($filelist[$j].creationtime.tostring('yyyy-mm-dd hh:mm:ss'))`t$($filelist[$j].length.tostring().padleft(15))`t$tempfile" >> $logfile}
$svcrun = "all services are running"
$table | export-csv $file
$trnfile = join-path $backupshare "$db.trn"
$authgroups=($groups | ?{$_.requiresenderauthenticationenabled -like "true"} | measure-object).count
public struct lsa_object_attributes
$grp2.controls.add($btn5)
added file validation for domainfile parameter of get-sidhistory.
$tempurl = $ldapurl.toupper()
$emailfrom = 'svc-acct@company.com'
else {" $attr$colon $sid"}
remoteaddresses = $entry.remoteaddresses
$newdtrow.alias = $mailbox.alias
$topmailboxsize = get-mailboxstatistics -database $db.name| where-object {$_.totalitemsize -ne $null} | sort-object totalitemsize -descending | select-object totalitemsize -first 1
$newrule.applytochildsites = $item.applytochildsites
defaultvhdaccesspathparameters = accesspath @vhddisk
write-warning 'overwriting existing static route'
$msoldomains = get-msoldomain -erroraction 'silentlycontinue'
(($value[1] -eq 1) -and ($value.length -eq 12)) `
"copying ncsi files."
if($udpclient)
$netrouteobjects | format-table @{expression={$_.interfaceindex};label="ifindex";width=8}, `
$wshshell.popup("the test account for " + $displayname + " was created.", 0, "[success] the test account for " + $displayname + " was created.", 48);
[alias( "nic" )]
if ($ctd){
<th width='20%'><b>shadowmessageautodiscardinterval </b></font></th>
$nevviewcombobox.width = $neweditviewlabel.right - $nevviewcombobox.left
public system.runtime.interopservices.comtypes.filetime lastwritten`;
[localaccount.localprincipal[]]$members
$i = 0
write-host 'finished.'
if([system.web.httpcontext]::current -eq $null){
write-host "_________________________________________________________" -foregroundcolor green
padding-left: 0px;
$searchresult = $directorysearcher.findall()
if ($found -eq $expected) {
"web-basic-auth",
if ($dnsarray -ne @()){
$viewloadtoolstripmenuitem.visible = $true
$zipfile = "$($localpath)\$(get-date -f mmddyyy-hhmm).zip"
$printlog |out-file -filepath "p:\printlogs\$($filename)"
if ($psboundparameters.containskey("description"))
$webapp.allowedinlinedownloadedmimetypes.add($mimetype)
write-warning "$($error[0])"
if ($result -ne $null)
bomsize = 3;
" loading nics: reading setings for topology: $foundtopology "
return $timecomparison
$attach=new-object system.net.mail.attachment $file
$csmanu = $cs.manufacturer
if(0 -ne $results)
$logfile
$accountentry.putex(1, "homemta", $null)
margin-right: 0px;
$hosts = get-vmhost -vmhostgroup "hostgroup"
if ($m.index -gt $lineposition)
{$createtime} {"`tdeleted folder`t$($folderlist[$j].creationtime.tostring('yyyy-mm-dd hh:mm:ss'))`t`t`t$tempname" >> $logfile}
function draw-menu {
$ewsclient = $arrlog[10].replace("+"," ")
$grp1.tabstop = $false
if (-not $splist.enableattachments) {
[system.runtime.interopservices.marshal]::getlastwin32error()
$isdelayexceeded = $delaycount -lt $now
else { throw "you do not have the virtual machine manager powershell module installed on your system" }
$pgse.commands.add($functionexplorercommand)
while ($lyncclient.state -ne [microsoft.lync.model.clientstate]::signedin) {
$result = start-process $cmdname -workingdirectory $axbuilddir -passthru -argumentlist $arguments -redirectstandardoutput $logfile
$message = "unknown"
$psboundparameters.getenumerator() | % { $progress[$_.key]= $_.value }
if (($s -eq 0) -and ($f -eq 0) -and ($b -eq 0))
new-item -path "$($logpath)\$($servername)" -itemtype directory -force |out-null
elseif ($name)
$msg.to.add($mailaddress)
if ($secondarydomainfqdn)
name = $volumeidentifier.name
write-output "found $numberofips ip addresses"
$psversion = (get-itemproperty hklm:\software\microsoft\powershell\1\powershellengine).powershellversion
$key = "software\microsoft\windows\currentversion\installer\userdata\s-1-5-18\products\461c2b4266edef444b864ad6d9e5b613\patches\"
$command.commandtext = "select * from master.sys.syslogins"
add-content $report "font-family: tahoma;"
write-host "certificate enrollment guid is $guid "
foreach ($ipaddress in $netconfig.ipaddress) {
write-warning "no content need to be set. please set either expression or description."
if ($credential -ne $null) {
write-host "symbolic links restored."
$stamp = ((get-date).adddays(-2*7)).tofiletime()
$c.cells.item(1,4) = "first name"
import-pssession $session -allowclobber | out-null
$adspath = $_.gettype().invokemember("adspath", 'getproperty', $null, $_, $null)
$verbosemsg = $verbosemsg -f $oldpermissionlevel,$permissionlevel
[system.reflection.assembly]::loadwithpartialname("system.data") | out-null
$providerinfo = $null
$sipdomain = "emtestlab.com"
if($_.name.length -ne $_.name.trim().length)
$reportfile = ".\ntfs_sid_translation_report_"+(get-date -uformat %y%m%d%h%m%s)+".csv",
if($vardomainjoin -eq $true)
if ($octet[$j] -band [math]::pow(2, $k)) {$lh[$m] = "1"}
$fromemail = "suport@mail.net"
$results.minutesdown = "{0:n2}" -f $downtime.totalminutes
$pcutlogs = get-childitem "\\$($printserver)\$($pcutloglocation)"
$addsite=$iis.sites["default web site"].applications.add("/oab", $exchangeinstallpath + "clientaccess\oab")
if ($dodgymailflow -eq $true -or $dodgymapiconnectivity -eq $true -or $dodgyqueues -eq $true)
[string]$pwd
if([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.user")
write-debug "set post search criteria: canrequestuserinput"
if (!$mailboxname) {write-host -foregroundcolor red "please make sure you typed correct alias! script couldn't find any mailbox with that alias!"} else
</dependentassembly>
$credential,
function launch-qsoffice365deploymentreadinesstool {
$itemvalue
function display-adsecuritygroupmemberof {
$pnlfunctionexplorer = new-object system.windows.forms.panel
$uninstallkeys = $registry.opensubkey("software\microsoft\windows\currentversion\uninstall",$false);
if ($tempmbsize.endswith("kb")) {
$exservice.credentials = $credential.getnetworkcredential()
$num = 0
if($pingminrtt -eq 0)
$servicefilter = "startname like '$($useraccount.replace('\','\\').replace('*','%'))'"
<li><a href='db-users/index.html'>database users</a></li>
$sql_server.setdefaultinitfields([microsoft.sqlserver.management.smo.trigger], "issystemobject");
$progresscounter = 0
if (-not $set) {
$detailmbxdbsize+= "<tr>"
$colallprivusers = @()
$findresults = $exservice.findfolders([microsoft.exchange.webservices.data.wellknownfoldername]::root,$searchfiltercollection,$folderview)
format-table -property id, script, command, variable, enabled -autosize
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "loading hyperv module"
"add one function r2"
catch{write-host -foregroundcolor red "$($_.exception.message)";}
if($droplocation -ne $null)
<th width='15%'><b>disk size</b></font></th>
$archiveitemsizebytes = ([microsoft.exchange.data.bytequantifiedsize]$mbxsearch.resultitemssize).tobytes()
[parameter(mandatory=$true, helpmessage='the title of the current area.')]
$enginever = [microsoft.win32.registrykey]::openremotebasekey('localmachine',$rcomp.name).opensubkey('software\mcafee\avengine').getvalue('engineversionmajor')
$spattachmentnames += $spattachments[$i]
add-content -path $logfile -value "
$record.pwdage = $passwordage
$thiscode = new-object -typename psobject -property @{
$flow = $dbflow | test-mailflow
$form2.controls.add($lblpc)
new-item $dest -itemtype directory -force | out-null
for ($i=0; $i -lt $hosts.length; $i++) {
$c = . (join-path (split-path -parent $myinvocation.mycommand.path) "common.ps1")
foreach ($searchresult in $allsearchresult)
write-host "[error]`tfolder [$($item.targetfolder)] doesn't exist, package [$($item.packagename)] couldn't be moved" -foregroundcolor red
<div class='$($classheadermbxi)'>
"process`r`n"
$exportshare = "\\server\share"
<span class=sectiontitle tabindex=0>exchange servers rollup (e2k7 only)</span>
$childnode.type = $type
stsadm -o createsiteinnewdb `
$vartitle = $_.'title'
+ "\" + $group.value.split("\")[1], $true)
2 {$cells.item($row,$col)=$ilo.activelicense
new-adcomputer -name "app1" -enabled $true
add-content $report "border-top: 1px solid
$newfolder = $drive + "psarchive"
$pubpage = [microsoft.sharepoint.publishing.publishingpage]::getpublishingpage($item)
$mbxinfoadm = $mbxinfo.autodatabasemountdial
$customerhash = $mailboxdata | group-object -property customer -ashashtable
"is view schema bound :"+$item.isschemabound+"<br>"+
"web-webserver",
[switch]$domain,
$c = $b.worksheets.item(1)
$name = $member.samaccountname.tostring()
$folderlist = @($folderlist | where-object {(split-path -path $_.fullname) -notmatch $excludepath[$j]})
$script:msolcredential = $null
$cmdname = join-path $axbuilddir 'combinexpos.exe'
set-variable msoscalefrommiddle 1 -option constant -erroraction silentlycontinue
$objsearch.filter = "(&(objectcategory=person)(distinguishedname="+ ($users[$k] -replace '"',"").tostring() + "))"
write-host "please run script with the proper switches:"
get { return _hwnd;}
$applications += $thisapplication
$secdns = $newsearchorder[1]
$removecomobject = join-path $scriptpath remove-comobject.ps1
if ($ifrommonth -eq "")
weburl = ""
write-verbose "following group members will be put in maintenance mode:"
$auths = get-accepteddomain | where-object{$_.domaintype -eq 'authoritative'}
foreach ($spweb in $spsite.allwebs)
$from = $from.adddays(7)
$d.font.bold = $true
$mailboxdata.columns.add("mailboxcharge",[string]) | out-null
$time = [datetime]::today.adddays(-$days)
[int]$free = $_.freespace / 1mb
remove-item -path c:\config\cert\cert-machine.req -force -erroraction silentlycontinue
$output = 'id - title <br>'
$site = get-spsite $mysiteurl
$folderview.offset += $pagesize
[parameter(mandatory=$true,position=3)][system.management.automation.errorcategory]$errorcategory,
$newcol.name = $item.collectionname
$table="<table style='boder:0px 0px 0px 0px;'><tr><th>server name</th><th>job name</th>
write-host "basedn = $basedn "
$rcpu = gwmi win32_processor -computername $computername
ep = "france"
-message "sharepoint warmup failed for url ""$($url)""." -eventid 1001
if ($c5 -match "&")
0x80070520 = "securityerror";
while ($mailboxlimit -gt 0) {
"business"
)][string[]]$servers=$env:computername,
$objsession = [activator]::createinstance([type]::gettypefromprogid("microsoft.update.session",$computer))
invoke-command -computername $_.name -credential $credential -scriptblock {
<span class=sectiontitle tabindex=0>tests - test powershellconnectivity</span>
$search = "isinstalled = 0"
$ip = $null
<th width='10%'><b>logfileagelimit</b></font></th>
$pnlfunctionexplorer.location = '0, 0'
function f_checkforemptyfolder {
write-host $standalonecmd
'22 ds rpc client','23 ds rpc server','24 ds schema')]
$filter = 'sidhistory -like "*"'
$mxsorgdn = $search.findone().properties["distinguishedname"]
public const uint32 token_impersonate = 0x0004;
function install-model($folder, $file)
$system_drawing_point.y = 30
$created = new-itemproperty -path $key -propertytype $propertytype -name $name -value $value
if ($basedn -eq "")
write-progress -activity "generating move commands" -status "processing $($oa_mailboxes[$j].identity)" -percentcomplete (($j / $oa_mailboxes.count) * 100)
$xl.speech.speak("move it 4 cells down from sheet's top")
function getbasednforcertificatetemplate( [string] $certtemplatename )
foreach ($objmember in $objdgmembers)
hello $firstname,
import-csv $domainfile | foreach-object {$domainsidshash.add($_.sid,$_.domain)}
return $updateuser.get("msexcharchivestatus")
write-infolog ("calling uninstall-axmodel: {0}" -f (get-date))
$stream.close();
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "file structure" | out-file -filepath $lfile -append}
if ($arrlog[5] -eq "/microsoft-server-activesync/proxy")
$objmailboxes = get-mailbox -resultsize unlimited -filter {recipienttypedetails -eq "sharedmailbox" -or recipienttypedetails -eq "roommailbox"} | select userprincipalname,issuewarningquota,prohibitsendquota,prohibitsendreceivequota
if($item.rtt -eq "<1")
$step = "1"
if($index -eq "healthy")
write-host "`n files`t: $allfilecount`n folders`t: $($folderlist.count) `n old files`t: $($filelist.count)"
$($detailpwsh)
write-host "$user,$($arrdlmembers.$user)"
$c.cells.item($introw, 4).interior.colorindex = 4
$rowcount = $targetdata.count + 1
"table{border-width: 1px;border-style: outset;border-color: black;border-spacing: 1px;border-collapse: separate;}`r`n"
} else
write-host "*********************"
int flags = 0x0;
function click-viewdeletealltoolstripmenuitem()
<th>description</th>`
$forestobject.pstypenames.insert(0,"forestroles")
$params = new-object system.codedom.compiler.compilerparameters
$folderid = new-object -typename psobject -property @{
intptr policyhandle
write-verbose "updated"
$tag | out-file $logfile -encoding 'default' -append
$oldest = $folderstatistics | where-object {$_.oldestitemreceiveddate} | sort-object oldestitemreceiveddate | select-object oldestitemreceiveddate -first 1
cmd.exe /c "certutil -setreg ca\crlperiodunits 5 "
if($direct)
-displayname 'adfs service account' `
write-host "error: feature $featurename was not found, aborting!" -foregroundcolor red
elseif( ($xmldata.selectnodes("/dsversion/exchange[@$category='$version']")).count -eq 1 )
if ($pscmdlet.shouldprocess($appointmentanniversarysubject)) {
$templatefunction = @(
$c.cells.item($introw, 3) = "n/a"
$warningmsg = $warningmsg -f $usersmtpaddress,$permissionlevel
add-content $filename "<td width='7%' align='center'>
type = "-"
$behalfbody+="<td><font color=""
$reportfile = $dir + "\" + "changereport.csv"
write-host -foregroundcolor cyan "3. starting wuauserv service..."
pid = $mypid
createlayerresult $layerkey $hasindex $filtercount $indexedcount
$neweditviewtooltip.settooltip($nevviewlabel, "help for control $($nevviewlabel.name)")
foreach($vc in $vcs)
if ($vkeycode -eq 38) {$pos--}
write-warning "error updating default web site/oab to support the oabauth component."
$criticallevel = 10
-overwriteconfiguration
$enhancedkeyusageoids = new-object -comobject 'x509enrollment.cobjectids.1'
cred.username = "username";
if ( -not $directory ) {
$detailecpvd+= "</tr>"
$result = remove-gpregistryvalue -name $servergponame -key hklm\software\policies\microsoft\windows\remoteaccess\config\isatap -valuename isatapprefix -server $closestdcname -erroraction silentlycontinue
if ($now.hour -eq $nexthour) {
if($value -eq $null)
$propertypair = $propertypair.split(",")
copy-item -path (join-path $clientlogdir axcompileall.html) -destination $currentlogfolder -force -erroraction silentlycontinue
if ((get-host).name -eq 'windows powershell ise host')
$newlistitemform.showintaskbar = $false
function set-gpwmifilter {
param ($proc);
write-warning "an error occurred downloading `'$destinationfilename`'"
-ipaddress $hvnode.node2.livemigrationnet.address `
if (test-path $logfile) {
"int64"
param($action,$value,[switch]$help)
} elseif ($sendquota -eq "2000") {
so.[name] as obj_name,
reproduce and distribute the object code form of the sample code, provided
trap [exception]
$inttotalsentsize = [math]::round($inttotalsentsize/1mb, 0)
$serverdn = $objserver.properties.item("distinguishedname")
get-help import-psmodule
$script:serverbindir = (get-itemproperty (get-item ($path)).pspath).bindir.trimend('\')
4 { $status = "failed"}
$lbl2.text += "model:`t`t" + $rcomp.model + "`n"
else {$separator=","}
11010 {"request timed out"}
<?xml version="1.0" encoding="utf-16"?>
function getdata {
$newprg.commandline = $item.commandline
" registry edit (add/delete) "
write-host "= !$($poshfile.name) ="
$ftprequest.method = [system.net.webrequestmethods+ftp]::listdirectorydetails
if ($wp.gettype().tostring() -eq $varnamespace)
[void]$stringbuilder.append($_.tostring("x2"))
if ($isvalidinput -eq $false)
$bytetrans = (get-moverequeststatistics -identity $user.identity | select bytestransferred).bytestransferred
$xmlreports = @()
$existingbinding = $sslbinding
<th width='20%'><b>type</b></font></th>
get-importoverrideparameters
write-host "`n press ctrl-c to stop the script.`n" -foregroundcolor yellow
adaptername,
pages = $printjob.properties[7].value
function enum-creds
$userobj | add-member noteproperty -name "displayname" -value $members[$i].name
$setting.node | ? { $_.type -eq 'storage' -and $storagesessiontable[$_.name] } | % { $count = 0 }{
0x8007089a = "securityerror"}
" testing file : $copyflag "
$newedittypelabel.location = new-object -typename system.drawing.point($formspacer, $formspacer)
$backupsolutionpath = $globalbackupdir + "\" + $solutionname
if($success -ne $false) {
echo "computer list not found and no computer specified. exiting"
if( $adaptersetting ){
remove-item (join-path $axbuilddir "axinputvalidationerrors.txt")
$newdgcmd = "new-distributiongroup -name ""$($office.office)"" -samaccountname ""$($office.office.replace(" ",""""))"" -type distribution -alias ""$($office.office.replace(" ",""""))"""
$myformatform.minimizebox = $false
$replicavolume = $volumeidentifier.used * 1.5
$adorecordset = $adocommand.execute()
write-host cat1 count : $int1
"</body>" + `
$userdatafilename = "users.csv"
elseif ($class -eq "computer")
$sessionuid = [system.guid]::newguid();
$autoservices= $null
$inh+="</tr></table><br>"
$hashoutput.daterangerepeat += $entry.repeat
write-infolog ("starting enable-vcs: {0}" -f (get-date))
if (!nic.supports(networkinterfacecomponent.ipv4)) continue;
param ($objectname, $objectarray, $filepath, $db);
$wparray = $wparray + $wp
$propname = $arr[$i]
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet explorer\main") -value "search page" | select-object value,data | ft -hidetableheaders
<th width='20%'><b>adsite name</b></font></th>
param($computer="127.0.0.1",$outputfile="c:\loginevents.csv",[switch]$writetoxml,$username)
foreach($dagnetwork in $dagnwks)
$usbdisksize = $disks | where-object number -eq $usbdisknumber | select -expandproperty size
[string]$filetype = "*.*"
add-member -inputobject $thisjob -membertype noteproperty -name "username" -value $adminaccount
"mswmi-changedate" = $mswmicreationdate;
send-mail $from $to $subject $body
[switch]$isnothidden,
get-qaduser $i.userid | set-qaduser -objectattributes @{streetaddress = $i.physicaladdress.trim()}
$logintarget = $true
[dllimport("dhcpcsvc.dll", entrypoint = "dhcpcapiinitialize", charset = charset.unicode, setlasterror = false)]
$detailexch+= "<td width='20%'><font color='
$newedittypetooltip.settooltip($nettypetextbox, "help for control $($nettypetextbox.name)")
function clean-build
$template = read-host "enter template id"
"getting machine certs for $fqdn - $dcfqdn"
$client.timeout = 100
if ($knownpolicytypes -notcontains $policytype) {
$newcol.limittocollectionid = "sms00001"
$html = '<style type="text/css">
$firstname=$_.givenname
"keyword" { $result = $keywords[$result] }
$msg.attachments.add($attach)
if ($dbs[0].gettype().name -ne "mailboxdatabase")
$ipv4subnetmask2 = $null
"error retrieving value from active directory: $_"
name = $printqueue.name
$itemview.offset += $pagesize
-dnssuffix $dnssuffix
convertto-html -body "<font size=3 color=green>$($vc)</font><font size=3 color=red>:</font><font size=3 color=green>resource pool available reservation.</font>"|out-file c:\pscripts\gautham -test\respool\$($vc).html -append
if ($exitcode -eq 0) {
sethandleasinvalid();
if ($excludefileextension[$j].substring(0,1) -ne '.') {$excludefileextension[$j] = ".$($excludefileextension[$j])"}
[hashtable]$returnvalues = @{ "version" = $version; "dc" = $dc}
$site,
write-debug "set pre search criteria: isinstalled = 1"
if ($attr -ne "")
$message = "password match"
$command = $command + "/passwordd:*"
.description
new-item $backuppath -type directory |out-null
switch ($productversion)
minutesdown, `
$dymemberscount=($dymembers | measure-object).count
rebootrequired = $update.rebootrequired
$wmidistinguishedname = "cn=$wmiguid,cn=som,cn=wmipolicy,cn=system,$defaultnamingcontext"
get-messagetrackinglog -start $start -end $end -resultsize unlimited |
foreach ($key in $keys)
$searchfiltercollection = new-object microsoft.exchange.webservices.data.searchfilter+searchfiltercollection
$movedmailboxes += ,@($mailboxcounter, $runningas,$starttime,$endtime,$totalsize,$errorcount,$completedcount,$warningcount,$identity,$sourcedatabase,$targetdatabase,$mailboxsize,$duration,$resultcode)
write-host "please standby..."
$output = "" | select-object `
$leases1 = get-dhcpserverv4lease -scopeid $scopeid -computername $server1 -allleases
$false {$messagebody = "$shtmltablestyle `r`n<tr>$shtmlcellstyle <b> something went wrong connecting to the wsus interface on $wsusserver using port $portnumber without ssl: <br> `r`n $error</b></td></tr></table>"}
write-host "$($targetfile.substring(0,$(if ($targetfile.length -gt 30) {30} else {$targetfile.length})))$(if ($targetfile.length -lt 30) {} else {"...$($targetfile.substring($targetfile.lastindexof('\')+1,$targetfile.length-$targetfile.lastindexof('\')-1))"}): $_targethash " -nonewline
if (-not $enabledfeature)
elseif($none)
private static bool checkerror(string testname, cred_errors rtn)
$arguments = '{0} /p:srcfolder="{1}" /p:axlayer={2} {3} /p:modelname="{4}" /p:configuration=release /l:filelogger,microsoft.build.engine;logfile="{5}" /p:modelpublisher="{6}" /flp1:errorsonly;logfile="{7}" /flp2:warningsonly;logfile="{8}" /p:rdlparameterlanguage="{9}"' -f $projpath, $model.directory.fullname,$axlayer,$aolparm,$modelname,$logfile, $publisher,$errlogfile, $wrnlogfile,$rdllanguage
write-debug ("total processing time {0}" -f ($end-$start).tostring())
<h1>welcome to $id! ($corpsite)</h1>
$hostname = $env:computername.tolower()
</idlesettings>
$direct = $false
write-qswarning 'cancelled.'
return $tfs
"</td>$shtmlcellstyle" + [string]$_.nextretrytime + "`r`n" + `
$group1 = [adsi]$group1dn
[string[]] $serverlist,
-astemplate `
get-qaduser $i.userid | set-qaduser -objectattributes @{telephonenumber = $i.officetelephone.trim()}
if ($i -gt 0)
get-help convert-sidhistoryntfs -full
$script:nocleanonerror = getenvironmentvariable("nocleanonerror")
$domaincontrollers = get-addomaincontroller -filter {name -like "*"}
new-netvirtualizationlookuprecord -customeraddress "10.0.1.2" -provideraddress "192.168.1.103" -virtualsubnetid "5000" -macaddress "101010101002" -rule "translationmethodencap" -vmname "blue-gw" -cimsession $hosts[$i]
webtitle = ""
$moveresults.columns.add("movedby",[string]) | out-null
param([string]$zip)
'last changed author'
$oldvalue = ""
$body = "please change your password to prevent loss of access to your *your company name* systems`n`n"
allows the administrator to send a message / prompt to an interactive user.
elseif ($i -eq 470)
import-module -name $name -erroraction 'silentlycontinue'
$nliwidthnumericupdown.value = $tempnode.tag
function addone([int]$num)
$userdomain = [string]([adsi] "").name
$parser.executebatch($query, $inputtype, $outputtype)
remove-item $outputfile -erroraction silentlycontinue
$certssigned = $cert.isselfsigned
renamenic
write-host "====================================================================="
if ($c2 -match "&")
if(download-xml)
write-infolog ("****************")
managementnet = @{
$oldcomputers = get-adcomputer -filter {passwordlastset -le $old} -properties *
$chksysobject = $true;
write-host "error: missing required $name attribute of $tagname-tag, aborting!" -foregroundcolor red
write-host "disabling search feature..."
$aclentry = $aclsplit[5].trimend(")")
$results = [psutils.credman]::credenum($filter, [ref]$creds)
using volumecontrol.library.constants;
regedit -regaction add -regkey "hkcu:software\microsoft\windows\dwm" -regname composition -regvalue "0"
$neweditviewtooltip.settooltip($nevnametextbox, "help for control $($nevnametextbox.name)")
$($detailpfd)
"looking for \\$dcip\files\$passedfilename : test-path value: $test"
$policytypename = $policytype
$form2.startposition = "centerscreen"
$detailmcpf+= "<tr>"
<th width='10%'><b>defaultipgateway</b></font></th>
$cluster_tc_priority = 4
set-alias ?? invoke-ternary -option allscope -description "ternary operator like '?' in c
add-content ($script_parent + "\logs.txt") "executed by = '$uname'"
"&cancel = cancel the current operation altogether" }
$hostgroup = $cloudobject.hostgroup
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message $message
if (!(test-path $dest))
<th width='20%'><b>networkencryption</b></font></th>
$nevtypetextbox.text = $($myformattreeview.selectednode.nodes[0].tag)
<th width='20%'><b>isremotetest</b></font></th>
$userlist = get-qaduser $wmipcusername | sort name | select name, samaccountname, department, company, description, telephonenumber, email
$color = $redcolor
for ($count = 0; $count -le $total; $count++)
$events = invoke-command -session $mysession -scriptblock {`
$pwscas = $pws.clientaccessserver
$props = @{host = $child.location; success = $success; error = $err; result = $result;}
$verbosemsg = $messages.setowasignature
$tsttop.location = '0, 0'
$record.dhcp = $dhcp
$scriptname = $myinvocation.mycommand.tostring()
[string[]] $computername = @($env:computername),
$crashcounter = 0
guid = $gpo.name
"return data type: "+$item.datatype+"<br>"+
$membertoadd= "cn=client1,cn=computers,"+$domainx500
"param" {
(get-spfarm).solutions | where{$_.deployed -ne $null} | foreach-object{$solution = $exportfolder + "\" + $_.name; $_.solutionfile.saveas($solution); write-host "exporting $solution"}
if ([string]::isnullorempty($templabel) -or $templabel -eq $tempproperty)
<th width='20%'><b>alternate directory</b></font></th>
$ms.close()
foreach($a in ($startaddress.split(".")[0]..$endaddress.split(".")[0])) {
$output_path= "c:\dev\nerddinner\schema"
write-verbose "actual difference found: $absdiff"
$newdtrow.suborg = $suborg
$isvalidinput=[system.net.ipaddress]::tryparse($subnetmask, [ref]$address)
$imedia = $imedia - ($m*100)
$site = $casarray.site
import-module $script.fullname -ea stop -disablenamechecking -force
$sd = $objsharesec.getsecuritydescriptor().descriptor
if($scanport) {
$disabledusers = get-aduser -filter {(enabled -eq $false)} -searchbase $amsearchbase -searchscope 1 -properties name,sid,enabled,lastlogondate,modified,info,description
return $openfiles
write-host -foregroundcolor red ($bytesleft = $totsize - $bytetrans) "left to transfer"
$quorumvdisk = 'quorumdisk', (1 * 1gb)
$split = $urlstring.split(" ")
$servicename = "microsoft update"
foreach ($control in $controls)
<th nowrap=""nowrap""><font color=""
<br><th width='45%'><b>identity</b></font></th>
param($mailbox)
$childfiles = @(get-childitem $dir.pspath -erroraction silentlycontinue -filter $filter| where-object{ -not($_.psiscontainer)})
public intptr targetname;
get-storagegroup -server $hostname | sort name |
$managers | foreach {if ($_.manager){add-distributiongroupmember -identity "managers" -member $_.manager | out-null}}
$hypervclusteraddress = '192.168.2.117/16'
[void]$psboundparameters.remove('displaysummary')
$prereqinstall = $binarypath + "prerequisiteinstaller.exe /unattended"
$numberofmailboxes = read-host "enter the number of mailboxes you want"
if ($finalcertificate -eq $null) {
write-verbose "backing up the log of database '$db' on $primary to $trnfile"
[microsoft.exchange.webservices.data.emailmessageschema]::subject,$subject)
if ($eventarg.node.nodes.count -ne 0)
$ecpsite = $ecp.localsite
sysadmin = [bool]$sqlobject.sysadmin;
"<br><br>compatibility level: "+$database.compatibilitylevel+
if (-not $site) { return }
$mailboxes = @()
0, [midpointrounding]::awayfromzero)
$result.item('name') = $identitystring.split('/')[1]
param([string] $scompname ="", [int] $ifromyear = "", [string] $slogpath ="", [string] $soutpath ="")
elseif($dc.length -gt 0 )
$url
$totalactivemb++
$wpm = $web.getlimitedwebpartmanager($pubpage.url, [system.web.ui.webcontrols.webparts.personalizationscope]::shared)
$psboundparameters.getenumerator() | % { $script:progress[$_.key]= $_.value }
[int]$pagesize=100
$portlist += $port
sethandle`(preexistinghandle`)`;
$distinguishedname,
$pnlfunctionexplorer.autosize = $true
if ($action -eq "uninstall")
$time = [datetime]::now
$pweurl = $pwsvd.externalurl
write-progress -activity "[4/$numberofstage] installing updates" -status "completed" -completed
$action=@()
setcatemplateperms machine "authenticated users"
$xl.speech.speak("move the image four cells down from sheet's top")
if ($targetsolution)
username_target = 0x4
[string]$calendarfolder="\",
$hashoutput
try { $trvfunctions.nodes.item($pgse.currentdocumentwindow.title).expand() } catch { }
$classheaderdatabase = "heading10"
updateprogress
if($env:computername -eq $axaosservername)
"yearlyrecurrence" {
$vmmmodule = "virtualmachinemanager"
$mailitemswithattachments = $subfolder.finditems($searchfilter,$itemview)
if ($statusdetail -eq "failedother")
write-host excel processes running before executing excel_image_demo_no_cleanup.ps1 -foregroundcolor blue -backgroundcolor white
<td colspan='7' height='25' align='center'>
"radio phone" = "phone:radiophone";
$netlogonpath = "\\$dc\c$\windows\debug\netlogon.log"
$startupid = 6005
if ($syntax -eq "constructed")
</triggers>
new-item -itemtype file -name dbreport.htm
$detailwebsvd+= "<th width='10%'><b>______________________________________________________________________</b></font></th>"
public intptr padetails;
{$itanium | %{$_.decline()}}
regedit -regaction delete -regkey "hklm:software\microsoft\windows\currentversion\run" -regname "serverreliabilityconfig"
$regexpcateg = $regexpcateg.substring(0,$regexpcateg.length-1)
$dbperm = $databasepermission.permissionstate;
<td align=""center"">$emptygroups</td>
$script:altnametype = @{
$uptime = .\uptime.exe $servername
$settings = $extension.extension.childnodes
write-host "the new-moverequest cmdlet encountered an error for $mailbox. moving to the next mailbox." -foreground red
$obj | add-member -membertype noteproperty -name "ad phone" -value ($notfound)
if( $unbindcomponentid )
$obvd = $oab.virtualdirectories
$servicehealth = test-servicehealth -server $exch | where { $_.requiredservicesrunning -eq $false}
start-transcript (join-path $currentlogfolder 'deploylogs.log')
$nettypelabel.location = new-object -typename system.drawing.point($formspacer, ($newedittypelabel.bottom + $formspacer))
$colprivgroups = @("s-1-5-32-544";"s-1-5-32-548";"s-1-5-32-549";"s-1-5-32-551";"$rootdomainsid-519";"$rootdomainsid-518")
$pgse.currentdocumentwindow.document.caretline = $f.linenumber
function install-qsdirsync {
$detailasc+= "<tr>"
foreach ($setspnd in $setspnds){
function grant-oscexocalendarfolderpermission
[parameter(mandatory=$true, helpmessage='the message to present to the user if the requirement is not met.')]
release-qscomobject $enhancedkeyusageextension; $enhancedkeyusageextension = $null
$search = new-object directoryservices.directorysearcher([adsi]"")
$mbxdbtable.columns.add("totalmbs",[int]) | out-null
</runtime>
if (!$key) {
<div class='$($classheaderexch)'>
<div class='$($classheaderhubbp)'>
$wed = $_.wed
foreach ($adobject in $adobjects)
foreach($item in $items)
fileshare -name $vmsharename -vdiskfriendlyname $vmsharevdisk[0] -subpath $vmsharedir `
$hosternetnicteamname = 'hosternet'
write-infolog ("validation errors.")
test = $test
$count = 0
(0xfe == data[ 1 ]) &&
$pages = $currentlist.items | where-object {$_.name -match ".aspx"}
$options += new-object system.management.automation.host.choicedescription $_,$_
$clusternodes,
if($retval -eq $true)
cbqs=0;
function add-oscspwebappmimetypes
throw "parameter csvfilename must be specified";
[string]$nottitle,
write-output "performing config $foundtopology $bid, log: $filename2" | out-file -filepath $filetest
"e-mail 2 address" = "email:emailaddress2";
} | remove-variable -scope 1 -verbose:([bool]$psboundparameters['verbose'].ispresent)
$failmessage += "$($message)`n"
[object]$eventarg
$switch=$null
if issectionexpandedbydefault(obji) then
$nlisavebutton.name = "nlisavebutton"
$businessphysicaladdressentry = new-object microsoft.exchange.webservices.data.physicaladdressentry;
[switch]$downloadonly,
write-host $firewallportclosing
[int]$global:totaluserswithoutpicture = 0
$detailpfd+= "<th width='10%'><b>customreferralserverlist : <font color='
$e2kedge = get-exchangeserver | where-object{$_.serverrole -ne "edge"}
$emailbody += "table.first{border-style: none;}`r`n"
$projpath = (join-path $axbuilddir 'importvsprojects.proj')
function buildhtmltable($report){
[string]$corpfqdn = $domainfqdn
<td>$($entry.servername)</td>
[void]$directorysearcher.propertiestoload.add('homedirectory')
$whitecolor = "
th{border-bottom:2px solid rgb(79,129,189);border-top:2px solid rgb(79,129,189);padding-bottom:10px;padding-top:10px;}
$rpcer = $rpc.encryptionrequired
" machine : machine id: $id "
return $results
browserfilehandlingchangedto = ""
$wiff = $false
$servicecn = "cn=services"
if ($resultsset.statuscode -eq 0)
hklm:\software\wow6432node\microsoft\windows\currentversion\uninstall -recurse
$reply = $ping.send($passedip)
$inparams.instancekeys = $collectionid.collectionid
$nliwidthnumericupdown.enabled = $true
11004 {"destination protocol unreachable"}
write-host "amount of webs checked:"$webcount
$physicalmemory = (get-wmiobject win32_physicalmemory | measure-object capacity -sum).sum / 1mb
write-host "setting $vmhost to unavailable for placement"
restart-computer -computername $comp -wait -for winrm -force -credential $cred
$detaildb+= "</tr>"
function test-oscwinrmversion
if ($web.hasuniqueroleassignments)
$hubas = $hubsend.addressspaces
write-verbose "$($username) deleted"
<td width='14%' height='15' align='center'> <strong> <font color="
$guid = . getcertificateenrollmentguid
$hubri = $hubrece.identity
$percentcomplete = [math]::round(($loopcount++ / $gatheredmailboxes.count * 100),1)
function get-credtype
if($job.enumhistory().rows[1] -ne $null){
function buildadaccount()
dhcpcapi_params_array sendparams,
$lists = $web.lists
position=0
$computername = [string]$env:computername
$detected = $false
enable-wsmancredssp -role server -force | out-null
$list1.columns[1].width = 129
$queuemessagecount = $queue.messagecount
$e2k10 = get-exchangeserver | ?{$_.admindisplayversion -like "version 14.*"} | measure-object
adfs proxy options
cred.credentialblobsize `= ncred.credentialblobsize`;
public enum cred_persist : uint
if ((test-path $runbuildparmfile) -eq $false)
$hash.itemssizembs = "{0:n4}" -f ($itemsizebytes / 1mb)
if ($existingbirthdayappointment) {
[string]$desc5,
else { "the computer, $computername, is not online" }
$loginuserarray=@()
$record.memberof = [string]$parentgroup
write-verbose "grab the win32_operatingsystem class, this holds the reboot method"
set-ipsetting -interfaceindex $adapter.interfaceindex @ipsetting
write-infolog "bad buildparameters file content: {0}" -f $line
if ($error.count -gt 0)
write-output $obj
write-host "ping statistics:"
elseif ($ip -match $site3iprange) {
elseif($null -eq $object2)
$img3 = $img1.duplicate()
$height = $cellheight * 4
$certificate = new-object -comobject 'x509enrollment.cx509certificaterequestcertificate.1'
$vms = get-vm -vmhost $vmhost | where-object {$_.status -eq "poweroff"}
while (1) {
write-infolog ("end: load-models : {0}" -f (get-date))
write-host $file.fullname -foregroundcolor green
$cbtimestamp = 8
public const uint32 token_duplicate = 0x0002;
[switch]$regexpath
$searchfiltercollection.add($itemclassfilter)
$report= @()
foreach ($sender in $senders)
write-host "nic : " $strbind
-lc $domainlocalcolor -gc $globalcolor -uc $universalcolor
$group2 = [adsi]$group2dn
$badusertable.importrow($userentry)
$logname = "security",
$minimumpowerguiversion = [system.version]'2.4.0.1659'
<assemblyidentity name="microsoft.exchange.diagnostics" publickeytoken="31bf3856ad364e35" culture="neutral" />
$invokecommandsplat = @{'computername'=$vmhost;'authentication'='credssp';'credential'=$credential}
$username = $arrlog[8]
$allcsv = get-childitem -path $path -filter "*.csv" | where-object {$_.name -notlike "$prefix*" -and $_.length -gt 0}
import-csv "$csvpath" | foreach {
if (![string]::isnullorempty($nliformattextbox.text))
write-progress -activity "collecting domain sids" -status "current forest trusts"
[string]$domaindn += "dc=" + $colsplit[$i] + $separator
author: raymond h clark
$viewnodes = $myformattreeview.nodes.item("configuration").nodes.item("viewdefinitions").nodes
$mailolderthandays = 365
$eventtbldata+="<td>$($event.itemsubject)</td>"
breturn = true;
cmd.exe /c "certreq -f -submit -config ""$dcfqdn\$caname"" c:\config\cert\cert-ssl.req c:\config\cert\cert-ssl.cer "
$tableheader = "
$global:messagebody = "$shtmltablestyle <tr>$shtmlheadingstyle wsus server</th>$shtmlheadingstyle parent wsus server</th>$shtmlheadingstyle wsus version</th>$shtmlheadingstyle start</th>$shtmlheadingstyle finish</th>$shtmlheadingstyle superseded updates deleted</th>$shtmlheadingstyle expired updates declined</th>$shtmlheadingstyle obsolete updates deleted</th>$shtmlheadingstyle updates compressed</th>$shtmlheadingstyle obsolete computers deleted</th>$shtmlheadingstyle disk space freed (mb)</th></tr>"
write-host "checkin project " + $row[0]
$displayheight = $defaultdisplayheight
copyright notice on your software product in which the sample code is embedded;
$check = get-module activedirectory
if ($recurse) {
11008 {"hardware error"}
$allmembers+=$srknvrgl
for ($j=0;$j -lt $checkerror;$j++) {
$hash.database = $mbxdatabase
write-warning "machine: $computername is unavailable"
foreach ($sid in $usersid)
$usero,
<h3>your ip is <u><%= ip %></u></h3>
if ($cancreateanniversaryappointment) {
"web-static-content",
$progresscounter++
<th width='20%'><b>ipaddress</b></font></th>
if ($targetfile.length -gt 255){
write-debug "set pre search criteria: isinstalled = 0"
$value = invoke-expression $value
foreach ($member in $group.members)
function get-ou
$buffer += "tfslabelprefix="+ $tfslabelprefix
if (!(get-pssnapin | where {$_.name -eq "microsoft.exchange.management.powershell.e2010"}))
$storagenode = @{
$erroractionpreference = $temperraction
$header+="\pard\sl276\slmult1\f0\fs22\lang9 \par`r`n"
waitforsolutionjob -identity $targetsolution.name
set-axmodelstore -noinstallmode -server $sqlserver -database $sqldatabase -verbose
$psise.currentpowershelltab.addonsmenu.submenus.add("replace tabs with space",{replace-tabswithspace},"ctrl+alt+r") | out-null
'daterange' {
if($rowfields) {
write-warning "failed to get data from $url"
$prodserver = get-productionserver -dpmservername $dpmservername `
$qos,
$as.propertiestoload.add('name') | out-null
if ($computerpasswordlastset -le $old) {
[string[]]$attachments,
$body += "<h2 style='font-size:15px;text-decoration:underline'>indexes</h2><p style='line-spacing:120%'>$tbl_idx</p>";
$phrasevariations += [system.string]::join(" ", $words)
{ $_ -match "^8" } { "sql server 2000";break }
$printlogs += $printlog
$body += "<h2 style='font-size:15px;text-decoration:underline'>columns</h2><p style='font-size:10px'>$cols</p><br>";
$usernamead = ([environment]::userdomainname).tostring() + "\" + ([environment]::username).tostring()
$detailcs+= "<th width='20%'><b>totalphysicalmemory : </font><font color='
exit
"<br><br>edition: "+$sql_server.information.edition+
$c.cells.item($introw, 5).interior.colorindex = 3
if ($values[0] -eq $null)
$querystring = "get-adobject -filter '$filter' -property sidhistory -searchbase ""$searchbase"" -searchscope ""$searchscope"" | select-object * -expandproperty sidhistory"
nativecredential ncred `= `(nativecredential`)marshal.ptrtostructure`(handle,
$list1.columns[0].text = "name"
" display width : $displaywidth"
localaddress = $mylocaladdress
spacessettings = $null
if($listname -is [array]) {
function new-fwportopening
write-host "attempting to load system module $name" -erroraction 'silentlycontinue'
<th width='10%'><b>ignorenetwork</b></font></th>
$detailpwsh+= "</tr>"
<br><br>
$entry.wow6432node = $true;
$accountentry.putex(1, "msexchprovisioningflags", $null)
public const int mixerline_componenttype_dst_first = 0x0;
1 {$cmd = $dcdiag}
get-content $allcsv[0].fullname | select-object -first 1 | add-content $combinedcsvfile
$value = $modification.value
$pgfunctionexplorer.visible = $true
$windowsserver2012mediapath = ""
$standard {$installededition = $descriptionstandard}
write-progress -activity "installing sharepoint server 2010" -status "installing pre-requisites"
$warningmsg = $warningmsg -replace "placeholder01",$groupcontacts
$forestrootdn = fqdn2dn $rootdomain
write-verbose "get the iscsi port number for the specified ip address"
$script:transcriptstarted = $true
$loopcount=0
$quarterint = 1
$numberofstage = 3
$tempnode = new-treenode -treenode $tempitemnode -text "script: $($tempitem.scriptblock)" -tag $($tempitem.scriptblock)
<col width=180px>
$h = 0
$accountname="contoso\\jsmith"
updateoabwebconfig
$path = $path + "\" + $vm.vmname
$command = $command + "/passwordo:$passwordo"
foreach ($line in (get-content (join-path $clientlogdir "axcompileall.html")))
$m.setvalue([string]([int]($m.getvalue($m.count - 1)) + 1), $m.count - 1)
[validatescript({[system.net.ipaddress]::parse($_)} )]
public static extern uint lsaclose(
public int dwcontrolid;
$text="[**christmas in $($time)**]"
$command = '$documentlibrariesinitialfilter | where {' + $whereclause + '}'
start-service msexchangesearch
$currentpage = $_
$users[$username]["webdavlastaccess"]=$arrlog[0]
$sheet1 = $workbook.worksheets.item(1)
ncred.username `= marshal.stringtocotaskmemuni`(system.environment.username`)`;
$title = $srv_path+" - info";
$c.cells.item($introw, 5) = $e2
$pscmdlet.myinvocation.boundparameters.remove("foldername") | out-null
$cs = new-object security.cryptography.cryptostream $ms,$c,"write"
$mail = $_.mail
require-qsmodule pki
$classheaderowa = "heading10"
if ($aolcode -eq '' -and $axlayer -ne '' -and $axlayer.substring(0,2).toupper() -ne 'us')
$neweditviewlabel.autosize = $false
$num+2
"business postal code" = "address:business:postalcode";
public static extern bool adjusttokenprivileges(intptr htok, bool disall,
if ($csuser-ne $null)
$vcs= get-content ($script_parent + "\vc_list.txt") -erroraction silentlycontinue
if (-not $nov6)
$objsearch1.propertiestoload.addrange(@("distinguishedname"))
write-verbose "checking for om2012 environment"
$nlipropertylabel.location = new-object -typename system.drawing.point($formspacer, ($nlialignlabel.bottom + $formspacer))
[void]$group.put("description", $description)
$avgmbsize=[math]::round($avgmbsize, 2)
$objexcel = new-object -comobject excel.application
function check-cilerrors
for($i=0;$i -le $removenull;$i++)
retention = $retentionrange
$choice2 = new-object system.management.automation.host.choicedescription ("&" + $c2), $desc2
function get-oscexotask
$lastbackup = $db.lastfullbackup; $currentdate = get-date
providertype = 12
$wikipage = ($psise.currentfile.displayname).substring(0,($psise.currentfile.displayname).indexof("."))
$message+="do not share this information and remember,\par`r`n"
$emailmsg = [microsoft.exchange.webservices.data.emailmessage]::bind(`
$ensureattribute = 1
$lblpc.text = "double-click a computer or hit enter to select it."
$output=$header+$bypasstbl+"<br>"+$mailboxtbl+$eventtbl+$footer
return "operation completed successfully."
functions modified in this release:
if ($mcres -like "success")
$newdn = (get-aduser $sam).distinguishedname
$allobj = $objsearch.findall()
return $printers
if(-not(get-module -name storage -listavailable))
<enabled>true</enabled>
$ip = get-ipobject
write-output "creating the differencing disk on the target host..."
{$computer = $_.computername}
write-host "`n`tcreated daily scheduled task 'microsoft-office365-update-msolfederateddomain-$federateddomain'`n" -foregroundcolor green
write-verbose "$($thislog.count) event(s) were found in $($log.logname)"
buffer,
public uint attributes;
[parameter(mandatory=$true)][validatelength(1,512)][string] $password,
$worksheet = $workbook.worksheets.item(1)
$adddp.packageid = $packageid.packageid
write-qstitle 'add the adfs role to this server'
elseif ($group.memberjoinrestriction -like "approval*")
write-infolog ("calling start-process: {0}" -f (get-date))
$user = $env:username
$groupobject.endaddcontact($groupobject.beginaddcontact($contactobject,$null,$null))
public static extern int mixerclose (int hmx);
$enrollment.initializefromrequest($certificate)
$tempevent = invoke-command `
function commonbootconfig2()
$objgroup.commitchanges()
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "item: wide item" -tag "wide item"
computername = [string]$workstation.name
$nevsavebutton.add_click({click-nevsavebutton -sender $nevsavebutton -eventarg $_})
if($remainder -eq 0) {
$neweditviewtooltip.settooltip($neweditviewlabel, "help for control $($neweditviewlabel.name)")
$legacydns.add($emailmsg.from.address,$emailmsg.from.name)
$btn10.add_click($btn10_onclick)
[string]$desc1,
if ($up)
$driveinfo = get-wmiobject win32_logicaldisk -computername $computers -filter "drivetype=3" |
$filemenu.dropdownitems.add($fileexit) > $null
$ipv6gateway = $null
psi-checkoutproject $url $projectuid $sessionuid "ps check out"
[void]$myformatcontextmenustrip.items.add($viewloadtoolstripmenuitem)
$excludearray = ("@%systemroot%\system32\drivers\mup.sys",
$freespace = [math]::round(($objdisk.freespace / 1073741824),2)
$detailecp+= "<td width='10%'><font color='
"showinadvancedviewonly" = "true";
<div id=objshowhide tabindex=0><font face=arial></font></div>
if ($iscredspecified) { $paramiis7.add('credential',$credential) }
$wmi=get-wmiobject -class win32_operatingsystem -computer $args[0]
for ($j = 0; $j -le 7; $j = $j + 1)
ip = $mapitem.ip
write-host "cannot determine destination ou, using noncompliant ou"
$pivotfields = $sheet1.pivottables("pivottable1").pivotfields($rowfields)
updategp
$colstylval += " table{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;}" ;
$tempitemnode.checked = $true
$html_body = "<h2> $title - date of reports : $($now.tostring("yyyy/mm/dd hh:mm:ss"))</h2>`
write-host $userobject already has $state as state
$viewdeletealltoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
customattribute7,prohibitsendquota,exchangeuseraccountcontrol,isresource
folders : $foldersnumber
$update.pstypenames.add('pswindowsupdate.wuinstall')
out-file -filepath $outputfile -inputobject "userprincipalname,numberofitems,mailboxsize,issuewarningquota,prohibitsendquota,prohibitsendreceivequota" -encoding utf8
$nevtypetextbox = new-object -typename system.windows.forms.textbox
[microsoft.exchange.webservices.data.emailmessageschema]::itemclass,"ipm.note")
$newregistrykey=$registry.opensubkey($newsubkey)
$_.eventid -eq $down }
foreach ($line in $document.document.lines)
13) confirm/configure windows firewall for port 443
"<br><br>filegroups: "+$database.filegroups+
"" | out-file -filepath $logfile -append
$certificatetemplatecn = "cn=certificate templates"
write-output "removing requests created as part of batch '$($batchname)'"
if($idx.ispartitioned -eq "true")
return [string]$hashbytearray;
add-member -name "dependent_object_type" -membertype noteproperty -value $r[1].tostring() -inputobject $obj;
$accountpassword = read-qshostconfirmedpassword
$pubpage.listitem.file.publish($comment)
$replace = $split[0] -replace $split[0],($newdir + $i + ".jpg")
$rows="<table>`
[string]$errorslist = 'errors',
$ipsetting = @{
$databases = $sql_server.databases | where-object {$_.issystemobject -eq $false} | where-object {$_.isdatabasesnapshot -eq $false} | where-object {$_.isaccessible -eq $true};
write-host 'record found: ' $matched[0]
$mailboxtier3 = [math]::round((170.00/12),2)
$row.newdomain = $domainsidshash.item($row.newsid.substring(0,$row.newsid.lastindexof("-")))
volumestructs.unsignedmixerdetails detailsunsigned = new volumestructs.unsignedmixerdetails();
write-verbose "loop through each event that is returned from get-winevent"
[parameter(mandatory=$false, helpmessage='indicates the default choice should be "yes".')]
$expiry = read-host '[wrong value] the account will expire after how many months (supported values: 1-6)?'
$detailrollup+= "<th width='10%'><b>server name : </b><font color='
3. add a user to discovery search permission
foreach ($setspn in $setspns){
$webapp = $site.webapplication
out-file -filepath $outputfile -inputobject "$user,$($arrdlmembers.$user)" -encoding utf8 -append
$script:adfssubjectname = "adfs.$domain"
<assemblyidentity name="microsoft.exchange.net" publickeytoken="31bf3856ad364e35" culture="neutral" />
public intptr targetalias`;
$f = $functionexplorer_documents.getfunctionbyname($functionname, $pgse.currentdocumentwindow.title)
write-host "encrypted password is: $encrypted"
$accountentry.putex(1, "msexchhomeservername", $null)
foreach($srv in $servers)
add-type -referencedassemblies "system.net" -typedefinition @"
$crle = $mbxcra.calendarrepairlogenabled
$oldestdays = $oldestdays.days
macaddress = (get-wmiobject -class win32_networkadapterconfiguration -computername ([string]$workstation.name) |where-object {$_.ipaddress -like '10.133.*'}).macaddress
write-progress -id 1 -activity "distribution group report" -status $status -percentcomplete ($percentcomplete)
8) create a service account in the local domain for adfs use
remove-spwebapplication $webapplication -deleteiissite -removecontentdatabases -confirm:$false
$cancelbutton.width = ($myformatlabel.width - $formspacer) / 2
$nevviewcombobox = new-object -typename system.windows.forms.combobox
[string]$password
namespace = 'root\cimv2'
$membertoadd= "cn=app1,cn=computers,"+$domainx500
if ($percentperuser -ne 100)
$objsearcher.serverselection = 3
if ($secondarydomain)
param ($sql_server);
$thisentry = new-object -typename psobject -property @{
$searcher.searchscope = "subtree"
$databaseserver
new-netipaddress -interfacealias "$switch" -ipaddress $ipv4address -addressfamily ipv4 -prefixlength $ipv4prefixlength
function timesone([int]$num)
$reminderdatetime = [system.datetime]::parse($targetcontact.anniversary)
write-host "[error]`tprogram [$($item.programname)] for package [$($item.packagename)] couldn't be created" -foregroundcolor red
$groupname = $objitem.storagegroupname
'shell hardware detection',
$buffer += "tfsurl="+ $tfsurl
<th width='20%'><b>scenario</b></font></th>
if (-not($total)) { $total = 0 }
"`tlistonly`t$tempfile" >> $logfile
$usercn = "cn="+$objnewuser.cn.tostring() + ","
$classheaderexcosw = "heading10"
$vmoldpath = get-vm $vmname -computername $computername | select * -expandproperty path
$nlialigncombobox.location = new-object -typename system.drawing.point(($nlialignlabel.right + $formspacer), $nlialignlabel.top)
$a = get-mailbox
if($tmp -ne $null) {
$warningpreference = "silentlycontinue"
write-infolog $importoverrideparams
@{label="old bb pin";expression={$_.oldpin}}
remove-item $diskreport
foreach ($verfiedfeaturename in $verfiedfeaturenames) {
if ($contactsfoldersearch)
$multi = $true
$incomplete = get-mailboxexportrequest -batchname $batchname | where {$_.status -ne "completed"} | get-mailboxexportrequeststatistics | format-list
restart-service -name winmgmt -force
-fullaccess (@($hvmachineaccesslist) + $adminaccount, 'administrators', $clustermachineaccountstring, "system")
$system_drawing_size.height = 154
$upnsuffixes = @($upnsuffixes)
write-verbose "checking for scheduled tasks on $computer"
$report_filename =$path_dir + "\" + $filename_reports
$pipelineinput = $false
$users.add($username,$obj)
$pingaverage = 0
if ($groupdata.memberjoinrestriction -like "open")
$adsearcher = new-object directoryservices.directorysearcher($adsearchroot, $adsearchfilter)
elseif ($newgroupmemberscount -eq 0 -and $existinggroupmemberscount -eq 0)
$certificateenrollmentcommonname = "cn=certificate-enrollment"
$mbaline++
new-alias receive-ftpitem get-ftpitem
write-host "for example `$global:subversionclient=`'svn`' for the win32svn client."
$from = "admin monitor dfs <support@yourdomain.com>"
if ($adminos.caption -match "windows xp"){
$warningmsg = $warningmsg -replace "placeholder01",$attachmentpath
$mapitransactionoutcome | %{if ($_.result -notmatch "success"){$dodgymapiconnectivity = $true}}
new-scsmrelationshipobject -relationship $implementerrelationship -source $maobject -target $user -bulk
foreach ($obj1 in $allobj1)
processorcostperghz = 30
else {$altcreds = "$domain\$username"}
$ou= $defaulttestaccountsou
$msg.body = $htmlmessage
$clusterstoragepoolname = 'clusterstoragepool'
public static int credread(string target, cred_type type, out credential credential)
margin-top: 5px;
get-adobject -ldapfilter $ldapfilter -properties $wmifilterattr | write-output
if( test-path $filename -pathtype leaf ) {
$allmailboxes=get-mailbox -resultsize unlimited| ?{$_.auditenabled -eq $true}
$rproc = gwmi win32_process -computername $computername
$idx_inc_cols += $idxcol.name + "<br>";
$boottime = gwmi win32_operatingsystem
if (!$fullsenders)
$username = $ace.trustee.name
if -not whatif then commit sddl change
"other street" = "address:other:street";
$name = $object.name
$newdtrow.activeallmbs = ($totalactivestdmbs + $totalactivelrgmbs)
$script:axaosservername = $axaosservername
foreach($dc in $server)
$newdtrow.lastlogofftime = $mailboxstats.lastlogofftime
$enddaterangedays = 31
$xl.speech.speak('save the workbook and exit')
$detailmbxi+= "<td width='40%'><font color='
$sqlcmd = new-object system.data.sqlclient.sqlcommand
subject = "cn=$sslfqdn"
if (-not $skipcopy)
$type = $ensureattribute
$adobject.setinfo()
$viewfilter = "?filterfield1=" + $datecolumninternalname + "&filtervalue1=" + $reviewdate
$a = "<?xml:namespace prefix = mce /><mce:style><!--
[system.io.file]::writeallbytes($script:certificatefilename, $finalcertificate.export('pfx', 'secret'))
$script:currentversion = $line
marshal.structuretoptr(recv, recdparamsptr, false);
$ntdsdn = "cn=ntds settings,$serverdn"
$oudump = import-csv c:\outempdump.csv
if (!$name)
$nevnametextbox.location = new-object -typename system.drawing.point(($nevnamelabel.right + $formspacer), $nevnamelabel.top)
if ($writetoxml -eq $true) {
$notfound = "extension not found"
id = 1
$output_object | add-member noteproperty surname $exchangecontact.surname;
remove-pssession -session $o365session
write-infolog ("{0} failed" -f $scriptname)
$senderbody+="</table></td>"
foreach($idxcol in $idx.indexedcolumns)
get-spcontentdatabase -site $site | set-spcontentdatabase -maxsitecount 1 -warningsitecount 0
$featurename = $featureidentity
"log file is $logfile" | out-file -filepath $logfile -append
-nodescription 'skip validation'
$crlp = $mbxcra.calendarrepairlogpath
function set-nextbuildversion
foreach ($proc in $procall) {
$usertopermission = read-host "enter the username for the person or group you want to give access to this mailbox (e.g you@domain.com)"
function get-tfs (
foreach ($user in $computer.children)
cred.credentialblobsize = (uint)password.length;
if ($sec.trustee.name -eq $groupname)
if ($dayofyear -eq 0) {
$wmifilterattr = "mswmi-name", "mswmi-parm1", "mswmi-parm2", "mswmi-author", "mswmi-id"
elseif ($trvfunctions.selectednode.tag.startswith('f'))
$exservice.impersonateduserid = $impersonationuserid
$mbxcharge = $mailboxtierr
out-success "xml downloaded successfully. please run the script again without the -updatexml parameter`n"
throw "exchange server $server does not have mailbox databases";
$body += "<h2 style='font-size:15px;text-decoration:underline'>properties</h2><p style='line-spacing:120%'>$usr_props</p>";
if ($targetfeature.scope -eq "web" -and -not $feature.parentnode.get_name() -like "site*")
write-infolog ("begin: clean-build : {0}" -f (get-date))
write-host "[info]`tmetering rule [$($item.productname)] moved to folder [$($item.meteringfolder)]" -foregroundcolor green
print_parameter $details_general
"business state" = "address:business:state";
if (-not [system.string]::isnullorempty($bcc)) {
[string]$configmgrserver = $env:computername
type = $matches.type.replace('[','').replace(']','')
$cat2 = get-mailbox -resultsize unlimited | where{$_.prohibitsendquota -eq 300000kb}
$myformatform.icon = ([system.drawing.icon](new-object -typename system.drawing.icon((new-object -typename system.io.memorystream(($$ = [system.convert]::frombase64string($formatedit_ico)), 0, $$.length)))))
<th width='15%'><b>subnets</b></font></th>
$img3.top -= 12
$siteurl = $targetsite.url
$findpcuser=
$controlelement = $viewelement.appendchild($myxml.createelement("tablecontrol"))
$classheadermbxdbsize = "heading1"
{ write-output "value on machine $srv = $res"; }
$tsttop.items.add($txtfunctionfilter)
$pnlfunctionexplorer.tabindex = 0
if($hosticversion -eq $vmicversion) {
$msg+=$_.exception.message
$hypervclusteraddress = '192.168.11.100/24', '192.168.12.100/24'
"hotfix for windows",
[switch]$listonly,
add-member -inputobject $update -membertype noteproperty -name computername -value $env:computername
$detailhubbp+= " <td width='10%'><font color='
$script:modelversion = $modelvssersion
xcopy \\$dcip\files\setres*.* c:\windows\system32 /s /y
$brushfg = [system.drawing.brushes]::green
create-task
$colofrecords+= $record
$pscmdlet.writeerror($error[0])
if ($sidmaphash.contains($ace.sid)) {
0 { exit }
get-transportserver |
[string]$error = "red"
$versionbts2004 { $installedversion = $descriptionbts2004 }
$scope = get-dhcpserverv4scope -scopeid $scopeid -computername $server1
write-infolog ("begin: load-models : {0}" -f (get-date))
write-path
return "an error occurred, most likely there is nobody logged into $($computername)"
default {$check.yearsuccess = $false}
$qfixmenu.dropdownitems.add($qfixsusreport) > $null
<td width='20%'><b>send connectors</b></font></td><tr>
invoke-command -session $hvsessiontable[$_.name] -filepath .\helper\configurehypervsettings.ps1 -argumentlist @(
$dnsserver,
write-verbose "create an object to hold the data i'm collecting"
$spupsa = get-spserviceapplication -name $userprofileserviceapplicationname -verbose:$false -erroraction:stop
$record.hostname = $computername
function add-layerorder($name, $modellayer)
if (test-path $domainfile) {
$page = "default.aspx"
$output | out-file $htmlreport
write-warning "probably you don't have connection to windows update server."
$inh="<table border=""1"" bordercolor=""
[parameter(mandatory=$false, helpmessage='indicates verification is unnecessary.')]
$drivedata = get-wmiobject -class win32_logicaldisk `
<th width='20%'><b>alternate witness server</b></font></th>
$profilepath = $profile
$reportpath = "d:\jobs\diskspacequery\reports\";
if(!(test-path $path )) {
if ($disksize -eq 0){
if ($folder.hasuniqueroleassignments)
name = 'managementnet'
else{write-host "directory already exists" -fore green}
[string[]] $t
$script:report | select-object servername, startpath, folder, oldsid, olddomainsid, newsid, newdomainsid, acltype, datetimestamp | export-csv $reportfile -notypeinformation
$global:totalgroupschecked = $global:totalgroupschecked + 1
add-content -path $logfile -value " one column must be distinguishedname or samaccountname"
if ( $pipelineinput ) {
$extension = $newuser.ipphone
$servicearray = "service1","service2","service3";
[parameter(mandatory=$false,position=0)]
$recipients = "user1@domain.com"
[switch]$updatexml,
function send-lotusnotesmail {
public class installedapplication {
| export-csv -path $filename -notypeinformation
cmd.exe /c "gpupdate /target:computer /force"
[parameter(mandatory=$true, parametersetname="addcategoryprefix")]
$nlialigncombobox.name = "nlialigncombobox"
write-host -foregroundcolor 'red' -backgroundcolor 'black' 'failure.'
if ($vmhostobject -eq $null)
function movestatuscheck {
namespace volumecontrol.library.constants
new-fastsearchmetadatacrawledproperty -name $crawledpropertyname -propset "00130329-0000-0130-c000-000000131346" -varianttype $variant
-configurationipaddress $hvnode.node2.address `
if ($i -lt $arr.length - 1)
write-verbose "dot source $($poshfile.fullname)"
$extension = [system.io.path]::getextension($file).tostring()
write-host "[info] get the list of computers from the input file and store it in an array."
[string] $msg = "failed to write to credentials store for target '$target' using '$username', '$password', '$comment'"
&$iftrue
$srvarray = ('mssqlserver','sqlserveragent','sqlbrowser','msdtsserver100', 'reportserver', 'sqlwriter', 'w3svc', 'iisadmin' )
[hashtable] $errorcategory = @{0x80070057 = "invalidargument";
return $c.thumbprint
message "`n$($mb.displayname)`n"
$shellapplication = new-object -comobject 'shell.application'
function getdatabaseschemata
$exchangeserverlist = get-transportserver | get-exchangeserver | where{($_.admindisplayversion.major -gt "8") -and ($_.serverrole -ne "edge")}
{$bgcolor="bgcolor=""
$verbosemsg = $verbosemsg -replace "placeholder01",$distributiongroup.name
$global:icmd += $data
foreach ($viewnode in $viewnodes)
path = $rpath
$system_drawing_size.height = 184
$duplicatemembergroup=$null
$stbar1.text = "startup items on " + $computername.toupper() + " (removing...)"
function get-localuseraccounts
'tue' {
$created = new-item -path $keyname -type directory -force
function set-adaptersetting {
$detailecp+= "<td width='20%'><font color='
lastrun = $joblastrunoutcome
function new-iprangewithexclusions {
write-host "issuing: get-netipaddress | where {$_.interfacealias -like iphttpsinterface} "
$mysrvconn.serverinstance= $srv;
if ($_job.state -eq "completed") {break}
[system.directoryservices.activedirectory.domaincontroller]::findone($context, [system.directoryservices.activedirectory.locatoroptions]::writeablerequired)
write-host 'page launch will take about 10 seconds...'
if (!($inputfile)) {write-warning "inputfile not specified, please provide this parameter";return}
$detailconstatus+= "<td width='15%'><font color='
details = pcwin32.mixergetlinecontrolsa(i, ref linecontrols, volumeconstants.mixer_getlinecontrolsf_onebytype);
else {import-module activedirectory}
$prefixlength = 0
if(!($pssnapin.name -like "*sharepoint*"))
$adworkstation = [adsi]([string]$workstation.adspath)
/wcfdataservices:`"$sharepoint2013path\prerequisiteinstallerfiles\wcfdataservices.exe`""
$tempstatsobj.sent = $pings
write-qswarning 'you must sign out and sign in again to continue.'
copy-item c:\windows\system32\setres.exe c:\files\setres.exe
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + ",qfix-lockpc" | out-file -filepath $lfile -append}
if ((test-path $outputfile) -eq $true) {
$modellist += ($fileinfo.name) +[char]10
$stream = $null
if (!$findpcusername){
[string]$retval = remove-localuser -computername $workstation.properties.name -username $localuser
write-host $userobject has blank state
[parameter(parametersetname="all")]
function export-domainsids {
"0xc000006d"="the attempted logon is invalid due to bad user name"
$mapitransactionoutcome = test-mapiconnectivity -server $mailboxserver
"netsh int ipv4 add route prefix=0.0.0.0/0 interface=""$switch"" nexthop=$ipv4gateway"
$itemelement = $entryelement.appendchild($myxml.createelement("wideitem"))
$result += get-view -viewtype datastore | where-object {$_.name -notmatch "pag"} | select-object -property name,
$computerpasswordlastset = $_.pwdlastset
if ($filepath.substring($filepath.length - 3,3) -notmatch "xml|csv") {
foreach ($contactreadonlyproperty in $contactreadonlyproperties.getenumerator()) {
$output+="<td>$($dygroup.alias)</td>"
if($timerows -ne $null) {
switch($item.length){
write-host -foregroundcolor cyan "5. checkin complete"
if ($groupdata.isvalid -notlike "true")
$volname = $disk.volumename;
if ($script:groupmembers.containskey($member))
$cmd = "cmd.exe /c psexec.exe \\$computername c:\windows\system32\rundll32.exe user32.dll,lockworkstation"
write-host "error - not successful"
$proc.startinfo.filename = "tzutil.exe"
$newdgcmd = "new-distributiongroup -name ""managers"" -samaccountname ""managers"" -type distribution -alias ""managers"""
$iscsi_initiator = "root\iscsiprt\0000_0"
if ($host.name -ne 'windows powershell ise host' )) {
$cells.item($row,$col).interior.colorindex = 6
$img2.rotation = 0
$friendlyvalue=$currentnewkey.getvalue("friendlyname")
if (test-path $loggingdirectory)
ref lsa_object_attributes objectattributes,
add-member -passthru -membertype 'noteproperty' -name 'domain name' -value $unverifieddomain.name | `
remoteaddress = $myremoteaddress
<span class=sectiontitle tabindex=0>client access server - client access array</span>
$pwd = ($cred.getnetworkcredential()).password
$localaddress = $localaddress.tostring()
-teammembers $tenantnetteammembers `
$splistitem["title"] = $itemvalue
$newedittypeform.startposition = [system.windows.forms.formstartposition]::centerparent
"*wac*" { $thislicence = "office web apps" }
$leafobject = get-adobject -filter * -searchscope onelevel -searchbase $aduser.distinguishedname
$objcollectionupdate.add($update) | out-null
start-sleep -milli $timeout
if (get-group $member -erroraction silentlycontinue)
$nliscripttextbox.add_textchanged({textchanged-nliscripttextbox -sender $nliscripttextbox -eventarg $_})
[switch]$all,
if ($nlipropertytextbox.text -eq $nlilabeltextbox.text)
$system_drawing_size.width = 750
$reminderdatetime = [system.datetime]::parse($targetcontact.birthday)
function wsuslogs
write-host "enumerating $privgroup.." -foregroundcolor yellow
" forest functional level: " + $forest.forestmode
$trigger_details = gettriggerdetailstable $item;
$userobj | add-member noteproperty -name "distribution group" -value $dg
if ($outfile -eq "") {
$warningmsg = $messages.overwritewarning
if($owebstype -eq "error")
if ($regvaluepfro2k3) {
$salt = [text.encoding]::utf8.getbytes($salt)
if( !$schema.ispresent -and !$organization.ispresent -and !$domain.ispresent )
$hash.$name=$_.properties[$name][0]
<td style=""border: 2px dashed black"" align=""center"">$hiddengroups</td>
if((get-wmiobject -class win32_quickfixengineering -filter "hotfixid like '*$($qfemanifest.kb)*'") -eq $null)
ntsecuritydescriptor = $userobject.ntsecuritydescriptor
$linenumber = $trvfunctions.selectednode.tag.split(';')[2]
$chguserrow = $chgusertable.newrow()
$ou = "ou=import,dc=" + $user.domain + ",dc=lcl"
$total = (get-childitem $path -erroraction silentlycontinue -filter $filter | measure-object -property length -sum -erroraction silentlycontinue).sum
$businessphysicaladdressentry.($mappingarray[2]) = $contactitem.$key;
add-content $diskreport $datarow;
[void]$adsisearcher.propertiestoload.add($c)
virtualswitch = vmswitch -netadaptername $vmnic -name $virtualswitchname -allowmanagementos $false -enableiov:$true
$logfile = join-path $currentlogfolder ('combined.{0}.log' -f $modelname)
$modellist = (join-path $folder 'modellist.txt')
if (err != 0)
$logitem["datastruct"]["cbsiteurl"]= [system.bitconverter]::toint16($content,$structoffset)
if ($spweb -ne $null) {
public const int mixer_getlineinfof_componenttype = 0x3;
$files = get-childitem -path $dir.fullname -filter *.jpg -recurse
recoverypoint = $recoverypoint.userfriendlyname;
$forestprivgroups = getforestprivgroups
$justuser = $domainanduser.substring($domainanduser.indexof("\")+1)
$primdns = $null
new-adcomputer -name "client1" -enabled $true
$newscript = $psise.currentpowershelltab.files.add()
<td width='51%' align='center'>$htmlautoservices</td>
write-host "solution $solutionname not found on farm, skipping uninstall!"
"3267408951", "1426053789", "4753896210", "0319728564"
[parameter(position=0,mandatory=$true,valuefrompipeline=$true)]
helpmessage = 'the name of the [remote] computer or an array of computer names')]
$tempresult.remoteipaddress = $result.address.tostring()
if( -not $setting ){ throw 'settings not found' }
bomsize = 0;
$commonxp = "\\" + $computername + "\c$\documents and settings\all users\start menu\programs\startup\" + $remstitem.command
$result = $reply.status
$errormessage = "*** invalid entry ***"
$currentpublicfolder = [microsoft.exchange.webservices.data.folder]::bind(`
$erroractionpreference = "silentlycontinue"
$warningmsg = $messages.cannotfindcontact
$page = $filepath + $($db.name + "\$objectname\" + $item.name.replace('\','_') + ".html");
if ($_ -match "(.*?\d{1,3}.*?adfs\.$domain*)") {
$fileuser = new-object system.windows.forms.toolstripmenuitem("find &user in ad")
$svc = get-wmiobject -class win32_service -filter "name='winrm'"
$record = ""|select-object client,ip
getzipfileitemsrecursive $items
$message = "invalid credentials for " + $_.login + ""
function testready($passedip,$passedfilename="dcdone.txt")
$daysincurrentquarter = 31+31+30
</actions>
$detailexipsw+= "<td width='60%'><b></b></font></td>"
if ($addr -match "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}")
if ((test-path $backuppath) -ne $true)
<img src="$image" width="400" />
$filepath = $env:userprofile + "\" + "desktop" + "\"
$mailboxarray = new-object 'object[,]' $passedmailboxes.count,$attributes
11009 {"packet too big"}
$arguments = '-lazyclassloading -lazytableloading "-startupcmd=autorun_{0}"' -f $cilxmlfile
return $choices[$choice-1]
$showrepl = {cmd.exe /c repadmin /showrepl}
initial catalog=$db;integrated security=sspi")
$fs = new-object system.io.filestream ($folder + $rd.getstring(0)), create, write;
$chgusertable.columns.add("newpin",[string]) | out-null
$value = getenvironmentvariable($name)
if(!$rval)
write-progress -id 1 -activity "overall progress" -status "file $($i) of $($files.count)" -percentcomplete (($i/$files.count*100)*0.9);
throw "the availability group '$groupname' does not exist on server '$servername'."
compare-object $destmember.memberof $sourcemember.memberof | where-object {$_.sideindicator -eq '<='} |
" vm nic rename : $vmname "
$trvfunctions.nodes.item($pgse.currentdocumentwindow.title).expand()
{ $subkey = $reg.opensubkey($key, $false); }
$result = $ftprequest.getresponse()
$detailoabvd+= "<th width='10%'><b>internalauthenticationmethods : <font color='
write-eventlog -logname $logname -source $scriptname -eventid "104" -entrytype "information" -message $message
$psise.currentpowershelltab.addonsmenu.submenus.add("new function",{new-function},"ctrl+alt+s") | out-null
write-host 'requesting directory sync to be enabled. this may take up to 24 hours to complete.'
throw ("error: ax .xpo import did not complete within {0} minutes" -f $importtimeout)
-logname system `
$userobj | add-member noteproperty -name "authoritative domain" -value $trick
if(-not (get-pssnapin vmware.vimautomation.core -erroraction silentlycontinue))
username : $($cred.username)
write-output "add-windowsfeature 'failover-clustering', 'rsat-clustering'"
$bbcharge = [math]::round((50.00/12),2)
write-debug "set post search criteria: rebootbehavior"
"currentuserallhosts" {
while ($true) {
write-host "finished processing $wsusserver at $finish"
$lockworkstation::lockworkstation() | out-null
$system_drawing_size.height = ($form1.height - 96)
foreach ($group in $results)
-status "$percentcomplete% complete" -currentoperation "current database: $currentdb"
$displayccfilter = new-object microsoft.exchange.webservices.data.searchfilter+containssubstring(`
write-host "documented partition schemes";
write-host "the file " $txt " does not exist." -foreground red
if($args.length -eq 0)
$computer free disk space on drive $drive
if ($showmembers -like "true"){$stat=1}else{$stat=1}
if ((get-variable o365session -scope global -erroraction silentlycontinue) -ne $null) {
write-host -foregroundcolor 'green' -backgroundcolor 'black' 'success.'
if (((test-path ($xpplpath)) -eq $true) -and ((test-path (join-path $xpplpath dynamics.ax.application.dll.log)) -eq $true))
$receiver=$globaladadminmail
$outputitem | add-member noteproperty activesyncproxyuser $_.value["activesyncproxyuser"]
$firewall = new-object -comobject "hnetcfg.fwmgr"
$doc
$nlilabeltextbox.text = $myformattreeview.selectednode.tag
if (!(test-path "$vmhostparentvhdpath"))
$wc.uploadvalues($url, $fields)
$filedomain.add_click($setdomain)
$log = $path + "\create_ad_users.log"
$obj | add-member -membertype noteproperty -name "ad phone" -value ($getuser.phone)
$monitor += "(" + $mon.screenwidth + " x " + $mon.screenheight + ") "
get-wmiclasses -class disk -ns root\cimv2"
netsh int ipv4 add dnsservers name=$switch address=$ipv4dns validate=no
[management.automation.errorrecord] $errrcd = new-object management.automation.errorrecord($mgmtexception, $results.tostring("x"), $errorcategory[$results], $null)
function remove-gpwmifilter {
function buildadsites()
write-host "profile items to process: ", $count
"retry" = 4
if (require-qsregistryvalue -key 'hklm:\software\microsoft\active setup\installed components\{a509b1a7-37ef-4b3f-8cfc-4f3a74704073}' -name 'isinstalled' -value 0) {
[array]$logfiles +=$thefile
write-host "xml: " $webapplication.outerxml
if (!(test-path $scriptpath))
4 {$cmd = $replsummary}
write-progress -activity "gathering mailbox counts" -status "processing database $($dbs[$i].identity)" -percentcomplete (($i / $dbs.count) * 100)
foreach ($event in $eventid4625)
$objcollection2 = new-object -comobject "microsoft.update.updatecoll"
$phonenumberkeys = @()
$originalvalue = $profile["sps-emailoptin"].value
"this script will now stop executing."
$logitem["datastruct"]["cbrefqs"]= [system.bitconverter]::toint16($content,$structoffset)
$newappointment.reminderdueby = $startdate.addminutes(15)
write-verbose 'building the services parameters hashtable'
$obj | add-member noteproperty islocked -value $filelocked
$vswitchname = "tenantswitch"
foreach ($itemnode in $($viewnode.nodes.item("list view items").nodes))
public const int mixerline_componenttype_src_microphone = (mixerline_componenttype_src_first + 3);
foreach ($attchmentpath in $attachments) {
$item = createresultobject
(get-wmiobject -computer $computername win32_service -filter "name='umrdpservice'" -erroraction silentlycontinue ).invokemethod("startservice",$null) | out-null
[dllimport("advapi32.dll", setlasterror = true, entrypoint = "credreadw", charset = charset.unicode)]
$domainsidlist = @{}
$dn = "dc=" + $domain.name.replace(".", ",dc=")
write-output "removing the cluster ip address"
$certssltemplate=@"
$varposition = $varposition + 10
if ($username -like "*@*")
[dllimport("advapi32.dll", setlasterror=true, entrypoint="credwritew", charset=charset.unicode)]
$selectproperty.property += 'creationtime'
function new-sharepoint3path
write-host "search is an array or the mailbox already exists on that database" -foreground red
write-host '(should have the same id as the one running at the start)' -foregroundcolor black -backgroundcolor white
serialnumber = (get-wmiobject -class win32_bios -computername ([string]$workstation.name)).serialnumber
$service.usedefaultcredentials = $true;
$readonly = new-object system.management.automation.host.choicedescription "&read only", ""
"resetting dns server value after dns started: value: $value, scopeid: $scopeid "
message "`ndas 'who is who' des meeting raums`n"
$localdnsdomainname = $env:userdnsdomain.tolower()
$smtpserver = "191.168.1.1"
add-content $filename "padding-top: 0px;"
[string] $backupshare
$ldap = "ldap."+$externalfqdn
$axbuilderror | out-file (join-path $currentlogfolder "deployerrors.err") -encoding default
$name | foreach-object {
$bstate -eq "chargingandcritical")
$reader.getname($i),
[marshalas(unmanagedtype.u4)] int style,
$nlialignlabel.name = "nlialignlabel"
$effectivepolicyname = "effective$($verifiedpolicytype)policy"
$viewusersgroups.add_click({usersgroups})
$findresults = $currentcontactsfolder.finditems($searchfiltercollection,$itemview)
if ($calendarfolder -ne "\") {
$newedittypelabel.textalign = [system.drawing.contentalignment]::middlecenter
$detailrpccas+= "<tr>"
$strallowordeny = "deny"
write-verbose 'list of sms namespaces are put into an array.'
[switch]$useimpersonation,
new-adgroup directaccessclients global
$attachment = "x:\instructions\passwordchange.doc"
$progressrecord.percentcomplete = $counter / $findresults.totalcount * 100
if ($item.implement.tolower() -eq "y")
$btn12.databindings.defaultdatasourceupdatemode = 0
[string] $useraccount='*',
$newlistitemtooltip.settooltip($nlialignlabel, "help for control $($nlialignlabel.name)")
$myformattreeview.selectednode.nodes.clear()
$quarteryearint = $currentdate.year
$formatelement.innertext = $($value.tag)
write-host -foregroundcolor magenta "delete command failed, return values may not be current"}
$sessiontype = $queryresult.sessionname
else {$passwordneverexpires = "false"}
$exservice,$findresults.folders[0].id,
$xl.speech.speak('an image can be rotated clockwise in positive increments')
$cer.start = [datetime]::now.adddays(3)
if ($mcount -eq 0){
if ($ns.ipaddress[0].startswith("143.158.") -eq $true )
elseif ($vmhost -ne $null)
install-addsdomain -parentdomainname $parentdomainname -newdomainname $domaintocreate -installdns -domainmode "win2008r2" -safemodeadministratorpassword $pwd_safemodeadministratorpassword -credential $cred_credential -domaintype childdomain -sitename $sitename
$transactionlogs.gettype()
[string]$newname,
$findresults = $parentfolder.finditems($searchfiltercollection,$itemview)
$searcher.propertiestoload.add("ldapdisplayname") > $null
$cmd.commandtext = $commandtext
function connect-commputer([string] $computername)
$remtime = ($bytesleft.tobytes() / $transspeed.tobytes()) / 60
$qfeserver
$vm = get-vm $vmname -computername $computername
$lblpc = new-object system.windows.forms.label
supporturl = $supporturl
$emailcontent = $emailmsg.mimecontent.content
foreach($tows in $owscas)
$setting.node | ? { $sessiontable[$_.name] } | % { $count = 0 } {
function search-oscexocontact
else if( (0xfe == data[ 0 ]) &&
$mbxdbtable | sort-object -descending activembs | format-table -autosize
[parameter(mandatory = $false)]
write-infolog ("import combined xpo for model {0}: {1}" -f $modelname,(get-date))
" `$scriptpath = `$myinvocation.mycommand.path`r`n"
public const uint32 token_assign_primary = 0x0001;
return $cred
$iscsi_port = "3260"
return [intptr]::size -eq 8
get { return new win32window(system.diagnostics.process.getcurrentprocess().mainwindowhandle); }
if([string]$rrstatusic -ne "")
killie-startpage
$newedittypetooltip.settooltip($newedittypeform, "help for control $($newedittypeform.name)")
function read-axclientconfiguration
$timer.interval = 60000
if (-not ($possiblecertificate.hasprivatekey)) {
write-host "system restrictions" -foregroundcolor black -backgroundcolor yellow
write-verbose "get mac address informatino from arp"
$newdtrow.databasename = $database.name
$newcol.collectiontype = $collectiontype
$password = convertto-securestring "$gettingpassword" -asplaintext -force
$attributes.add($value, "notfound")
write-verbose "enabling alwayson on server instance: $server"
add-windowsfeature rsat-nlb
$detailowebs+= "<td width='20%'><font color='
mcdetails.dwcontrolid = mixercontrol.dwcontrolid;
$classdaddress = $bitarray.substring(24,8)
$copyflag = "c:\"+$testflag+".xml"
-netqostrafficclass @(
$distgroupmembers = get-distributiongroupmember $distgroup -resultsize unlimited
$reporoot = $fielddata
$retval
"$celsius celsius equals $((1.8 * $celsius) + 32 ) fahrenheit"
$calendarfolderpath = $calendarfolder.trimstart("\").trimend("\")
$moderatedgroups=($groups | ?{$_.moderationenabled -like "true"} | measure-object).count
$output+="<br><br>"
foreach ($obj in $members)
write-host " change detected! archiving $loglocation`n" -foregroundcolor yellow
machinename = $event.machinename
$filecontent = get-content $logfile -erroraction silentlycontinue
return cred;
$htmlstyleparams += "<style>"
result = $?
$newdtrow.errorcode = $_.result.errorcode
if ($sddlchanged) {
[array]$accessusers=@()
$objsearch.filter = "(&(objectcategory=person)(objectclass=user)(samaccountname="+$samaccountname+"))"
start-sleep 2
write-host $userobject has $city as current city
$cells.item(1,4)="employeeid"
if (!(test-path "$destinationfolder\$destinationfilename"))
$mailboxservers | % `
$hours = $hours.replace("-", "")
$dest = $dest + "\" + $split[0]
<th width='20%'><b>adsitelink name</b></font></th>
volumestructs.mixerline line = new volumestructs.mixerline();
if ($duplicatemembergroup)
$legacydns = @{}
if ($searchfiltercollection.count -ne 0) {
write-verbose "get a list of user objects"
if ( $section ) {
switch ($type)
$none = $true
create-modelmap
$nettypetextbox.maxlength = 100
write-host "checking time source of $server, pasting output in $($logfile)"
if($debuginfo) { $debugpreference = "continue" }
$senderbody+="<tr align=""center"" bgcolor=$($bgcolor)>"
$emailmessage.from = $from
if( ( -not $_.cluster['spacessetting'] ) -or $_.cluster['preparedquorumdiskenabled'] )
20 { configure-qswindowsfirewall; write-qscompletionmessage }
"birthday" {
write-debug "downloaded then send update to next stage"
$axbuilderror += "parameters file is wrong. see axinputerrors.txt"+[char]10
jp+si4l/fmg9/21kdjmaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadfuewojsqv+blzp/m5wt/5uvk/+blzp/m5wt/5uvk/+blzp/m5wt/5uvk/+blzp/m5wt/5uvk/+blzp/m5wt/5uvk/+blzp/m5wt/5uv
$script:msolcredential = get-credential -erroraction 'silentlycontinue' -message 'microsoft online services administrator'
$searcher.pagesize = 200
$icmprequest = new-object system.net.networkinformation.ping
write-host 'creating certificate request details...'
[parameter( mandatory = $false )]
override protected bool releasehandle`(`)
write-warning "can't restart terminal service on machine: $computername. try reboot this machine manualy."
$wdclient = $arrlog[9].replace("+"," ")
instructions for ntfs sid history clean up:
connect-msolservice -credential $office365credentials
$emailmessage += $successmessage
if (-not $requirement) {
$desc="$($tg_valid_approve.name) must be approved first"
{$_ -like "width:*"}
$hbpinst = $hbp.eventid
$values,
write-infolog ("begin: put-buildnumber: {0}" -f (get-date))
$color = $whitecolor;
[parameter(position=0,mandatory=$true)]
defaultvhdpath = "\\$($cluster.storage.fileservername)\$vmsharename"
"== $($functionname) ==" |out-file ".\$($wikifilename).wiki" -append -encoding ascii
$identity.baseobject.psbase.invoke("add", $member.baseobject.path)
elseif($ignorereboot)
if ($ace.trustee.domain -ne $null) {$username = "$($ace.trustee.domain)\$username"}
<th width='20%'><b>url</b></font></th>
{$htmlmessagebody = $shtmlparagraphstyle + "<br>mail flow problem: " + $dodgymailflow + "`r`n" + "<br>mapi connectivity problem: " + $dodgymapiconnectivity + "`r`n" + "<br>mail queues problem: " + $dodgyqueues + "`r`n"
updateprogress -status 'stage 2 hyper-v cluster' -currentoperation ' ' -percentcomplete 0
$userresource = new-object -typename psobject -property @{
@{expression={$_.destinationprefix};label="destinationprefix";width=40}, `
do {import-module activedirectory} while (write-host "importing neccessary module(s)...")
$topologycollection = $topologylist.coltopologies
"begin`r`n"
$outputfile = "lastlogondate.csv"
$list1.columns.add("name", 150) | out-null
$netsavebutton.location = new-object -typename system.drawing.point($formspacer, ($nettypelabel.bottom + $formspacer))
{ write-host -foregroundcolor yellow "connecting to $name..." }
ep = ""
os varchar(100),servicepack varchar(100))"
$users = import-clixml -path $savestatefile
write-eventlog -logname $logname -source $scriptname -eventid "101" -entrytype "error" -message $message
$phrase = $phrase.trim()
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet explorer\main") -value "default_page_url" | select-object value,data | ft -hidetableheaders
for ($j=0;$j -lt $excludefileextension.count;$j++) {
$myformattreeview.selectednode.expand()
foreach($excos in $e2kedge){
$system_drawing_point.y = 56
$m = 8*$j + $k - $bias
$pfrms = $pfd.replicationmessagesize
[byte] $maximumrecursionlevel = 5,
$hh = 0
write-host "installation date: " $objitem.installdate
$html += "<tr>"
get-regvalue -computername $computername -hive users -key ($strsid.value + "\software\microsoft\internet explorer\menuext") -recurse | select-object value,data | ft -hidetableheaders
[void]([system.io.directory]::getdirectories($source,'*',[system.io.searchoption]::topdirectoryonly))
write-output "parent vhd file copied to the target host successfully"
"\d{4}"
return $newsize
@{name="logicalname";expression={($_.name)}},
"startpath is $startpath" | out-file -filepath $logfile -append
$exitcode = (start-process -wait -passthru -filepath msiexec -argumentlist /i, $msifilename, /qb, /l*vx, $env:temp\$filename.txt).exitcode
write-host "--> $print"
if ($autolog) {f_autolog}
if ($count -eq 0){
$uniquekeyvalue = new-object system.collections.specialized.namevaluecollection
$modulefilepath = $websvcinstalldirregkey.'install directory' + 'microsoft.exchange.webservices.dll'
if ($xmlstarted -eq $true) {$xmlcontent += $line}
ref lsa_unicode_string keyname,
$getservice = get-service -computername $computer
$urlstring = $passurl
$lblpc.databindings.defaultdatasourceupdatemode = 0
param([string] $sharepoint2013path = $(read-host -prompt "please enter the directory path to where your sharepoint 2013 installation files exist."))
$needsreboot = $installresult.rebootrequired
$dagaws = $dag.alternatewitnessserver
$hashoutput.dayofquarter = 0
write-errorlog("error: ax synchronize did not complete within {0} minutes" -f $synctimeout)
set-gppermissions -guid $deptgpo.id -targetname $targetname -permissionlevel $permissionlevel -targettype $targettype
$stbar1.text = "local admins on " + $computername.toupper() + " (loading...)"
$subsiteroot = $siteurl
$semi = $temp.lastindexofany(";") + 1
$xcos = (get-wmiobject -class win32_operatingsystem -namespace root/cimv2 -computername $excos)
$range.horizontalalignment = 3
$nlipropertytextbox.enabled = $true
$upnsuffixes += $domain.dnsroot
" virtual machine topology creation "
write-host "db counts will be as follows after executing $($outputpowershellfile):"
$searcher = new-object system.directoryservices.directorysearcher($root)
$colour = "green";
<td width='5%' align='center'>$deviceid</td>
register-sqlsnapin
$max = [system.net.ipaddress]::parse("255.255.255.255")
write-progress -activity portscan -status "$a.$b.$c.$d" -percentcomplete (($i/($ports.count)) * 100) -id 2
} elseif($service -eq "ftp") {
$nevcancelbutton.width = ($neweditviewlabel.width - $formspacer) / 2
{[string]$border="style=""border: 1px solid red"""}
foreach ($qfe in $qfes)
$lableelement = $headerelement.appendchild($myxml.createelement("label"))
$myformattooltip.settooltip($savebutton, "help for control $($savebutton.name)")
foreach ($objserver in $objservers)
$objcollection2.add($update) | out-null
$domainsid,
$views = $sql_server.databases[$db_name].views | where-object {$_.issystemobject -eq $false};
$verbosemsg = $verbosemsg -f $identity.subject, $newsubject
$thishost = new-object -typename psobject -property @{
if ($scope.tolower() -ne "webapp" -and $scope.tolower() -ne "site")
$objgroup=new-object system.directoryservices.directoryentry($objsearchresult.path)
error_invalid_flags = 0x800703ec,
$excelworkbook = $null
function update-sidmapping {
$job|receive-job
public extern static bool duplicatetoken(intptr existingtokenhandle, int
public credential getcredential`(`)
throw "cannot determine the primary replica of availability group '$groupname' from server instance '$servername'. please investigate!"
[string]$ruleremoteaddresses,
$strfilter="(objectclass=computer)"
function process-scriptblockwrapper([scriptblock]$block) {
| get-netfirewalladdressfilter | where-object { $_.remoteaddress -eq 'any' } `
foreach ($row in $($user.licenses[0].servicestatus)) {
"paused at addaccounts"
$solutioncaspolicies = !($solution.caspolicies -eq $false)
"desklesspack" = "office 365 (plan k1)"
function getindexinfo
return $result
<div class='$($classheadercra)'>
write-progress -activity "collecting domain sids" -status "remote forest trusts" -progress "trust: $_.dnsname"
$last = $true
if((test-path (join-path $axbuilddir 'axinputvalidationerrors.txt')) -eq $true)
catch {$dhcp = "false"}
$newlistitemtooltip.settooltip($nlilabellabel, "help for control $($nlilabellabel.name)")
$zipfile = resolve-path $zipfile
$mydomainname = $mydomain.netbiosname
$webs = $sitecollection.allwebs
param ($computername,$dnsserverfind,$dnsserverreplace)
enabletracing
function get-groupmembersrecursive
add-content $diskreport $tableheader
if ($30daysusers -ne $null){
function decrypt-string($encrypted, $passphrase, $salt="saltcrypto", $init="iv_password")
lockcount = $resource.gettype().invokemember("lockcount","getproperty",$null,$resource,$null)
$split=$null
$cred = new-object advapi32.util+credential
$h = $reporttime.hours
$sitecollection,
write-host 'restarted windows explorer to complete ie esc configuration.'
foreach ($site in $sites) {
$newlistitemform.controls.add($nliformattextbox)
.buttonsets
write-debug "set post search criteria: $($update.title)"
set-nextbuildversion
$detailexcosw+= "</tr>"
default { "dude illegal value." ; gethelp ; exit }
if ($aclentrysid) {
write-host "bootable usb creation complete!"}
write-verbose "return all qfes that match the client os"
write-host "deleting the view " $viewtodelete.title
"-" + $documentlibrary.title
<td>"+$($_."description")+"</td>`
$btn1.size = $system_drawing_size
$btn3.usevisualstylebackcolor = $true
if (-not (read-qshostyesno -title 'confirm self-signed' `
write-host "$($targetfile.substring(0,$(if ($targetfile.length -gt 30) {30} else {$targetfile.length})))$(if ($targetfile.length -lt 30) {} else {"...$($targetfile.substring($targetfile.lastindexof('\')+1,$targetfile.length-$targetfile.lastindexof('\')-1))"}):`t" -nonewline; write-host "path too long. check manually." -foregroundcolor yellow
[parameter(position=1,mandatory=$true,valuefrompipeline=$false,helpmessage="filename for output powershell script")][string]$outputpowershellfile,
$internalipv6prefix = $raconfig.internalipv6prefix
$layer = new-object system.object
$detailcert+= "<th width='20%'><b>hasprivatekey : </b></font><font color='
$csv_path = $script_parent + "\move_packages.input"
"0xc0000070"="the user is restricted and may not log on from the source workstation"
<table border=""0"" bordercolor=""
[psutils.credman]::main()
install-spsolution -identity $targetsolution -language $solutionlanguage -gacdeployment:$solutiongacdeployment -caspolicies:$solutioncaspolicies -force:$solutionforce -local:$solutionlocal -whatif:$whatif
september, 2011
$websitespath = $topologysettings.topologies.websites
$cells.item(1,2)="title0"
public const string se_time_zone_nametext = "setimezoneprivilege";
new-netvirtualizationprovideraddress -interfaceindex $iface.interfaceindex -provideraddress "192.168.1.103" -prefixlength 24 -cimsession $hosts[2]
if (!(test-path $vmhostparentvhdpath))
$command = [scriptblock]::create("iscsicli logintarget $iscsi_target t $iscsi_portal $iscsi_port $iscsi_initiator $iscsiportid.port * $iscsi_mpio * * * * * * * * * 0")
$servicename = $objservice.name
if ($state -like $null)
elseif (!$contactitem.firstname -and !$contactitem.lastname)
$udtts = $db.userdefinedtabletypes | where-object { $_.schema -eq $schema }
param ($basedn)
if ($basedn.tolower().contains("dc=") -eq $false)
[datetime]$startdate,
$accountentry.putex(1, "msexchumenabledflags2", $null)
$qfixsusreport.add_click({invoke-wsusreport})
$form2.text = "loading..."
$targetfile = $sourcefile.replace($source,$target)
$result = `
write-infolog ("deleting dependent binaries : {0}" -f (get-date))
$hdfree = $rhd.freespace / 1gb
write-host "error: language pack is not installed for lcid $sitelanguage, aborting!" -foregroundcolor red
write-host "`n`tfailed msol credential validation. exiting...`n" -foregroundcolor red
$prerequisites.add("userprivilege","please run this script with administrative privileges.")
$detailsc+= "<tr>"
write-host "`n`tfederated domains do not match. exiting...`n" -foregroundcolor red
$sharedmailboxusername = read-host "enter a username for the new shared mailbox (e.g. shared@yourdomain.com)"
$diskmounted = $true
$computername = $_.name
add-content $filename "<head>"
generic_certificate = 5,
if ($pscmdlet.shouldprocess($spuser.userlogin)) {
function setmaxdegreeofparallelism()
[switch]$keepsearchfolder
$($myformattreeview.selectednode).expand()
<body bgcolor=""white"">
ip = request.servervariables("remote_addr")
$titledate = get-date -uformat "%m-%d-%y - %a"
get-wmiobject win32_logicaldisk -filter 'drivetype = 2 or drivetype = 3' |
$colofrecords | ft -auto
$details_specific.add("addorganizertosubject",$room.addorganizertosubject)
$record.hostname = $computer
$services = "services.msc /computer=$computername"
$objuser=new-object system.directoryservices.directoryentry($objsearchresult.path)
$title = $messages.securitywarningtitle
write-host "polling... time:" (get-date) "; battery:$bcharge%,$bstate"
[functionexplorer.treenodefactory]::updatetreenodes($trvfunctions, $functionexplorer_documents)
[parameter(mandatory=$false, parametersetname="weeklyrecurrence")]
$modificationowner = "someuniqueidentifier"
$netcancelbutton = new-object -typename system.windows.forms.button
$msg="there was an error connecting to $url"
$infomsg = $messages.existedmimetypes
[string]$siteurl,
function installca()
$cancelbutton = new-object -typename system.windows.forms.button
webrequest retval = base.getwebrequest(weburl);
if (volumelevel != currvolume)
$adsitelinksite = $adsitelink.sites
$detailconstatus+= "<td width='30%'><font color='
$speak.speak($q)
return cred`;
$detailcert+= "<th width='20%'><b>services : </b></font><font color='
if (![string]::isnullorempty($nlipropertytextbox.text))
$con.close();
$owsmsg = $ows.message
mixerdetails.cbdetails = marshal.sizeof(volume);
if($lsantstatustowinerror -ne 0) {
if( keeplinefeedonly )
if ($csuser -ne $null) {
[string[]]$bcc,
$optns.batchsize = 1;
$gettingemailsuffix = "((get-accepteddomain)[0]).name"
function soft-inventory{
$mailto = get-content ($script_parent + "\email_id.txt") -erroraction silentlycontinue
$c.cells.item($introw, 2) = "offline"
"attempted to perform net join using add-computer: id: $id corp: $corpfqdn"
"standardpack_student" = "office 365 (plan a1) for students"
copy-item $item.fullname -destination ($usbdestination + $item.directoryname.substring(2))}
$outputitem | add-member noteproperty ewsmacoutlook $ewsmacoutlook
gwmi win32_networkadapterconfiguration | where {($_.interfaceindex -eq $nicidx)}| select $partialinfo
$mailbody = "ad login = " + $domainnetbiosname + "\" + $samaccountname + "`r`n`r`n"
$_.psobject.properties |
$output | add-member noteproperty "computername" $computername
$store.close()
if($copyqueuelength -lt 10)
if ($script:adfscredentials -ne $null) {
$propvalue = $property.value
$directorysearcher.filter = $searchfilter
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "added new disk to vm"
int count = 0;
function get-adminstatus
if ($get)
if ($userlogonduration){$uld = compare-datetime $userlogonduration "creationdate"}
$tempvar = @()
$filename = "$($env:windir)\system32\oobe\info\backgrounds\backgrounddefault.jpg"
$useraccounts += $thisuser
$hvsessiontable = new-pssession -authentication 'credssp' -credential $credential -computername (
if (!(get-module | ? {$_.name -eq $vmmmodule}))
$hvresult = invoke-command -session $hvsessiontable[$_.name] -filepath .\helper\configurehypervcluster.ps1 -argumentlist @(
$information += "password = " + $password
$classheadercert = "heading10"
$library = get-content $poshfile.fullname
if($isinstalled)
$departclosedgroups=($alldistgroups | ?{$_.memberdepartrestriction -like "closed"} | measure-object).count
[system.security.cryptography.hashalgorithm]::create($hashname).computehash([system.text.encoding]::utf8.getbytes($string))|%{
$scripter.options.nonclusteredindexes = $true
$singleitem = $false;
$copystatus=$objitem.summarycopystatus
$line = new-object system.object
$($detailmbxbks)
" ca name : $caname "
$stbar1.text = "pinging " + $computername.toupper()
$newdtrow.mailboxcode = $mbxcode
public static void main()
$retval = $adjpriv::adjusttokenprivileges($htoken, $false, [ref]$tokpriv1luid, 12, [intptr]::zero, [intptr]::zero)
$csvfile = "d:\scripts\pictureurls.csv"
if ($certificate -ne $null) {
elseif($microsoftupdate)
$netroute | add-member -membertype noteproperty -name "totalmetric" -value $totalmetric
foreach($update in $objcollectionchoose)
<th width='15%'><b>snapshotlastfullbackup</b></font></th>
write-host "$($targetfile.substring(0,$(if ($targetfile.length -gt 30) {30} else {$targetfile.length})))$(if ($targetfile.length -lt 30) {} else {"...$($targetfile.substring($targetfile.lastindexof('\')+1,$targetfile.length-$targetfile.lastindexof('\')-1))"}):`t" -nonewline; write-host "not found." -foregroundcolor red
if ($country -like $null)
$style = $style + "table{border-width: 1px; border-style: solid; border-color: black; border-collapse: collapse;}"
$policytemplate | get-member -membertype property | %{
$partitionfunctions = $sql_server.databases[$db_name].partitionfunctions;
if($foundupdatestodownload -eq 0)
$targetcontact | add-member -membertype noteproperty -name groupname -value $distributiongroup.name
$detailsrvversion+= "<td width='20%'><b>total exchange servers : </b><font color='
created = [datetime]$properties.created.'
$psosettingshtml += "</font>"
$netsavebutton.width = ($newedittypelabel.width - $formspacer) / 2
$counter=1;
$checkdate = $null
$errormsg = $messages.cannotopencsvfile
$search += "($tmp and categoryids contains '$id')"
$layer | add-member -type noteproperty -name indexedfiltercount -value $indexedcount
switch ($pscmdlet.parametersetname)
function enumeratecomputers
$btn11.tabindex = 12
$mcafeemenu = new-object system.windows.forms.toolstripmenuitem("&mcafee logs")
@{name="files"; expression={0}},
$true {$cred.flags = [psutils.credman+cred_flags]::username_target}
$details_specific.add("deletesubject",$room.deletesubject)
$sam = $_.initials.substring(0,1).tolower() + $lastname.tolower()
import-module $modulefilepath
$base = new-object psobject;
$neweditviewlabel.name = "neweditviewlabel"
[validatescript({(get-adgroup $_)})]
get-directorystats -directory $_ -recurse:(-not $every) -format:$formatnumbers
$dbcounters|select database,total
if ($o365session -ne $null) {
$attributes = @{}
"<br><br>version: "+$sql_server.information.version+
$excelworksheet = $null
<span class=sectiontitle tabindex=0>tests - test outlook webservices</span>
_progress $stat "getting dynamic distribution group list"
throw "failed to create differencing disk on the target host"
$conn.connectionstring = $connectionstring
function get-uninstallstring
for ($r = 1; $r -le $hostratings.count; $r++)
if ($attr -ne "") { $line = $line + "," + $attr }
$classheaderasc = "heading1"
$ip = $addr
if($acceptupdatestodownload -eq 0)
$identity.baseobject.psbase.invoke("remove", $member.baseobject.path)
add-content -path $logfile -value " $_"
$progressrecord.activity = $messages.gpfprogressrecordactivity
if ($username -eq $null) {
write-warning "you haven't privileges to make this. try start an eleated windows powershell console."
used: {1:n0} mb
function get-domain {
$versionbts2004sp1 { $installedversion = $descriptionbts2004sp1 }
get-childitem -path $path\* -include *.$extension |
$oabvirtualdirectory = get-oabvirtualdirectory -identity $oabvirtualdirectory;
[string]$path = "c:\test",
write-host "error: feature $featurename is not a web scope feature, aborting!" -foregroundcolor red
$mcafeeods = new-object system.windows.forms.toolstripmenuitem("on &demand scan")
return "password updated"
$scriptelement.innertext = $($value.tag)
"standardwoffpackpack_student" = "office 365 (plan a2) for students"
start-transcript
$searcher = [adsisearcher]"(objectclass=organizationalunit)"
$site = new-object microsoft.sharepoint.spsite($weburl)
if ($cachedpolicies[$policytype].containskey($csusersite)) {
public static void changeuserpicture(string username, string picpath) {
if ((test-path $logpath) -ne $true)
$base64 = [system.convert]::tobase64string($guid.tobytearray())
if ([system.string]::isnullorempty($groupcontacts)) {
write-host "resetting inheritance on web:" $web.url
<p style='font: .8em ""lucida grande"", tahoma, arial, helvetica, sans-serif;'>this report was generated because the drive(s) listed below have less than $warningthresholdspace % free space. drives above this threshold will not be listed.</p>
$socket.close()
foreach ($item in $cat5)
add-content $report "<tr bgcolor='
cred.credentialblob `= marshal.ptrtostringuni`(ncred.credentialblob,
write-debug "return only list of updates"
foreach ($imaddresskey in $imaddresskeys) {
public const int mixer_getcontroldetailsf_value = 0x0;
get-job -name movearray* | remove-job
$inlineattachment.isinline = $true
linecontrols.dwlineid = line.dwlineid;
$detailows+= "<tr>"
write-host $global:totalgroupschecked " groups checked."
$itemname = $item.name
if (test-connection -computername $computer -count 1 -quiet -ea 0)
$caname=$catest
<td width='10%'>$computer</td>
param($days,$up,$down)
write-error "there is an existing cluster on this machine. please remove any existing cluster settings from the current machine before running this script"
$details_general = @{}
throw "please provide a valid filename for parameter csvfilename";
[validateset("sql","ftp","activedirectory","web")]
$targetcontainernodeid = gwmi -namespace "root\sms\site_$sitecode" -query `
$retentionrange = 7,
$suborg = $customercode.substring(3)
2147483649 {$acltype = "share printer"};
$pscmdlet.writeobject($findresult.id)
"<br><br>platform: "+$sql_server.platform+
$cname=$_
$queues = $shtmlparagraphstyle + "<b>queue message count tests</b></p>"
invoke-qscommand -program "$env:systemroot\system32\inetsrv\appcmd.exe" -argumentstring "set config '$script:adfssite/adfs/ls' -section:system.webserver/security/authentication/windowsauthentication /+`"providers.[value='negotiate']`" /commit:apphost"
$d = $d.substring(4,2) + "/" + $d.substring(6,2) + "/" + $d.substring(0,4)
"@ -f $physicalmemory, $inusememory, $availablememory, $percentmemory
[string[]]$registrykey = (split-path (get-childitem hklm:\security\policy\secrets | select -expandproperty name) -leaf)
$itemnewtoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
if ($mcafeefile -eq "oas"){$mcafeelog = "$mcafeepath\onaccessscanlog.txt"}
export-sidhistoryshare
$range = $sheet.usedrange
if (!(test-path $backuppath -pathtype container)){new-item $backuppath -type directory}
function rename-gpwmifilter {
$warningmsg = $messages.conflictwithdg
$contactphysicaladdressentry = new-object microsoft.exchange.webservices.data.physicaladdressentry
if ($csv -eq $true) {$line = "$line,<no value>"}
$objuser.givenname = $objusercheck.givenname
| display-adsecuritygroupmemberof -rl $maximumrecursionlevel `
add-content $report "margin-bottom: 10px;"
function new-qstestuser {
$contactschemas.remove($contactreadonlyproperty.name)
'performance logs and alerts',
$viewusersgroups = new-object system.windows.forms.toolstripmenuitem("users/groups")
if ($x -eq ($fqdnarray.length - 1)) { $separator = "" }
if ($csvfile."first name")
iex $remote
$($detailmbxdbsize)
$psobject | add-member -membertype noteproperty -name 'author' -value ([regex]::split($_.xml,'<author>|</author>'))[1]
$mail.subject= $subject
[switch]$ignoreuserinput,
$neweditviewform.clientsize = new-object -typename system.drawing.size(($($neweditviewform.controls[$neweditviewform.controls.count - 1]).right + $formspacer), ($($neweditviewform.controls[$neweditviewform.controls.count - 1]).bottom + $formspacer))
$adsitehub = $adsite.hubsiteenabled
return $useraccounts
$feature,
$total = 100
if($item.name.contains(".gif"))
adfs server options (part 2)
if ($timeleft -lt $cutoff) {
foreach($adsite in $adsiteall){
write-errorlog "il compile errors. see dynamics.ax.application.dll.log file."}
sv/eour/xkfk/8shsv/eour/xkfk/8shsv/eour/xkfk/8shsv/eour/xkfk/8shsv/eour/xkfk/8shsv/otxh/wr+9/4pxo/+jceaqaaaaaaaaaaaaaaaaaaaaaivqnrcncz7/ymxe/8cbn/+xfad/sxwa/7f8
$xpplpath = join-path $serverbindir xppil
$sourceitemcount=($event.sourceitems | measure-object).count
$wmi_os = ""
<th width='15%'><b>snapshotlastdifferentialbackup</b></font></th>
write-host $percentcomplete -foreground yellow
$idx_cat ="clustered";
$functionexplorer_documents.clear()
$certificate.x509extensions.add($extnames)
public static int credwrite(credential usercredential)
add-content $report "padding-top: 0px;"
$filter = "(&(objectcategory=attributeschema)(|"
$message = "an error was encountered, view the description property for $($workstation.name) to see error"
[validateset("absolut", "relative", "domain")]
$shell = new-object -com shell.application
$nevsavebutton.location = new-object -typename system.drawing.point($formspacer, ($nevtypelabel.bottom + $formspacer))
$obj = new-object psobject -property @{
elseif (($showself -like "false") -and ($showinherited -like "true"))
[int]$incfailvar = $incfailvar + 1
new-object localaccount.localuser($adspath.substring(8))
$leafobject = get-qadobject -searchscope onelevel -searchroot $aduser
for ($k=0;$k -lt $tempvar.count;$k++) {
set-adobject -identity $_ -replace $attr
$statusname = "hide"
switch ($pathinfo) {
"detected static mac - calling windows 8 networking powershell "
read-host "hit enter once you are ready to verify your domain"
if($_ -match "hresult: 0x80240044")
$users[$username]["activesynclastaccess"]=$arrlog[0]
$configelement = $myxml.appendchild($myxml.createelement("configuration"))
$parser = new-object -com msutil.logquery
function get-qsadfscertificate {
$dpncy_info = getobjectdependency $item $db;
cmd.exe /c "certreq -adminforcemachine -submit -config ""$dcfqdn\$caname"" c:\config\cert\cert-machine.req c:\config\cert\cert-machine.cer"
write-host("group description = "+$group.description)
$rootfolder = [microsoft.exchange.webservices.data.folder]::bind($exservice,$folderid,$propertyset)
" found flag : $testflag "
add-content $filename "}"
$cmdline = "c:\windows\system32\wusa.exe $($qfefilename) /quiet /norestart /log:$($qfelogfilename)"
write-qswarning 'will remove existing entry'
message = $matches.message
$btn10 = new-object system.windows.forms.button
$edbsize = convert-bytestosize $db.databasesize.tobytes()
[string]$accountclass = $_.gettype().invokemember("class", 'getproperty', $null, $_, $null)
$detailobjdisk+= "</tr>"
$xl.screenupdating = $true
$xponame = ("combined.{0}.xpo" -f $modelname)
dsrm $testaccount.distinguishedname -noprompt -c -s $server
$detailexcosw+= "<td width='50%'><font color='
if ($_.sender -notmatch "letsexchange.com")
" dcip : $dcip "
$pivotfields.orientation=$xlcolumnfield
$quartercount++
[long]$filessize = 0
$detailsrvversion+= "<th width='10%'><b> ---- mailbox & clientaccess & hubtransport number(s) : </b><font color='
if($organization.ispresent)
if ($null -eq $object1 -and $null -eq $object2)
function update-oscspfbauserdisplayname
"group '$computername\$localgroupname' contains these members:"
foreach ($c in $moverequestidentity)
message = $message
$db = $srv.databases[$database]
if ($writetoscreen) {
$irt = $flow.isremotetest
$list = $web.lists[$listname]
function get-adgroupmembers
staticaddress = $hypervclusteraddress
if ($user.recipienttype -like "*contact*")
$contactsfolder = [microsoft.exchange.webservices.data.contactsfolder]::bind($service,$contactsfoldersearch.id);
aaayaaaamaaaaaeaiaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
webapplication { $enabledfeature = get-spfeature -identity $targetfeature -webapplication $url -erroraction silentlycontinue }
hidesection obji
foreach ($file in $files)
$tempmailbox = get-mailbox $mailbox.identity -domaincontroller $domaincontroller `
$session = new-pssession -configurationname microsoft.exchange -connectionuri $msoexchangeurl -credential $cred -authentication basic -allowredirection
write-host -foregroundcolor green $p.proj_name ":: is being checked out for publishing" `
$gcount=($groups | measure-object).count
$preparedquorumdiskenabled = $false
14) launch test web pages
if ($passwordreset)
if ($verfiedfeaturenames -ne $null) {
exit 1
$contactsfolder.save([microsoft.exchange.webservices.data.wellknownfoldername]::msgfolderroot)
volumestructs.mixer mixer = new volumestructs.mixer();
[console]::writeline()
[switch]$allowoverwrite,
.filler {border-right: medium none; border-top: medium none; display: block; background: none transparent scroll repeat 0% 0%; margin-bottom: -1px; font: 100%/8px arial; margin-left: 43px; border-left: medium none; color:
<div class='$($classheaderrepl)'>
write-host $daterangetext -foregroundcolor green
$logindisnamepairs = import-csv $csvfilepath
release-qscomobject $shellapplication
$wrnlogfile = join-path $currentlogfolder ('vsimportwarning.{0}.wrn' -f $modelname)
" flags to test "
$context = new-object system.web.httpcontext $request, $response
if (!$senders)
$arrservers += "$serverdnshostname"
$mailboxlist = get-mailbox -resultsize unlimited
function get-discount([double]$rate,[int]$total)
$qosenabled = $true
-userprincipalname $localuser.userprincipalname `
write-host $path;
write-host $error[0]
"0xc000009a"="insufficient system resources"
function get-sidhistory {
switch ($wmimode)
[int]$logginglevel = 0,
[array]$ua_dbcounters=@();
$mm = [int][math]::truncate($lastrun/100);
function invoke-standby
if ($userconfirmed) {
$databases = getdatabases $sql_server;
<td>$($entry.uptime)</td>
write-host ("*" * $menuwidth) -fore $fcolor -back $bcolor
$lsantstatustowinerror = [lsautil.lsautil]::lsantstatustowinerror($ntsresult)
"profession" = "profession";
param ($array, $path);
for ($i=0;$i -lt ($fqdndepth);$i++)
$beginprocessingtext = "info: start processing documents."
foreach ($duplicatemember in $membercount.keys)
foreach ($p in $prjds)
write-host "stopping dependent services"
line.dwcomponenttype = type;
"no" = 7
$search += " or "
$massembly = $cr.compiledassembly
[system.io.file]::writeallbytes("$path\$filename.eml",$emailcontent)
$entryelement = $entrieselement.appendchild($myxml.createelement("wideentry"))
$infomsg = $infomsg -replace "placeholder01",$($spwebapplication.name)
$thislog |export-csv -path "$($logpath)\$($servername)\$($filename)" -notypeinformation
<executiontimelimit>pt1h</executiontimelimit>
$quorumdisknumber[$_['name']] = $_['quorumdisknumber']
write-infolog ("begin check-cilerrors: {0}" -f (get-date))
if ($neweditviewform.showdialog() -eq [system.windows.forms.dialogresult]::ok)
-ipaddress $hvnode.node1.address `
$detailcs+= "</tr>"
if ($prefixlength)
if (-not ($columnheaders.containskey("anniversary"))) {
if ($equalhostratings -gt 1)
if($property.name -eq "ms_description")
minutesup, `
$query = "select vcsenabled from {0}..sysversioncontrolparameters" -f $sqldatabase
out intptr policyhandle
if ($message)
function get-adapterindex([string]$networkinterface = "local area connection"){
$graphics.drawstring("computername: $($env:computername)",$font,$brushfg,800,100)
<principal id="author">
27) get the latest directory synchronization events
$newdiskpath = [string]::join("\",$newdiskpath)
$scriptpath = split-path $myinvocation.mycommand.path
$thisdisk = get-psdrive $sisdisk
$rootsearchfolder = [microsoft.exchange.webservices.data.folder]::bind(`
$img2.incrementrotation(6)
$altcreds = "error. ensure dhcp management tools are installed."
if ($multi -eq "") {$multi = "<not supported> (" + $value.gettype().name + ")"}
</table><br><table width='20%'>
$_hashresult = ""
foreach ($currentfoldername in $contactsfolderpaths) {
write-host "creating new sub-site on $weburl" -foregroundcolor white
$temptreenode.text = $text
if ([system.io.file]::exists($htmlfilepath)){ clear-content $htmlfilepath -force }
$dhcp = "false"
@{name="path"; expression={"<total>"}},
$oct1 = $scope.split(".")[0]
$choice4 = new-object system.management.automation.host.choicedescription ("&" + $c4), $desc4
[dllimport("kernel32.dll", exactspelling = true)]
<td align=""center"">$(($alldistgroups).count)</td>
function verifytimerjob ($filter)
param($computername, $outputdir="c:\comphardware", $compsfile=".\complist.txt", $excludefile=".\excludehardware.txt",[switch]$includekey,[switch]$writetoscreen)
$folderpropertyset.add($expropfoldersize)
$e2k7m = (get-exchangeserver | ?{$_.admindisplayversion -like "version 8.*" -and $_.ismailboxserver -eq "mailbox" -and $_.isclientaccessserver -ne "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
(get-wmiobject -computer $computername win32_service -filter "name='remoteregistry'" -erroraction silentlycontinue ).invokemethod("startservice",$null) | out-null
document = $printjob.properties[1].value
adaptersetting -name $hvnode.node1.clusternet.name `
<th width='10%'><b>servicename</b></font></th>
$hashoutput.dayofyear = $entry.day
$errorflag = $true
[system.management.automation.pscredential]
$optns.filename = $outfile;
token_adjust_privileges | token_adjust_groups | token_adjust_default |
$context = new-object system.directoryservices.activedirectory.directorycontext("forest",$_.dnsname)
foreach($user in $colofuniquemembers)
test-connection -computername $computer -count 1 -erroraction silentlycontinue |out-null
if ( -not $format ) { $output } else { $output | format-output }
$mapipf = (get-publicfolderdatabase | test-mapiconnectivity)
$sheet = $worksheets.item(1)
$nlisavebutton.text = "save"
$c.cells.item(1,1) = "querry name"
[alias('subtext')]
write-host "ready [$($objcollection.count)] updates to install"
if ($mcpfres -like "success")
"sddl did not change." | out-file -filepath $logfile -append
if ($confirmadd -eq "yes") {
$detailows+= "</tr>"
if($computername.length -lt 4){$vbpcsearch = $vbmsg.popup("search queries must include at least four characters.",0,"error",0)}
$dcbenabled = $dcb
$results += $fg.files | select-object @{name="databasename";expression={$db.name}},
write-host "starting script execution at : $starttime";
invoke-expression $newdgcmd | out-null
function get-directorylisting
$sqlconnection.close()
write-infolog ("end: start-aos method : {0}" -f (get-date))
function format-nonipoutput($ip)
function createoabapppool
if ($newuser.manager){ set-aduser $newuser.samaccountname -manager $newuser.manager }
} -argumentlist $vmhost, $targetvhdpath, $parentvhdpath
foreach($line in $csvfile)
$member | add-member -membertype noteproperty -name "class" -value $class
$objsearcher.serviceid = "7971f918-a847-4430-9279-4a52d1efe18d"
setip-ps $nic "ethernet"
$startdatefilter = new-object microsoft.exchange.webservices.data.searchfilter+isgreaterthanorequalto(`
$defaultpropertis | %{$output | add-member -membertype noteproperty -name $_ -value $null}
$percentmemory = $inusememory / $physicalmemory
foreach ($item in $cat3)
mcdetails.cbstruct = mcdetailssize;
$newcol = $colclass.createinstance()
[pc_volumecontrol.volumecontrol]::setvolume(65535)
function validatefeature
$scripter.options.filename = $outdir + $schemaprefix + $o.name + ".sql"
_progress $stat "getting distribution and dynamic distribution group member counts (please be patient)"
write-host "pc naming matches hrm department"
if ($spuser.userlogin.startswith("i:0
$mailboxes = (get-mailbox -database $dbs[$i].identity -resultsize unlimited | select identity)
$result = set-axmodelstore -noinstallmode -server $sqlserver -database $sqldatabase -verbose
$message += "`n`nplease see the application log on $(& hostname) for eventid 101 and create a filter for source that matches $($scriptname)"
[string]$localgroup,
int type = volumeconstants.mixercontrol_controltype_volume;
elseif($computer -eq $env:computername)
$newprg = $prgclass.createinstance()
$results = install-qsmsolservicesmodule
$syntax = $attributes[$attr]
name, `
$structoffset=$structoffset +4
$sqlsrvr = "localhost\sqlexpress"
$path + " exists"
"building ca using powershell"
foreach ($department in $departments){
function get-adobjects
if ($lyncclient.state -ne [microsoft.lync.model.clientstate]::signedin) {
foreach ($profile in $profiles)
function nodemousedoubleclick-myformattreeview()
$userdn
$usbdestination = $usbdriveletter + ":"
$jobcount++
if ($result.protocoladdress){
<td>$($adminactions)</td>
$versiondesc = "unknown version"
write-host -backgroundcolor 'black' -foregroundcolor 'yellow' $dashedline
$wvdeurl = $websvd.externalurl
$models += $file.name
if($mbxbklastfullbackup -gt (get-date).adddays(-1))
if ($pingable -eq "true")
$vhdlibrarysharedir = 'vhdlibrary'
write-host "$member was removed from $identity" -foregroundcolor darkgreen
public intptr attributes;
public struct dhcpcapi_params_array
$detailows+= "<th width='100%'><b>____________________________________________________________________________________________________________________________________________</b></font></th>"
$detected = $true
if($reboot -eq "y")
$procs = $sql_server.databases[$db_name].storedprocedures | where-object {$_.issystemobject -eq $false};
$objdomain=new-object system.directoryservices.directoryentry($adpathnewdomain)
$collectionid = gwmi -namespace "root\sms\site_$sitecode" -query `
drive = $lowdisk
$oldtag = ''
[parameter(mandatory=$true, parametersetname="dailyrecurrence")]
$nj=-1
start-sleep -seconds $signintimeout
if ($mask -eq "21"){[int]$count = 7}
while ($testaccountname -eq $null)
write-eventlog -logname $logname -source $scriptname -eventid "102" -entrytype "warning" -message $message
$timethresholdmins = $mondaytimethresholdmins
write-verbose "microsoftiisv2 filter = $iis6filter"
foreach ($file in $files){
if (!checkerror("credread", (cred_errors)rtn))
$newedittypeform.text = "$scriptname - $scriptversion"
$includefile = "c:\data\scriptingguys\conversionfunctions.ps1"
$tempvalue = $nlilabellabel.height
$words[$x] = $words[$x].toupper()
$line | add-member -type noteproperty -name "date of arrival" -value $_.arrivaldate.tostring("yyyy/mm/dd hh:mm:ss")
write-verbose "open the $($filename) spreadsheet"
$status = get-scsmenumeration incidentstatusenum.$incidentstatus$
function shown-newedittypeform()
$starttime = get-date -displayhint time
foreach ($i in $colproplist)
$myxml = new-object -typename system.xml.xmldocument
public intptr credentialblob`;
$layers = $doc.selectnodes("/wfpstate/layers/item")
get-variable -scope 1 | where-object {
switch ($size)
$members_a = ""
$newdtrow.mailboxlimitmb = $sendquota
[bool]$getexectime = $false
$update.accepteula()
name = 'lmnet'
"copying setres from $dcip"
write-verbose "restoring database '$db' on $secondary from $bakfile"
if($update.isinstalled) {$status += "i"} else {$status += "-"}
$folderview.propertyset = $propertyset
-ipaddress $hvnode.node1.livemigrationnet.address `
$output+="<td>$($groupdata.recipienttype)</td>"
do {$x = [system.runtime.interopservices.marshal]::releasecomobject($excel)} while ($x -gt -1)
[parameter(valuefrompipeline=$true, mandatory=$true)]
[string]$criteria,
plannedhardwareinstallation, unplannedhardwareinstallation, plannedoperatingsystemreconfiguration,
getzipfileitems $zipfile
if ($objmatch -and $timematch)
$mcafeeoas.add_click({$mcafeefile = "oas"; mcafeelogs})
return $user
foreach ($dc in $listofdcs)
$sql_server = new-object microsoft.sqlserver.management.smo.server $mysrvconn;
foreach ($objuser in $objusers)
function get-identitypathelements([string] $identitystring)
if ($tempheaderproperties -contains "label")
$detailpfd+= "<th width='10%'><b>server : <font color='
$msg.from = $mailfrom
$dn = $result.properties.item("distinguishedname")
if($compileinlayer -ne $null)
" externalfqdn : $externalfqdn "
write-host -foregroundcolor blue "the mailbox for" $_.displayname "is being updated from the pin of" `
$acl.setsecuritydescriptorsddlform($newsddl)
using system.net;
$pubpage.listitem.file.approve($comment)
if ($script:adfssubjectdomainname.tolower -ne $env:userdnsdomain) {
function setrebootflag($userid,$domainname=$corpflag)
function get-nextversion($oldversion)
[string]$defaultpassword = $topologysettings.config.defaultpassword
if ($member.isvalidsecurityprincipal -like "false")
$xl.speech.speak('add an image to the sheet through the add picture method')
if (($descvalue -eq $null) -and ($friendlyvalue -eq $null)) {
if($script:documentlibrarytitlestotarget -ne $null) {
add-content -path $logfile -value "user unchanged: $dn"
write-host "invoke-hibernate" (get-date)
$verbosemsg = $messages.failedtoremovepermision
[microsoft.exchange.webservices.data.contactschema] | get-member -static -membertype property | %{$contactschemas.add($_.name,"")}
$permissionlevel = "none",
if (test-path $path64){$cmd = "cmd.exe /c psexec.exe \\$computername -d `"c:\program files (x86)\mcafee\virusscan enterprise\mcupdate.exe`" /update /quiet"}
$datetime = get-date -format "mm-dd-yyyy_hhmmss";
[system.string]::isnullorempty($cc) -and `
) = $contact.$contactpropertyname
"nt user"
$($detailcs)
"creating new site"
foreach ($prerequisitename in $prerequisites.keys.getenumerator()) {
"$shtmlheadingstyle next hop domain</th>$shtmlheadingstyle next hop connector</th>$shtmlheadingstyle status</th>" + `
if($parts.length -eq 2) {
[marshalas(unmanagedtype.byvaltstr, sizeconst = volumeconstants.mixer_long_name_chars)] public string szname;
if ($grouplist.containskey($adobject.samaccountname.tostring() + "\") -eq $false)
$erroractionpreference="silentlycontinue"
while (!$password) {$password = read-host -assecurestring "`n msol password"}
$report += $objtemp
"standardpack" = "office 365 (plan e1)"
$consumerwebpart = $webpartmanager.webparts | where {$_.id -eq $currentwpconnection.consumerid}
add-layerorder $model $axlayer
createoabapppool
write-warning "error when adding windows features. error details are below:"
$hiddengroups=($groups | ?{$_.hiddenfromaddresslistsenabled -like "true"} | measure-object).count
$cells.item($row,$col) = $title
$caption = $objitem.caption
$tabledescription = "
$owss = test-outlookwebservices
$stbar1.text = "workstation locked - " + $computername.toupper()
$wshshell.popup("the password reset for " + $domainnetbiosname + "\" + $samaccountname + " was not done successfully", 0, "[error] the password reset for " + $domainnetbiosname + "\" + $samaccountname + " was not done successfully", 48);
if($sqlobject.isntgroup -eq 1) {
if((test-path $file) -eq $true)
write-infolog ($message)
$nliscriptlabel.name = "nliscriptlabel"
function stop-aos
$managedaccount = get-spmanagedaccount $accounttoretrieve
your password is set to expire in $timeleft days. please consider changing it before this date.
$emailbody += "th{border-width: 1px;padding: 1px;border-style: inset;border-color: black;}`r`n"
$featurename = $targetfeature.displayname
$typeedittoolstripmenuitem.add_click({click-typeedittoolstripmenuitem -sender $typeedittoolstripmenuitem -eventarg $_})
if ($searchfilter -like "*foreignsecurityprincipal*")
if ($targetfeature.scope -eq "farm" -and $feature.parentnode.get_name() -ne "farm")
$propname = $property.name
$description = $template.tag
<td width='10%' align='center'>$usedspacegb</td>
$proc = new-object system.diagnostics.process
prefixlength = $prefixlength
$movedby = $_."move-mailbox".taskheader.runningas
$byte = [convert]::tobyte($hrs, 2)
$results = install-qssigninassistant
$usrarray2 = $usrarray2 + $usrarray[$i]
$detailsetspn+= "</tr>"
return $returnvalues
$script:recursivesubwebs = $false
recv.flags = 0x0;
$objusermailbox = get-mailboxpermission -identity $($objuser.userprincipalname) | select user,accessrights,deny,isinherited
foreach ($user in $arrdlmembers.keys)
$btn5.tabindex = 5
if ($contactmapping[$key] -like "*:*")
$btn13.visible = $false
"run the command using the -whatif switch first."
new-item -path ($drive) -name psarchive -type directory | out-null
"td{font-size:10px;border-width:1px;padding:10px;border-style:solid;border-color:navy;}</style>"
$acctstatus = "disabled"
$ms = new-object io.memorystream
$c.cells.item($introw, 3).interior.colorindex = 3
if ($collectionid -eq "" -or $collectionid -eq $null)
$allusers = get-mailbox -resultsize:unlimited
$warningmsg = $messages.cannotfindpic
$newpkg.language = $item.packagelanguage
$content=$header+$message+$footer
write-host "amount of lists:"$listcount
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.partitionscheme")
-errorcategory notspecific -errorid 1 -targetobject $pscmdlet
write-host "error: missing required id or name attribute of feature-tag, aborting!" -foregroundcolor red
$group = $computer.create("group", $name)
$pingtracker = 0
$viewloadtoolstripmenuitem.add_click({click-viewloadtoolstripmenuitem -sender $viewloadtoolstripmenuitem -eventarg $_})
return "." + $path.substring( $pwd.tostring().length )
add-content $filename "padding-left: 0px;"
foreach($user in $db.users)
param([parameter(valuefrompipeline=$true,
2147483648 {$acltype = "share file"};
machine name: $server
param( $directory, $recurse, $format )
$global:counter = 0
foreach ($netroute in $netrouteobjects)
$viewloadtoolstripmenuitem.displaystyle = [system.windows.forms.toolstripitemdisplaystyle]::text
write-verbose "setting up winmgmt commands."
if ($adminos.caption -match "windows 7"){msra /offerra $computername}
foreach ($member in $distgroupmembers)
set-adserversettings -viewentireforest $true
$footer="}`r`n"
'5 replication events','6 garbage collection',
$c.cells.item($introw, 4) = $e1
switch ($syntaxnum)
$relativetooriginalsize = $msofalse
set-itemproperty -path $regpath -name $diagnosticsubkey -value $logginglevel
"$starttime [$script] started."
$nliformattextbox = new-object -typename system.windows.forms.textbox
$nevtypetextbox.text = $null
foreach ($listitem in $reflist.items) {
$sizeinmb = ($subfolder.extendedproperties[1].value / 1048576).tostring("n2")
"new-netipaddress -interfacealias $switch -ipaddress $ipv4address2 -addressfamily ipv4 -prefixlength 24"
if (-not $psboundparameters.foregroundcolor) {
$e2k7c = (get-exchangeserver | ?{$_.admindisplayversion -like "version 8.*" -and $_.ismailboxserver -ne "mailbox" -and $_.isclientaccessserver -eq "clientaccess" -and $_.ishubtransportserver -ne "hubtransport" -and $_.isedgeserver -ne "edge" -and $_.isunifiedmessagingserver -ne "unifiedmessaging"} | measure-object).count
$filter = $filter + "(ldapdisplayname=$attr)"
$gotodefinitioncommand.text = 'go to definition'
foreach ($ccrecipient in $cc) {
$result.item('name') = $identitystring.split('/')[2]
<div>
$scripter = new-object ("microsoft.sqlserver.management.smo.scripter") ($server)
[string]$newpassword
<assemblyidentity name="microsoft.exchange.oabauthmodule" publickeytoken="31bf3856ad364e35" culture="neutral" />
if (!(test-path $scriptpath)) { new-item $scriptpath -type file | out-null }
$result = new-object -typename psobject -property @{
write-host -foreground magenta "[$ip] : different`n`n"
serveradmin = [bool][bool]$sqlobject.serveradmin;
-and ($attr.toupper().contains("guid") -eq $true))
} -argumentlist $sortedlist.keys[$i],$($eventlog.log)
$xlpivottableversion12 = 3
$hashalgorithm = new-object $cryptoserviceprovider
setusertile(username, 0, picpath);
$fwport = new-object -comobject hnetcfg.fwopenport
function readwebpermissioninheritance($web)
$verbosemsg = $messages.founddistributiongroup
return $errrcd
$targetlibrary = "shared documents"
$tempresult.status = "generalfailure"
$rootfolder.load()
$old = (get-date).adddays(-60)
foreach ($gc in $forest.globalcatalogs)
$proc.waitforexit();
foreach($update in $objcollectionupdate)
$a.backgroundcolor = "black"
$featureidentity = $feature.id
node -name $hvnode.node3.name -type hyperv -cluster $cluster.hyperv -hypervsetting $hypervsetting -fileservername $fileservername `
write-debug "set pre search criteria: ishidden = 0"
foreach ($name in $names) {
$svncommand = "& svn add `"$($filepath)`""
$userswithpsocurrentlyapplied = $currentpasswordpolicyobject."msds-psoappliesto"
if ($specicalcase -ne $null) {
$myformatlabel.font = new-object -typename system.drawing.font($myformatlabel.font.fontfamily, ($myformatlabel.font.size + 1), [system.drawing.fontstyle]::bold, $myformatlabel.font.unit)
$dagnwks = get-databaseavailabilitygroupnetwork
$psise.currentpowershelltab.addonsmenu.submenus.add("insert comment block",{new-commentblock},"ctrl+alt+c") | out-null
{write-host "......$usersam has a password age of $userpwdage" -foregroundcolor green}
$grouplist.add($adobject.samaccountname.tostring() + "\", $true)
[string]$displayname
$warningmsg = $messages.cannotfinddg
[microsoft.activedirectory.management.adgroupscope] $groupscope
$excludearray = get-content $excludefile
add-managementroleentry "$orgname\$managementrole\enable-inboxrule"
[microsoft.exchange.webservices.data.folderschema]::totalcount,`
$filter = $gpdomain.getwmifilter($path)
if ($host.version -lt $minimumpowerguiversion) {
$default = 0
if($replayqueuelength -lt 1)
send-mailmessage -to $emailto -from $emailfrom -subject $emailsubject -body $emailmessage -smtpserver $emailsmtp
$objsharesec = get-wmiobject -class win32_logicalsharesecuritysetting -filter "name='$share'" -computername $computer
foreach($empty in $emptygroup)
if ($all -or (-not $layerkey.endswith("_discard") -and $filtercount -gt 0))
dism /online /enable-feature /featurename:searchengine-client-package
write-error "cannot find '$imgpath'. make sure it is in the '$scriptpath' directory."
write-host "there are no vms on this server currently."
write-warning "local group '$localgroupname' doesn't exist on computer '$computername'"
<img src="$image" width="300" />
$step = "14"
$grouphasgroupcount=($grouphasgroup|measure-object).count
goto retry;
$dbname = $dbsize.name
$username = $env:userdomain + "\" + $env:username
$ipv4dns2 = $nic.ipv4dns2
rates = @{
get-command -module sidhistory | get-help -full
get-wmiobject @paramservices | foreach-object {
$arrservers
$moveresults | foreach {
$return = $wifi.enable()
{$_ -like "wide view:*"}
)][string]$pagesize=500
write-host 'registry modifications unnecessary.'
if ($admin.name -ne $null){$item.subitems.add($admin.name)}
$subject="your password will expire in $timeleft days"
@{name="filetype";expression={"rows"}},
function createconfigchildnode($owner, $type, $path, $name, $value)
write-verbose "starting function start-scommaintenancemodeforgroup function"
[psutils.credman+credential] $cred = new-object psutils.credman+credential
$childnode.owner = $owner
add-pssnapin sqlserverprovidersnapin100 | out-null
"1" {$variant = "31"}
$result = $host.ui.promptforchoice( $heading, $prompt, $options, -1 )
$username=$env:username.tostring()
(($object1.$key.gettype()).name -eq "double") -or
if($verbose) { write-host "[$i/$count]sharepoint user: ",$username," --> ad user: " -nonewline }
"see the output file for results: $file"
write-verbose "let's put agent $agent in maintenance mode"
$cells.item(1,5)="email"
if($user.isvalid -eq $false){$output+="<th>not valid</th></tr>"}else{$output+="<th>yes</th></tr>"}
if ($idx.isclustered -eq "false")
$envvargroupcount = "storagegroupmonitor" + $groupname + "count"
send-mailmessage -subject $emailsubject -from "postmaster@company.com" -to "postmaster@company.com" -body $emailbody -bodyashtml `
$trick = $auth.name
timeout /t 15
write-infolog ("calling export-axmodel: {0}" -f (get-date))
[validatescript({ test-path -pathtype:leaf -path:$_ })]
$daterangetext = "info: searching for documents with review dates between " + $reviewstartdate + " - " + $reviewenddate
$udfs = $db.userdefinedfunctions | where-object { $_.schema -eq $schema -and -not $_.issystemobject }
$computergroupmembernames = ($computergroupmembers.getrelatedmonitoringobjects() | select displayname)
june, 2012
"business phone 2" = "phone:businessphone2";
gateway = $gw
function get-machinecerts($fqdn)
if (!$exchange2007)
$userpc = $env:computername
if ($showmembers -like "true"){$stat=8}else{$stat=10}
[string[]]$computergroup,
$btn10.name = "btn10"
function checkdirectory
$output += createlistentries $url $listname $keyfieldname $valuefieldname $addwordvariants
function installorupdatewebappsolution
$relyingpartyname = read-host "enter the name of the relying party"
add-content $logfile -value "$(get-date -format 'yyyy/mm/dd hh:mm:ss') collect and filter updates ... "
$descriptionbts2010 = "biztalk server 2010"
$s = "last run failed for url ""$($url)"": $([datetime]::now.tostring('yyyy.dd.mm hh:mm:ss')) : $($_.exception.message)"
$warningmsg = $warningmsg -replace "placeholder01",$dg
[array]$versions = @()
<th width='20%'><b>minorpartnerid</b></font></th>
"detected dynamic mac - skipping rename. make sure this vm only has 1 nic with nic settings "
$udpclient = new-object system.net.sockets.udpclient($destination, 6000)
$cred.persist = get-credpersist $credpersist
[system.net.mail.mailmessage]$message = new-object system.net.mail.mailmessage("exchange@contoso.com", "reports@contoso.com", "server move stats", $body)
$oc = (get-clientaccessserver | test-owaconnectivity -allowunsecureaccess)
} finally { }
echo $loginuserarray >> $outputfile
$colproplist = "name","samaccountname","objectsid","displayname","extensionattribute13"
[string]$hive = "localmachine";
$cred.type = get-credtype $credtype
@{n="freespacegb";e={[math]::round($_.summary.freespace/1gb,0)}}|`
rtn = addcred();
[xml]$xmldata = get-content $absolutepath
$vardumpfile = "$tsenv:logpath\ztivariablesexport.log"
import-module netadapter
write-warning "exception thrown while getting scope info from server1"
$c.listobjects("table1").tablestyle = "tablestylemedium1"
$btn4.tabindex = 4
$entry.installdate = $parsedinstalldate.value
write-host "$filename could not be created"
$webtemplate = $site.template
intptr phthread,
$prstatdesc = $messages.cncprogressrecordstatusdescription
receive-job $job
if ($itemip -eq $null) {
write-progress -activity "[3/$numberofstage] downloading updates" -status "completed" -completed
$viewnewtoolstripmenuitem.visible = $true
dir $ziplocation"\*.txt" | add-zip "$ziplocation\$computer netstat archive.zip"
<tr>`
$results = new-object system.collections.generic.list[system.object];
[string] $activity = 'expanding files'
'yes'{ "somebody set up us the bomb." }
$pfap = $pfd.activationpreference
"bycontact" {
3) download and run the office 365 deployment readiness tool
" $attr$colon " + '{0:n0}' -f $value `
<span class=sectiontitle tabindex=0>client access server - autodiscover virtual directory</span>
elseif($dclist.length -gt 0)
$searcher.searchroot = [adsi]$organizationalunit
$_sourcehash = ""
set-dnsclientserveraddress -interfacealias $switch -serveraddresses $dnsarray
$throughputsetting,
$btn7.location = $system_drawing_point
import-module netlbfo
case cred_errors.error_success:
$r = new-object system.security.cryptography.rijndaelmanaged
write-eventlog -logname $logname -source $scriptname -eventid "100" -entrytype "information" -message "renamed disk to $($newdiskpath)"
$gwmi = get-wmiobject -query $query -computername $computername -erroraction:silentlycontinue | where-object {$_.sidlength -gt 16}
if ($nliwidthnumericupdown.value -ne 0)
$lookup = (get-adorganizationalunit -ldapfilter "(name=$orgunit)")
write-host "stopping msftesql-exchange and msexchangesearch services"
write-host "database" $optimaldb.databasename "was chosen for having" $optimaldb.activembs `
write-host "`'$fileurl`' ..."
[string]$dnsserverreplace)
$script:adfsdomainname = $null
switch ($productedition)
new-item $loggingdirectory -type directory
return $true
$warningmsg = $warningmsg -f $contact.$contactpropertyname
$existingbinding = $null
param([string]$networkinterface = "local area connection",
public static extern bool lockworkstation();
$acl.addaccessrule($ace)
default {$check.daterangesuccess = $false}
set-adaptersetting @_
throw "need administrative priviledge to run this script properly"
$choice5 = new-object system.management.automation.host.choicedescription $c5, $desc5
9 { "chargingandcritical" }
$data= import-csv -path $args[0]
if ($o.schema -ne $null -and $o.schema -ne "") {
bomsize = 4;
'19 inter-site messaging', '20 group caching','21 linked-value replication',
write-verbose "webadministration filter = $iis7filter"
$tempvalue = $newedittypelabel.height
{$finish = get-date; $global:messagebody += "`r`n<tr>$shtmlcellstyle $wsusserver</td>$shtmlcellstyle $parentwsusserver</td>$shtmlcellstyle " + $wsusserveradminproxy.version + "</td>$shtmlcellstyle $start</td>$shtmlcellstyle $finish</td>$shtmlcellstyle trial run</td>$shtmlcellstyle trial run</td>$shtmlcellstyle trial run</td>$shtmlcellstyle trial run</td>$shtmlcellstyle trial run</td>$shtmlcellstyle trial run</td></tr>"}
[alias("vm","virtualmachinename")]
remove-item -literalpath $backupsolutionpath
$securepassword = convertto-securestring -asplaintext -string $password -force
throw "contact picture file not found at $($contactitem.$key)";
$objecttype = "5000"
address = "192.168.12.20"
throw $errormsg
-name $_.'display name' `
add-content $report "<meta http-equiv='content-type' content='text/html; charset=iso-8859-1'>"
$c.cells.item($introw, 8) = $cs.name
$id,
appendlogmessage $error[0]
" -foreground "green"
$btn0.text = "&search for pc"
mandatory,
write-verbose "create a searchfilter"
add-member -name "name" -membertype noteproperty -value $column.name -inputobject $obj;
$filename = "$(($log.logname).replace('/','-')).csv"
$testmailflowoutput | %{if ($_.testmailflowresult -notmatch "success"){$dodgymailflow = $true}}
function loadwfpstateasxml
$nlilabeltextbox.enabled = $false
write-verbose "restoring the log of database '$db' on $secondary from $trnfile"
write-infolog ("import {0} lables : {1}" -f $modelname,(get-date))
return $triggers;
$detailcasoc+= "<td width='20%'><font color='
$newappointment.body = $body
foreach ($event in $audit)
`(int`)ncred.credentialblobsize `/ 2)`;
"error translating name: $_"
function send-oscexoemailmessage
timeout /t 45
if ($attributes.containskey($value) -eq $false)
$xl.speech.speak('three cells wide and six cells tall')
$currentserverconfig = (get-itemproperty (get-item ($subpath)).pspath).current
$system_drawing_point.y = 52
o.type_desc as 'object_type',
$objectattributes.attributes = 0
switch ($groupscope) {
$messagebody += "</td>"
$accountlockoutthreshold = $currentpasswordpolicyobject."msds-lockoutthreshold"
$mswmicreationdate = (get-date).touniversaltime().tostring("yyyymmddhhmmss.ffffff-000")
[string]$vmhost,
$no = new-object system.management.automation.host.choicedescription "o&ffline", `
-or (($value[1] -eq 4) -and ($value.length -eq 24)) `
$con = new-object data.sqlclient.sqlconnection;
$lastrun = $lastrun - ($mm*100)
$pcservice = gwmi win32_service -computername $computername -filter "name='$service'"
if ((get-itemproperty $key -name $name).$name -eq $value) {
$msg.isbodyhtml = "true"
status = $status
function issectionheader(obj) : issectionheader = (obj.classname = "heading1_expanded") or (obj.classname = "heading10_expanded") or (obj.classname = "heading1") or (obj.classname = "heading10") or (obj.classname = "heading2"): end function
-version 11)
if ($srknvrgl)
add-windowsfeature rsat-remoteaccess
appendlogmessage $beginprocessingtext
if ($ipv6dns) { $dnsarray+=$ipv6dns}
return $searchresult.updates
if (!(get-item -path $contactitem.$key -erroraction silentlycontinue))
if ($possiblecertificates.getlength(0) -eq 0) {
$hrs = $value.substring($j, 1) + $hrs
$ram = $rcomp.totalphysicalmemory / 1gb
function get-tssqlsyslogin {
$brushfg = [system.drawing.brushes]::yellow
$newappointment.save($folderid, [microsoft.exchange.webservices.data.sendinvitationsmode]::sendtonone)
$tempstatsobj.received = ($pings-$tempstatsobj.lost)
if (($targetcontacts | ?{$_.groupname -eq $contactgroupname}) -ne $null) {
$cred.flags = 0
$detailexipsw+= "<td width='30%'><font color='
$cells.item($row,$col) = $employeeid
$app.versionmajor = $key.getvalue("versionmajor")
public system.runtime.interopservices.comtypes.filetime lastwritten;
$clustername,
$tempnode2 = new-treenode -treenode $tempnode1 -text "typename: $($nevtypetextbox.text)" -tag $($nevtypetextbox.text)
throw ("error: visual studio project didn't compile in {0} min." -f $compileciltimeout)
$dirs = dir $path -recurse | where { $_.psiscontainer -eq $true }
$savebutton.add_click({click-savebutton -sender $savebutton -eventarg $_})
$all | where {!($_.issystemobject)} | foreach{ $scrp.script($_)} | out-null ;
if ($installmenu)
$errormsg = $messages.invalidfolderpath
get-wmiobject -computername $cmp win32_logicaldisk |
$altdnsname.initializefromstring($script:altnametype.dns_name, ($env:computername + '.' + $env:userdnsdomain))
$simplehomepage | out-file c:\inetpub\wwwroot\default.asp -encoding ascii -force
if( $throughputsetting['dcbenabled'] )
$qfixmenu.dropdownitems.add($qfixlockpc) > $null
install-model $fileinfo.directory.fullname $fileinfo.name
$storagesession = $storagesessiontable[ $storagenode.name ]
return $services
new-sqlavailabilitygroup -name $agname -inputobject $primary -availabilityreplica $replicas -database $databaselist | out-null
http:\\helpdesk.<cotendo>.com
$isdelayexceeded = $false
$endtime = get-date;
rv transportserver
$xmlstarted = $false
function disableinternetldap()
"select * from sms_program where programname = '$($item.programname)'"
if ($axprocess.waitforexit(60000*$synctimeout) -eq $false)
$web.dispose();
public int cbdetails;
select -expand inputobject | foreach {add-adgroupmember "$_" $destacc}
$tocs = get-clientaccessserver | test-outlookconnectivity -rpctesttype:server
gw 12773399 -extended
$rdvd = gwmi win32_cdromdrive -computername $computername
$cbwebappguid = 36
$applicationsourcedir = $applicationsourcedir.trimend('\')
" " + $site.name
$message = "do you want to add permissions to this mailbox?"
$nevviewcombobox.focus()
$defaulthtml = [system.io.file]::readalltext($(get-item('k:\exchange\2010\owa\defaulthtml.txt')).fullname)
cbuas=0;
if ($args.count -eq 1)
$ecpc = (get-clientaccessserver | test-ecpconnectivity)
remove-item -literalpath $tempname -force -recurse -erroraction silentlycontinue
write-host -foregroundcolor red $path " does not exist"
[parameter(mandatory=$true, helpmessage='the name of the file that should be present.')]
web= "";
$msg.to.add($user)
write-errorlog $message
$($detailsetspnd)
$btn6.location = $system_drawing_point
$pivotfield.showdetail = $false
$activedocument = foreach ($document in $pgse.documentwindows) { if ($document.title -eq $f.documenttitle) { $document } }
$idx_cat = "non-clustered";
$computergroup = $wsusserver.getcomputertargetgroup($approval.computertargetgroupid)
$pkgpath = $newpkg.put()
$count++
foreach ($attachmentpath in $attachment) {
$spacessettingsenabled = $spaces
$members = $oudump | where-object{$_.upnsuffixes -like "*$auth*"}
clean-build
write-output "get-oabvirtualdirectory -server $computername | remove-oabvirtualdirectory"
elseif ($member.recipienttypedetails -like "*user*")
function buildwebserver($corpsite="washington",$image="washington.jpg",[switch]$simple,[switch]$skipcopy)
"web-mgmt-console",
$detailmbxdbsize+= "</tr>"
-dnsserver $dnsserver `
function add-localgroupmembership
public criticalcredentialhandle(intptr preexistinghandle)
$a = $adspath.split('/',[stringsplitoptions]::removeemptyentries)
$groupcn = "cn="+$objnewgroup.cn.tostring() + ","
$permtype = $objectpermission.permissiontype;
$disablecomputer.psbase.commitchanges()
write-host "$computername with resourceid $computerid will be deleted"
return $f
[cmdletbinding(defaultparametersetname="domaincsv")]
$subject = "your network password will expire in $daystoexpiry day(s) please change your password."
$reply = $null
$queueinfomessagecount = $queueinfo | measure-object messagecount -sum
"testing path $webcopypath"
$log = new-object psobject
if ($skip -eq $false)
$detailcra+= "<td width='20%'><font color='
move-adobject -identity $dn -targetpath $location
function get-fwgloballyopenports
$successcount += $thiscode
linecontrols.ccontrols = 1;
$newappointment.reminderminutesbeforestart = 1080
function sendemail($owneremail, $doclibraryviewurl, $documentname) {
$maildb = $notes.getdatabase("$mailfileserver", "$mailfile")
[string[]]$excludedate,
$domain = $a[-2]
[parameter(position=0, mandatory=$true)] [alias("cn", "computername", "name")]
"send a message waiting 60 seconds for a reponse of [yes / no]."
$xlthick = 4
write-qstitle 'launch test web pages'
$solutionforce = ($solution.force -eq $true)
$searchfiltercollection.add($startdatefilter)
$currentnewkey=$newregistrykey.opensubkey($newsub)
$details_specific.add("bookingwindowindays",$room.bookingwindowindays)
get-childitem $logpath -filter *.log | move-item -destination $logpath\old
write-verbose "pass the command-line to the cmd environment for uninstall"
$img1 = $sh.shapes.addpicture($imgpath, $linktofile, $savewithdocument, $left, $top, $width, $height)
if((test-path (join-path $axbuilddir "axinputvalidationerrors.txt")) -eq $true)
"enterprise")][string] $credpersist = "enterprise"
$totalactivestdmbs = 0
throw new invalidoperationexception("invalid criticalhandle!");
$system_drawing_point.x = 12
$sendas = $host.ui.promptforchoice($title, $message, $options, 0)
$widthelement.innertext = $($value.tag)
if ($strcomputer.substring(0,1) -ne "*")
[string] $groupname
function write-qswarning {
$mbxbkslastcb = $mbxbk.snapshotlastcopybackup
[parameter(mandatory=$true, helpmessage='requirement that is being checked that must be $true.')]
<div class='$($classheaderasyncvd)'>
function click-nevcancelbutton()
[int]$pagesize=100,
if (!($usershashtable.contains($userdn))){
"common store files" = ($sisresult[($sisresult.count)-4]).trimstart("common store files:")
$this.getservice([{1}])
$path=split-path $myinvocation.invocationname
$day = get-date -uformat %u
"was",
@{expression = {$_.status};label = "status";width = 18}
$saveas,
$wsus_categoriesincluded = @("windows server 2008", "windows server 2008 r2", "windows 7");
$reminderdatetime = $contactobject.weddinganniversary
$detailcert+= "<th width='20%'><b>isselfsigned : </b></font><font color='
write-host $up.displayname" --> ", $pictureurl
$message = "found $($workstations.count) computer objects in $($adspath)"
"`n excludeddates: $($excludeddates[$j].tostring('yyyy-mm-dd'))"
{ $document}
recv.isvendor = false;
if(0 -eq $results)
$body += "<h2 style='font-size:15px;text-decoration:underline'>properties</h2><p style='line-spacing:120%'>$tbl_props</p>";
foreach ($reservedproperty in $reservedproperties) {
$r = $cmd.executenonquery()
[object] $object
$temperraction = $erroractionpreference
using system;
add-content $report "}"
private static int addcred()
if ($svc.state -eq "running") {
$allclustergroupips = get-cluster | get-clustergroup | get-clusterresource | where-object {$_.resourcetype.name -eq "ip address" -or $_.resourcetype.name -eq "ipv6 tunnel address" -or $_.resourcetype.name -eq "ipv6 address"}
server = $recoverypoint.datasource.productionservername
$hasconnectionpermission = $false
$vmhostobject = get-scvmhost -computername $hostratings[$randomhost].name
if (!($logpath)) {$logpath = ".\"}
$choices += new-object system.management.automation.host.choicedescription $keyword, $phrase
$newfile += '</axaptaautorun>'
$computer = (& hostname)
$newdtrow.customercode = $customercode
write-host " - please check the path, and try running the script again."
if ($sender.deny -like "true"){$font="red"}else{$font="'
$installpath = read-host "specify installation full path. type `"show`" to select from standard location."
$numberofupdate++
' -f $entry[1],$entry[2]
'sat' {
nicteam -name $hosternetnicteamname `
"default schema: "+$item.defaultschema+"<br>"+
[parameter(mandatory=$true,
$exactkey=$key
new-item $destinationfolder -itemtype directory
$myformatcontextmenustrip.location = new-object -typename system.drawing.point($formspacer, $formspacer)
$dppath = $adddp.put()
install-model $folder $file.name
$spattachments.deletenow($spattachmentname)
if ($qfeserver)
new-item c:\temp\ -type directory
downloadsp2013files
$entry.computername = $computername;
[string]$ldapfilter = '(name=*)',
$currentweb.dispose()
<th width='10%'><b>enabled</b></font></th>
$up.commit()
if ($hostratings[0].rating -eq $hostratings[$r].rating)
[int]$signintimeout=10
$detailoabvd+= "<th width='10%'><b>server name : <font color='
username = (get-wmiobject -class win32_computersystem -computername ([string]$workstation.name)).username
write-host " next check: $now" -foregroundcolor green
$webclient = new-object net.webclient
if( $throughputsetting )
add-content $filename "table {"
</tr>
$axbuilderror += "some parameters passed are wrong. see axinputvalidationerrors.txt in logs"+[char]10
[validateset("normal","low","high")]
write-verbose "define timeouts, 1000ms for receive and 2000ms for send"
sub hidesection(objheader) : setsectionstate objheader, "hide" : end sub
write-verbose "saving $($psfile.displayname)"
$excel = $null
$errormsg = $errormsg -replace "placeholder01",$filepath
[string]$usage = "usage: set-rulebasedgroups.ps1 -logfile <file name>"
uninstall-spsolution -identity $targetsolution -language $solutionlanguage -local:$solutionlocal -whatif:$whatif
if (-not $dhcp -and $dnsserverfind -and $dnsserverreplace)
param($sql_server);
$imaddresskeys = @()
write-host "rdp is enabled in remote registry on machine: $computername"
$servername = get-content env:computername
$newedittypeform.font = new-object -typename system.drawing.font("tahoma", 10, [system.drawing.fontstyle]::regular, [system.drawing.graphicsunit]::point)
$sitename = "your sccm site"
$nevtypelabel.name = "nevtypelabel"
encoding enc = getencodingforbytes( input, out bomsize );
$templatescript = @(
$compare = compare-object -property id -referenceobject $referenceobject -differenceobject $differenceobject
$body += "<h2 style='font-size:15px;text-decoration:underline'>properties</h2><p style='line-spacing:120%'>$udt_props</p>";
$emailfrom = "suport@mail.net"
$cleanupscope.declinesupersededupdates = $true
write-debug "set instalation status rebootrequired"
[string]$office365adminusername,
"maximum_ex")][string] $credtype = "generic"
[system.timespan] $interval = $obj1.leaseexpirytime - $obj2.leaseexpirytime
$stbar1.text = "group policy updated on " + $computername.toupper()
if ($nameresolutioncollection.count -ne 1) {
if ($dateday -ne $null) {
"table view items"
if($objservice.serviceid -eq $serviceid)
function get-services
$form1.add_load($onloadform_statecorrection)
del $ziplocation"\netstat*.txt"
$itemclassfilter = new-object microsoft.exchange.webservices.data.searchfilter+isequalto(`
[parameter()]
"$shtmlheadingstyle last full database backup</th></tr>"
if ($tocres -like "success")
[switch]$showsearchcriteria,
if ($event2013.count -eq $null)
"implementation type: "+$item.implementationtype+"<br>"+
{[system.math]::round($_/1gb,0) -lt 1024} { $size = [string]([system.math]::round($_/1gb,0))+" gb"; break }
[string]$wmimode,
write-output "[$(get-date -format g)]: server $($server) gets its time from $($timeserver)" >> $logfile
if($serviceid)
$updates_filtered += $_
write-progress -activity "sorting databases into over, under and perfectly allocated" -completed -status "completed"
$recurrencerangestart,$month,$dayofmonth)
11012 {"bad route"}
$detaildagnetworks+= "<td width='10%'><font color='
if($computername -eq $null)
foreach($dg in $alldg)
$basekey.deletevalue($key)
switch ($mappingarray[1])
<td>
if ($? -eq $false)
$selector.searchroot = $root
$description = "no ms_description property on object.";
$allsites += $rootweb.url
$stringbuilder.appendline('| export-csv -path $path -notypeinformation -encoding utf8') | out-null
$a = $a + "th{border-width: 1px;padding: 0px;border-style: solid;border-color: black;background-color:
-passthru
write-host "[warn]`tprocessing is disabled for [$($item.collectiontype)] collection [$($item.collectionname)]" -foregroundcolor yellow
[parameter(position=0,mandatory=$true,valuefrompipeline=$false,helpmessage="recipient")]$recipient,
$to = $from.adddays(7)
<a name=""top""><h4 align=""center"">generated $((get-date).tostring())</h4></a>"
$objcollectiondownload.add($update) | out-null
$myformattreeview.selectednode.text = "typename: $($nettypetextbox.text)"
if($line.count -eq 2)
$trialrun = $false
$newfilelist=$newfolderlist = $null
$vmname = $machine.name
"lastname" = "surname";
write-host 'checking/configuring local registry to support loopback testing...'
write-verbose "make the browser visible"
$obj | add-member -membertype noteproperty -name "exchange sip" -value ($notfound)
dhcpcapi_request_cancel = 0x08,
$nlialigncombobox.text = $tempnode.tag
write-verbose "group $name created on computer $computername"
10 { "unknownstate" }
$doclib = $web.lists[$listdisplayname]
$tables = $sql_server.databases[$db_name].tables | where-object {$_.issystemobject -eq $false};
updateprogress -status 'stage 3 hyperv settings' -percentcomplete 0
$cmdadd = "dnscmd $dnsserver /recordadd $dnszone $recordname $recordtype $recordaddress"
write-verbose "==$($thisverb)-!$($thiscommand)=="
$systemprinting = get-childitem "$($env:systemroot)\assembly\gac_32\system.printing"
<stopifgoingonbatteries>true</stopifgoingonbatteries>
$passwordpolicyname = $passwordpolicyobject.cn
$uac=$objuser.properties.item("useraccountcontrol")
'path'
$img4.autoshapetype = $msoshapedoublewave
write-warning "first object is null"
$oldvalue = $user.get($attrname)
$cells.item(1,1)="level0"
$supporturl = "n/a"
write-warning "something went wrong connecting to the wsus interface on $wsusserver server"
write-host $result
$moveresults.columns.add("itemcount",[string]) | out-null
<div class='$($classheaderdag)'>
foreach ($value in $values)
$newappointment.legacyfreebusystatus = "busy"
write-progress -activity "mailbox data gathering in progress" -completed -status "completed"
$sites = @(get-website | foreach-object { $_.name })
$getalias = read-host "enter alias of the user to search for a subject"
$dcip = $topology.dcip
write-host "documented triggers";
if (!(test-path $container)) {
write-host ".\set-spsmailoptin.ps1 mailoptinvalue exclusionfile whatif(optional)"
function get-qfelist
$myformatcontextmenustrip = new-object -typename system.windows.forms.contextmenustrip($formcomponents)
$pgfunctionexplorer = $pgse.toolwindows.add('functionexplorer')
$queues += "<tr>$shtmlcellstyle" + [string]$_.identity + `
$contacts = import-csv $csvfile
$newsddlstring = $sddlsplit -join "("
$message = 'this script must be run as an administrator from an elevated prompt.'
$body = get-content $report | out-string
[switch]$expand
if (-not (test-path $imgpath -pathtype leaf)) {
param([switch]$dcb, [switch]$spaces )
if($update.autoselectonwebsites)
[parameter(position = 1,
write-host "creating logs......." -foregroundcolor yellow
$printqueues = $printserver.getprintqueues()
write-output "writing reports to $($reportshare)"
$biosmanu = $bios.manufacturer
<li><a href='partition-functions/index.html'>partition function</a></li>
foreach ($srkn in $srknvrgl)
<style type="text/css">
$classheaderecp = "heading1"
|where-object {$_.id -eq $eventid}
timeout /t 60
$global:totalusersprocessed+=1
"[user]-no changes were done on = " + ($users[$k] -replace $source,$destination).tostring()
$newedittypetooltip.settooltip($netcancelbutton, "help for control $($netcancelbutton.name)")
[outputtype('pswindowsupdate.wulist')]
@{name="isoffline";expression={($_.isoffline)}},
"distributiongroup" {
$credential = new-object system.management.automation.pscredential($username,$password)
$projdataset = $projsvcproxy.readprojectlist()
add-type -assemblyname system.directoryservices.accountmanagement
[array]$newfilelist += @($filelist | where-object {$_.fullname -match [regex]::escape($includepath[$j])})
"(?<key>^[^\
[string]$folder = $pwd,
$counter++
[parameter(position=2, mandatory=$true)]
if ($c5)
$initialwebscope | stop-spassignment
$computername = $env:computername.tolower()
$savesavefiledialog.initialdirectory = $($env:userprofile)
$newpkg.name = $item.packagename
cred.persist `= ncred.persist`;
write-infolog ("****************collecting build*********************************")
$result | add-member -membertype noteproperty -name "distributiongroupaddress" -value $identity
$tasks = $schedule.getfolder("\").gettasks(0)
$myformatlabel = new-object -typename system.windows.forms.label
$psboundparameters.getenumerator() | ? { 'dcb','spaces' -contains $_.key } | % { $params[$_.key]= $_.value}
$joboutput |export-clixml -path "$($filepath)\$($joboutput.jobid).xml"
$pscredman = $null
$passwordhistory = $currentpasswordpolicyobject."msds-passwordhistorylength"
if (test-path $sharepoint2013path)
$root = $outputxml.get_documentelement()
function convert-fsptousername
credfree`(handle`)`;
$btn3.add_click($btn3_onclick)
1 {$cells.item($row,$col)=$ilo.activelicense
'((^\s+)|(^))(((f|f)unction ))[0-9a-za-z-_]+')
"email"
$strmailboxprohibitsendquota = "{0:n2}" -f ($itemsizestring.substring(($itemsizestring.indexof("(") + 1),($itemsizestring.indexof(" bytes") - ($itemsizestring.indexof("(") + 1))).replace(",","")/1024/1024)
$domain = $query[3].substring(14)
rtn = creddelete("target", cred_type.generic);
write-host "the connection to office 365 has been established already."
$developer {$installededition = $descriptiondeveloper}
"desklesswoffpack" = "office 365 (plan k2)"
address = "192.168.2.115"
$newdtrow.creationdate = $mailbox.whencreated
throw new exception("cannot set volume");
write "hub01" | out-file temp.dat -append
$colprivgroups += $coldasids
@{name="files"; expression={"{0:n0}" -f $_.files}},
createobjecttypepages "partition-functions" $partitionfunctions $filepath $db;
"mswmi-creationdate" = $mswmicreationdate
$script:errors = 0
$objnewgroup=new-object system.directoryservices.directoryentry($objnewsearchresult.path)
$accountname = $credentials.account
if(test-path $loggingdirectory)
foreach ($printqueue in $printqueues)
$appointment.recurrence = $recurrence
$newdtrow.database = $tardatabase
"wac*" { $thislicence = "office web apps" }
$cells.item(1,13)="level6"
[switch]$debuger,
elseif (!((get-csuser -identity $user).registrarpool.friendlyname))
function edit-file
account = $_.wamusername
$acl.sddl | out-file -filepath $logfile -append
write-host "caption: " $objitem.caption
if ($?) {
$psi.redirectstandardoutput = $false
setvariationlanguages -languages $sitevariations -url $siteurl
[validatepattern("\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b")]
else {write-host -foregroundcolor darkred "error !"}
$exservice,[microsoft.exchange.webservices.data.wellknownfoldername]::root)
$lowdisk = ($event2013.message.trimstart("the ")).trimend(" disk is at or near capacity. you may need to delete some files.")
$nliformattextbox.name = "nliformattextbox"
$sqlquery = "select [proj_uid] from [dbo].[msp_projects] where proj_checkoutby is not null and proj_type in (0,5,6)"
$coldomaindns += $domaindn
if (ismember $user "engineering" -eq $true)
$system_drawing_point.y = ($form1.height - 90)
$enddate = "$((get-date).toshortdatestring()), $((get-date).tolongtimestring())"
if ($iselevated) {
$service.credentials = new-object microsoft.exchange.webservices.data.webcredentials("administrator","type your password here","careexchange.in")
"[ou]-no changes were done on = " + $outocreate
[int]$foldersfailed = 0
[parameter(mandatory=$true)][validatenotnullorempty()]
$test = get-service dns
$tablehtml
$descriptionbts2009 = "biztalk server 2009"
$detailsc+= "<td width='20%'><font color='
foreach ($findresult in $findresults) {
$gname = $_.samaccountname
if (($uac -bor 0x0002) -eq $uac) {$disabled="true"}
[hashtable]$users = @{}
$contactsfolder = [microsoft.exchange.webservices.data.contactsfolder]::bind($service, [microsoft.exchange.webservices.data.wellknownfoldername]::contacts);
if ($address.prefixstring -eq "smtp"){
$cells.item(1,4)="title1"
if ($pgfunctionexplorer = $pgse.toolwindows['functionexplorer']) {
write-host 'checking for local certificate...'
-ipaddress $hvnode.node2.address `
createconfigchildnode $modificationowner $type $path $name $value
foreach ($service in $getservice)
function convert-sidhistoryntfs {
iex $eventvwr
<workingdirectory>c:\office365-scripts</workingdirectory>
$mailboxsize = $mailboxsize * 1024
$redcolor = "
write-error -message "could not enable the local user $($identity): $($_.exception.message)" -exception $_.exception
write-output $completed
$t = get-date -uformat %d%m%y-%h%m%s
if( $dclist -and $dc )
[int]$realertthreshold=26
$stbar1.text = "applications on " + $computername.toupper() + " (refreshing...)"
function read-qshostyesno {
write-qswarning 'local user already exists, skipping creation.'
import-module jh-weather
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "wide view: $($nevnametextbox.text)" -tag $($nevnametextbox.text)
$newlistitemlabel.height = $tempvalue
if ($tempnode.tag -eq $myformattreeview.selectednode.tag)
$style = $style + "th{border-width: 1px; padding: 2px; border-style: solid; border-color: black; background-color:
[string]$c1,
write-host "[error]`tdatabase contains stale records and need to be cleared, try again later" -foregroundcolor red
$adobecipher = "0000000001", "5038647192", "1456053789", "2604371895",
@{expression = {$_.received};label = "received";width = 9},
$hypervclustername = 'non-converged'
$eventtbldata+="<tr><td>$($event.operation)"
add-windowsfeature rsat-adds -includeallsubfeature
public static extern intptr getcurrentprocess();
function test-qswin32() {
$targetcontacts | get-member -membertype noteproperty | %{$columnheaders.add($_.name,"")}
objcontainer.style.display = "block"
if ($cols[$id - 1] -eq "samaccountname")
continue;
$sender.selectednode = $eventarg.node
$mswmiparm2 = $expression.count.tostring() + ";"
copy-item c:\config\ncsi.txt c:\inetpub\wwwroot\ncsi.txt
$userprofile.commit()
if ($quarterrepeat -ne -1) {
$adsiuser.putex(1,"thumbnailphoto",$null)
$mailboxdata.columns.add("blackberrycharge",[string]) | out-null
$bytearray = $subnetmask.split(".")
if (-not $silent) {
public int fdwline;
$checkdate=$null
3 { launch-qsoffice365deploymentreadinesstool; write-qscompletionmessage }
$body = "$body the script has reached the end of the move list."
if (-not ($columnheaders.containskey("name"))) {
write-host 'the required microsoft online services module for windows powershell is not installed. it will be installed now.'
$biossn = $bios.serialnumber
exporttoexcel $mailboxdata $excelfile
si.[index_id],
if(test-path $lfile){(get-date -uformat "%y-%m-%d-%h:%m") + "," + $user + "," + $computername + "," + "startup items" | out-file -filepath $lfile -append}
"send a message immediately w/o waiting for a responce."
" domainfqdn : $domainfqdn "
$message = "the path specified is invalid. $($filename)"
write-host 'creating private key...'
do {$x = [system.runtime.interopservices.marshal]::releasecomobject($columns)} while ($x -gt -1)
add-content $report "border: thin solid
$displaytofilter = new-object microsoft.exchange.webservices.data.searchfilter+containssubstring(`
catch [exception] {
if (($totsize -gt $bytetrans))
$sql = "select [doc].[filename], [doc].[document]
if ($contactschemas.containskey($contactreadonlyproperty.name)) {
for ($i=0; $i -lt $count; ++$i)
if ($computer -eq '.') { $computer = $env:computername }
$img2.rotation = 45
$mailboxdata.columns.add("blackberrypin",[string]) | out-null
$fn = $applicationname
writehtmlpage $db $db $body $db_page;
echo "written to $outputfile"
$filelocked = $false;
$err = $line.contains('0 error(s)')
<th width='25%'><b>name</b></font></th>
write-output "value successfully deleted on machine $srv";
$output=$header+$bypasstbl+"<br>"+$mailboxtbl+"<br><center>nothing logged yet.<br></center>"+$footer
$detailrc+= "</tr>"
name = $key;
export-modulemember -function "connect-oscexowebservice","get-oscexocalendarfolder",`
$detailsrvversion+= "<tr><th width='10%'><b>================================</b></font><tr>"
$newlistitemlabel.font = new-object -typename system.drawing.font($newlistitemlabel.font.fontfamily, ($newlistitemlabel.font.size + 1), [system.drawing.fontstyle]::bold, $newlistitemlabel.font.unit)
write-output "the virtual machine creation process for $vm has been successfully initiated"
if ($mailbox.prohibitsendquota -match "unlimited") {
"$miles miles equals $( ($miles * 1.61) ) kilometers"
if ((test-path (join-path $clientlogdir "axcompileall.html")) -eq $true)
} elseif ($sendquota -eq "4000") {
get-wmiclasses [[-class] [string]] [[-ns] [string]] [-help]
$classheadermbxrpccas = "heading1"
write-eventlog -logname 'windows powershell' -source $scriptname -eventid "104" -entrytype "information" -message $sharedhostcmd -erroraction silentlycontinue
$header="
if ($useros.caption -match "2008"){$mcafeepath = "notepad.exe \\$computername\c$\programdata\mcafee\desktopprotection"}
[alias("cl")]
write-debug "create microsoft.update.session object"
$totaldbsize = $totaldbsize + $dbstat.totalitemsize.value.tomb()
$outputfile = "c:\loginevents.xml"
<td width='10%' align='center'>total capacity(gb)</td>
write-host "`n listing files..."
$txt1.name = "txt1"
if ($errorflag -eq $true)
$output | add-member noteproperty "dnsserversearchorder" (get-stringfromarray $netconfig.dnsserversearchorder)
$deluserrow.displayname = $_.displayname
$policytemplate = invoke-expression -command $command
add-member -inputobject $thisjob -membertype noteproperty -name "computername" -value $thisworkstation
remove-aduser -id $name.sid -confirm:$false
$clu = get-clusterresource -cluster $cluster | ft -autosize cluster,ownergroup,ownernode,resourcetype,state
$m = $reporttime.minutes
$connection
public static extern int mixermessage(int hmx, int umsg, int dwparam1, int dwparam2);
if ($transactionlogs -ne $null) {$transactionlogs | %{$messagebody += "oldest log file: " + $_.name + " last written to on " + ($_.lastwritetime).tostring().substring(0,10) + " at " + ($_.lastwritetime).tostring().substring(11,8) + "<br>"}}}
$assigneduser
nativemethods.dhcpcapi_params recv = new nativemethods.dhcpcapi_params();
-configurationipaddress $hvnode.node3.address `
name = $entry.name
if ($msbuildpath -eq $null -or (test-path $msbuildpath) -ne $true)
$groupdn,
7f9bg+3/qypt/0gd7f9bg+3/robt/7++wv+dadhlaaaaaaaaaaaaaaaaaaaaaivqm8vkxbv/tyuj/rsccf60ggn/tiij/rsccf60ggn/tiij/rsccf+0ggn+tiij/rsccf60ggn/tiij/rsccf60ggn/tyuj/srf
get-inputvariables(split-path -parent $myinvocation.mycommand.path)
$warningmsg = $warningmsg -replace "placeholder01",$mimetypeitem
$targetfeature = get-spfeature -identity $featureidentity -erroraction silentlycontinue
"issuing: disable-netadapter private homenet"
$password = read-host ' password' -assecurestring
$total = $total + $count
set-variable cellwidth 48 -option constant -erroraction silentlycontinue
[switch] $nonsystemaccounts,
$($detaildag3)
-lastname $lastname `
$hashoutput.dayofmonth = $entry.day
new-fastsearchmetadatamanagedproperty -name $name -type $type -ea 0
<th width='30%'><b>description</b></font></th>
$exchangecontact.nickname = $contactitem.firstname + " " + $contactitem.lastname;
write-errorlog "parameter validation error. see axinputvalidationerrors.txt for more information."
$cat4 = get-mailbox -resultsize unlimited | where{$_.prohibitsendquota -eq 400000kb}
write-host "error" $_.exception
$userobj | add-member noteproperty -name "recipienttype" -value $members[$i].recipienttype
$date = $date.replace(' ', '')
add-content $report "<html>"
$total
[validaterange(0,7)]
$directories = get-childitem $isodrive -recurse -directory
$details_specific = @{}
sendmail
$gposettingname = "deployed printer connections policy",
$autovds = get-clientaccessserver | get-autodiscovervirtualdirectory
$searcher.searchroot = $base
write-host "`nmissing parameter: the -outfile parameter is required. please re-run this script with a valid path and filename for the -outfile parameter.`n"
if ($export)
"it worked"
$versionmatches += (($xmldata.selectnodes("/dsversion/exchange[@$category='$version']")) | select-object )[$i].displayname
$exception = new-object system.management.automation.runtimeexception($exceptionstring)
[bool]$debug = $false
try { $exists = get-aduser -ldapfilter "(samaccountname=$sam)" }
$_targethash= $($(./md5sum $targetfile) -replace "\*.*","").replace('\','')
$sourcefile = $filesstored[$_rnd]
$bstate -eq "chargingandhigh" -or
<span class=sectiontitle tabindex=0>active directory information</span>
$printlogs = @()
write-warning "schedule.service com object not found, this script requires this object"
$itempropertyset = new-object microsoft.exchange.webservices.data.propertyset(`
$emailbody += "<tr><td class=`"first`"><b>pins removed from ad</b></td><td class=`"first`"><b>:</b> " + `
write-infolog ("begin: register-sqlsnapin: {0}" -f (get-date))
add-member -name "inprimarykey" -membertype noteproperty -value $column.inprimarykey -inputobject $obj;
$progressrecord.statusdescription = $messages.cnaprogressrecordstatusdescription
write-output "testing the vhd file to ensure that it is not locked for use..."
| select identity,distinguishedname
new-netvirtualizationcustomerroute -routingdomainid "{11111111-2222-3333-4444-000000000000}" -virtualsubnetid "5000" -destinationprefix "0.0.0.0/0" -nexthop "10.0.1.2" -metric 255 -cimsession $hosts[$i]
$upnsuffixes = get-adobject -identity $upndn -properties upnsuffixes | foreach-object { $_.upnsuffixes }
function getdbusers
$return = "$computername not available"
"home phone" = "phone:homephone";
pingtargetaddresses | format-table @{expression = {$_.localipaddress};label = "local ip address";width = 41},
using system.io.compression;
$selectionchoice = write-host -foregroundcolor cyan "`n choose from the following cmds: `n" `
$output | add-member -membertype noteproperty -name registrarpool -value $csuser.registrarpool
write-host "[warning] this is most likely caused, because there is already a repair trigger running."
remove-pssession -session $thissession
write-host "description: " $objitem.description
$itemview.propertyset = $propertyset
$subkeywow6432node = $null;
$filter = read-host "enter ldap syntax filter"
[microsoft.exchange.webservices.data.itemid]$destinationfolderdisplayname
if( $unbind) {
-displayname 'adfs test account' `
$nettypelabel.height = $tempvalue
get-vmdisk -vm $virtualmachine.vmelementname | `
add-member -name "dependent_index_name" -membertype noteproperty -value $r[2].tostring() -inputobject $obj;
$stbar1.text = "ready"
$projectserverurl
function invoke-cmd {
$nevtypetextbox.name = "nevtypetextbox"
$ldapfilter = "(&(objectclass=mswmi-som)(name={$_}))"
$setspnds = setspn -x
$color = "green"
"</html>"
if ($firstname -eq '') {
$joboutput = new-object -typename psobject -property @{
[string]$taskschedule,
address = "192.168.2.114"
add-content $report "<tr bgcolor=
$no = new-object system.management.automation.host.choicedescription "&no", $nodescription
$description = getdescriptionextendedproperty($item);
$mailboxes=get-mailbox $mailbox
[string] $e1 = $objitems.givenname
$imagelist.images.add("refresh", [system.drawing.image]::fromfile("$psscriptroot\resources\refresh.ico"))
function createceedictionaryfromsplist ($url, $listname, $keyfieldname, $valuefieldname, $addwordvariants){
<br><span class=sectiontitle tabindex=0><font face="arial" size="2">exchange domaine name : <font color='
$port = $ports[($i-1)]
return enc.getbytes( outputchars, 0, outputidx );
$savesavefiledialog = new-object -typename system.windows.forms.savefiledialog
if($child.state -match "notstarted|running|stopping|suspending") { continue; }
$successcount += 1;
function renamefiles
function print_parameter($dictionary) {
$tokpriv1luid.count = 1
$invalidgroups=($alldistgroups | ?{$_.isvalid -like "false"} | measure-object).count
write-terminatingerrorlog "compilation errors."
"ip address: " + $ip.ipaddress[0]
$enrollment = new-object -comobject 'x509enrollment.cx509enrollment.1'
$verbose = $true
$htmlreport = "$($mailboxname.samaccountname)-$t.html"
"processing the following document libraries:"
$userid = $user.displayname
$wsusupdates.add_click({$wsusfile = "updates"; wsuslogs})
$neweditviewlabel.location = new-object -typename system.drawing.point($formspacer, $formspacer)
write-host "installing symbolic links"
$dagmbxn = $dagmbx.name
$obiurl = $oabvd.internalurl
function get-inputvariables ($homepath)
foreach ($mbxdbsize in $mbxdbsizes){
$camlquery = "<where><beginswith><fieldref name='nameortitle' /><value type='computed'>$accountname</value></beginswith></where>"
write-host "there are offline vms, migrating to another host"
$primdns=$nic.dnsserversearchorder[0]
if ($sppicitem.count -eq 1) {
if ( (get-pssnapin -name "microsoft.sharepoint.powershell" -erroraction silentlycontinue) -eq $null ) {
if($nottitle -and $updateaccess -eq $true)
$result | add-member -membertype noteproperty -name $property.name -value $groupmember.$propertyname
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.table")
$itemnewtoolstripmenuitem.text = "new item"
$outputfile = ($script_parent + "\report\$($vc).html")
$value = $sheet.cells.item($j, $k).text
$output=$header+$gen+$table+$footer
if (-not [system.string]::isnullorempty($cc)) {
add-content $filename "</html>"
$cells.item(1,14)="title6"
new-netipaddress -interfacealias "$switch" -ipaddress $ipv6address -addressfamily ipv6 -prefixlength 48
[system.management.automation.credential()] $credential = [system.management.automation.pscredential]::empty
[string] $prompt,
$subregkey = $subregkey.opensubkey($subkey)
[parameter(mandatory=$false)] [alias("r")]
function create-currentlogfolder
buffersize *= 2;
$curfileidx++
if ($testping) {
$selectproperty.property += 'extension'
$skip=$false
convertto-html -body "<p>the report is generated at $date by user '$((get-item env:\username).value)' on computer '$((get-item env:\computername).value)'</p>" >> "$filename"
$linenum = 0
<th width='20%'><b>localsite</b></font></th>
$writer.flush();
<meta http-equiv='content-type' content='text/html; charset=iso-8859-1'>
case = 'disknumber'
$nlisavebutton.autosize = $true
$tempstatsobj = calculatestats([array[]]$tempobjectarray)
function get-qotd {
@{expression={$_.nexthop};label="nexthop";width=25},
$newdtrow.inactivembs = $totalinactivemb
$loweredlist += $address.smtpaddress.tolower()
$path = split-path $saveas
$serversessions += $usersession
$($detailrepl)
[string]$computername = $env:computername,
write-host "`n writing power shell script to c:\office365-scripts\"
public string modifypath;
$tzinfo = $null
"as-web-support",
<priority>7</priority>
$replace = $_.cn.replace(".","")
$ewsmanagedapidllfilepath = "c:\program files\microsoft\exchange\web services\1.2\microsoft.exchange.webservices.dll"
if ($logfile -ne $null)
else{$stbar1.text = "could not contact " + $computername.toupper()}
write-verbose 'connect to the session, and collect the results of the scriptblock'
add-member -name "permissiontype" -membertype noteproperty -value $obj_perm.permissiontype -inputobject $obj;
$a = "up for: {0} days, {1} hours, {2:n0} minutes" -f $d,$h,$m
[parameter(mandatory=$false)][switch] $shocred,
write-verbose $thisworkstation |format-table -autosize
$detailqueue+= "<td width='20%'><font color='
$aduser.thumbnailphoto | set-content $imagefile -encoding byte
$app.versionminor = $key.getvalue("versionminor")
write-host "installing. please wait..."
if ($newsddl -ne $null) {
"rc" { $menutext = "&retry = retry the action that failed $delimiter "+`
$propertyset = new-object microsoft.exchange.webservices.data.propertyset(`
"currval","oldval","oupdtime","cupdtime","secdesc" | foreach-object {
$verbosepreference = $debugpreference
rv exchangeservers
$neweditviewtooltip.settooltip($nevtypetextbox, "help for control $($nevtypetextbox.name)")
write-error "qfe metadata file not written to disk."
name = $hypervclustername
$chguserrow.emailaddress = $_.primarysmtpaddress
if ((test-path -path "p:\printlogs\$($filename)") -eq $true)
$script:report = @()
user= "";
$detailsrvversion+= "<th width='10%'><b> ---- edge number(s) : </b><font color='
$targetfile = $targetweb.getfile($targetpublishingweb.pageslistname + "/" + $propvalue)
$returnobject = new-object -typename psobject -property @{
sethandle(preexistinghandle);
if ($groupcount -eq 0)
function click-viewedittoolstripmenuitem()
if ($sender.text.length -eq 0)
if ($start.command -ne $null){
new-netvirtualizationlookuprecord -virtualsubnetid "5001" -customeraddress "10.0.0.7" -provideraddress "192.168.4.22" -macaddress "060600000007" -rule "translationmethodencap" -cimsession $hosts[$i]
$ovdext = $owavd.externalurl
$totalindexedcount = $doc.selectnodes("/wfpstate/layers/item/filters/item[not(flags/item = ""fwpm_filter_flag_boottime"") and flags/item = ""fwpm_filter_flag_indexed""]").count
$netqospolicy
write-qswarning 'changes made to system requirements require a reboot.'
add-content $filename "</body>"
converted to module for importing
$vmicversion = invoke-command -scriptblock {get-itemproperty "hklm:\software\microsoft\virtual machine\auto" | select -expandproperty integrationservicesversion } -computername $comp -credential $cred
$sitelanguage = $sitecollection.language
$c.cells.item($introw, 7).interior.colorindex = 3
$script:axbuilddir = $homepath
if (-not $destacc) { $destacc = read-host "please input destination user name, the user which will be added to the groups of the source user" }
if (-not ([security.principal.windowsprincipal] [security.principal.windowsidentity]::getcurrent()).isinrole([security.principal.windowsbuiltinrole] "administrator"))
return $hash
write-host "done";
$nicteam,
$tempnode1 = new-treenode -treenode $($myformattreeview.selectednode) -text "table view: $($nevnametextbox.text)" -tag $($nevnametextbox.text)
$currentcluster = get-cluster
if ($ipv6gateway){
[parameter(position=3,mandatory=$false,valuefrompipeline=$false,helpmessage="script state xml file")][string]$savestatefile
$lblpc.visible = $false
$computerdn = $_.distinguishedname
$newdtrow.mailbox = $_.mailboxname
function appendlogmessage($text) {
$foldercount = $folders.count
if ( [system.io.file]::exists($file) )
7. convert-sidhistoryntfs \\server\share\path
if ($domains.count -eq 0) {
<th width='15%'><b>server name</b></font></th>
5. open the sidmappingupdated.csv file.
elseif([string]$item.gettype() -eq "microsoft.sqlserver.management.smo.trigger")
write-host -foregroundcolor red ">>> error: $_"
function disable-home()
(($object1.$key.gettype()).name -eq "decimal")))
$allobj1 = $objsearch1.findall()
if( $ret.length -gt 0 ) {
throw $error[0].exception
$pfag = $pfd.administrativegroup
function auditreport
$cred = new-object system.management.automation.pscredential($username,$pass)
<th width='20%'><b>client access server</b></font></th>
if ($syntax -eq "notfound")
$resources = $server.psbase.invoke("resources")
/sqlncli:`"$sharepoint2013path\prerequisiteinstallerfiles\sqlncli.msi`" `
if ($politecheck) {
$sddlsplit[$i] = $sddlsplit[$i].replace($aclentrysid,$sidmaphash.($aclentrysid))
$activedocument.activate()
if($dependencypath -ne $null -and ((test-path (join-path $dependencypath 'appl')) -eq $true))
$objdomain = new-object system.directoryservices.directoryentry($domaincnx)
$shortregion = "am"
$msxservers = get-exchangeserver | where {$_.serverrole -ne "edge" -and $_.admindisplayversion.major -eq "14"} | sort name
regedit -regaction add -regkey "hklm:system\currentcontrolset\services\ramgmtsvc\parameters" -regname enabletracing -regvalue "5" -regtype dword
if ($attr -ne "") { $searcher.propertiestoload.add($attr) > $null }
success = $success;
$spquery = new-object microsoft.sharepoint.spquery
$detailexch+= "<tr>"
$tablename = $username.split("\")
if ($_.eventid -eq "deliver")
$users = "yourdistrolist@company.com"
$stopsvc = $pcservice.stopservice()
if (-not [system.string]::isnullorempty($to)) {
if (test-path c:\windows\system32\setres.exe)
[system.reflection.assembly]::loadwithpartialname("microsoft.sqlserver.smoextended")| out-null;
$buffer += "tfslabel="+ $tfslabel
$hubmrs = $hubtc.maxreceivesize
function install-qssigninassistant {
$c.cells.item($introw, 7) = $e4
write-host "vendor: " $objitem.vendor
$updateaccess = $false
[int]$global:totalsiteswithwebpartfound = 0
"but something went wrong, it's not happy, resetting."
if ($totalnumbermb -gt 0) {
write-host "ip : not assigned"
function test-qswindows8orlater() {
$qfixmenu.dropdownitems.add($qfixrenamepc) > $null
write-host -nonewline 'validating record... '
$versionbts2004sp2 = "3.0.7405.0"
@{expression = {$_.lost};label = "lost";width = 6},
$tmfr = $flow.testmailflowresult
$subject = "automated message: mbx move status $((get-date).toshortdatestring())"
numofcrashes, `
[int]$mask = (($subnet.split(",")[0]).split("=")[1]).split("/")[1]
<td align=""center"">$groupswithoutmanager</td>
$command = [scriptblock]::create("iscsicli.exe refreshtargetportal $iscsi_portal $iscsiport")
$sites = ((get-clientaccessarray).site).name
write-progress -activity "generating powershell file '$($outputpowershellfile)' to balance dbs" -status "processing database $($oa_dbcounters[$i].database)" -percentcomplete (($i / $oa_dbcounters.count) * 100)
public int wmid;
switch ($tempnode.text)
address = "192.168.13.19"
$interface = $netroute | get-netipinterface
$spfielduservalue = [microsoft.sharepoint.spfielduservalue]$spfielduser.getfieldvalue($item[$ownercolumninternalname].tostring());
$script:filesnumber++
[microsoft.exchange.webservices.data.phonenumberkey]::$contactpropertyname`
[array]$newfolderlist += @($folderlist | where-object {(split-path -path $_.fullname) -match $includepath[$j]})
$html += "
[string]$computername
if($sql_server.instancename -eq "")
if (!$auditsummary)
$q = get-qotd
$dashes=$null;
$versiondesc = (($xmldata.selectnodes("/dsversion/exchange[@$category='$version']")) | select-object ).displayname
set-variable -name exservice -value $exservice -scope global -force
$output | add-member -membertype noteproperty -name $verfiedfeaturename -value $effectivepolicy.$verfiedfeaturename
$c.cells.item($introw, 9) = "n/a"
$ou = ""
if ($k -ne $id)
write-progress -activity "installing sharepoint server 2010" -status "completing sharepoint server 2010 installation"
-ipaddress $storagenode.node2.address `
$nameofipv4resource = $firstipv4resource.name
write-host ("---------------------------------`n")
if($mbxbklastfullbackup -gt (get-date).adddays(-2))
$newhost = read-host "enter the ip address for the external dns server to query`nor hit enter for the default of $externalserver"
"security" {$search = "security"}
if($recursive.ispresent) {
$objsearch1.pagesize = 15000
$msgpropertyset = new-object microsoft.exchange.webservices.data.propertyset(`
$stbar1.text = "applications installed on " + $computername.toupper() + " (" + $software.count + ")"
public uint32 attributecount`;
[parameter(position=1, mandatory=$true, valuefrompipeline=$true)]
$hypervclustername = 'converged'
"<title>" + $title + "</title>" + `
write-host ram usage after executing excel_image_demo_no_cleanup.ps1 -foregroundcolor red -backgroundcolor white
foreach($list in $lists)
return $duplicates | out-gridview
"adding tracing for nla/nlmperforming"
$nlialignlabel = new-object -typename system.windows.forms.label
$adocommand.properties.item("cache results") = $false
write-infolog ("model file:")
foreach ($r in $ds.rows)
return;
$procs = getdatabasestoredprocedures $sql_server $db;
address = "192.168.11.19"
ipversion = $entry.ipversion
syntax
$script:axaos = (get-itemproperty (get-item ($path)).pspath).aos2
